
http_netconn_server_rtos_f439.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c3a4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008e10  0801c554  0801c554  0001d554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025364  08025364  000270d4  2**0
                  CONTENTS
  4 .ARM          00000008  08025364  08025364  00026364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802536c  0802536c  000270d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802536c  0802536c  0002636c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025370  08025370  00026370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  08025374  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000270d4  2**0
                  CONTENTS
 10 .bss          00011f8c  200000d4  200000d4  000270d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012060  20012060  000270d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000270d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00038f17  00000000  00000000  00027104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000084cc  00000000  00000000  0006001b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002520  00000000  00000000  000684e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001cfd  00000000  00000000  0006aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013ccf  00000000  00000000  0006c705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003adc2  00000000  00000000  000803d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001029b5  00000000  00000000  000bb196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001bdb4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a2d8  00000000  00000000  001bdb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001c7e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801c53c 	.word	0x0801c53c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	0801c53c 	.word	0x0801c53c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fc92 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f816 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f884 	bl	8000708 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000600:	f003 ff0a 	bl	8004418 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000604:	4a05      	ldr	r2, [pc, #20]	@ (800061c <main+0x2c>)
 8000606:	2100      	movs	r1, #0
 8000608:	4805      	ldr	r0, [pc, #20]	@ (8000620 <main+0x30>)
 800060a:	f003 ff64 	bl	80044d6 <osThreadNew>
 800060e:	4603      	mov	r3, r0
 8000610:	4a04      	ldr	r2, [pc, #16]	@ (8000624 <main+0x34>)
 8000612:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000614:	f003 ff24 	bl	8004460 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <main+0x28>
 800061c:	080242b0 	.word	0x080242b0
 8000620:	0800093d 	.word	0x0800093d
 8000624:	200000f0 	.word	0x200000f0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	@ 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0320 	add.w	r3, r7, #32
 8000632:	2230      	movs	r2, #48	@ 0x30
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f01b f9d6 	bl	801b9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	4b2b      	ldr	r3, [pc, #172]	@ (8000700 <SystemClock_Config+0xd8>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000654:	4a2a      	ldr	r2, [pc, #168]	@ (8000700 <SystemClock_Config+0xd8>)
 8000656:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800065a:	6413      	str	r3, [r2, #64]	@ 0x40
 800065c:	4b28      	ldr	r3, [pc, #160]	@ (8000700 <SystemClock_Config+0xd8>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000664:	60bb      	str	r3, [r7, #8]
 8000666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <SystemClock_Config+0xdc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a24      	ldr	r2, [pc, #144]	@ (8000704 <SystemClock_Config+0xdc>)
 8000672:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <SystemClock_Config+0xdc>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	2301      	movs	r3, #1
 800068a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068c:	2310      	movs	r3, #16
 800068e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000694:	2300      	movs	r3, #0
 8000696:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000698:	2308      	movs	r3, #8
 800069a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800069c:	23b4      	movs	r3, #180	@ 0xb4
 800069e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006a4:	2307      	movs	r3, #7
 80006a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a8:	f107 0320 	add.w	r3, r7, #32
 80006ac:	4618      	mov	r0, r3
 80006ae:	f002 f9e3 	bl	8002a78 <HAL_RCC_OscConfig>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b8:	f000 f962 	bl	8000980 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006bc:	f002 f98c 	bl	80029d8 <HAL_PWREx_EnableOverDrive>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006c6:	f000 f95b 	bl	8000980 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f002 fc3d 	bl	8002f68 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80006f4:	f000 f944 	bl	8000980 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	@ 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b480      	push	{r7}
 800070a:	b087      	sub	sp, #28
 800070c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	4b25      	ldr	r3, [pc, #148]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a24      	ldr	r2, [pc, #144]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a1d      	ldr	r2, [pc, #116]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b1b      	ldr	r3, [pc, #108]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a16      	ldr	r2, [pc, #88]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b10      	ldr	r3, [pc, #64]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a0f      	ldr	r2, [pc, #60]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b0d      	ldr	r3, [pc, #52]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a08      	ldr	r2, [pc, #32]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b06      	ldr	r3, [pc, #24]	@ (80007a8 <MX_GPIO_Init+0xa0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800079a:	bf00      	nop
 800079c:	371c      	adds	r7, #28
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800

080007ac <http_server_init>:

/* USER CODE BEGIN 4 */
void http_server_init()
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af02      	add	r7, sp, #8
  sys_thread_new("http_thread", http_thread, NULL, 2*DEFAULT_THREAD_STACKSIZE, osPriorityAboveNormal);
 80007b2:	2320      	movs	r3, #32
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007ba:	2200      	movs	r2, #0
 80007bc:	4903      	ldr	r1, [pc, #12]	@ (80007cc <http_server_init+0x20>)
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <http_server_init+0x24>)
 80007c0:	f01a fdb4 	bl	801b32c <sys_thread_new>
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	080007d5 	.word	0x080007d5
 80007d0:	0801c560 	.word	0x0801c560

080007d4 <http_thread>:

static void http_thread(void *arg)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  struct netconn *conn, *newconn;
  err_t err, accept_err;

  /* Create a new TCP connection handle */
  conn = netconn_new(NETCONN_TCP);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2010      	movs	r0, #16
 80007e2:	f007 fde9 	bl	80083b8 <netconn_new_with_proto_and_callback>
 80007e6:	6178      	str	r0, [r7, #20]

  if (conn!= NULL)
 80007e8:	697b      	ldr	r3, [r7, #20]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d023      	beq.n	8000836 <http_thread+0x62>
  {
    /* Bind to port 80 (HTTP) with default IP address */
    err = netconn_bind(conn, NULL, 80);
 80007ee:	2250      	movs	r2, #80	@ 0x50
 80007f0:	2100      	movs	r1, #0
 80007f2:	6978      	ldr	r0, [r7, #20]
 80007f4:	f007 fea6 	bl	8008544 <netconn_bind>
 80007f8:	4603      	mov	r3, r0
 80007fa:	74fb      	strb	r3, [r7, #19]

    if (err == ERR_OK)
 80007fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d118      	bne.n	8000836 <http_thread+0x62>
    {
      /* Put the connection into LISTEN state */
      netconn_listen(conn);
 8000804:	21ff      	movs	r1, #255	@ 0xff
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f007 fed8 	bl	80085bc <netconn_listen_with_backlog>

      while(1)
      {
        /* accept any incoming connection */
        accept_err = netconn_accept(conn, &newconn);
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	4619      	mov	r1, r3
 8000812:	6978      	ldr	r0, [r7, #20]
 8000814:	f007 ff02 	bl	800861c <netconn_accept>
 8000818:	4603      	mov	r3, r0
 800081a:	74bb      	strb	r3, [r7, #18]
        if(accept_err == ERR_OK)
 800081c:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f3      	bne.n	800080c <http_thread+0x38>
        {
          /* serve connection */
          http_serve_page(newconn);
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f80a 	bl	8000840 <http_serve_page>

          /* delete connection */
          netconn_delete(newconn);
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	4618      	mov	r0, r3
 8000830:	f007 fe6c 	bl	800850c <netconn_delete>
        accept_err = netconn_accept(conn, &newconn);
 8000834:	e7ea      	b.n	800080c <http_thread+0x38>
        }
      }
    }
  }
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
	...

08000840 <http_serve_page>:

static void http_serve_page(struct netconn *conn)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af02      	add	r7, sp, #8
 8000846:	6078      	str	r0, [r7, #4]
	char* buf;
	u16_t buflen;
	struct fs_file file;

	/* Read the data from the port, blocking if nothing yet there */
	recv_err = netconn_recv(conn, &inbuf);
 8000848:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084c:	4619      	mov	r1, r3
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f008 f90a 	bl	8008a68 <netconn_recv>
 8000854:	4603      	mov	r3, r0
 8000856:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	if (recv_err == ERR_OK)
 800085a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800085e:	2b00      	cmp	r3, #0
 8000860:	d13f      	bne.n	80008e2 <http_serve_page+0xa2>
	{
		if (netconn_err(conn) == ERR_OK)
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	f008 fa9d 	bl	8008da2 <netconn_err>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d139      	bne.n	80008e2 <http_serve_page+0xa2>
		{
			/* Get the data pointer and length of the data inside a netbuf */
			netbuf_data(inbuf, (void**)&buf, &buflen);
 800086e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000870:	f107 0222 	add.w	r2, r7, #34	@ 0x22
 8000874:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000878:	4618      	mov	r0, r3
 800087a:	f009 ff67 	bl	800a74c <netbuf_data>

			/* Check if request to get the index.html */
			if (strncmp((char const *)buf,"GET /index.html",15)==0)
 800087e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000880:	220f      	movs	r2, #15
 8000882:	491d      	ldr	r1, [pc, #116]	@ (80008f8 <http_serve_page+0xb8>)
 8000884:	4618      	mov	r0, r3
 8000886:	f01b f8b7 	bl	801b9f8 <strncmp>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d114      	bne.n	80008ba <http_serve_page+0x7a>
			{
				fs_open(&file, "/index.html");
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4919      	ldr	r1, [pc, #100]	@ (80008fc <http_serve_page+0xbc>)
 8000896:	4618      	mov	r0, r3
 8000898:	f00a f9a4 	bl	800abe4 <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 800089c:	68f9      	ldr	r1, [r7, #12]
 800089e:	693b      	ldr	r3, [r7, #16]
 80008a0:	461a      	mov	r2, r3
 80008a2:	2300      	movs	r3, #0
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2300      	movs	r3, #0
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f008 f95f 	bl	8008b6c <netconn_write_partly>
				fs_close(&file);
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4618      	mov	r0, r3
 80008b4:	f00a f9d4 	bl	800ac60 <fs_close>
 80008b8:	e013      	b.n	80008e2 <http_serve_page+0xa2>
			}
			else
			{
				/* Load Error page */
				fs_open(&file, "/404.html");
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	4910      	ldr	r1, [pc, #64]	@ (8000900 <http_serve_page+0xc0>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f00a f98f 	bl	800abe4 <fs_open>
				netconn_write(conn, (const unsigned char*)(file.data), (size_t)file.len, NETCONN_NOCOPY);
 80008c6:	68f9      	ldr	r1, [r7, #12]
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	461a      	mov	r2, r3
 80008cc:	2300      	movs	r3, #0
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2300      	movs	r3, #0
 80008d2:	6878      	ldr	r0, [r7, #4]
 80008d4:	f008 f94a 	bl	8008b6c <netconn_write_partly>
				fs_close(&file);
 80008d8:	f107 030c 	add.w	r3, r7, #12
 80008dc:	4618      	mov	r0, r3
 80008de:	f00a f9bf 	bl	800ac60 <fs_close>
			}
		}
	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(conn);
 80008e2:	6878      	ldr	r0, [r7, #4]
 80008e4:	f008 fa50 	bl	8008d88 <netconn_close>

	/* Delete the buffer (netconn_recv gives us ownership,
   so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 80008e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80008ea:	4618      	mov	r0, r3
 80008ec:	f009 ff0e 	bl	800a70c <netbuf_delete>
}
 80008f0:	bf00      	nop
 80008f2:	3730      	adds	r7, #48	@ 0x30
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	0801c56c 	.word	0x0801c56c
 80008fc:	0801c57c 	.word	0x0801c57c
 8000900:	0801c588 	.word	0x0801c588

08000904 <_write>:


int _write(int file, char *ptr, int len)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e009      	b.n	800092a <_write+0x26>
  { //To get printf working using serial wire viewer (available on cubeIDE only)
	 ITM_SendChar(*ptr++);
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	1c5a      	adds	r2, r3, #1
 800091a:	60ba      	str	r2, [r7, #8]
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe3e 	bl	80005a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	3301      	adds	r3, #1
 8000928:	617b      	str	r3, [r7, #20]
 800092a:	697a      	ldr	r2, [r7, #20]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	429a      	cmp	r2, r3
 8000930:	dbf1      	blt.n	8000916 <_write+0x12>
  }
  return len;
 8000932:	687b      	ldr	r3, [r7, #4]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000944:	f002 fff0 	bl	8003928 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  http_server_init();
 8000948:	f7ff ff30 	bl	80007ac <http_server_init>
  /* Infinite loop */
  for(;;)
  {
	  osThreadTerminate(defaultTaskHandle);
 800094c:	4b02      	ldr	r3, [pc, #8]	@ (8000958 <StartDefaultTask+0x1c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4618      	mov	r0, r3
 8000952:	f003 fe53 	bl	80045fc <osThreadTerminate>
 8000956:	e7f9      	b.n	800094c <StartDefaultTask+0x10>
 8000958:	200000f0 	.word	0x200000f0

0800095c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d101      	bne.n	8000972 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800096e:	f000 faf7 	bl	8000f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40001000 	.word	0x40001000

08000980 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000984:	b672      	cpsid	i
}
 8000986:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <Error_Handler+0x8>

0800098c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	607b      	str	r3, [r7, #4]
 8000996:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <HAL_MspInit+0x54>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <HAL_MspInit+0x54>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009a2:	4b0f      	ldr	r3, [pc, #60]	@ (80009e0 <HAL_MspInit+0x54>)
 80009a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a0a      	ldr	r2, [pc, #40]	@ (80009e0 <HAL_MspInit+0x54>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <HAL_MspInit+0x54>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	210f      	movs	r1, #15
 80009ce:	f06f 0001 	mvn.w	r0, #1
 80009d2:	f000 fbc1 	bl	8001158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023800 	.word	0x40023800

080009e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	@ 0x38
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	4b33      	ldr	r3, [pc, #204]	@ (8000ac8 <HAL_InitTick+0xe4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a32      	ldr	r2, [pc, #200]	@ (8000ac8 <HAL_InitTick+0xe4>)
 80009fe:	f043 0310 	orr.w	r3, r3, #16
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a04:	4b30      	ldr	r3, [pc, #192]	@ (8000ac8 <HAL_InitTick+0xe4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a10:	f107 0210 	add.w	r2, r7, #16
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f002 fcb0 	bl	8003380 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d103      	bne.n	8000a32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a2a:	f002 fc95 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8000a2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a30:	e004      	b.n	8000a3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a32:	f002 fc91 	bl	8003358 <HAL_RCC_GetPCLK1Freq>
 8000a36:	4603      	mov	r3, r0
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a3e:	4a23      	ldr	r2, [pc, #140]	@ (8000acc <HAL_InitTick+0xe8>)
 8000a40:	fba2 2303 	umull	r2, r3, r2, r3
 8000a44:	0c9b      	lsrs	r3, r3, #18
 8000a46:	3b01      	subs	r3, #1
 8000a48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a4c:	4a21      	ldr	r2, [pc, #132]	@ (8000ad4 <HAL_InitTick+0xf0>)
 8000a4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a58:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a70:	4817      	ldr	r0, [pc, #92]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a72:	f002 fcb7 	bl	80033e4 <HAL_TIM_Base_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d11b      	bne.n	8000abc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a84:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <HAL_InitTick+0xec>)
 8000a86:	f002 fd07 	bl	8003498 <HAL_TIM_Base_Start_IT>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d111      	bne.n	8000abc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a98:	2036      	movs	r0, #54	@ 0x36
 8000a9a:	f000 fb79 	bl	8001190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b0f      	cmp	r3, #15
 8000aa2:	d808      	bhi.n	8000ab6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	6879      	ldr	r1, [r7, #4]
 8000aa8:	2036      	movs	r0, #54	@ 0x36
 8000aaa:	f000 fb55 	bl	8001158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_InitTick+0xf4>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6013      	str	r3, [r2, #0]
 8000ab4:	e002      	b.n	8000abc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000abc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3738      	adds	r7, #56	@ 0x38
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	431bde83 	.word	0x431bde83
 8000ad0:	200000f4 	.word	0x200000f4
 8000ad4:	40001000 	.word	0x40001000
 8000ad8:	20000004 	.word	0x20000004

08000adc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae0:	bf00      	nop
 8000ae2:	e7fd      	b.n	8000ae0 <NMI_Handler+0x4>

08000ae4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <HardFault_Handler+0x4>

08000aec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <MemManage_Handler+0x4>

08000af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
	...

08000b14 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b18:	4802      	ldr	r0, [pc, #8]	@ (8000b24 <TIM6_DAC_IRQHandler+0x10>)
 8000b1a:	f002 fd2d 	bl	8003578 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	200000f4 	.word	0x200000f4

08000b28 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <ETH_IRQHandler+0x10>)
 8000b2e:	f000 fecb 	bl	80018c8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20003480 	.word	0x20003480

08000b3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return 1;
 8000b40:	2301      	movs	r3, #1
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_kill>:

int _kill(int pid, int sig)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b56:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <_kill+0x20>)
 8000b58:	2216      	movs	r2, #22
 8000b5a:	601a      	str	r2, [r3, #0]
  return -1;
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr
 8000b6c:	20011f10 	.word	0x20011f10

08000b70 <_exit>:

void _exit (int status)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	6878      	ldr	r0, [r7, #4]
 8000b7e:	f7ff ffe5 	bl	8000b4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b82:	bf00      	nop
 8000b84:	e7fd      	b.n	8000b82 <_exit+0x12>

08000b86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	60f8      	str	r0, [r7, #12]
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00a      	b.n	8000bae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b98:	f3af 8000 	nop.w
 8000b9c:	4601      	mov	r1, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	60ba      	str	r2, [r7, #8]
 8000ba4:	b2ca      	uxtb	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	3301      	adds	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
 8000bae:	697a      	ldr	r2, [r7, #20]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	dbf0      	blt.n	8000b98 <_read+0x12>
  }

  return len;
 8000bb6:	687b      	ldr	r3, [r7, #4]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr

08000bd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_isatty>:

int _isatty(int file)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c00:	2301      	movs	r3, #1
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	b085      	sub	sp, #20
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	60f8      	str	r0, [r7, #12]
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c1a:	2300      	movs	r3, #0
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3714      	adds	r7, #20
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b087      	sub	sp, #28
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_sbrk+0x5c>)
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <_sbrk+0x60>)
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c3c:	4b13      	ldr	r3, [pc, #76]	@ (8000c8c <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d102      	bne.n	8000c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c44:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <_sbrk+0x64>)
 8000c46:	4a12      	ldr	r2, [pc, #72]	@ (8000c90 <_sbrk+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c4a:	4b10      	ldr	r3, [pc, #64]	@ (8000c8c <_sbrk+0x64>)
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4413      	add	r3, r2
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d205      	bcs.n	8000c64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c58:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <_sbrk+0x6c>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c62:	e009      	b.n	8000c78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c64:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <_sbrk+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	@ (8000c8c <_sbrk+0x64>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a06      	ldr	r2, [pc, #24]	@ (8000c8c <_sbrk+0x64>)
 8000c74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c76:	68fb      	ldr	r3, [r7, #12]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	371c      	adds	r7, #28
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	20030000 	.word	0x20030000
 8000c88:	00000400 	.word	0x00000400
 8000c8c:	2000013c 	.word	0x2000013c
 8000c90:	20012060 	.word	0x20012060
 8000c94:	20011f10 	.word	0x20011f10

08000c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c9c:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <SystemInit+0x20>)
 8000c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <SystemInit+0x20>)
 8000ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc0:	f7ff ffea 	bl	8000c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc4:	480c      	ldr	r0, [pc, #48]	@ (8000cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc6:	490d      	ldr	r1, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ccc:	e002      	b.n	8000cd4 <LoopCopyDataInit>

08000cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd2:	3304      	adds	r3, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd8:	d3f9      	bcc.n	8000cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cda:	4a0a      	ldr	r2, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8000d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce0:	e001      	b.n	8000ce6 <LoopFillZerobss>

08000ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce4:	3204      	adds	r2, #4

08000ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce8:	d3fb      	bcc.n	8000ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cea:	f01a fedd 	bl	801baa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cee:	f7ff fc7f 	bl	80005f0 <main>
  bx  lr    
 8000cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cf4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cfc:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8000d00:	08025374 	.word	0x08025374
  ldr r2, =_sbss
 8000d04:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8000d08:	20012060 	.word	0x20012060

08000d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC_IRQHandler>

08000d0e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d00b      	beq.n	8000d36 <LAN8742_RegisterBusIO+0x28>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	68db      	ldr	r3, [r3, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d007      	beq.n	8000d36 <LAN8742_RegisterBusIO+0x28>
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	689b      	ldr	r3, [r3, #8]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d003      	beq.n	8000d36 <LAN8742_RegisterBusIO+0x28>
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d102      	bne.n	8000d3c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000d36:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3a:	e014      	b.n	8000d66 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685a      	ldr	r2, [r3, #4]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	689a      	ldr	r2, [r3, #8]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	691a      	ldr	r2, [r3, #16]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8000d64:	2300      	movs	r3, #0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b086      	sub	sp, #24
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d139      	bne.n	8000e02 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	689b      	ldr	r3, [r3, #8]
 8000d9a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2220      	movs	r2, #32
 8000da0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	e01c      	b.n	8000de2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	f107 020c 	add.w	r2, r7, #12
 8000db0:	2112      	movs	r1, #18
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	4798      	blx	r3
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da03      	bge.n	8000dc4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8000dbc:	f06f 0304 	mvn.w	r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8000dc2:	e00b      	b.n	8000ddc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f003 031f 	and.w	r3, r3, #31
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d105      	bne.n	8000ddc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	697a      	ldr	r2, [r7, #20]
 8000dd4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
         break;
 8000dda:	e005      	b.n	8000de8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2b1f      	cmp	r3, #31
 8000de6:	d9df      	bls.n	8000da8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b1f      	cmp	r3, #31
 8000dee:	d902      	bls.n	8000df6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8000df0:	f06f 0302 	mvn.w	r3, #2
 8000df4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d102      	bne.n	8000e02 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8000e02:	693b      	ldr	r3, [r7, #16]
 }
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}

08000e0c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	695b      	ldr	r3, [r3, #20]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	6810      	ldr	r0, [r2, #0]
 8000e20:	f107 020c 	add.w	r2, r7, #12
 8000e24:	2101      	movs	r1, #1
 8000e26:	4798      	blx	r3
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	da02      	bge.n	8000e34 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e2e:	f06f 0304 	mvn.w	r3, #4
 8000e32:	e06e      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	6810      	ldr	r0, [r2, #0]
 8000e3c:	f107 020c 	add.w	r2, r7, #12
 8000e40:	2101      	movs	r1, #1
 8000e42:	4798      	blx	r3
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da02      	bge.n	8000e50 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e4a:	f06f 0304 	mvn.w	r3, #4
 8000e4e:	e060      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d101      	bne.n	8000e5e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e059      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	695b      	ldr	r3, [r3, #20]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6810      	ldr	r0, [r2, #0]
 8000e66:	f107 020c 	add.w	r2, r7, #12
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4798      	blx	r3
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	da02      	bge.n	8000e7a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8000e74:	f06f 0304 	mvn.w	r3, #4
 8000e78:	e04b      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d11b      	bne.n	8000ebc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <LAN8742_GetLinkState+0x90>
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e03a      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	e033      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	e02c      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000eb8:	2305      	movs	r3, #5
 8000eba:	e02a      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	695b      	ldr	r3, [r3, #20]
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	6810      	ldr	r0, [r2, #0]
 8000ec4:	f107 020c 	add.w	r2, r7, #12
 8000ec8:	211f      	movs	r1, #31
 8000eca:	4798      	blx	r3
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da02      	bge.n	8000ed8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8000ed2:	f06f 0304 	mvn.w	r3, #4
 8000ed6:	e01c      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8000ee2:	2306      	movs	r3, #6
 8000ee4:	e015      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f003 031c 	and.w	r3, r3, #28
 8000eec:	2b18      	cmp	r3, #24
 8000eee:	d101      	bne.n	8000ef4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	e00e      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 031c 	and.w	r3, r3, #28
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d101      	bne.n	8000f02 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8000efe:	2303      	movs	r3, #3
 8000f00:	e007      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f003 031c 	and.w	r3, r3, #28
 8000f08:	2b14      	cmp	r3, #20
 8000f0a:	d101      	bne.n	8000f10 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8000f0c:	2304      	movs	r3, #4
 8000f0e:	e000      	b.n	8000f12 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8000f10:	2305      	movs	r3, #5
    }
  }
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	@ (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	@ (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	@ (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	@ (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f8fc 	bl	8001142 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f7ff fd4a 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fd1c 	bl	800098c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	@ (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	20000140 	.word	0x20000140

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	@ (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20000140 	.word	0x20000140

08000fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa8:	f7ff ffee 	bl	8000f88 <HAL_GetTick>
 8000fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb8:	d005      	beq.n	8000fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_Delay+0x44>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fc6:	bf00      	nop
 8000fc8:	f7ff ffde 	bl	8000f88 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	68fa      	ldr	r2, [r7, #12]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d8f7      	bhi.n	8000fc8 <HAL_Delay+0x28>
  {
  }
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008

08000fe8 <__NVIC_SetPriorityGrouping>:
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	@ (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	@ (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	@ (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	@ (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	@ (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	@ 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff4c 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800116a:	f7ff ff61 	bl	8001030 <__NVIC_GetPriorityGrouping>
 800116e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	6978      	ldr	r0, [r7, #20]
 8001176:	f7ff ffb1 	bl	80010dc <NVIC_EncodePriority>
 800117a:	4602      	mov	r2, r0
 800117c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff80 	bl	8001088 <__NVIC_SetPriority>
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff54 	bl	800104c <__NVIC_EnableIRQ>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e08a      	b.n	80012d4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d106      	bne.n	80011d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2223      	movs	r2, #35	@ 0x23
 80011cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f002 feb7 	bl	8003f44 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b40      	ldr	r3, [pc, #256]	@ (80012dc <HAL_ETH_Init+0x130>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a3f      	ldr	r2, [pc, #252]	@ (80012dc <HAL_ETH_Init+0x130>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b3d      	ldr	r3, [pc, #244]	@ (80012dc <HAL_ETH_Init+0x130>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_ETH_Init+0x134>)
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	4a3a      	ldr	r2, [pc, #232]	@ (80012e0 <HAL_ETH_Init+0x134>)
 80011f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80011fc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80011fe:	4b38      	ldr	r3, [pc, #224]	@ (80012e0 <HAL_ETH_Init+0x134>)
 8001200:	685a      	ldr	r2, [r3, #4]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4936      	ldr	r1, [pc, #216]	@ (80012e0 <HAL_ETH_Init+0x134>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800120c:	4b34      	ldr	r3, [pc, #208]	@ (80012e0 <HAL_ETH_Init+0x134>)
 800120e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f043 0301 	orr.w	r3, r3, #1
 8001222:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001226:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001228:	f7ff feae 	bl	8000f88 <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800122e:	e011      	b.n	8001254 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001230:	f7ff feaa 	bl	8000f88 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800123e:	d909      	bls.n	8001254 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2204      	movs	r2, #4
 8001244:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	22e0      	movs	r2, #224	@ 0xe0
 800124c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001250:	2301      	movs	r3, #1
 8001252:	e03f      	b.n	80012d4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1e4      	bne.n	8001230 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 ff4c 	bl	8002104 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fff7 	bl	8002260 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f001 f84d 	bl	8002312 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	461a      	mov	r2, r3
 800127e:	2100      	movs	r1, #0
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 ffb5 	bl	80021f0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001294:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80012aa:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80012be:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2210      	movs	r2, #16
 80012ce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800

080012e4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80012f2:	2b10      	cmp	r3, #16
 80012f4:	d161      	bne.n	80013ba <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2223      	movs	r2, #35	@ 0x23
 80012fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2201      	movs	r2, #1
 8001302:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2204      	movs	r2, #4
 8001308:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f000 f9f4 	bl	80016f8 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001318:	2001      	movs	r0, #1
 800131a:	f7ff fe41 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800132e:	699b      	ldr	r3, [r3, #24]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001338:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800133c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001354:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fd71 	bl	8001e3e <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0208 	orr.w	r2, r2, #8
 800136a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001374:	2001      	movs	r0, #1
 8001376:	f7ff fe13 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f042 0204 	orr.w	r2, r2, #4
 8001390:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6812      	ldr	r2, [r2, #0]
 80013a0:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 80013a4:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 80013a8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ac:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2223      	movs	r2, #35	@ 0x23
 80013b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
  }
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013d2:	2b23      	cmp	r3, #35	@ 0x23
 80013d4:	d170      	bne.n	80014b8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2223      	movs	r2, #35	@ 0x23
 80013da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80013f0:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80013f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013f8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6812      	ldr	r2, [r2, #0]
 8001408:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800140c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001410:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	f023 0302 	bic.w	r3, r3, #2
 8001424:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001428:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0204 	bic.w	r2, r2, #4
 8001438:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fdac 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 fcf4 	bl	8001e3e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f022 0208 	bic.w	r2, r2, #8
 8001464:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff fd96 	bl	8000fa0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00e      	b.n	80014a0 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	3212      	adds	r2, #18
 8001488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800148c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	3301      	adds	r3, #1
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d9ed      	bls.n	8001482 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2210      	movs	r2, #16
 80014b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80014b4:	2300      	movs	r3, #0
 80014b6:	e000      	b.n	80014ba <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
  }
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3718      	adds	r7, #24
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e045      	b.n	8001572 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014ec:	2b23      	cmp	r3, #35	@ 0x23
 80014ee:	d13f      	bne.n	8001570 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80014f8:	2201      	movs	r2, #1
 80014fa:	6839      	ldr	r1, [r7, #0]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f000 ff77 	bl	80023f0 <ETH_Prepare_Tx_Descriptors>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d009      	beq.n	800151c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800150e:	f043 0202 	orr.w	r2, r3, #2
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e02a      	b.n	8001572 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	@ 0x28
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001530:	2b03      	cmp	r3, #3
 8001532:	d904      	bls.n	800153e <HAL_ETH_Transmit_IT+0x7c>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001538:	1f1a      	subs	r2, r3, #4
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	f003 0304 	and.w	r3, r3, #4
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00d      	beq.n	800156c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001558:	461a      	mov	r2, r3
 800155a:	2304      	movs	r3, #4
 800155c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001566:	461a      	mov	r2, r3
 8001568:	2300      	movs	r3, #0
 800156a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	e000      	b.n	8001572 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
  }
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b088      	sub	sp, #32
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d109      	bne.n	80015a6 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001598:	f043 0201 	orr.w	r2, r3, #1
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0a4      	b.n	80016f0 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015ac:	2b23      	cmp	r3, #35	@ 0x23
 80015ae:	d001      	beq.n	80015b4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e09d      	b.n	80016f0 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015b8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69fa      	ldr	r2, [r7, #28]
 80015be:	3212      	adds	r2, #18
 80015c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015c4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80015ca:	f1c3 0304 	rsb	r3, r3, #4
 80015ce:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80015d0:	e066      	b.n	80016a0 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	69da      	ldr	r2, [r3, #28]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	699a      	ldr	r2, [r3, #24]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d103      	bne.n	8001602 <HAL_ETH_ReadData+0x88>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d03c      	beq.n	800167c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	0c1b      	lsrs	r3, r3, #16
 8001620:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001624:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800163a:	2301      	movs	r3, #1
 800163c:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	69bb      	ldr	r3, [r7, #24]
 8001644:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001656:	461a      	mov	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	b29b      	uxth	r3, r3
 800165c:	f002 fe4c 	bl	80042f8 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001664:	1c5a      	adds	r2, r3, #1
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	441a      	add	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3301      	adds	r3, #1
 8001680:	61fb      	str	r3, [r7, #28]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d902      	bls.n	800168e <HAL_ETH_ReadData+0x114>
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	3b04      	subs	r3, #4
 800168c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69fa      	ldr	r2, [r7, #28]
 8001692:	3212      	adds	r2, #18
 8001694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001698:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	3301      	adds	r3, #1
 800169e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db06      	blt.n	80016b6 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d202      	bcs.n	80016b6 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80016b0:	7cfb      	ldrb	r3, [r7, #19]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d08d      	beq.n	80015d2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	441a      	add	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f814 	bl	80016f8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69fa      	ldr	r2, [r7, #28]
 80016d4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80016d6:	7cfb      	ldrb	r3, [r7, #19]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d108      	bne.n	80016ee <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	e000      	b.n	80016f0 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3720      	adds	r7, #32
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8001704:	2301      	movs	r3, #1
 8001706:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800170c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69fa      	ldr	r2, [r7, #28]
 8001712:	3212      	adds	r2, #18
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800171e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001720:	e044      	b.n	80017ac <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d112      	bne.n	8001750 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	4618      	mov	r0, r3
 8001730:	f002 fdb2 	bl	8004298 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d102      	bne.n	8001740 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800173a:	2300      	movs	r3, #0
 800173c:	74fb      	strb	r3, [r7, #19]
 800173e:	e007      	b.n	8001750 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	461a      	mov	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	461a      	mov	r2, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001750:	7cfb      	ldrb	r3, [r7, #19]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d02a      	beq.n	80017ac <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175a:	2b00      	cmp	r3, #0
 800175c:	d108      	bne.n	8001770 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	6053      	str	r3, [r2, #4]
 800176e:	e005      	b.n	800177c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001788:	69fb      	ldr	r3, [r7, #28]
 800178a:	3301      	adds	r3, #1
 800178c:	61fb      	str	r3, [r7, #28]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d902      	bls.n	800179a <ETH_UpdateDescriptor+0xa2>
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3b04      	subs	r3, #4
 8001798:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	3212      	adds	r2, #18
 80017a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a4:	617b      	str	r3, [r7, #20]
      desccount--;
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d002      	beq.n	80017b8 <ETH_UpdateDescriptor+0xc0>
 80017b2:	7cfb      	ldrb	r3, [r7, #19]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d1b4      	bne.n	8001722 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d01a      	beq.n	80017f8 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3301      	adds	r3, #1
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80017cc:	f3bf 8f5f 	dmb	sy
}
 80017d0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6919      	ldr	r1, [r3, #16]
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	18ca      	adds	r2, r1, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ea:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80017f8:	bf00      	nop
 80017fa:	3720      	adds	r7, #32
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3318      	adds	r3, #24
 800180c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001818:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800181a:	2301      	movs	r3, #1
 800181c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800181e:	e047      	b.n	80018b0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8001820:	2301      	movs	r3, #1
 8001822:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3b01      	subs	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	3304      	adds	r3, #4
 8001830:	009b      	lsls	r3, r3, #2
 8001832:	4413      	add	r3, r2
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d10a      	bne.n	8001850 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	2b03      	cmp	r3, #3
 8001844:	d902      	bls.n	800184c <HAL_ETH_ReleaseTxPacket+0x4c>
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	3b04      	subs	r3, #4
 800184a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d02c      	beq.n	80018b0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	68d9      	ldr	r1, [r3, #12]
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4613      	mov	r3, r2
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	440b      	add	r3, r1
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	db1f      	blt.n	80018ac <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800186c:	68ba      	ldr	r2, [r7, #8]
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	3304      	adds	r3, #4
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4413      	add	r3, r2
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f002 fd7d 	bl	8004378 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	3304      	adds	r3, #4
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	2200      	movs	r2, #0
 800188a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	3301      	adds	r3, #1
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	2b03      	cmp	r3, #3
 8001896:	d902      	bls.n	800189e <HAL_ETH_ReleaseTxPacket+0x9e>
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	3b04      	subs	r3, #4
 800189c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80018aa:	e001      	b.n	80018b0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HAL_ETH_ReleaseTxPacket+0xbc>
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1b1      	bne.n	8001820 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3718      	adds	r7, #24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018d6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018e0:	695b      	ldr	r3, [r3, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80018f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a20 <HAL_ETH_IRQHandler+0x158>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00e      	beq.n	800191e <HAL_ETH_IRQHandler+0x56>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001912:	461a      	mov	r2, r3
 8001914:	4b43      	ldr	r3, [pc, #268]	@ (8001a24 <HAL_ETH_IRQHandler+0x15c>)
 8001916:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f002 f863 	bl	80039e4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00f      	beq.n	8001948 <HAL_ETH_IRQHandler+0x80>
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800193a:	461a      	mov	r2, r3
 800193c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8001940:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f002 f85e 	bl	8003a04 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d042      	beq.n	80019d8 <HAL_ETH_IRQHandler+0x110>
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d03d      	beq.n	80019d8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001962:	f043 0208 	orr.w	r2, r3, #8
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d01a      	beq.n	80019ac <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800197e:	695a      	ldr	r2, [r3, #20]
 8001980:	4b29      	ldr	r3, [pc, #164]	@ (8001a28 <HAL_ETH_IRQHandler+0x160>)
 8001982:	4013      	ands	r3, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001992:	69db      	ldr	r3, [r3, #28]
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800199c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80019a0:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	22e0      	movs	r2, #224	@ 0xe0
 80019a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80019aa:	e012      	b.n	80019d2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019b4:	695a      	ldr	r2, [r3, #20]
 80019b6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80019ca:	461a      	mov	r2, r3
 80019cc:	f248 6380 	movw	r3, #34432	@ 0x8680
 80019d0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f002 f826 	bl	8003a24 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d00e      	beq.n	8001a00 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f81a 	bl	8001a2c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001a0a:	4b05      	ldr	r3, [pc, #20]	@ (8001a20 <HAL_ETH_IRQHandler+0x158>)
 8001a0c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001a10:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 f814 	bl	8001a40 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3718      	adds	r7, #24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40013c00 	.word	0x40013c00
 8001a24:	00010040 	.word	0x00010040
 8001a28:	007e2000 	.word	0x007e2000

08001a2c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
 8001a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 031c 	and.w	r3, r3, #28
 8001a70:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	02db      	lsls	r3, r3, #11
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	019b      	lsls	r3, r3, #6
 8001a82:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f023 0302 	bic.w	r3, r3, #2
 8001a92:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	697a      	ldr	r2, [r7, #20]
 8001aa2:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001aa4:	f7ff fa70 	bl	8000f88 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001aaa:	e00d      	b.n	8001ac8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001aac:	f7ff fa6c 	bl	8000f88 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001aba:	d301      	bcc.n	8001ac0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e010      	b.n	8001ae2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ec      	bne.n	8001aac <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	b29b      	uxth	r3, r3
 8001ada:	461a      	mov	r2, r3
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f003 031c 	and.w	r3, r3, #28
 8001b06:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	02db      	lsls	r3, r3, #11
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	019b      	lsls	r3, r3, #6
 8001b18:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	f043 0302 	orr.w	r3, r3, #2
 8001b28:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	697a      	ldr	r2, [r7, #20]
 8001b42:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b44:	f7ff fa20 	bl	8000f88 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b4a:	e00d      	b.n	8001b68 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001b4c:	f7ff fa1c 	bl	8000f88 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b5a:	d301      	bcc.n	8001b60 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e009      	b.n	8001b74 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1ec      	bne.n	8001b4c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3718      	adds	r7, #24
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d101      	bne.n	8001b90 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0e6      	b.n	8001d5e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	bf14      	ite	ne
 8001b9e:	2301      	movne	r3, #1
 8001ba0:	2300      	moveq	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf14      	ite	ne
 8001be4:	2301      	movne	r3, #1
 8001be6:	2300      	moveq	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	bf0c      	ite	eq
 8001bfe:	2301      	moveq	r3, #1
 8001c00:	2300      	movne	r3, #0
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bf14      	ite	ne
 8001c18:	2301      	movne	r3, #1
 8001c1a:	2300      	moveq	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	461a      	mov	r2, r3
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	bf0c      	ite	eq
 8001c4e:	2301      	moveq	r3, #1
 8001c50:	2300      	movne	r3, #0
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	bf0c      	ite	eq
 8001c68:	2301      	moveq	r3, #1
 8001c6a:	2300      	movne	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	bf14      	ite	ne
 8001c82:	2301      	movne	r3, #1
 8001c84:	2300      	moveq	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bf14      	ite	ne
 8001caa:	2301      	movne	r3, #1
 8001cac:	2300      	moveq	r3, #0
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bf14      	ite	ne
 8001cc4:	2301      	movne	r3, #1
 8001cc6:	2300      	moveq	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	bf14      	ite	ne
 8001cde:	2301      	movne	r3, #1
 8001ce0:	2300      	moveq	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	bf0c      	ite	eq
 8001cfa:	2301      	moveq	r3, #1
 8001cfc:	2300      	movne	r3, #0
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	461a      	mov	r2, r3
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	0c1b      	lsrs	r3, r3, #16
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699b      	ldr	r3, [r3, #24]
 8001d46:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	bf14      	ite	ne
 8001d4e:	2301      	movne	r3, #1
 8001d50:	2300      	moveq	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d101      	bne.n	8001d7e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00b      	b.n	8001d96 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001d84:	2b10      	cmp	r3, #16
 8001d86:	d105      	bne.n	8001d94 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001d88:	6839      	ldr	r1, [r7, #0]
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f87c 	bl	8001e88 <ETH_SetMACConfig>

    return HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	e000      	b.n	8001d96 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
  }
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
	...

08001da0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f023 031c 	bic.w	r3, r3, #28
 8001db6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001db8:	f001 fac2 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8001dbc:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	4a14      	ldr	r2, [pc, #80]	@ (8001e14 <HAL_ETH_SetMDIOClockRange+0x74>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d804      	bhi.n	8001dd0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	e019      	b.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	4a11      	ldr	r2, [pc, #68]	@ (8001e18 <HAL_ETH_SetMDIOClockRange+0x78>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d204      	bcs.n	8001de2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f043 030c 	orr.w	r3, r3, #12
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e010      	b.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e1c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d90c      	bls.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	4a0c      	ldr	r2, [pc, #48]	@ (8001e20 <HAL_ETH_SetMDIOClockRange+0x80>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d804      	bhi.n	8001dfc <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e003      	b.n	8001e04 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68fa      	ldr	r2, [r7, #12]
 8001e0a:	611a      	str	r2, [r3, #16]
}
 8001e0c:	bf00      	nop
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	02160ebf 	.word	0x02160ebf
 8001e18:	03938700 	.word	0x03938700
 8001e1c:	05f5e0ff 	.word	0x05f5e0ff
 8001e20:	08f0d17f 	.word	0x08f0d17f

08001e24 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr

08001e3e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e60:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6e:	2001      	movs	r0, #1
 8001e70:	f7ff f896 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001e7e:	6193      	str	r3, [r2, #24]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4b53      	ldr	r3, [pc, #332]	@ (8001fec <ETH_SetMACConfig+0x164>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	7b9b      	ldrb	r3, [r3, #14]
 8001ea6:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	7c12      	ldrb	r2, [r2, #16]
 8001eac:	2a00      	cmp	r2, #0
 8001eae:	d102      	bne.n	8001eb6 <ETH_SetMACConfig+0x2e>
 8001eb0:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001eb4:	e000      	b.n	8001eb8 <ETH_SetMACConfig+0x30>
 8001eb6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001eb8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	7c52      	ldrb	r2, [r2, #17]
 8001ebe:	2a00      	cmp	r2, #0
 8001ec0:	d102      	bne.n	8001ec8 <ETH_SetMACConfig+0x40>
 8001ec2:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001ec6:	e000      	b.n	8001eca <ETH_SetMACConfig+0x42>
 8001ec8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001eca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001ed0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	7fdb      	ldrb	r3, [r3, #31]
 8001ed6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001ed8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001ede:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	7f92      	ldrb	r2, [r2, #30]
 8001ee4:	2a00      	cmp	r2, #0
 8001ee6:	d102      	bne.n	8001eee <ETH_SetMACConfig+0x66>
 8001ee8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eec:	e000      	b.n	8001ef0 <ETH_SetMACConfig+0x68>
 8001eee:	2200      	movs	r2, #0
                        macconf->Speed |
 8001ef0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	7f1b      	ldrb	r3, [r3, #28]
 8001ef6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001ef8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001efe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	791b      	ldrb	r3, [r3, #4]
 8001f04:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001f06:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001f0e:	2a00      	cmp	r2, #0
 8001f10:	d102      	bne.n	8001f18 <ETH_SetMACConfig+0x90>
 8001f12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f16:	e000      	b.n	8001f1a <ETH_SetMACConfig+0x92>
 8001f18:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001f1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	7bdb      	ldrb	r3, [r3, #15]
 8001f20:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001f22:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001f28:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001f30:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001f32:	4313      	orrs	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68fa      	ldr	r2, [r7, #12]
 8001f40:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	f7ff f828 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68fa      	ldr	r2, [r7, #12]
 8001f56:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8001f66:	4013      	ands	r3, r2
 8001f68:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f6e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001f76:	2a00      	cmp	r2, #0
 8001f78:	d101      	bne.n	8001f7e <ETH_SetMACConfig+0xf6>
 8001f7a:	2280      	movs	r2, #128	@ 0x80
 8001f7c:	e000      	b.n	8001f80 <ETH_SetMACConfig+0xf8>
 8001f7e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001f80:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001f86:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8001f8e:	2a01      	cmp	r2, #1
 8001f90:	d101      	bne.n	8001f96 <ETH_SetMACConfig+0x10e>
 8001f92:	2208      	movs	r2, #8
 8001f94:	e000      	b.n	8001f98 <ETH_SetMACConfig+0x110>
 8001f96:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001f98:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001fa0:	2a01      	cmp	r2, #1
 8001fa2:	d101      	bne.n	8001fa8 <ETH_SetMACConfig+0x120>
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	e000      	b.n	8001faa <ETH_SetMACConfig+0x122>
 8001fa8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001faa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001fb2:	2a01      	cmp	r2, #1
 8001fb4:	d101      	bne.n	8001fba <ETH_SetMACConfig+0x132>
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	e000      	b.n	8001fbc <ETH_SetMACConfig+0x134>
 8001fba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7fe ffe3 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	619a      	str	r2, [r3, #24]
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	fd20810f 	.word	0xfd20810f

08001ff0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4b3d      	ldr	r3, [pc, #244]	@ (8002100 <ETH_SetDMAConfig+0x110>)
 800200a:	4013      	ands	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	7b1b      	ldrb	r3, [r3, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d102      	bne.n	800201c <ETH_SetDMAConfig+0x2c>
 8002016:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800201a:	e000      	b.n	800201e <ETH_SetDMAConfig+0x2e>
 800201c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	7b5b      	ldrb	r3, [r3, #13]
 8002022:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002024:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	7f52      	ldrb	r2, [r2, #29]
 800202a:	2a00      	cmp	r2, #0
 800202c:	d102      	bne.n	8002034 <ETH_SetDMAConfig+0x44>
 800202e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002032:	e000      	b.n	8002036 <ETH_SetDMAConfig+0x46>
 8002034:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002036:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	7b9b      	ldrb	r3, [r3, #14]
 800203c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800203e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002044:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	7f1b      	ldrb	r3, [r3, #28]
 800204a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800204c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	7f9b      	ldrb	r3, [r3, #30]
 8002052:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002054:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800205a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002062:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002064:	4313      	orrs	r3, r2
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002074:	461a      	mov	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002086:	2001      	movs	r0, #1
 8002088:	f7fe ff8a 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002094:	461a      	mov	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	791b      	ldrb	r3, [r3, #4]
 800209e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80020aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80020b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80020b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80020ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80020c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80020c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6812      	ldr	r2, [r2, #0]
 80020ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80020d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80020d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80020e4:	2001      	movs	r0, #1
 80020e6:	f7fe ff5b 	bl	8000fa0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	f8de3f23 	.word	0xf8de3f23

08002104 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b0a6      	sub	sp, #152	@ 0x98
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800210c:	2301      	movs	r3, #1
 800210e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002112:	2301      	movs	r3, #1
 8002114:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002118:	2300      	movs	r3, #0
 800211a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800211c:	2300      	movs	r3, #0
 800211e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800212e:	2301      	movs	r3, #1
 8002130:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002146:	2300      	movs	r3, #0
 8002148:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800214a:	2300      	movs	r3, #0
 800214c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002150:	2300      	movs	r3, #0
 8002152:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800215a:	2300      	movs	r3, #0
 800215c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800216c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002170:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002172:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002176:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800217e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002182:	4619      	mov	r1, r3
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fe7f 	bl	8001e88 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800218a:	2301      	movs	r3, #1
 800218c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800218e:	2301      	movs	r3, #1
 8002190:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002198:	2301      	movs	r3, #1
 800219a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800219c:	2300      	movs	r3, #0
 800219e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80021b6:	2301      	movs	r3, #1
 80021b8:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80021ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021be:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80021c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021c4:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80021c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021ca:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80021da:	f107 0308 	add.w	r3, r7, #8
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ff05 	bl	8001ff0 <ETH_SetDMAConfig>
}
 80021e6:	bf00      	nop
 80021e8:	3798      	adds	r7, #152	@ 0x98
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
	...

080021f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b087      	sub	sp, #28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3305      	adds	r3, #5
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	3204      	adds	r2, #4
 8002208:	7812      	ldrb	r2, [r2, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	4b11      	ldr	r3, [pc, #68]	@ (8002258 <ETH_MACAddressConfig+0x68>)
 8002212:	4413      	add	r3, r2
 8002214:	461a      	mov	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3303      	adds	r3, #3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	061a      	lsls	r2, r3, #24
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3302      	adds	r3, #2
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	041b      	lsls	r3, r3, #16
 800222a:	431a      	orrs	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	3301      	adds	r3, #1
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	4313      	orrs	r3, r2
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	7812      	ldrb	r2, [r2, #0]
 800223a:	4313      	orrs	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	4b06      	ldr	r3, [pc, #24]	@ (800225c <ETH_MACAddressConfig+0x6c>)
 8002242:	4413      	add	r3, r2
 8002244:	461a      	mov	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	6013      	str	r3, [r2, #0]
}
 800224a:	bf00      	nop
 800224c:	371c      	adds	r7, #28
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40028040 	.word	0x40028040
 800225c:	40028044 	.word	0x40028044

08002260 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e03e      	b.n	80022ec <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68d9      	ldr	r1, [r3, #12]
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	4613      	mov	r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	440b      	add	r3, r1
 800227e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	2200      	movs	r2, #0
 8002284:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2200      	movs	r2, #0
 800228a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2200      	movs	r2, #0
 8002290:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	3206      	adds	r2, #6
 80022a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d80c      	bhi.n	80022d0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	68d9      	ldr	r1, [r3, #12]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	00db      	lsls	r3, r3, #3
 80022c6:	440b      	add	r3, r1
 80022c8:	461a      	mov	r2, r3
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	e004      	b.n	80022da <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	461a      	mov	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	3301      	adds	r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d9bd      	bls.n	800226e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002304:	611a      	str	r2, [r3, #16]
}
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	e048      	b.n	80023b2 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6919      	ldr	r1, [r3, #16]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4613      	mov	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	4413      	add	r3, r2
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	440b      	add	r3, r1
 8002330:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2200      	movs	r2, #0
 800233c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2200      	movs	r2, #0
 800234e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2200      	movs	r2, #0
 8002354:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800235c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	3212      	adds	r2, #18
 800237e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d80c      	bhi.n	80023a2 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6919      	ldr	r1, [r3, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	4613      	mov	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	4413      	add	r3, r2
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	440b      	add	r3, r1
 800239a:	461a      	mov	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	e004      	b.n	80023ac <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	691b      	ldr	r3, [r3, #16]
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	3301      	adds	r3, #1
 80023b0:	60fb      	str	r3, [r7, #12]
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b03      	cmp	r3, #3
 80023b6:	d9b3      	bls.n	8002320 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2200      	movs	r2, #0
 80023ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691a      	ldr	r2, [r3, #16]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023e2:	60da      	str	r2, [r3, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b091      	sub	sp, #68	@ 0x44
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	3318      	adds	r3, #24
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002422:	2300      	movs	r3, #0
 8002424:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800242e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002432:	d007      	beq.n	8002444 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002438:	3304      	adds	r3, #4
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002444:	2302      	movs	r3, #2
 8002446:	e115      	b.n	8002674 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8002448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800244a:	3301      	adds	r3, #1
 800244c:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800244e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002456:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8002460:	f023 031f 	bic.w	r3, r3, #31
 8002464:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002466:	6852      	ldr	r2, [r2, #4]
 8002468:	431a      	orrs	r2, r3
 800246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	431a      	orrs	r2, r3
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d005      	beq.n	80024c2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80024b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80024c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024cc:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80024ce:	e084      	b.n	80025da <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80024d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80024d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024da:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d006      	beq.n	80024f0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e005      	b.n	80024fc <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80024f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024fa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80024fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024fe:	3301      	adds	r3, #1
 8002500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002504:	2b03      	cmp	r3, #3
 8002506:	d902      	bls.n	800250e <ETH_Prepare_Tx_Descriptors+0x11e>
 8002508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250a:	3b04      	subs	r3, #4
 800250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002516:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002520:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002524:	d007      	beq.n	8002536 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800252a:	3304      	adds	r3, #4
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d029      	beq.n	800258a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800253e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002542:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002544:	2300      	movs	r3, #0
 8002546:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002548:	e019      	b.n	800257e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 800254a:	f3bf 8f5f 	dmb	sy
}
 800254e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800255c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800255e:	3301      	adds	r3, #1
 8002560:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002562:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002564:	2b03      	cmp	r3, #3
 8002566:	d902      	bls.n	800256e <ETH_Prepare_Tx_Descriptors+0x17e>
 8002568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800256a:	3b04      	subs	r3, #4
 800256c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002576:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257a:	3301      	adds	r3, #1
 800257c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800257e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002582:	429a      	cmp	r2, r3
 8002584:	d3e1      	bcc.n	800254a <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8002586:	2302      	movs	r3, #2
 8002588:	e074      	b.n	8002674 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800258a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002596:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002598:	3301      	adds	r3, #1
 800259a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800259c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80025a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	461a      	mov	r2, r3
 80025a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025aa:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80025ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80025b4:	f023 031f 	bic.w	r3, r3, #31
 80025b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025ba:	6852      	ldr	r2, [r2, #4]
 80025bc:	431a      	orrs	r2, r3
 80025be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c0:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80025c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c4:	3301      	adds	r3, #1
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80025c8:	f3bf 8f5f 	dmb	sy
}
 80025cc:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d8:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80025da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f47f af76 	bne.w	80024d0 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	e005      	b.n	8002604 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800260c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260e:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	6a3a      	ldr	r2, [r7, #32]
 8002614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002618:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 800261a:	f3bf 8f5f 	dmb	sy
}
 800261e:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262a:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002630:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002634:	3304      	adds	r3, #4
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800263c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800263e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002640:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002642:	f3ef 8310 	mrs	r3, PRIMASK
 8002646:	613b      	str	r3, [r7, #16]
  return(result);
 8002648:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	2301      	movs	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f383 8810 	msr	PRIMASK, r3
}
 8002656:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800265c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800265e:	4413      	add	r3, r2
 8002660:	1c5a      	adds	r2, r3, #1
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	629a      	str	r2, [r3, #40]	@ 0x28
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f383 8810 	msr	PRIMASK, r3
}
 8002670:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3744      	adds	r7, #68	@ 0x44
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002692:	2300      	movs	r3, #0
 8002694:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	e177      	b.n	800298c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800269c:	2201      	movs	r2, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	4013      	ands	r3, r2
 80026ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026b0:	693a      	ldr	r2, [r7, #16]
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	429a      	cmp	r2, r3
 80026b6:	f040 8166 	bne.w	8002986 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d005      	beq.n	80026d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d130      	bne.n	8002734 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	2203      	movs	r2, #3
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002708:	2201      	movs	r2, #1
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 0201 	and.w	r2, r3, #1
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b03      	cmp	r3, #3
 800273e:	d017      	beq.n	8002770 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	4313      	orrs	r3, r2
 8002768:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 0303 	and.w	r3, r3, #3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d123      	bne.n	80027c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	08da      	lsrs	r2, r3, #3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3208      	adds	r2, #8
 8002784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	220f      	movs	r2, #15
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	691a      	ldr	r2, [r3, #16]
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0307 	and.w	r3, r3, #7
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	08da      	lsrs	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3208      	adds	r2, #8
 80027be:	69b9      	ldr	r1, [r7, #24]
 80027c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	2203      	movs	r2, #3
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0203 	and.w	r2, r3, #3
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80c0 	beq.w	8002986 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	4b66      	ldr	r3, [pc, #408]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280e:	4a65      	ldr	r2, [pc, #404]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 8002810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002814:	6453      	str	r3, [r2, #68]	@ 0x44
 8002816:	4b63      	ldr	r3, [pc, #396]	@ (80029a4 <HAL_GPIO_Init+0x324>)
 8002818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800281a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002822:	4a61      	ldr	r2, [pc, #388]	@ (80029a8 <HAL_GPIO_Init+0x328>)
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	089b      	lsrs	r3, r3, #2
 8002828:	3302      	adds	r3, #2
 800282a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0303 	and.w	r3, r3, #3
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	220f      	movs	r2, #15
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a58      	ldr	r2, [pc, #352]	@ (80029ac <HAL_GPIO_Init+0x32c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d037      	beq.n	80028be <HAL_GPIO_Init+0x23e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a57      	ldr	r2, [pc, #348]	@ (80029b0 <HAL_GPIO_Init+0x330>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d031      	beq.n	80028ba <HAL_GPIO_Init+0x23a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_GPIO_Init+0x334>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02b      	beq.n	80028b6 <HAL_GPIO_Init+0x236>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a55      	ldr	r2, [pc, #340]	@ (80029b8 <HAL_GPIO_Init+0x338>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d025      	beq.n	80028b2 <HAL_GPIO_Init+0x232>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a54      	ldr	r2, [pc, #336]	@ (80029bc <HAL_GPIO_Init+0x33c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d01f      	beq.n	80028ae <HAL_GPIO_Init+0x22e>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a53      	ldr	r2, [pc, #332]	@ (80029c0 <HAL_GPIO_Init+0x340>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d019      	beq.n	80028aa <HAL_GPIO_Init+0x22a>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a52      	ldr	r2, [pc, #328]	@ (80029c4 <HAL_GPIO_Init+0x344>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0x226>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a51      	ldr	r2, [pc, #324]	@ (80029c8 <HAL_GPIO_Init+0x348>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00d      	beq.n	80028a2 <HAL_GPIO_Init+0x222>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a50      	ldr	r2, [pc, #320]	@ (80029cc <HAL_GPIO_Init+0x34c>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d007      	beq.n	800289e <HAL_GPIO_Init+0x21e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4a4f      	ldr	r2, [pc, #316]	@ (80029d0 <HAL_GPIO_Init+0x350>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_GPIO_Init+0x21a>
 8002896:	2309      	movs	r3, #9
 8002898:	e012      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289a:	230a      	movs	r3, #10
 800289c:	e010      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 800289e:	2308      	movs	r3, #8
 80028a0:	e00e      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a2:	2307      	movs	r3, #7
 80028a4:	e00c      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028a6:	2306      	movs	r3, #6
 80028a8:	e00a      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028aa:	2305      	movs	r3, #5
 80028ac:	e008      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ae:	2304      	movs	r3, #4
 80028b0:	e006      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b2:	2303      	movs	r3, #3
 80028b4:	e004      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e002      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028ba:	2301      	movs	r3, #1
 80028bc:	e000      	b.n	80028c0 <HAL_GPIO_Init+0x240>
 80028be:	2300      	movs	r3, #0
 80028c0:	69fa      	ldr	r2, [r7, #28]
 80028c2:	f002 0203 	and.w	r2, r2, #3
 80028c6:	0092      	lsls	r2, r2, #2
 80028c8:	4093      	lsls	r3, r2
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d0:	4935      	ldr	r1, [pc, #212]	@ (80029a8 <HAL_GPIO_Init+0x328>)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	089b      	lsrs	r3, r3, #2
 80028d6:	3302      	adds	r3, #2
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028de:	4b3d      	ldr	r3, [pc, #244]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002902:	4a34      	ldr	r2, [pc, #208]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002908:	4b32      	ldr	r3, [pc, #200]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002924:	69ba      	ldr	r2, [r7, #24]
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800292c:	4a29      	ldr	r2, [pc, #164]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002932:	4b28      	ldr	r3, [pc, #160]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	43db      	mvns	r3, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4013      	ands	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002956:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800295c:	4b1d      	ldr	r3, [pc, #116]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	43db      	mvns	r3, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <HAL_GPIO_Init+0x354>)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	3301      	adds	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	f67f ae84 	bls.w	800269c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002994:	bf00      	nop
 8002996:	bf00      	nop
 8002998:	3724      	adds	r7, #36	@ 0x24
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
 80029a2:	bf00      	nop
 80029a4:	40023800 	.word	0x40023800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	40020000 	.word	0x40020000
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40020800 	.word	0x40020800
 80029b8:	40020c00 	.word	0x40020c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40021400 	.word	0x40021400
 80029c4:	40021800 	.word	0x40021800
 80029c8:	40021c00 	.word	0x40021c00
 80029cc:	40022000 	.word	0x40022000
 80029d0:	40022400 	.word	0x40022400
 80029d4:	40013c00 	.word	0x40013c00

080029d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	4b20      	ldr	r3, [pc, #128]	@ (8002a68 <HAL_PWREx_EnableOverDrive+0x90>)
 80029e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002a68 <HAL_PWREx_EnableOverDrive+0x90>)
 80029ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002a68 <HAL_PWREx_EnableOverDrive+0x90>)
 80029f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029fe:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <HAL_PWREx_EnableOverDrive+0x94>)
 8002a00:	2201      	movs	r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a04:	f7fe fac0 	bl	8000f88 <HAL_GetTick>
 8002a08:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a0a:	e009      	b.n	8002a20 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a0c:	f7fe fabc 	bl	8000f88 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a1a:	d901      	bls.n	8002a20 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e01f      	b.n	8002a60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a20:	4b13      	ldr	r3, [pc, #76]	@ (8002a70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a2c:	d1ee      	bne.n	8002a0c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a34:	f7fe faa8 	bl	8000f88 <HAL_GetTick>
 8002a38:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a3a:	e009      	b.n	8002a50 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a3c:	f7fe faa4 	bl	8000f88 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a4a:	d901      	bls.n	8002a50 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e007      	b.n	8002a60 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a50:	4b07      	ldr	r3, [pc, #28]	@ (8002a70 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a5c:	d1ee      	bne.n	8002a3c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	420e0040 	.word	0x420e0040
 8002a70:	40007000 	.word	0x40007000
 8002a74:	420e0044 	.word	0x420e0044

08002a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d101      	bne.n	8002a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e267      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d075      	beq.n	8002b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002a96:	4b88      	ldr	r3, [pc, #544]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 030c 	and.w	r3, r3, #12
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d00c      	beq.n	8002abc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aa2:	4b85      	ldr	r3, [pc, #532]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d112      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002aae:	4b82      	ldr	r3, [pc, #520]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002abc:	4b7e      	ldr	r3, [pc, #504]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d05b      	beq.n	8002b80 <HAL_RCC_OscConfig+0x108>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d157      	bne.n	8002b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e242      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002adc:	d106      	bne.n	8002aec <HAL_RCC_OscConfig+0x74>
 8002ade:	4b76      	ldr	r3, [pc, #472]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a75      	ldr	r2, [pc, #468]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e01d      	b.n	8002b28 <HAL_RCC_OscConfig+0xb0>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002af4:	d10c      	bne.n	8002b10 <HAL_RCC_OscConfig+0x98>
 8002af6:	4b70      	ldr	r3, [pc, #448]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6f      	ldr	r2, [pc, #444]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b00:	6013      	str	r3, [r2, #0]
 8002b02:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a6c      	ldr	r2, [pc, #432]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b0c:	6013      	str	r3, [r2, #0]
 8002b0e:	e00b      	b.n	8002b28 <HAL_RCC_OscConfig+0xb0>
 8002b10:	4b69      	ldr	r3, [pc, #420]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a68      	ldr	r2, [pc, #416]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1a:	6013      	str	r3, [r2, #0]
 8002b1c:	4b66      	ldr	r3, [pc, #408]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a65      	ldr	r2, [pc, #404]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d013      	beq.n	8002b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b30:	f7fe fa2a 	bl	8000f88 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b38:	f7fe fa26 	bl	8000f88 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b64      	cmp	r3, #100	@ 0x64
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e207      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0xc0>
 8002b56:	e014      	b.n	8002b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7fe fa16 	bl	8000f88 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b60:	f7fe fa12 	bl	8000f88 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b64      	cmp	r3, #100	@ 0x64
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e1f3      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b72:	4b51      	ldr	r3, [pc, #324]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0xe8>
 8002b7e:	e000      	b.n	8002b82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d063      	beq.n	8002c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 030c 	and.w	r3, r3, #12
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00b      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b9a:	4b47      	ldr	r3, [pc, #284]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d11c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ba6:	4b44      	ldr	r3, [pc, #272]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d116      	bne.n	8002be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bb2:	4b41      	ldr	r3, [pc, #260]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d005      	beq.n	8002bca <HAL_RCC_OscConfig+0x152>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e1c7      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bca:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4937      	ldr	r1, [pc, #220]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bde:	e03a      	b.n	8002c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d020      	beq.n	8002c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002be8:	4b34      	ldr	r3, [pc, #208]	@ (8002cbc <HAL_RCC_OscConfig+0x244>)
 8002bea:	2201      	movs	r2, #1
 8002bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bee:	f7fe f9cb 	bl	8000f88 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf6:	f7fe f9c7 	bl	8000f88 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e1a8      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c08:	4b2b      	ldr	r3, [pc, #172]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c14:	4b28      	ldr	r3, [pc, #160]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	4925      	ldr	r1, [pc, #148]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	600b      	str	r3, [r1, #0]
 8002c28:	e015      	b.n	8002c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c2a:	4b24      	ldr	r3, [pc, #144]	@ (8002cbc <HAL_RCC_OscConfig+0x244>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c30:	f7fe f9aa 	bl	8000f88 <HAL_GetTick>
 8002c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c36:	e008      	b.n	8002c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c38:	f7fe f9a6 	bl	8000f88 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d901      	bls.n	8002c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c46:	2303      	movs	r3, #3
 8002c48:	e187      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d1f0      	bne.n	8002c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d036      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d016      	beq.n	8002c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <HAL_RCC_OscConfig+0x248>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7fe f98a 	bl	8000f88 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c78:	f7fe f986 	bl	8000f88 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e167      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb8 <HAL_RCC_OscConfig+0x240>)
 8002c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x200>
 8002c96:	e01b      	b.n	8002cd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_OscConfig+0x248>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9e:	f7fe f973 	bl	8000f88 <HAL_GetTick>
 8002ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ca4:	e00e      	b.n	8002cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ca6:	f7fe f96f 	bl	8000f88 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b02      	cmp	r3, #2
 8002cb2:	d907      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002cb4:	2303      	movs	r3, #3
 8002cb6:	e150      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	42470000 	.word	0x42470000
 8002cc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cc4:	4b88      	ldr	r3, [pc, #544]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1ea      	bne.n	8002ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0304 	and.w	r3, r3, #4
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8097 	beq.w	8002e0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce2:	4b81      	ldr	r3, [pc, #516]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d06:	60bb      	str	r3, [r7, #8]
 8002d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d0e:	4b77      	ldr	r3, [pc, #476]	@ (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d118      	bne.n	8002d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d1a:	4b74      	ldr	r3, [pc, #464]	@ (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a73      	ldr	r2, [pc, #460]	@ (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d26:	f7fe f92f 	bl	8000f88 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2e:	f7fe f92b 	bl	8000f88 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e10c      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d40:	4b6a      	ldr	r3, [pc, #424]	@ (8002eec <HAL_RCC_OscConfig+0x474>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d0f0      	beq.n	8002d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d106      	bne.n	8002d62 <HAL_RCC_OscConfig+0x2ea>
 8002d54:	4b64      	ldr	r3, [pc, #400]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d58:	4a63      	ldr	r2, [pc, #396]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d60:	e01c      	b.n	8002d9c <HAL_RCC_OscConfig+0x324>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d10c      	bne.n	8002d84 <HAL_RCC_OscConfig+0x30c>
 8002d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d70:	f043 0304 	orr.w	r3, r3, #4
 8002d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d76:	4b5c      	ldr	r3, [pc, #368]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7a:	4a5b      	ldr	r2, [pc, #364]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	f043 0301 	orr.w	r3, r3, #1
 8002d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d82:	e00b      	b.n	8002d9c <HAL_RCC_OscConfig+0x324>
 8002d84:	4b58      	ldr	r3, [pc, #352]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d88:	4a57      	ldr	r2, [pc, #348]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d8a:	f023 0301 	bic.w	r3, r3, #1
 8002d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d90:	4b55      	ldr	r3, [pc, #340]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d94:	4a54      	ldr	r2, [pc, #336]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002d96:	f023 0304 	bic.w	r3, r3, #4
 8002d9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d015      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002da4:	f7fe f8f0 	bl	8000f88 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dac:	f7fe f8ec 	bl	8000f88 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e0cb      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc2:	4b49      	ldr	r3, [pc, #292]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0ee      	beq.n	8002dac <HAL_RCC_OscConfig+0x334>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dd0:	f7fe f8da 	bl	8000f88 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd6:	e00a      	b.n	8002dee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd8:	f7fe f8d6 	bl	8000f88 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e0b5      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dee:	4b3e      	ldr	r3, [pc, #248]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1ee      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d105      	bne.n	8002e0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e00:	4b39      	ldr	r3, [pc, #228]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e04:	4a38      	ldr	r2, [pc, #224]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f000 80a1 	beq.w	8002f58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e16:	4b34      	ldr	r3, [pc, #208]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d05c      	beq.n	8002edc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d141      	bne.n	8002eae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e2a:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <HAL_RCC_OscConfig+0x478>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e30:	f7fe f8aa 	bl	8000f88 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7fe f8a6 	bl	8000f88 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e087      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e4a:	4b27      	ldr	r3, [pc, #156]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	69da      	ldr	r2, [r3, #28]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e78:	061b      	lsls	r3, r3, #24
 8002e7a:	491b      	ldr	r1, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x478>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe f87f 	bl	8000f88 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe f87b 	bl	8000f88 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e05c      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea0:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x416>
 8002eac:	e054      	b.n	8002f58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_RCC_OscConfig+0x478>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe f868 	bl	8000f88 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe f864 	bl	8000f88 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e045      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x444>
 8002eda:	e03d      	b.n	8002f58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	699b      	ldr	r3, [r3, #24]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e038      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f64 <HAL_RCC_OscConfig+0x4ec>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d028      	beq.n	8002f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d121      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d11a      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d111      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f3a:	085b      	lsrs	r3, r3, #1
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3718      	adds	r7, #24
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40023800 	.word	0x40023800

08002f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d101      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0cc      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b68      	ldr	r3, [pc, #416]	@ (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d90c      	bls.n	8002fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b65      	ldr	r3, [pc, #404]	@ (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b63      	ldr	r3, [pc, #396]	@ (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0b8      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d020      	beq.n	8002ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fbc:	4b59      	ldr	r3, [pc, #356]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a58      	ldr	r2, [pc, #352]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fd4:	4b53      	ldr	r3, [pc, #332]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a52      	ldr	r2, [pc, #328]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fe0:	4b50      	ldr	r3, [pc, #320]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	494d      	ldr	r1, [pc, #308]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d044      	beq.n	8003088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d107      	bne.n	8003016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003006:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d119      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e07f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b02      	cmp	r3, #2
 800301c:	d003      	beq.n	8003026 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003022:	2b03      	cmp	r3, #3
 8003024:	d107      	bne.n	8003036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003026:	4b3f      	ldr	r3, [pc, #252]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d109      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e06f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003036:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e067      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003046:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f023 0203 	bic.w	r2, r3, #3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	4934      	ldr	r1, [pc, #208]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	4313      	orrs	r3, r2
 8003056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003058:	f7fd ff96 	bl	8000f88 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800305e:	e00a      	b.n	8003076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003060:	f7fd ff92 	bl	8000f88 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e04f      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003076:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 020c 	and.w	r2, r3, #12
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	429a      	cmp	r2, r3
 8003086:	d1eb      	bne.n	8003060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 030f 	and.w	r3, r3, #15
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d20c      	bcs.n	80030b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003096:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	b2d2      	uxtb	r2, r2
 800309c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800309e:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <HAL_RCC_ClockConfig+0x1b8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	683a      	ldr	r2, [r7, #0]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d001      	beq.n	80030b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e032      	b.n	8003116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d008      	beq.n	80030ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4916      	ldr	r1, [pc, #88]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d009      	beq.n	80030ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030da:	4b12      	ldr	r3, [pc, #72]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	490e      	ldr	r1, [pc, #56]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030ee:	f000 f821 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030f2:	4602      	mov	r2, r0
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	091b      	lsrs	r3, r3, #4
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	490a      	ldr	r1, [pc, #40]	@ (8003128 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	5ccb      	ldrb	r3, [r1, r3]
 8003102:	fa22 f303 	lsr.w	r3, r2, r3
 8003106:	4a09      	ldr	r2, [pc, #36]	@ (800312c <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800310a:	4b09      	ldr	r3, [pc, #36]	@ (8003130 <HAL_RCC_ClockConfig+0x1c8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4618      	mov	r0, r3
 8003110:	f7fd fc68 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3710      	adds	r7, #16
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	40023c00 	.word	0x40023c00
 8003124:	40023800 	.word	0x40023800
 8003128:	080242d4 	.word	0x080242d4
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003138:	b094      	sub	sp, #80	@ 0x50
 800313a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800313c:	2300      	movs	r3, #0
 800313e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800314c:	4b79      	ldr	r3, [pc, #484]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 030c 	and.w	r3, r3, #12
 8003154:	2b08      	cmp	r3, #8
 8003156:	d00d      	beq.n	8003174 <HAL_RCC_GetSysClockFreq+0x40>
 8003158:	2b08      	cmp	r3, #8
 800315a:	f200 80e1 	bhi.w	8003320 <HAL_RCC_GetSysClockFreq+0x1ec>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0x34>
 8003162:	2b04      	cmp	r3, #4
 8003164:	d003      	beq.n	800316e <HAL_RCC_GetSysClockFreq+0x3a>
 8003166:	e0db      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b73      	ldr	r3, [pc, #460]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x204>)
 800316a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800316c:	e0db      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800316e:	4b73      	ldr	r3, [pc, #460]	@ (800333c <HAL_RCC_GetSysClockFreq+0x208>)
 8003170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003172:	e0d8      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003174:	4b6f      	ldr	r3, [pc, #444]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800317c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800317e:	4b6d      	ldr	r3, [pc, #436]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d063      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800318a:	4b6a      	ldr	r3, [pc, #424]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	099b      	lsrs	r3, r3, #6
 8003190:	2200      	movs	r2, #0
 8003192:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003194:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800319c:	633b      	str	r3, [r7, #48]	@ 0x30
 800319e:	2300      	movs	r3, #0
 80031a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80031a6:	4622      	mov	r2, r4
 80031a8:	462b      	mov	r3, r5
 80031aa:	f04f 0000 	mov.w	r0, #0
 80031ae:	f04f 0100 	mov.w	r1, #0
 80031b2:	0159      	lsls	r1, r3, #5
 80031b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b8:	0150      	lsls	r0, r2, #5
 80031ba:	4602      	mov	r2, r0
 80031bc:	460b      	mov	r3, r1
 80031be:	4621      	mov	r1, r4
 80031c0:	1a51      	subs	r1, r2, r1
 80031c2:	6139      	str	r1, [r7, #16]
 80031c4:	4629      	mov	r1, r5
 80031c6:	eb63 0301 	sbc.w	r3, r3, r1
 80031ca:	617b      	str	r3, [r7, #20]
 80031cc:	f04f 0200 	mov.w	r2, #0
 80031d0:	f04f 0300 	mov.w	r3, #0
 80031d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80031d8:	4659      	mov	r1, fp
 80031da:	018b      	lsls	r3, r1, #6
 80031dc:	4651      	mov	r1, sl
 80031de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031e2:	4651      	mov	r1, sl
 80031e4:	018a      	lsls	r2, r1, #6
 80031e6:	4651      	mov	r1, sl
 80031e8:	ebb2 0801 	subs.w	r8, r2, r1
 80031ec:	4659      	mov	r1, fp
 80031ee:	eb63 0901 	sbc.w	r9, r3, r1
 80031f2:	f04f 0200 	mov.w	r2, #0
 80031f6:	f04f 0300 	mov.w	r3, #0
 80031fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003206:	4690      	mov	r8, r2
 8003208:	4699      	mov	r9, r3
 800320a:	4623      	mov	r3, r4
 800320c:	eb18 0303 	adds.w	r3, r8, r3
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	462b      	mov	r3, r5
 8003214:	eb49 0303 	adc.w	r3, r9, r3
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003226:	4629      	mov	r1, r5
 8003228:	024b      	lsls	r3, r1, #9
 800322a:	4621      	mov	r1, r4
 800322c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003230:	4621      	mov	r1, r4
 8003232:	024a      	lsls	r2, r1, #9
 8003234:	4610      	mov	r0, r2
 8003236:	4619      	mov	r1, r3
 8003238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800323a:	2200      	movs	r2, #0
 800323c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800323e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003240:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003244:	f7fd f834 	bl	80002b0 <__aeabi_uldivmod>
 8003248:	4602      	mov	r2, r0
 800324a:	460b      	mov	r3, r1
 800324c:	4613      	mov	r3, r2
 800324e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003250:	e058      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003252:	4b38      	ldr	r3, [pc, #224]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	099b      	lsrs	r3, r3, #6
 8003258:	2200      	movs	r2, #0
 800325a:	4618      	mov	r0, r3
 800325c:	4611      	mov	r1, r2
 800325e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003262:	623b      	str	r3, [r7, #32]
 8003264:	2300      	movs	r3, #0
 8003266:	627b      	str	r3, [r7, #36]	@ 0x24
 8003268:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800326c:	4642      	mov	r2, r8
 800326e:	464b      	mov	r3, r9
 8003270:	f04f 0000 	mov.w	r0, #0
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	0159      	lsls	r1, r3, #5
 800327a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800327e:	0150      	lsls	r0, r2, #5
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4641      	mov	r1, r8
 8003286:	ebb2 0a01 	subs.w	sl, r2, r1
 800328a:	4649      	mov	r1, r9
 800328c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800329c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80032a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80032a4:	ebb2 040a 	subs.w	r4, r2, sl
 80032a8:	eb63 050b 	sbc.w	r5, r3, fp
 80032ac:	f04f 0200 	mov.w	r2, #0
 80032b0:	f04f 0300 	mov.w	r3, #0
 80032b4:	00eb      	lsls	r3, r5, #3
 80032b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032ba:	00e2      	lsls	r2, r4, #3
 80032bc:	4614      	mov	r4, r2
 80032be:	461d      	mov	r5, r3
 80032c0:	4643      	mov	r3, r8
 80032c2:	18e3      	adds	r3, r4, r3
 80032c4:	603b      	str	r3, [r7, #0]
 80032c6:	464b      	mov	r3, r9
 80032c8:	eb45 0303 	adc.w	r3, r5, r3
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032da:	4629      	mov	r1, r5
 80032dc:	028b      	lsls	r3, r1, #10
 80032de:	4621      	mov	r1, r4
 80032e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032e4:	4621      	mov	r1, r4
 80032e6:	028a      	lsls	r2, r1, #10
 80032e8:	4610      	mov	r0, r2
 80032ea:	4619      	mov	r1, r3
 80032ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032ee:	2200      	movs	r2, #0
 80032f0:	61bb      	str	r3, [r7, #24]
 80032f2:	61fa      	str	r2, [r7, #28]
 80032f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032f8:	f7fc ffda 	bl	80002b0 <__aeabi_uldivmod>
 80032fc:	4602      	mov	r2, r0
 80032fe:	460b      	mov	r3, r1
 8003300:	4613      	mov	r3, r2
 8003302:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003304:	4b0b      	ldr	r3, [pc, #44]	@ (8003334 <HAL_RCC_GetSysClockFreq+0x200>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	0c1b      	lsrs	r3, r3, #16
 800330a:	f003 0303 	and.w	r3, r3, #3
 800330e:	3301      	adds	r3, #1
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003314:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003318:	fbb2 f3f3 	udiv	r3, r2, r3
 800331c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800331e:	e002      	b.n	8003326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003320:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x204>)
 8003322:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003328:	4618      	mov	r0, r3
 800332a:	3750      	adds	r7, #80	@ 0x50
 800332c:	46bd      	mov	sp, r7
 800332e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	00f42400 	.word	0x00f42400
 800333c:	007a1200 	.word	0x007a1200

08003340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b03      	ldr	r3, [pc, #12]	@ (8003354 <HAL_RCC_GetHCLKFreq+0x14>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	4618      	mov	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000000 	.word	0x20000000

08003358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800335c:	f7ff fff0 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 8003360:	4602      	mov	r2, r0
 8003362:	4b05      	ldr	r3, [pc, #20]	@ (8003378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	0a9b      	lsrs	r3, r3, #10
 8003368:	f003 0307 	and.w	r3, r3, #7
 800336c:	4903      	ldr	r1, [pc, #12]	@ (800337c <HAL_RCC_GetPCLK1Freq+0x24>)
 800336e:	5ccb      	ldrb	r3, [r1, r3]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003374:	4618      	mov	r0, r3
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40023800 	.word	0x40023800
 800337c:	080242e4 	.word	0x080242e4

08003380 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	220f      	movs	r2, #15
 800338e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003390:	4b12      	ldr	r3, [pc, #72]	@ (80033dc <HAL_RCC_GetClockConfig+0x5c>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0203 	and.w	r2, r3, #3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800339c:	4b0f      	ldr	r3, [pc, #60]	@ (80033dc <HAL_RCC_GetClockConfig+0x5c>)
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033a8:	4b0c      	ldr	r3, [pc, #48]	@ (80033dc <HAL_RCC_GetClockConfig+0x5c>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80033b4:	4b09      	ldr	r3, [pc, #36]	@ (80033dc <HAL_RCC_GetClockConfig+0x5c>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	08db      	lsrs	r3, r3, #3
 80033ba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033c2:	4b07      	ldr	r3, [pc, #28]	@ (80033e0 <HAL_RCC_GetClockConfig+0x60>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 020f 	and.w	r2, r3, #15
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	601a      	str	r2, [r3, #0]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40023c00 	.word	0x40023c00

080033e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e041      	b.n	800347a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f839 	bl	8003482 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2202      	movs	r2, #2
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	3304      	adds	r3, #4
 8003420:	4619      	mov	r1, r3
 8003422:	4610      	mov	r0, r2
 8003424:	f000 f9c0 	bl	80037a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e04e      	b.n	800354e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2202      	movs	r2, #2
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68da      	ldr	r2, [r3, #12]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a23      	ldr	r2, [pc, #140]	@ (800355c <HAL_TIM_Base_Start_IT+0xc4>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d022      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034da:	d01d      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003560 <HAL_TIM_Base_Start_IT+0xc8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d018      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003564 <HAL_TIM_Base_Start_IT+0xcc>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <HAL_TIM_Base_Start_IT+0xd0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00e      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1b      	ldr	r2, [pc, #108]	@ (800356c <HAL_TIM_Base_Start_IT+0xd4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d009      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <HAL_TIM_Base_Start_IT+0xd8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d004      	beq.n	8003518 <HAL_TIM_Base_Start_IT+0x80>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a18      	ldr	r2, [pc, #96]	@ (8003574 <HAL_TIM_Base_Start_IT+0xdc>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d111      	bne.n	800353c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2b06      	cmp	r3, #6
 8003528:	d010      	beq.n	800354c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353a:	e007      	b.n	800354c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3714      	adds	r7, #20
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40010000 	.word	0x40010000
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40010400 	.word	0x40010400
 8003570:	40014000 	.word	0x40014000
 8003574:	40001800 	.word	0x40001800

08003578 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d020      	beq.n	80035dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d01b      	beq.n	80035dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f06f 0202 	mvn.w	r2, #2
 80035ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	f003 0303 	and.w	r3, r3, #3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f8d2 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 80035c8:	e005      	b.n	80035d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8c4 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f8d5 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d020      	beq.n	8003628 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f003 0304 	and.w	r3, r3, #4
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d01b      	beq.n	8003628 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0204 	mvn.w	r2, #4
 80035f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2202      	movs	r2, #2
 80035fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8ac 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 8003614:	e005      	b.n	8003622 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 f89e 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f8af 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	2b00      	cmp	r3, #0
 8003630:	d020      	beq.n	8003674 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d01b      	beq.n	8003674 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0208 	mvn.w	r2, #8
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2204      	movs	r2, #4
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	f003 0303 	and.w	r3, r3, #3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f886 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f878 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f889 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d020      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f003 0310 	and.w	r3, r3, #16
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01b      	beq.n	80036c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f06f 0210 	mvn.w	r2, #16
 8003690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2208      	movs	r2, #8
 8003696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	69db      	ldr	r3, [r3, #28]
 800369e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f860 	bl	800376c <HAL_TIM_IC_CaptureCallback>
 80036ac:	e005      	b.n	80036ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f852 	bl	8003758 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f863 	bl	8003780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00c      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d007      	beq.n	80036e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f06f 0201 	mvn.w	r2, #1
 80036dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd f93c 	bl	800095c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00c      	beq.n	8003708 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d007      	beq.n	8003708 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f906 	bl	8003914 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800370e:	2b00      	cmp	r3, #0
 8003710:	d00c      	beq.n	800372c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d007      	beq.n	800372c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f834 	bl	8003794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d00c      	beq.n	8003750 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	2b00      	cmp	r3, #0
 800373e:	d007      	beq.n	8003750 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f06f 0220 	mvn.w	r2, #32
 8003748:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8d8 	bl	8003900 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003750:	bf00      	nop
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a46      	ldr	r2, [pc, #280]	@ (80038d4 <TIM_Base_SetConfig+0x12c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037c6:	d00f      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a43      	ldr	r2, [pc, #268]	@ (80038d8 <TIM_Base_SetConfig+0x130>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00b      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	4a42      	ldr	r2, [pc, #264]	@ (80038dc <TIM_Base_SetConfig+0x134>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d007      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a41      	ldr	r2, [pc, #260]	@ (80038e0 <TIM_Base_SetConfig+0x138>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d003      	beq.n	80037e8 <TIM_Base_SetConfig+0x40>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a40      	ldr	r2, [pc, #256]	@ (80038e4 <TIM_Base_SetConfig+0x13c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	68fa      	ldr	r2, [r7, #12]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a35      	ldr	r2, [pc, #212]	@ (80038d4 <TIM_Base_SetConfig+0x12c>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d02b      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003808:	d027      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a32      	ldr	r2, [pc, #200]	@ (80038d8 <TIM_Base_SetConfig+0x130>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d023      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a31      	ldr	r2, [pc, #196]	@ (80038dc <TIM_Base_SetConfig+0x134>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d01f      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a30      	ldr	r2, [pc, #192]	@ (80038e0 <TIM_Base_SetConfig+0x138>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01b      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2f      	ldr	r2, [pc, #188]	@ (80038e4 <TIM_Base_SetConfig+0x13c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d017      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a2e      	ldr	r2, [pc, #184]	@ (80038e8 <TIM_Base_SetConfig+0x140>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d013      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a2d      	ldr	r2, [pc, #180]	@ (80038ec <TIM_Base_SetConfig+0x144>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d00f      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a2c      	ldr	r2, [pc, #176]	@ (80038f0 <TIM_Base_SetConfig+0x148>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00b      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a2b      	ldr	r2, [pc, #172]	@ (80038f4 <TIM_Base_SetConfig+0x14c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a2a      	ldr	r2, [pc, #168]	@ (80038f8 <TIM_Base_SetConfig+0x150>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <TIM_Base_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a29      	ldr	r2, [pc, #164]	@ (80038fc <TIM_Base_SetConfig+0x154>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d108      	bne.n	800386c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003860:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4313      	orrs	r3, r2
 800386a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a10      	ldr	r2, [pc, #64]	@ (80038d4 <TIM_Base_SetConfig+0x12c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0xf8>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a12      	ldr	r2, [pc, #72]	@ (80038e4 <TIM_Base_SetConfig+0x13c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d103      	bne.n	80038a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d105      	bne.n	80038c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	611a      	str	r2, [r3, #16]
  }
}
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000
 80038d8:	40000400 	.word	0x40000400
 80038dc:	40000800 	.word	0x40000800
 80038e0:	40000c00 	.word	0x40000c00
 80038e4:	40010400 	.word	0x40010400
 80038e8:	40014000 	.word	0x40014000
 80038ec:	40014400 	.word	0x40014400
 80038f0:	40014800 	.word	0x40014800
 80038f4:	40001800 	.word	0x40001800
 80038f8:	40001c00 	.word	0x40001c00
 80038fc:	40002000 	.word	0x40002000

08003900 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800392e:	2100      	movs	r1, #0
 8003930:	2000      	movs	r0, #0
 8003932:	f007 f907 	bl	800ab44 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003936:	4b1c      	ldr	r3, [pc, #112]	@ (80039a8 <MX_LWIP_Init+0x80>)
 8003938:	2200      	movs	r2, #0
 800393a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <MX_LWIP_Init+0x84>)
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003942:	4b1b      	ldr	r3, [pc, #108]	@ (80039b0 <MX_LWIP_Init+0x88>)
 8003944:	2200      	movs	r2, #0
 8003946:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003948:	4b1a      	ldr	r3, [pc, #104]	@ (80039b4 <MX_LWIP_Init+0x8c>)
 800394a:	9302      	str	r3, [sp, #8]
 800394c:	4b1a      	ldr	r3, [pc, #104]	@ (80039b8 <MX_LWIP_Init+0x90>)
 800394e:	9301      	str	r3, [sp, #4]
 8003950:	2300      	movs	r3, #0
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	4b16      	ldr	r3, [pc, #88]	@ (80039b0 <MX_LWIP_Init+0x88>)
 8003956:	4a15      	ldr	r2, [pc, #84]	@ (80039ac <MX_LWIP_Init+0x84>)
 8003958:	4913      	ldr	r1, [pc, #76]	@ (80039a8 <MX_LWIP_Init+0x80>)
 800395a:	4818      	ldr	r0, [pc, #96]	@ (80039bc <MX_LWIP_Init+0x94>)
 800395c:	f007 ff94 	bl	800b888 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003960:	4816      	ldr	r0, [pc, #88]	@ (80039bc <MX_LWIP_Init+0x94>)
 8003962:	f008 fa63 	bl	800be2c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8003966:	4815      	ldr	r0, [pc, #84]	@ (80039bc <MX_LWIP_Init+0x94>)
 8003968:	f008 fa88 	bl	800be7c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800396c:	4914      	ldr	r1, [pc, #80]	@ (80039c0 <MX_LWIP_Init+0x98>)
 800396e:	4813      	ldr	r0, [pc, #76]	@ (80039bc <MX_LWIP_Init+0x94>)
 8003970:	f008 fb9c 	bl	800c0ac <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003974:	2224      	movs	r2, #36	@ 0x24
 8003976:	2100      	movs	r1, #0
 8003978:	4812      	ldr	r0, [pc, #72]	@ (80039c4 <MX_LWIP_Init+0x9c>)
 800397a:	f018 f835 	bl	801b9e8 <memset>
  attributes.name = "EthLink";
 800397e:	4b11      	ldr	r3, [pc, #68]	@ (80039c4 <MX_LWIP_Init+0x9c>)
 8003980:	4a11      	ldr	r2, [pc, #68]	@ (80039c8 <MX_LWIP_Init+0xa0>)
 8003982:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003984:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <MX_LWIP_Init+0x9c>)
 8003986:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800398a:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityNormal;
 800398c:	4b0d      	ldr	r3, [pc, #52]	@ (80039c4 <MX_LWIP_Init+0x9c>)
 800398e:	2218      	movs	r2, #24
 8003990:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8003992:	4a0c      	ldr	r2, [pc, #48]	@ (80039c4 <MX_LWIP_Init+0x9c>)
 8003994:	4909      	ldr	r1, [pc, #36]	@ (80039bc <MX_LWIP_Init+0x94>)
 8003996:	480d      	ldr	r0, [pc, #52]	@ (80039cc <MX_LWIP_Init+0xa4>)
 8003998:	f000 fd9d 	bl	80044d6 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800399c:	4807      	ldr	r0, [pc, #28]	@ (80039bc <MX_LWIP_Init+0x94>)
 800399e:	f012 fc7f 	bl	80162a0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80039a2:	bf00      	nop
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	2000017c 	.word	0x2000017c
 80039ac:	20000180 	.word	0x20000180
 80039b0:	20000184 	.word	0x20000184
 80039b4:	0800aa4d 	.word	0x0800aa4d
 80039b8:	08003e91 	.word	0x08003e91
 80039bc:	20000144 	.word	0x20000144
 80039c0:	080039d1 	.word	0x080039d1
 80039c4:	20000188 	.word	0x20000188
 80039c8:	0801c594 	.word	0x0801c594
 80039cc:	0800417d 	.word	0x0800417d

080039d0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80039ec:	4b04      	ldr	r3, [pc, #16]	@ (8003a00 <HAL_ETH_RxCpltCallback+0x1c>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 f835 	bl	8004a60 <osSemaphoreRelease>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20003478 	.word	0x20003478

08003a04 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8003a0c:	4b04      	ldr	r3, [pc, #16]	@ (8003a20 <HAL_ETH_TxCpltCallback+0x1c>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 f825 	bl	8004a60 <osSemaphoreRelease>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000347c 	.word	0x2000347c

08003a24 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	f7fe f9f9 	bl	8001e24 <HAL_ETH_GetDMAError>
 8003a32:	4603      	mov	r3, r0
 8003a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a38:	2b80      	cmp	r3, #128	@ 0x80
 8003a3a:	d104      	bne.n	8003a46 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8003a3c:	4b04      	ldr	r3, [pc, #16]	@ (8003a50 <HAL_ETH_ErrorCallback+0x2c>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4618      	mov	r0, r3
 8003a42:	f001 f80d 	bl	8004a60 <osSemaphoreRelease>
  }
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20003478 	.word	0x20003478

08003a54 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b0aa      	sub	sp, #168	@ 0xa8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8003a6e:	f107 0310 	add.w	r3, r7, #16
 8003a72:	2264      	movs	r2, #100	@ 0x64
 8003a74:	2100      	movs	r1, #0
 8003a76:	4618      	mov	r0, r3
 8003a78:	f017 ffb6 	bl	801b9e8 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8003a7c:	4b89      	ldr	r3, [pc, #548]	@ (8003ca4 <low_level_init+0x250>)
 8003a7e:	4a8a      	ldr	r2, [pc, #552]	@ (8003ca8 <low_level_init+0x254>)
 8003a80:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8003a82:	2300      	movs	r3, #0
 8003a84:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8003a8a:	23e1      	movs	r3, #225	@ 0xe1
 8003a8c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8003a92:	2300      	movs	r3, #0
 8003a94:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8003a96:	2300      	movs	r3, #0
 8003a98:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8003a9a:	4a82      	ldr	r2, [pc, #520]	@ (8003ca4 <low_level_init+0x250>)
 8003a9c:	f107 0308 	add.w	r3, r7, #8
 8003aa0:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8003aa2:	4b80      	ldr	r3, [pc, #512]	@ (8003ca4 <low_level_init+0x250>)
 8003aa4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003aa8:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8003aaa:	4b7e      	ldr	r3, [pc, #504]	@ (8003ca4 <low_level_init+0x250>)
 8003aac:	4a7f      	ldr	r2, [pc, #508]	@ (8003cac <low_level_init+0x258>)
 8003aae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8003ab0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ca4 <low_level_init+0x250>)
 8003ab2:	4a7f      	ldr	r2, [pc, #508]	@ (8003cb0 <low_level_init+0x25c>)
 8003ab4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1000;
 8003ab6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ca4 <low_level_init+0x250>)
 8003ab8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003abc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8003abe:	4879      	ldr	r0, [pc, #484]	@ (8003ca4 <low_level_init+0x250>)
 8003ac0:	f7fd fb74 	bl	80011ac <HAL_ETH_Init>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8003aca:	2238      	movs	r2, #56	@ 0x38
 8003acc:	2100      	movs	r1, #0
 8003ace:	4879      	ldr	r0, [pc, #484]	@ (8003cb4 <low_level_init+0x260>)
 8003ad0:	f017 ff8a 	bl	801b9e8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8003ad4:	4b77      	ldr	r3, [pc, #476]	@ (8003cb4 <low_level_init+0x260>)
 8003ad6:	2221      	movs	r2, #33	@ 0x21
 8003ad8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8003ada:	4b76      	ldr	r3, [pc, #472]	@ (8003cb4 <low_level_init+0x260>)
 8003adc:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8003ae0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8003ae2:	4b74      	ldr	r3, [pc, #464]	@ (8003cb4 <low_level_init+0x260>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8003ae8:	4873      	ldr	r0, [pc, #460]	@ (8003cb8 <low_level_init+0x264>)
 8003aea:	f007 fd69 	bl	800b5c0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2206      	movs	r2, #6
 8003af2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003af6:	4b6b      	ldr	r3, [pc, #428]	@ (8003ca4 <low_level_init+0x250>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	781a      	ldrb	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003b02:	4b68      	ldr	r3, [pc, #416]	@ (8003ca4 <low_level_init+0x250>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	785a      	ldrb	r2, [r3, #1]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003b0e:	4b65      	ldr	r3, [pc, #404]	@ (8003ca4 <low_level_init+0x250>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	789a      	ldrb	r2, [r3, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8003b1a:	4b62      	ldr	r3, [pc, #392]	@ (8003ca4 <low_level_init+0x250>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	78da      	ldrb	r2, [r3, #3]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003b26:	4b5f      	ldr	r3, [pc, #380]	@ (8003ca4 <low_level_init+0x250>)
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	791a      	ldrb	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003b32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca4 <low_level_init+0x250>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	795a      	ldrb	r2, [r3, #5]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8003b44:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8003b4c:	f043 030a 	orr.w	r3, r3, #10
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	2001      	movs	r0, #1
 8003b5e:	f000 fea3 	bl	80048a8 <osSemaphoreNew>
 8003b62:	4603      	mov	r3, r0
 8003b64:	4a55      	ldr	r2, [pc, #340]	@ (8003cbc <low_level_init+0x268>)
 8003b66:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f000 fe9b 	bl	80048a8 <osSemaphoreNew>
 8003b72:	4603      	mov	r3, r0
 8003b74:	4a52      	ldr	r2, [pc, #328]	@ (8003cc0 <low_level_init+0x26c>)
 8003b76:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8003b78:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b7c:	2224      	movs	r2, #36	@ 0x24
 8003b7e:	2100      	movs	r1, #0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f017 ff31 	bl	801b9e8 <memset>
  attributes.name = "EthIf";
 8003b86:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc4 <low_level_init+0x270>)
 8003b88:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8003b8a:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003b8e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8003b92:	2330      	movs	r3, #48	@ 0x30
 8003b94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8003b98:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4849      	ldr	r0, [pc, #292]	@ (8003cc8 <low_level_init+0x274>)
 8003ba2:	f000 fc98 	bl	80044d6 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8003ba6:	4949      	ldr	r1, [pc, #292]	@ (8003ccc <low_level_init+0x278>)
 8003ba8:	4849      	ldr	r0, [pc, #292]	@ (8003cd0 <low_level_init+0x27c>)
 8003baa:	f7fd f8b0 	bl	8000d0e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 8003bae:	4848      	ldr	r0, [pc, #288]	@ (8003cd0 <low_level_init+0x27c>)
 8003bb0:	f7fd f8df 	bl	8000d72 <LAN8742_Init>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d006      	beq.n	8003bc8 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f008 fa42 	bl	800c044 <netif_set_link_down>
    netif_set_down(netif);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f008 f9cf 	bl	800bf64 <netif_set_down>
 8003bc6:	e06a      	b.n	8003c9e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8003bc8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d164      	bne.n	8003c9a <low_level_init+0x246>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8003bd0:	483f      	ldr	r0, [pc, #252]	@ (8003cd0 <low_level_init+0x27c>)
 8003bd2:	f7fd f91b 	bl	8000e0c <LAN8742_GetLinkState>
 8003bd6:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8003bda:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	dc06      	bgt.n	8003bf0 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f008 fa2e 	bl	800c044 <netif_set_link_down>
      netif_set_down(netif);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f008 f9bb 	bl	800bf64 <netif_set_down>
 8003bee:	e056      	b.n	8003c9e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8003bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003bf4:	3b02      	subs	r3, #2
 8003bf6:	2b03      	cmp	r3, #3
 8003bf8:	d82a      	bhi.n	8003c50 <low_level_init+0x1fc>
 8003bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8003c00 <low_level_init+0x1ac>)
 8003bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c00:	08003c11 	.word	0x08003c11
 8003c04:	08003c23 	.word	0x08003c23
 8003c08:	08003c33 	.word	0x08003c33
 8003c0c:	08003c43 	.word	0x08003c43
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003c10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8003c18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003c20:	e01f      	b.n	8003c62 <low_level_init+0x20e>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8003c28:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c2c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003c30:	e017      	b.n	8003c62 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8003c32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003c40:	e00f      	b.n	8003c62 <low_level_init+0x20e>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003c4e:	e008      	b.n	8003c62 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 8003c50:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003c54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8003c58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003c5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8003c60:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8003c62:	f107 0310 	add.w	r3, r7, #16
 8003c66:	4619      	mov	r1, r3
 8003c68:	480e      	ldr	r0, [pc, #56]	@ (8003ca4 <low_level_init+0x250>)
 8003c6a:	f7fd ff87 	bl	8001b7c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8003c6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003c72:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 8003c74:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8003c7a:	f107 0310 	add.w	r3, r7, #16
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4808      	ldr	r0, [pc, #32]	@ (8003ca4 <low_level_init+0x250>)
 8003c82:	f7fe f872 	bl	8001d6a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 8003c86:	4807      	ldr	r0, [pc, #28]	@ (8003ca4 <low_level_init+0x250>)
 8003c88:	f7fd fb2c 	bl	80012e4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f008 f8f5 	bl	800be7c <netif_set_up>
    netif_set_link_up(netif);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f008 f99c 	bl	800bfd0 <netif_set_link_up>
 8003c98:	e001      	b.n	8003c9e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 8003c9a:	f7fc fe71 	bl	8000980 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8003c9e:	37a8      	adds	r7, #168	@ 0xa8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}
 8003ca4:	20003480 	.word	0x20003480
 8003ca8:	40028000 	.word	0x40028000
 8003cac:	200033d8 	.word	0x200033d8
 8003cb0:	20003338 	.word	0x20003338
 8003cb4:	20003530 	.word	0x20003530
 8003cb8:	080242ec 	.word	0x080242ec
 8003cbc:	20003478 	.word	0x20003478
 8003cc0:	2000347c 	.word	0x2000347c
 8003cc4:	0801c5b4 	.word	0x0801c5b4
 8003cc8:	08003e3d 	.word	0x08003e3d
 8003ccc:	2000000c 	.word	0x2000000c
 8003cd0:	20003568 	.word	0x20003568

08003cd4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b092      	sub	sp, #72	@ 0x48
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8003cec:	f107 030c 	add.w	r3, r7, #12
 8003cf0:	2230      	movs	r2, #48	@ 0x30
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f017 fe77 	bl	801b9e8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8003cfa:	f107 030c 	add.w	r3, r7, #12
 8003cfe:	2230      	movs	r2, #48	@ 0x30
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f017 fe70 	bl	801b9e8 <memset>

  for(q = p; q != NULL; q = q->next)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d0c:	e045      	b.n	8003d9a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8003d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d10:	2b03      	cmp	r3, #3
 8003d12:	d902      	bls.n	8003d1a <low_level_output+0x46>
      return ERR_IF;
 8003d14:	f06f 030b 	mvn.w	r3, #11
 8003d18:	e06c      	b.n	8003df4 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8003d1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d1c:	6859      	ldr	r1, [r3, #4]
 8003d1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d20:	4613      	mov	r3, r2
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4413      	add	r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	3348      	adds	r3, #72	@ 0x48
 8003d2a:	443b      	add	r3, r7
 8003d2c:	3b3c      	subs	r3, #60	@ 0x3c
 8003d2e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8003d30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d32:	895b      	ldrh	r3, [r3, #10]
 8003d34:	4619      	mov	r1, r3
 8003d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d38:	4613      	mov	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	4413      	add	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	3348      	adds	r3, #72	@ 0x48
 8003d42:	443b      	add	r3, r7
 8003d44:	3b38      	subs	r3, #56	@ 0x38
 8003d46:	6019      	str	r1, [r3, #0]

    if(i>0)
 8003d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d011      	beq.n	8003d72 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8003d4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d50:	1e5a      	subs	r2, r3, #1
 8003d52:	f107 000c 	add.w	r0, r7, #12
 8003d56:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003d58:	460b      	mov	r3, r1
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	440b      	add	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	18c1      	adds	r1, r0, r3
 8003d62:	4613      	mov	r3, r2
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	3348      	adds	r3, #72	@ 0x48
 8003d6c:	443b      	add	r3, r7
 8003d6e:	3b34      	subs	r3, #52	@ 0x34
 8003d70:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8003d72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d109      	bne.n	8003d8e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8003d7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	4413      	add	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	3348      	adds	r3, #72	@ 0x48
 8003d86:	443b      	add	r3, r7
 8003d88:	3b34      	subs	r3, #52	@ 0x34
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8003d8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d90:	3301      	adds	r3, #1
 8003d92:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8003d94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1b6      	bne.n	8003d0e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	891b      	ldrh	r3, [r3, #8]
 8003da4:	461a      	mov	r2, r3
 8003da6:	4b15      	ldr	r3, [pc, #84]	@ (8003dfc <low_level_output+0x128>)
 8003da8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8003daa:	4a14      	ldr	r2, [pc, #80]	@ (8003dfc <low_level_output+0x128>)
 8003dac:	f107 030c 	add.w	r3, r7, #12
 8003db0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8003db2:	4a12      	ldr	r2, [pc, #72]	@ (8003dfc <low_level_output+0x128>)
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8003db8:	6838      	ldr	r0, [r7, #0]
 8003dba:	f008 fe85 	bl	800cac8 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8003dbe:	490f      	ldr	r1, [pc, #60]	@ (8003dfc <low_level_output+0x128>)
 8003dc0:	480f      	ldr	r0, [pc, #60]	@ (8003e00 <low_level_output+0x12c>)
 8003dc2:	f7fd fb7e 	bl	80014c2 <HAL_ETH_Transmit_IT>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10e      	bne.n	8003dea <low_level_output+0x116>
    while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8003dcc:	bf00      	nop
 8003dce:	4b0d      	ldr	r3, [pc, #52]	@ (8003e04 <low_level_output+0x130>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 fdf0 	bl	80049bc <osSemaphoreAcquire>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f5      	bne.n	8003dce <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8003de2:	4807      	ldr	r0, [pc, #28]	@ (8003e00 <low_level_output+0x12c>)
 8003de4:	f7fd fd0c 	bl	8001800 <HAL_ETH_ReleaseTxPacket>
 8003de8:	e002      	b.n	8003df0 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8003dea:	6838      	ldr	r0, [r7, #0]
 8003dec:	f008 fd96 	bl	800c91c <pbuf_free>
  }

  return errval;
 8003df0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3748      	adds	r7, #72	@ 0x48
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20003530 	.word	0x20003530
 8003e00:	20003480 	.word	0x20003480
 8003e04:	2000347c 	.word	0x2000347c

08003e08 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003e10:	2300      	movs	r3, #0
 8003e12:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8003e14:	4b07      	ldr	r3, [pc, #28]	@ (8003e34 <low_level_input+0x2c>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d105      	bne.n	8003e28 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	4619      	mov	r1, r3
 8003e22:	4805      	ldr	r0, [pc, #20]	@ (8003e38 <low_level_input+0x30>)
 8003e24:	f7fd fba9 	bl	800157a <HAL_ETH_ReadData>
  }

  return p;
 8003e28:	68fb      	ldr	r3, [r7, #12]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20003334 	.word	0x20003334
 8003e38:	20003480 	.word	0x20003480

08003e3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e8c <ethernetif_input+0x50>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f04f 31ff 	mov.w	r1, #4294967295
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fdb1 	bl	80049bc <osSemaphoreAcquire>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f5      	bne.n	8003e4c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8003e60:	68b8      	ldr	r0, [r7, #8]
 8003e62:	f7ff ffd1 	bl	8003e08 <low_level_input>
 8003e66:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d00a      	beq.n	8003e84 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	68b9      	ldr	r1, [r7, #8]
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	4798      	blx	r3
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8003e7e:	68f8      	ldr	r0, [r7, #12]
 8003e80:	f008 fd4c 	bl	800c91c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1ea      	bne.n	8003e60 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8003e8a:	e7df      	b.n	8003e4c <ethernetif_input+0x10>
 8003e8c:	20003478 	.word	0x20003478

08003e90 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b082      	sub	sp, #8
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d109      	bne.n	8003eb2 <ethernetif_init+0x22>
 8003e9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ee0 <ethernetif_init+0x50>)
 8003ea0:	f44f 72f6 	mov.w	r2, #492	@ 0x1ec
 8003ea4:	490f      	ldr	r1, [pc, #60]	@ (8003ee4 <ethernetif_init+0x54>)
 8003ea6:	4810      	ldr	r0, [pc, #64]	@ (8003ee8 <ethernetif_init+0x58>)
 8003ea8:	f017 fc3e 	bl	801b728 <iprintf>
 8003eac:	2000      	movs	r0, #0
 8003eae:	f017 fb65 	bl	801b57c <fflush>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2273      	movs	r2, #115	@ 0x73
 8003eb6:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2274      	movs	r2, #116	@ 0x74
 8003ebe:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a09      	ldr	r2, [pc, #36]	@ (8003eec <ethernetif_init+0x5c>)
 8003ec6:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a09      	ldr	r2, [pc, #36]	@ (8003ef0 <ethernetif_init+0x60>)
 8003ecc:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff fdc0 	bl	8003a54 <low_level_init>

  return ERR_OK;
 8003ed4:	2300      	movs	r3, #0
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	0801c5bc 	.word	0x0801c5bc
 8003ee4:	0801c5d8 	.word	0x0801c5d8
 8003ee8:	0801c5e8 	.word	0x0801c5e8
 8003eec:	080189f9 	.word	0x080189f9
 8003ef0:	08003cd5 	.word	0x08003cd5

08003ef4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8003f00:	68f9      	ldr	r1, [r7, #12]
 8003f02:	4809      	ldr	r0, [pc, #36]	@ (8003f28 <pbuf_free_custom+0x34>)
 8003f04:	f007 fc64 	bl	800b7d0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8003f08:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <pbuf_free_custom+0x38>)
 8003f0a:	781b      	ldrb	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8003f10:	4b06      	ldr	r3, [pc, #24]	@ (8003f2c <pbuf_free_custom+0x38>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8003f16:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <pbuf_free_custom+0x3c>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fda0 	bl	8004a60 <osSemaphoreRelease>
  }
}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	080242ec 	.word	0x080242ec
 8003f2c:	20003334 	.word	0x20003334
 8003f30:	20003478 	.word	0x20003478

08003f34 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003f38:	f7fd f826 	bl	8000f88 <HAL_GetTick>
 8003f3c:	4603      	mov	r3, r0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08e      	sub	sp, #56	@ 0x38
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a59      	ldr	r2, [pc, #356]	@ (80040c8 <HAL_ETH_MspInit+0x184>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	f040 80ac 	bne.w	80040c0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003f68:	2300      	movs	r3, #0
 8003f6a:	623b      	str	r3, [r7, #32]
 8003f6c:	4b57      	ldr	r3, [pc, #348]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f70:	4a56      	ldr	r2, [pc, #344]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003f72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f78:	4b54      	ldr	r3, [pc, #336]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f80:	623b      	str	r3, [r7, #32]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	2300      	movs	r3, #0
 8003f86:	61fb      	str	r3, [r7, #28]
 8003f88:	4b50      	ldr	r3, [pc, #320]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f8c:	4a4f      	ldr	r2, [pc, #316]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003f8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f92:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f94:	4b4d      	ldr	r3, [pc, #308]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f9c:	61fb      	str	r3, [r7, #28]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61bb      	str	r3, [r7, #24]
 8003fa4:	4b49      	ldr	r3, [pc, #292]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa8:	4a48      	ldr	r2, [pc, #288]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003faa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fb0:	4b46      	ldr	r3, [pc, #280]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	4b42      	ldr	r3, [pc, #264]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	4a41      	ldr	r2, [pc, #260]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fc6:	f043 0304 	orr.w	r3, r3, #4
 8003fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fcc:	4b3f      	ldr	r3, [pc, #252]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	617b      	str	r3, [r7, #20]
 8003fd6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd8:	2300      	movs	r3, #0
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fe8:	4b38      	ldr	r3, [pc, #224]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fec:	f003 0301 	and.w	r3, r3, #1
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	4b34      	ldr	r3, [pc, #208]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	4a33      	ldr	r2, [pc, #204]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8003ffe:	f043 0302 	orr.w	r3, r3, #2
 8004002:	6313      	str	r3, [r2, #48]	@ 0x30
 8004004:	4b31      	ldr	r3, [pc, #196]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8004006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004010:	2300      	movs	r3, #0
 8004012:	60bb      	str	r3, [r7, #8]
 8004014:	4b2d      	ldr	r3, [pc, #180]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8004016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004018:	4a2c      	ldr	r2, [pc, #176]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 800401a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800401e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004020:	4b2a      	ldr	r3, [pc, #168]	@ (80040cc <HAL_ETH_MspInit+0x188>)
 8004022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800402c:	2332      	movs	r3, #50	@ 0x32
 800402e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004030:	2302      	movs	r3, #2
 8004032:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004034:	2300      	movs	r3, #0
 8004036:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004038:	2303      	movs	r3, #3
 800403a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800403c:	230b      	movs	r3, #11
 800403e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004040:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004044:	4619      	mov	r1, r3
 8004046:	4822      	ldr	r0, [pc, #136]	@ (80040d0 <HAL_ETH_MspInit+0x18c>)
 8004048:	f7fe fb1a 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800404c:	2386      	movs	r3, #134	@ 0x86
 800404e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004050:	2302      	movs	r3, #2
 8004052:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004054:	2300      	movs	r3, #0
 8004056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004058:	2303      	movs	r3, #3
 800405a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800405c:	230b      	movs	r3, #11
 800405e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004060:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004064:	4619      	mov	r1, r3
 8004066:	481b      	ldr	r0, [pc, #108]	@ (80040d4 <HAL_ETH_MspInit+0x190>)
 8004068:	f7fe fb0a 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800406c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004070:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004072:	2302      	movs	r3, #2
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407a:	2303      	movs	r3, #3
 800407c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800407e:	230b      	movs	r3, #11
 8004080:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004086:	4619      	mov	r1, r3
 8004088:	4813      	ldr	r0, [pc, #76]	@ (80040d8 <HAL_ETH_MspInit+0x194>)
 800408a:	f7fe faf9 	bl	8002680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800408e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004094:	2302      	movs	r3, #2
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004098:	2300      	movs	r3, #0
 800409a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800409c:	2303      	movs	r3, #3
 800409e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80040a0:	230b      	movs	r3, #11
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80040a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040a8:	4619      	mov	r1, r3
 80040aa:	480c      	ldr	r0, [pc, #48]	@ (80040dc <HAL_ETH_MspInit+0x198>)
 80040ac:	f7fe fae8 	bl	8002680 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80040b0:	2200      	movs	r2, #0
 80040b2:	2105      	movs	r1, #5
 80040b4:	203d      	movs	r0, #61	@ 0x3d
 80040b6:	f7fd f84f 	bl	8001158 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80040ba:	203d      	movs	r0, #61	@ 0x3d
 80040bc:	f7fd f868 	bl	8001190 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80040c0:	bf00      	nop
 80040c2:	3738      	adds	r7, #56	@ 0x38
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40028000 	.word	0x40028000
 80040cc:	40023800 	.word	0x40023800
 80040d0:	40020800 	.word	0x40020800
 80040d4:	40020000 	.word	0x40020000
 80040d8:	40020400 	.word	0x40020400
 80040dc:	40021800 	.word	0x40021800

080040e0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80040e4:	4802      	ldr	r0, [pc, #8]	@ (80040f0 <ETH_PHY_IO_Init+0x10>)
 80040e6:	f7fd fe5b 	bl	8001da0 <HAL_ETH_SetMDIOClockRange>

  return 0;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20003480 	.word	0x20003480

080040f4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return 0;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr

08004104 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	68f9      	ldr	r1, [r7, #12]
 8004116:	4807      	ldr	r0, [pc, #28]	@ (8004134 <ETH_PHY_IO_ReadReg+0x30>)
 8004118:	f7fd fc9c 	bl	8001a54 <HAL_ETH_ReadPHYRegister>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295
 8004126:	e000      	b.n	800412a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8004128:	2300      	movs	r3, #0
}
 800412a:	4618      	mov	r0, r3
 800412c:	3710      	adds	r7, #16
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20003480 	.word	0x20003480

08004138 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68ba      	ldr	r2, [r7, #8]
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	4807      	ldr	r0, [pc, #28]	@ (8004168 <ETH_PHY_IO_WriteReg+0x30>)
 800414c:	f7fd fccd 	bl	8001aea <HAL_ETH_WritePHYRegister>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d002      	beq.n	800415c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8004156:	f04f 33ff 	mov.w	r3, #4294967295
 800415a:	e000      	b.n	800415e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	20003480 	.word	0x20003480

0800416c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004170:	f7fc ff0a 	bl	8000f88 <HAL_GetTick>
 8004174:	4603      	mov	r3, r0
}
 8004176:	4618      	mov	r0, r3
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b0a0      	sub	sp, #128	@ 0x80
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	2264      	movs	r2, #100	@ 0x64
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f017 fc2b 	bl	801b9e8 <memset>
  int32_t PHYLinkState = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8004196:	2300      	movs	r3, #0
 8004198:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800419a:	2300      	movs	r3, #0
 800419c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800419e:	2300      	movs	r3, #0
 80041a0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80041a6:	483a      	ldr	r0, [pc, #232]	@ (8004290 <ethernet_link_thread+0x114>)
 80041a8:	f7fc fe30 	bl	8000e0c <LAN8742_GetLinkState>
 80041ac:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 80041ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041b4:	089b      	lsrs	r3, r3, #2
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00c      	beq.n	80041da <ethernet_link_thread+0x5e>
 80041c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	dc09      	bgt.n	80041da <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 80041c6:	4833      	ldr	r0, [pc, #204]	@ (8004294 <ethernet_link_thread+0x118>)
 80041c8:	f7fd f8fc 	bl	80013c4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 80041cc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041ce:	f007 fec9 	bl	800bf64 <netif_set_down>
    netif_set_link_down(netif);
 80041d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80041d4:	f007 ff36 	bl	800c044 <netif_set_link_down>
 80041d8:	e055      	b.n	8004286 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 80041da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041dc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d14e      	bne.n	8004286 <ethernet_link_thread+0x10a>
 80041e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	dd4b      	ble.n	8004286 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 80041ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041f0:	3b02      	subs	r3, #2
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d82a      	bhi.n	800424c <ethernet_link_thread+0xd0>
 80041f6:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <ethernet_link_thread+0x80>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	0800420d 	.word	0x0800420d
 8004200:	0800421f 	.word	0x0800421f
 8004204:	0800422f 	.word	0x0800422f
 8004208:	0800423f 	.word	0x0800423f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800420c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004210:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004212:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004216:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004218:	2301      	movs	r3, #1
 800421a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800421c:	e017      	b.n	800424e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800421e:	2300      	movs	r3, #0
 8004220:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8004222:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004226:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004228:	2301      	movs	r3, #1
 800422a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800422c:	e00f      	b.n	800424e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800422e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004232:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004234:	2300      	movs	r3, #0
 8004236:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004238:	2301      	movs	r3, #1
 800423a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800423c:	e007      	b.n	800424e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800423e:	2300      	movs	r3, #0
 8004240:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8004242:	2300      	movs	r3, #0
 8004244:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800424a:	e000      	b.n	800424e <ethernet_link_thread+0xd2>
    default:
      break;
 800424c:	bf00      	nop
    }

    if(linkchanged)
 800424e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d018      	beq.n	8004286 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	4619      	mov	r1, r3
 800425a:	480e      	ldr	r0, [pc, #56]	@ (8004294 <ethernet_link_thread+0x118>)
 800425c:	f7fd fc8e 	bl	8001b7c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8004260:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004262:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8004264:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004266:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8004268:	f107 0308 	add.w	r3, r7, #8
 800426c:	4619      	mov	r1, r3
 800426e:	4809      	ldr	r0, [pc, #36]	@ (8004294 <ethernet_link_thread+0x118>)
 8004270:	f7fd fd7b 	bl	8001d6a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8004274:	4807      	ldr	r0, [pc, #28]	@ (8004294 <ethernet_link_thread+0x118>)
 8004276:	f7fd f835 	bl	80012e4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800427a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800427c:	f007 fdfe 	bl	800be7c <netif_set_up>
      netif_set_link_up(netif);
 8004280:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004282:	f007 fea5 	bl	800bfd0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8004286:	2064      	movs	r0, #100	@ 0x64
 8004288:	f000 f9e5 	bl	8004656 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800428c:	e78b      	b.n	80041a6 <ethernet_link_thread+0x2a>
 800428e:	bf00      	nop
 8004290:	20003568 	.word	0x20003568
 8004294:	20003480 	.word	0x20003480

08004298 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b086      	sub	sp, #24
 800429c:	af02      	add	r7, sp, #8
 800429e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80042a0:	4812      	ldr	r0, [pc, #72]	@ (80042ec <HAL_ETH_RxAllocateCallback+0x54>)
 80042a2:	f007 fa17 	bl	800b6d4 <memp_malloc_pool>
 80042a6:	60f8      	str	r0, [r7, #12]
  if (p)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d014      	beq.n	80042d8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f103 0220 	add.w	r2, r3, #32
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	4a0d      	ldr	r2, [pc, #52]	@ (80042f0 <HAL_ETH_RxAllocateCallback+0x58>)
 80042bc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80042c6:	9201      	str	r2, [sp, #4]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2241      	movs	r2, #65	@ 0x41
 80042ce:	2100      	movs	r1, #0
 80042d0:	2000      	movs	r0, #0
 80042d2:	f008 f91f 	bl	800c514 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 80042d6:	e005      	b.n	80042e4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 80042d8:	4b06      	ldr	r3, [pc, #24]	@ (80042f4 <HAL_ETH_RxAllocateCallback+0x5c>)
 80042da:	2201      	movs	r2, #1
 80042dc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	601a      	str	r2, [r3, #0]
}
 80042e4:	bf00      	nop
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	080242ec 	.word	0x080242ec
 80042f0:	08003ef5 	.word	0x08003ef5
 80042f4:	20003334 	.word	0x20003334

080042f8 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b089      	sub	sp, #36	@ 0x24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800430e:	2300      	movs	r3, #0
 8004310:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	3b20      	subs	r3, #32
 8004316:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2200      	movs	r2, #0
 800431c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	2200      	movs	r2, #0
 8004322:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	887a      	ldrh	r2, [r7, #2]
 8004328:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d103      	bne.n	800433a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	69fa      	ldr	r2, [r7, #28]
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	e003      	b.n	8004342 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	69fa      	ldr	r2, [r7, #28]
 8004346:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	e009      	b.n	8004364 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	891a      	ldrh	r2, [r3, #8]
 8004354:	887b      	ldrh	r3, [r7, #2]
 8004356:	4413      	add	r3, r2
 8004358:	b29a      	uxth	r2, r3
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	61fb      	str	r3, [r7, #28]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1f2      	bne.n	8004350 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800436a:	bf00      	nop
 800436c:	bf00      	nop
 800436e:	3724      	adds	r7, #36	@ 0x24
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f008 facb 	bl	800c91c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <__NVIC_SetPriority>:
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	db0a      	blt.n	80043ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	490c      	ldr	r1, [pc, #48]	@ (80043dc <__NVIC_SetPriority+0x4c>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	0112      	lsls	r2, r2, #4
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	440b      	add	r3, r1
 80043b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80043b8:	e00a      	b.n	80043d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	4908      	ldr	r1, [pc, #32]	@ (80043e0 <__NVIC_SetPriority+0x50>)
 80043c0:	79fb      	ldrb	r3, [r7, #7]
 80043c2:	f003 030f 	and.w	r3, r3, #15
 80043c6:	3b04      	subs	r3, #4
 80043c8:	0112      	lsls	r2, r2, #4
 80043ca:	b2d2      	uxtb	r2, r2
 80043cc:	440b      	add	r3, r1
 80043ce:	761a      	strb	r2, [r3, #24]
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000e100 	.word	0xe000e100
 80043e0:	e000ed00 	.word	0xe000ed00

080043e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <SysTick_Handler+0x1c>)
 80043ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80043ec:	f002 fe48 	bl	8007080 <xTaskGetSchedulerState>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d001      	beq.n	80043fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80043f6:	f003 fd3f 	bl	8007e78 <xPortSysTickHandler>
  }
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	e000e010 	.word	0xe000e010

08004404 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004408:	2100      	movs	r1, #0
 800440a:	f06f 0004 	mvn.w	r0, #4
 800440e:	f7ff ffbf 	bl	8004390 <__NVIC_SetPriority>
#endif
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800441e:	f3ef 8305 	mrs	r3, IPSR
 8004422:	603b      	str	r3, [r7, #0]
  return(result);
 8004424:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800442a:	f06f 0305 	mvn.w	r3, #5
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	e00c      	b.n	800444c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004432:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <osKernelInitialize+0x44>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d105      	bne.n	8004446 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800443a:	4b08      	ldr	r3, [pc, #32]	@ (800445c <osKernelInitialize+0x44>)
 800443c:	2201      	movs	r2, #1
 800443e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004440:	2300      	movs	r3, #0
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	e002      	b.n	800444c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004446:	f04f 33ff 	mov.w	r3, #4294967295
 800444a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800444c:	687b      	ldr	r3, [r7, #4]
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20003588 	.word	0x20003588

08004460 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004466:	f3ef 8305 	mrs	r3, IPSR
 800446a:	603b      	str	r3, [r7, #0]
  return(result);
 800446c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004472:	f06f 0305 	mvn.w	r3, #5
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	e010      	b.n	800449c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800447a:	4b0b      	ldr	r3, [pc, #44]	@ (80044a8 <osKernelStart+0x48>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d109      	bne.n	8004496 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004482:	f7ff ffbf 	bl	8004404 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004486:	4b08      	ldr	r3, [pc, #32]	@ (80044a8 <osKernelStart+0x48>)
 8004488:	2202      	movs	r2, #2
 800448a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800448c:	f002 f988 	bl	80067a0 <vTaskStartScheduler>
      stat = osOK;
 8004490:	2300      	movs	r3, #0
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	e002      	b.n	800449c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004496:	f04f 33ff 	mov.w	r3, #4294967295
 800449a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800449c:	687b      	ldr	r3, [r7, #4]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	20003588 	.word	0x20003588

080044ac <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b2:	f3ef 8305 	mrs	r3, IPSR
 80044b6:	603b      	str	r3, [r7, #0]
  return(result);
 80044b8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 80044be:	f002 fa93 	bl	80069e8 <xTaskGetTickCountFromISR>
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	e002      	b.n	80044cc <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 80044c6:	f002 fa7f 	bl	80069c8 <xTaskGetTickCount>
 80044ca:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 80044cc:	687b      	ldr	r3, [r7, #4]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b08e      	sub	sp, #56	@ 0x38
 80044da:	af04      	add	r7, sp, #16
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e6:	f3ef 8305 	mrs	r3, IPSR
 80044ea:	617b      	str	r3, [r7, #20]
  return(result);
 80044ec:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d17f      	bne.n	80045f2 <osThreadNew+0x11c>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d07c      	beq.n	80045f2 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 80044f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044fe:	2318      	movs	r3, #24
 8004500:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004502:	2300      	movs	r3, #0
 8004504:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004506:	f04f 33ff 	mov.w	r3, #4294967295
 800450a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d045      	beq.n	800459e <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d002      	beq.n	8004520 <osThreadNew+0x4a>
        name = attr->name;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d008      	beq.n	8004546 <osThreadNew+0x70>
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b38      	cmp	r3, #56	@ 0x38
 8004538:	d805      	bhi.n	8004546 <osThreadNew+0x70>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <osThreadNew+0x74>
        return (NULL);
 8004546:	2300      	movs	r3, #0
 8004548:	e054      	b.n	80045f4 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	089b      	lsrs	r3, r3, #2
 8004558:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00e      	beq.n	8004580 <osThreadNew+0xaa>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b5b      	cmp	r3, #91	@ 0x5b
 8004568:	d90a      	bls.n	8004580 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800456e:	2b00      	cmp	r3, #0
 8004570:	d006      	beq.n	8004580 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d002      	beq.n	8004580 <osThreadNew+0xaa>
        mem = 1;
 800457a:	2301      	movs	r3, #1
 800457c:	61bb      	str	r3, [r7, #24]
 800457e:	e010      	b.n	80045a2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10c      	bne.n	80045a2 <osThreadNew+0xcc>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d108      	bne.n	80045a2 <osThreadNew+0xcc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d104      	bne.n	80045a2 <osThreadNew+0xcc>
          mem = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	61bb      	str	r3, [r7, #24]
 800459c:	e001      	b.n	80045a2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d110      	bne.n	80045ca <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045b0:	9202      	str	r2, [sp, #8]
 80045b2:	9301      	str	r3, [sp, #4]
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	6a3a      	ldr	r2, [r7, #32]
 80045bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f001 fe36 	bl	8006230 <xTaskCreateStatic>
 80045c4:	4603      	mov	r3, r0
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	e013      	b.n	80045f2 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d110      	bne.n	80045f2 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	b29a      	uxth	r2, r3
 80045d4:	f107 0310 	add.w	r3, r7, #16
 80045d8:	9301      	str	r3, [sp, #4]
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	9300      	str	r3, [sp, #0]
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f001 fe84 	bl	80062f0 <xTaskCreate>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d001      	beq.n	80045f2 <osThreadNew+0x11c>
            hTask = NULL;
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80045f2:	693b      	ldr	r3, [r7, #16]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3728      	adds	r7, #40	@ 0x28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004608:	f3ef 8305 	mrs	r3, IPSR
 800460c:	60bb      	str	r3, [r7, #8]
  return(result);
 800460e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <osThreadTerminate+0x20>
    stat = osErrorISR;
 8004614:	f06f 0305 	mvn.w	r3, #5
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	e017      	b.n	800464c <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8004622:	f06f 0303 	mvn.w	r3, #3
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e010      	b.n	800464c <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 800462a:	6938      	ldr	r0, [r7, #16]
 800462c:	f002 f850 	bl	80066d0 <eTaskGetState>
 8004630:	4603      	mov	r3, r0
 8004632:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8004634:	7bfb      	ldrb	r3, [r7, #15]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d005      	beq.n	8004646 <osThreadTerminate+0x4a>
      stat = osOK;
 800463a:	2300      	movs	r3, #0
 800463c:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 800463e:	6938      	ldr	r0, [r7, #16]
 8004640:	f001 ff9c 	bl	800657c <vTaskDelete>
 8004644:	e002      	b.n	800464c <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8004646:	f06f 0302 	mvn.w	r3, #2
 800464a:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 800464c:	697b      	ldr	r3, [r7, #20]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465e:	f3ef 8305 	mrs	r3, IPSR
 8004662:	60bb      	str	r3, [r7, #8]
  return(result);
 8004664:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004666:	2b00      	cmp	r3, #0
 8004668:	d003      	beq.n	8004672 <osDelay+0x1c>
    stat = osErrorISR;
 800466a:	f06f 0305 	mvn.w	r3, #5
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e007      	b.n	8004682 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d002      	beq.n	8004682 <osDelay+0x2c>
      vTaskDelay(ticks);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f001 fff1 	bl	8006664 <vTaskDelay>
    }
  }

  return (stat);
 8004682:	68fb      	ldr	r3, [r7, #12]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004698:	f3ef 8305 	mrs	r3, IPSR
 800469c:	60bb      	str	r3, [r7, #8]
  return(result);
 800469e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d174      	bne.n	800478e <osMutexNew+0x102>
    if (attr != NULL) {
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <osMutexNew+0x26>
      type = attr->attr_bits;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e001      	b.n	80046b6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <osMutexNew+0x3a>
      rmtx = 1U;
 80046c0:	2301      	movs	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e001      	b.n	80046ca <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80046c6:	2300      	movs	r3, #0
 80046c8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d15c      	bne.n	800478e <osMutexNew+0x102>
      mem = -1;
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d015      	beq.n	800470c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d006      	beq.n	80046f6 <osMutexNew+0x6a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	2b4f      	cmp	r3, #79	@ 0x4f
 80046ee:	d902      	bls.n	80046f6 <osMutexNew+0x6a>
          mem = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	613b      	str	r3, [r7, #16]
 80046f4:	e00c      	b.n	8004710 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d108      	bne.n	8004710 <osMutexNew+0x84>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d104      	bne.n	8004710 <osMutexNew+0x84>
            mem = 0;
 8004706:	2300      	movs	r3, #0
 8004708:	613b      	str	r3, [r7, #16]
 800470a:	e001      	b.n	8004710 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d112      	bne.n	800473c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d007      	beq.n	800472c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	4619      	mov	r1, r3
 8004722:	2004      	movs	r0, #4
 8004724:	f000 fdd9 	bl	80052da <xQueueCreateMutexStatic>
 8004728:	61f8      	str	r0, [r7, #28]
 800472a:	e016      	b.n	800475a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	4619      	mov	r1, r3
 8004732:	2001      	movs	r0, #1
 8004734:	f000 fdd1 	bl	80052da <xQueueCreateMutexStatic>
 8004738:	61f8      	str	r0, [r7, #28]
 800473a:	e00e      	b.n	800475a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10b      	bne.n	800475a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d004      	beq.n	8004752 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004748:	2004      	movs	r0, #4
 800474a:	f000 fdae 	bl	80052aa <xQueueCreateMutex>
 800474e:	61f8      	str	r0, [r7, #28]
 8004750:	e003      	b.n	800475a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004752:	2001      	movs	r0, #1
 8004754:	f000 fda9 	bl	80052aa <xQueueCreateMutex>
 8004758:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00c      	beq.n	800477a <osMutexNew+0xee>
        if (attr != NULL) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <osMutexNew+0xe2>
          name = attr->name;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	e001      	b.n	8004772 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004772:	68f9      	ldr	r1, [r7, #12]
 8004774:	69f8      	ldr	r0, [r7, #28]
 8004776:	f001 fcd3 	bl	8006120 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d006      	beq.n	800478e <osMutexNew+0x102>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	f043 0301 	orr.w	r3, r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800478e:	69fb      	ldr	r3, [r7, #28]
}
 8004790:	4618      	mov	r0, r3
 8004792:	3720      	adds	r7, #32
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f023 0301 	bic.w	r3, r3, #1
 80047a8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b6:	f3ef 8305 	mrs	r3, IPSR
 80047ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80047bc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <osMutexAcquire+0x32>
    stat = osErrorISR;
 80047c2:	f06f 0305 	mvn.w	r3, #5
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e02c      	b.n	8004824 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d103      	bne.n	80047d8 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80047d0:	f06f 0303 	mvn.w	r3, #3
 80047d4:	617b      	str	r3, [r7, #20]
 80047d6:	e025      	b.n	8004824 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d011      	beq.n	8004802 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	6938      	ldr	r0, [r7, #16]
 80047e2:	f000 fdca 	bl	800537a <xQueueTakeMutexRecursive>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d01b      	beq.n	8004824 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80047f2:	f06f 0301 	mvn.w	r3, #1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	e014      	b.n	8004824 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80047fa:	f06f 0302 	mvn.w	r3, #2
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	e010      	b.n	8004824 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004802:	6839      	ldr	r1, [r7, #0]
 8004804:	6938      	ldr	r0, [r7, #16]
 8004806:	f001 f96f 	bl	8005ae8 <xQueueSemaphoreTake>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d009      	beq.n	8004824 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004816:	f06f 0301 	mvn.w	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e002      	b.n	8004824 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800481e:	f06f 0302 	mvn.w	r3, #2
 8004822:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8004824:	697b      	ldr	r3, [r7, #20]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f003 0301 	and.w	r3, r3, #1
 8004844:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004846:	2300      	movs	r3, #0
 8004848:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800484a:	f3ef 8305 	mrs	r3, IPSR
 800484e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004850:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <osMutexRelease+0x30>
    stat = osErrorISR;
 8004856:	f06f 0305 	mvn.w	r3, #5
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e01f      	b.n	800489e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d103      	bne.n	800486c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8004864:	f06f 0303 	mvn.w	r3, #3
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e018      	b.n	800489e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f000 fd4c 	bl	8005310 <xQueueGiveMutexRecursive>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d00f      	beq.n	800489e <osMutexRelease+0x70>
        stat = osErrorResource;
 800487e:	f06f 0302 	mvn.w	r3, #2
 8004882:	617b      	str	r3, [r7, #20]
 8004884:	e00b      	b.n	800489e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004886:	2300      	movs	r3, #0
 8004888:	2200      	movs	r2, #0
 800488a:	2100      	movs	r1, #0
 800488c:	6938      	ldr	r0, [r7, #16]
 800488e:	f000 fe19 	bl	80054c4 <xQueueGenericSend>
 8004892:	4603      	mov	r3, r0
 8004894:	2b01      	cmp	r3, #1
 8004896:	d002      	beq.n	800489e <osMutexRelease+0x70>
        stat = osErrorResource;
 8004898:	f06f 0302 	mvn.w	r3, #2
 800489c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800489e:	697b      	ldr	r3, [r7, #20]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	@ 0x28
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048b8:	f3ef 8305 	mrs	r3, IPSR
 80048bc:	613b      	str	r3, [r7, #16]
  return(result);
 80048be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d175      	bne.n	80049b0 <osSemaphoreNew+0x108>
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d072      	beq.n	80049b0 <osSemaphoreNew+0x108>
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d86e      	bhi.n	80049b0 <osSemaphoreNew+0x108>
    mem = -1;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295
 80048d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d015      	beq.n	800490a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d006      	beq.n	80048f4 <osSemaphoreNew+0x4c>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80048ec:	d902      	bls.n	80048f4 <osSemaphoreNew+0x4c>
        mem = 1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	61bb      	str	r3, [r7, #24]
 80048f2:	e00c      	b.n	800490e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d108      	bne.n	800490e <osSemaphoreNew+0x66>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d104      	bne.n	800490e <osSemaphoreNew+0x66>
          mem = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e001      	b.n	800490e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004914:	d04c      	beq.n	80049b0 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d128      	bne.n	800496e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d10a      	bne.n	8004938 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2203      	movs	r2, #3
 8004928:	9200      	str	r2, [sp, #0]
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2001      	movs	r0, #1
 8004930:	f000 fbc6 	bl	80050c0 <xQueueGenericCreateStatic>
 8004934:	61f8      	str	r0, [r7, #28]
 8004936:	e005      	b.n	8004944 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8004938:	2203      	movs	r2, #3
 800493a:	2100      	movs	r1, #0
 800493c:	2001      	movs	r0, #1
 800493e:	f000 fc3c 	bl	80051ba <xQueueGenericCreate>
 8004942:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d022      	beq.n	8004990 <osSemaphoreNew+0xe8>
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d01f      	beq.n	8004990 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004950:	2300      	movs	r3, #0
 8004952:	2200      	movs	r2, #0
 8004954:	2100      	movs	r1, #0
 8004956:	69f8      	ldr	r0, [r7, #28]
 8004958:	f000 fdb4 	bl	80054c4 <xQueueGenericSend>
 800495c:	4603      	mov	r3, r0
 800495e:	2b01      	cmp	r3, #1
 8004960:	d016      	beq.n	8004990 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004962:	69f8      	ldr	r0, [r7, #28]
 8004964:	f001 fa90 	bl	8005e88 <vQueueDelete>
            hSemaphore = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	e010      	b.n	8004990 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d108      	bne.n	8004986 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	461a      	mov	r2, r3
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	68f8      	ldr	r0, [r7, #12]
 800497e:	f000 fd33 	bl	80053e8 <xQueueCreateCountingSemaphoreStatic>
 8004982:	61f8      	str	r0, [r7, #28]
 8004984:	e004      	b.n	8004990 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004986:	68b9      	ldr	r1, [r7, #8]
 8004988:	68f8      	ldr	r0, [r7, #12]
 800498a:	f000 fd66 	bl	800545a <xQueueCreateCountingSemaphore>
 800498e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00c      	beq.n	80049b0 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e001      	b.n	80049a8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80049a8:	6979      	ldr	r1, [r7, #20]
 80049aa:	69f8      	ldr	r0, [r7, #28]
 80049ac:	f001 fbb8 	bl	8006120 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80049b0:	69fb      	ldr	r3, [r7, #28]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3720      	adds	r7, #32
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d103      	bne.n	80049dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80049d4:	f06f 0303 	mvn.w	r3, #3
 80049d8:	617b      	str	r3, [r7, #20]
 80049da:	e039      	b.n	8004a50 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049dc:	f3ef 8305 	mrs	r3, IPSR
 80049e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d022      	beq.n	8004a2e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80049ee:	f06f 0303 	mvn.w	r3, #3
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	e02c      	b.n	8004a50 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80049f6:	2300      	movs	r3, #0
 80049f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80049fa:	f107 0308 	add.w	r3, r7, #8
 80049fe:	461a      	mov	r2, r3
 8004a00:	2100      	movs	r1, #0
 8004a02:	6938      	ldr	r0, [r7, #16]
 8004a04:	f001 f980 	bl	8005d08 <xQueueReceiveFromISR>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d003      	beq.n	8004a16 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004a0e:	f06f 0302 	mvn.w	r3, #2
 8004a12:	617b      	str	r3, [r7, #20]
 8004a14:	e01c      	b.n	8004a50 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d019      	beq.n	8004a50 <osSemaphoreAcquire+0x94>
 8004a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004a5c <osSemaphoreAcquire+0xa0>)
 8004a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	e010      	b.n	8004a50 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004a2e:	6839      	ldr	r1, [r7, #0]
 8004a30:	6938      	ldr	r0, [r7, #16]
 8004a32:	f001 f859 	bl	8005ae8 <xQueueSemaphoreTake>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d009      	beq.n	8004a50 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004a42:	f06f 0301 	mvn.w	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	e002      	b.n	8004a50 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004a4a:	f06f 0302 	mvn.w	r3, #2
 8004a4e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004a50:	697b      	ldr	r3, [r7, #20]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d103      	bne.n	8004a7e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004a76:	f06f 0303 	mvn.w	r3, #3
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	e02c      	b.n	8004ad8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a7e:	f3ef 8305 	mrs	r3, IPSR
 8004a82:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a84:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d01a      	beq.n	8004ac0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4619      	mov	r1, r3
 8004a94:	6938      	ldr	r0, [r7, #16]
 8004a96:	f000 feb5 	bl	8005804 <xQueueGiveFromISR>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d003      	beq.n	8004aa8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004aa0:	f06f 0302 	mvn.w	r3, #2
 8004aa4:	617b      	str	r3, [r7, #20]
 8004aa6:	e017      	b.n	8004ad8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d014      	beq.n	8004ad8 <osSemaphoreRelease+0x78>
 8004aae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae4 <osSemaphoreRelease+0x84>)
 8004ab0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	e00b      	b.n	8004ad8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	6938      	ldr	r0, [r7, #16]
 8004ac8:	f000 fcfc 	bl	80054c4 <xQueueGenericSend>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d002      	beq.n	8004ad8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004ad2:	f06f 0302 	mvn.w	r3, #2
 8004ad6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004ad8:	697b      	ldr	r3, [r7, #20]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af4:	f3ef 8305 	mrs	r3, IPSR
 8004af8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004afa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8004b00:	f06f 0305 	mvn.w	r3, #5
 8004b04:	617b      	str	r3, [r7, #20]
 8004b06:	e00e      	b.n	8004b26 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8004b0e:	f06f 0303 	mvn.w	r3, #3
 8004b12:	617b      	str	r3, [r7, #20]
 8004b14:	e007      	b.n	8004b26 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8004b16:	6938      	ldr	r0, [r7, #16]
 8004b18:	f001 fb2c 	bl	8006174 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8004b20:	6938      	ldr	r0, [r7, #16]
 8004b22:	f001 f9b1 	bl	8005e88 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004b26:	697b      	ldr	r3, [r7, #20]
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b08a      	sub	sp, #40	@ 0x28
 8004b34:	af02      	add	r7, sp, #8
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b40:	f3ef 8305 	mrs	r3, IPSR
 8004b44:	613b      	str	r3, [r7, #16]
  return(result);
 8004b46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d15f      	bne.n	8004c0c <osMessageQueueNew+0xdc>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d05c      	beq.n	8004c0c <osMessageQueueNew+0xdc>
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d059      	beq.n	8004c0c <osMessageQueueNew+0xdc>
    mem = -1;
 8004b58:	f04f 33ff 	mov.w	r3, #4294967295
 8004b5c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d029      	beq.n	8004bb8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d012      	beq.n	8004b92 <osMessageQueueNew+0x62>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	2b4f      	cmp	r3, #79	@ 0x4f
 8004b72:	d90e      	bls.n	8004b92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00a      	beq.n	8004b92 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d302      	bcc.n	8004b92 <osMessageQueueNew+0x62>
        mem = 1;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e014      	b.n	8004bbc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d110      	bne.n	8004bbc <osMessageQueueNew+0x8c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10c      	bne.n	8004bbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d104      	bne.n	8004bbc <osMessageQueueNew+0x8c>
          mem = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	e001      	b.n	8004bbc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d10b      	bne.n	8004bda <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	9100      	str	r1, [sp, #0]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 fa75 	bl	80050c0 <xQueueGenericCreateStatic>
 8004bd6:	61f8      	str	r0, [r7, #28]
 8004bd8:	e008      	b.n	8004bec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004be0:	2200      	movs	r2, #0
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fae8 	bl	80051ba <xQueueGenericCreate>
 8004bea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00c      	beq.n	8004c0c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	617b      	str	r3, [r7, #20]
 8004bfe:	e001      	b.n	8004c04 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004c04:	6979      	ldr	r1, [r7, #20]
 8004c06:	69f8      	ldr	r0, [r7, #28]
 8004c08:	f001 fa8a 	bl	8006120 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004c0c:	69fb      	ldr	r3, [r7, #28]
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3720      	adds	r7, #32
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}
	...

08004c18 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b088      	sub	sp, #32
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	603b      	str	r3, [r7, #0]
 8004c24:	4613      	mov	r3, r2
 8004c26:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c30:	f3ef 8305 	mrs	r3, IPSR
 8004c34:	617b      	str	r3, [r7, #20]
  return(result);
 8004c36:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d028      	beq.n	8004c8e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <osMessageQueuePut+0x36>
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d002      	beq.n	8004c4e <osMessageQueuePut+0x36>
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004c4e:	f06f 0303 	mvn.w	r3, #3
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e038      	b.n	8004cc8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004c5a:	f107 0210 	add.w	r2, r7, #16
 8004c5e:	2300      	movs	r3, #0
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	69b8      	ldr	r0, [r7, #24]
 8004c64:	f000 fd30 	bl	80056c8 <xQueueGenericSendFromISR>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d003      	beq.n	8004c76 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004c6e:	f06f 0302 	mvn.w	r3, #2
 8004c72:	61fb      	str	r3, [r7, #28]
 8004c74:	e028      	b.n	8004cc8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d025      	beq.n	8004cc8 <osMessageQueuePut+0xb0>
 8004c7c:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <osMessageQueuePut+0xbc>)
 8004c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	f3bf 8f4f 	dsb	sy
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	e01c      	b.n	8004cc8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d002      	beq.n	8004c9a <osMessageQueuePut+0x82>
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d103      	bne.n	8004ca2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8004c9a:	f06f 0303 	mvn.w	r3, #3
 8004c9e:	61fb      	str	r3, [r7, #28]
 8004ca0:	e012      	b.n	8004cc8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	68b9      	ldr	r1, [r7, #8]
 8004ca8:	69b8      	ldr	r0, [r7, #24]
 8004caa:	f000 fc0b 	bl	80054c4 <xQueueGenericSend>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d009      	beq.n	8004cc8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8004cba:	f06f 0301 	mvn.w	r3, #1
 8004cbe:	61fb      	str	r3, [r7, #28]
 8004cc0:	e002      	b.n	8004cc8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8004cc2:	f06f 0302 	mvn.w	r3, #2
 8004cc6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004cc8:	69fb      	ldr	r3, [r7, #28]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	e000ed04 	.word	0xe000ed04

08004cd8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cee:	f3ef 8305 	mrs	r3, IPSR
 8004cf2:	617b      	str	r3, [r7, #20]
  return(result);
 8004cf4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d028      	beq.n	8004d4c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d005      	beq.n	8004d0c <osMessageQueueGet+0x34>
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <osMessageQueueGet+0x34>
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004d0c:	f06f 0303 	mvn.w	r3, #3
 8004d10:	61fb      	str	r3, [r7, #28]
 8004d12:	e037      	b.n	8004d84 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	68b9      	ldr	r1, [r7, #8]
 8004d20:	69b8      	ldr	r0, [r7, #24]
 8004d22:	f000 fff1 	bl	8005d08 <xQueueReceiveFromISR>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d003      	beq.n	8004d34 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004d2c:	f06f 0302 	mvn.w	r3, #2
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	e027      	b.n	8004d84 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d024      	beq.n	8004d84 <osMessageQueueGet+0xac>
 8004d3a:	4b15      	ldr	r3, [pc, #84]	@ (8004d90 <osMessageQueueGet+0xb8>)
 8004d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	e01b      	b.n	8004d84 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <osMessageQueueGet+0x80>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d103      	bne.n	8004d60 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004d58:	f06f 0303 	mvn.w	r3, #3
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	e011      	b.n	8004d84 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004d60:	683a      	ldr	r2, [r7, #0]
 8004d62:	68b9      	ldr	r1, [r7, #8]
 8004d64:	69b8      	ldr	r0, [r7, #24]
 8004d66:	f000 fddd 	bl	8005924 <xQueueReceive>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d009      	beq.n	8004d84 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004d76:	f06f 0301 	mvn.w	r3, #1
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e002      	b.n	8004d84 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004d7e:	f06f 0302 	mvn.w	r3, #2
 8004d82:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004d84:	69fb      	ldr	r3, [r7, #28]
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3720      	adds	r7, #32
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
 8004d8e:	bf00      	nop
 8004d90:	e000ed04 	.word	0xe000ed04

08004d94 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d102      	bne.n	8004dac <osMessageQueueGetCount+0x18>
    count = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
 8004daa:	e00e      	b.n	8004dca <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dac:	f3ef 8305 	mrs	r3, IPSR
 8004db0:	60fb      	str	r3, [r7, #12]
  return(result);
 8004db2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 8004db8:	6938      	ldr	r0, [r7, #16]
 8004dba:	f001 f846 	bl	8005e4a <uxQueueMessagesWaitingFromISR>
 8004dbe:	6178      	str	r0, [r7, #20]
 8004dc0:	e003      	b.n	8004dca <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 8004dc2:	6938      	ldr	r0, [r7, #16]
 8004dc4:	f001 f822 	bl	8005e0c <uxQueueMessagesWaiting>
 8004dc8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8004dca:	697b      	ldr	r3, [r7, #20]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3718      	adds	r7, #24
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004de0:	f3ef 8305 	mrs	r3, IPSR
 8004de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8004de6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8004dec:	f06f 0305 	mvn.w	r3, #5
 8004df0:	617b      	str	r3, [r7, #20]
 8004df2:	e00e      	b.n	8004e12 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8004dfa:	f06f 0303 	mvn.w	r3, #3
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e007      	b.n	8004e12 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8004e02:	6938      	ldr	r0, [r7, #16]
 8004e04:	f001 f9b6 	bl	8006174 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8004e0c:	6938      	ldr	r0, [r7, #16]
 8004e0e:	f001 f83b 	bl	8005e88 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8004e12:	697b      	ldr	r3, [r7, #20]
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	3718      	adds	r7, #24
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004e1c:	b480      	push	{r7}
 8004e1e:	b085      	sub	sp, #20
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	4a07      	ldr	r2, [pc, #28]	@ (8004e48 <vApplicationGetIdleTaskMemory+0x2c>)
 8004e2c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	4a06      	ldr	r2, [pc, #24]	@ (8004e4c <vApplicationGetIdleTaskMemory+0x30>)
 8004e32:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e3a:	601a      	str	r2, [r3, #0]
}
 8004e3c:	bf00      	nop
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr
 8004e48:	2000358c 	.word	0x2000358c
 8004e4c:	200035e8 	.word	0x200035e8

08004e50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4a07      	ldr	r2, [pc, #28]	@ (8004e7c <vApplicationGetTimerTaskMemory+0x2c>)
 8004e60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4a06      	ldr	r2, [pc, #24]	@ (8004e80 <vApplicationGetTimerTaskMemory+0x30>)
 8004e66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e6e:	601a      	str	r2, [r3, #0]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	200039e8 	.word	0x200039e8
 8004e80:	20003a44 	.word	0x20003a44

08004e84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f103 0208 	add.w	r2, r3, #8
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f04f 32ff 	mov.w	r2, #4294967295
 8004e9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f103 0208 	add.w	r2, r3, #8
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f103 0208 	add.w	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004eb8:	bf00      	nop
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004ed2:	bf00      	nop
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	601a      	str	r2, [r3, #0]
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr

08004f26 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004f26:	b480      	push	{r7}
 8004f28:	b085      	sub	sp, #20
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3c:	d103      	bne.n	8004f46 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	e00c      	b.n	8004f60 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3308      	adds	r3, #8
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	e002      	b.n	8004f54 <vListInsert+0x2e>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d2f6      	bcs.n	8004f4e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	601a      	str	r2, [r3, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6892      	ldr	r2, [r2, #8]
 8004fae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	6852      	ldr	r2, [r2, #4]
 8004fb8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d103      	bne.n	8004fcc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689a      	ldr	r2, [r3, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	1e5a      	subs	r2, r3, #1
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr

08004fec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005018:	f002 fe9e 	bl	8007d58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005024:	68f9      	ldr	r1, [r7, #12]
 8005026:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005028:	fb01 f303 	mul.w	r3, r1, r3
 800502c:	441a      	add	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	3b01      	subs	r3, #1
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	441a      	add	r2, r3
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	22ff      	movs	r2, #255	@ 0xff
 800505c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	22ff      	movs	r2, #255	@ 0xff
 8005064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d114      	bne.n	8005098 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d01a      	beq.n	80050ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3310      	adds	r3, #16
 800507a:	4618      	mov	r0, r3
 800507c:	f001 fe30 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d012      	beq.n	80050ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005086:	4b0d      	ldr	r3, [pc, #52]	@ (80050bc <xQueueGenericReset+0xd0>)
 8005088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	e009      	b.n	80050ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3310      	adds	r3, #16
 800509c:	4618      	mov	r0, r3
 800509e:	f7ff fef1 	bl	8004e84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	3324      	adds	r3, #36	@ 0x24
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7ff feec 	bl	8004e84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050ac:	f002 fe86 	bl	8007dbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	e000ed04 	.word	0xe000ed04

080050c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b08e      	sub	sp, #56	@ 0x38
 80050c4:	af02      	add	r7, sp, #8
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	607a      	str	r2, [r7, #4]
 80050cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d10b      	bne.n	80050ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80050d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d8:	f383 8811 	msr	BASEPRI, r3
 80050dc:	f3bf 8f6f 	isb	sy
 80050e0:	f3bf 8f4f 	dsb	sy
 80050e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050e6:	bf00      	nop
 80050e8:	bf00      	nop
 80050ea:	e7fd      	b.n	80050e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10b      	bne.n	800510a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	e7fd      	b.n	8005106 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <xQueueGenericCreateStatic+0x56>
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <xQueueGenericCreateStatic+0x5a>
 8005116:	2301      	movs	r3, #1
 8005118:	e000      	b.n	800511c <xQueueGenericCreateStatic+0x5c>
 800511a:	2300      	movs	r3, #0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d10b      	bne.n	8005138 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	623b      	str	r3, [r7, #32]
}
 8005132:	bf00      	nop
 8005134:	bf00      	nop
 8005136:	e7fd      	b.n	8005134 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d102      	bne.n	8005144 <xQueueGenericCreateStatic+0x84>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <xQueueGenericCreateStatic+0x88>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <xQueueGenericCreateStatic+0x8a>
 8005148:	2300      	movs	r3, #0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10b      	bne.n	8005166 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	61fb      	str	r3, [r7, #28]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005166:	2350      	movs	r3, #80	@ 0x50
 8005168:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2b50      	cmp	r3, #80	@ 0x50
 800516e:	d00b      	beq.n	8005188 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61bb      	str	r3, [r7, #24]
}
 8005182:	bf00      	nop
 8005184:	bf00      	nop
 8005186:	e7fd      	b.n	8005184 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005188:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800518e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00d      	beq.n	80051b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800519c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80051a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a2:	9300      	str	r3, [sp, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	68f8      	ldr	r0, [r7, #12]
 80051ac:	f000 f840 	bl	8005230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3730      	adds	r7, #48	@ 0x30
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b08a      	sub	sp, #40	@ 0x28
 80051be:	af02      	add	r7, sp, #8
 80051c0:	60f8      	str	r0, [r7, #12]
 80051c2:	60b9      	str	r1, [r7, #8]
 80051c4:	4613      	mov	r3, r2
 80051c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10b      	bne.n	80051e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80051ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d2:	f383 8811 	msr	BASEPRI, r3
 80051d6:	f3bf 8f6f 	isb	sy
 80051da:	f3bf 8f4f 	dsb	sy
 80051de:	613b      	str	r3, [r7, #16]
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop
 80051e4:	e7fd      	b.n	80051e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	fb02 f303 	mul.w	r3, r2, r3
 80051ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	3350      	adds	r3, #80	@ 0x50
 80051f4:	4618      	mov	r0, r3
 80051f6:	f002 fed1 	bl	8007f9c <pvPortMalloc>
 80051fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d011      	beq.n	8005226 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3350      	adds	r3, #80	@ 0x50
 800520a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005214:	79fa      	ldrb	r2, [r7, #7]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	4613      	mov	r3, r2
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	68b9      	ldr	r1, [r7, #8]
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f805 	bl	8005230 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005226:	69bb      	ldr	r3, [r7, #24]
	}
 8005228:	4618      	mov	r0, r3
 800522a:	3720      	adds	r7, #32
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
 800523c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d103      	bne.n	800524c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	e002      	b.n	8005252 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800525e:	2101      	movs	r1, #1
 8005260:	69b8      	ldr	r0, [r7, #24]
 8005262:	f7ff fec3 	bl	8004fec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005276:	b580      	push	{r7, lr}
 8005278:	b082      	sub	sp, #8
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00e      	beq.n	80052a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005296:	2300      	movs	r3, #0
 8005298:	2200      	movs	r2, #0
 800529a:	2100      	movs	r1, #0
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f911 	bl	80054c4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}

080052aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80052aa:	b580      	push	{r7, lr}
 80052ac:	b086      	sub	sp, #24
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	4603      	mov	r3, r0
 80052b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	2300      	movs	r3, #0
 80052ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80052bc:	79fb      	ldrb	r3, [r7, #7]
 80052be:	461a      	mov	r2, r3
 80052c0:	6939      	ldr	r1, [r7, #16]
 80052c2:	6978      	ldr	r0, [r7, #20]
 80052c4:	f7ff ff79 	bl	80051ba <xQueueGenericCreate>
 80052c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff ffd3 	bl	8005276 <prvInitialiseMutex>

		return xNewQueue;
 80052d0:	68fb      	ldr	r3, [r7, #12]
	}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3718      	adds	r7, #24
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b088      	sub	sp, #32
 80052de:	af02      	add	r7, sp, #8
 80052e0:	4603      	mov	r3, r0
 80052e2:	6039      	str	r1, [r7, #0]
 80052e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80052e6:	2301      	movs	r3, #1
 80052e8:	617b      	str	r3, [r7, #20]
 80052ea:	2300      	movs	r3, #0
 80052ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	9300      	str	r3, [sp, #0]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	2200      	movs	r2, #0
 80052f6:	6939      	ldr	r1, [r7, #16]
 80052f8:	6978      	ldr	r0, [r7, #20]
 80052fa:	f7ff fee1 	bl	80050c0 <xQueueGenericCreateStatic>
 80052fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff ffb8 	bl	8005276 <prvInitialiseMutex>

		return xNewQueue;
 8005306:	68fb      	ldr	r3, [r7, #12]
	}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}

08005310 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10b      	bne.n	800533a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005326:	f383 8811 	msr	BASEPRI, r3
 800532a:	f3bf 8f6f 	isb	sy
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	60fb      	str	r3, [r7, #12]
}
 8005334:	bf00      	nop
 8005336:	bf00      	nop
 8005338:	e7fd      	b.n	8005336 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	689c      	ldr	r4, [r3, #8]
 800533e:	f001 fe8f 	bl	8007060 <xTaskGetCurrentTaskHandle>
 8005342:	4603      	mov	r3, r0
 8005344:	429c      	cmp	r4, r3
 8005346:	d111      	bne.n	800536c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	1e5a      	subs	r2, r3, #1
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d105      	bne.n	8005366 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800535a:	2300      	movs	r3, #0
 800535c:	2200      	movs	r2, #0
 800535e:	2100      	movs	r1, #0
 8005360:	6938      	ldr	r0, [r7, #16]
 8005362:	f000 f8af 	bl	80054c4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005366:	2301      	movs	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e001      	b.n	8005370 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800536c:	2300      	movs	r3, #0
 800536e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005370:	697b      	ldr	r3, [r7, #20]
	}
 8005372:	4618      	mov	r0, r3
 8005374:	371c      	adds	r7, #28
 8005376:	46bd      	mov	sp, r7
 8005378:	bd90      	pop	{r4, r7, pc}

0800537a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800537a:	b590      	push	{r4, r7, lr}
 800537c:	b087      	sub	sp, #28
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10b      	bne.n	80053a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	689c      	ldr	r4, [r3, #8]
 80053aa:	f001 fe59 	bl	8007060 <xTaskGetCurrentTaskHandle>
 80053ae:	4603      	mov	r3, r0
 80053b0:	429c      	cmp	r4, r3
 80053b2:	d107      	bne.n	80053c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	1c5a      	adds	r2, r3, #1
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80053be:	2301      	movs	r3, #1
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e00c      	b.n	80053de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80053c4:	6839      	ldr	r1, [r7, #0]
 80053c6:	6938      	ldr	r0, [r7, #16]
 80053c8:	f000 fb8e 	bl	8005ae8 <xQueueSemaphoreTake>
 80053cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d004      	beq.n	80053de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80053de:	697b      	ldr	r3, [r7, #20]
	}
 80053e0:	4618      	mov	r0, r3
 80053e2:	371c      	adds	r7, #28
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd90      	pop	{r4, r7, pc}

080053e8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af02      	add	r7, sp, #8
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d10b      	bne.n	8005412 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 80053fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fe:	f383 8811 	msr	BASEPRI, r3
 8005402:	f3bf 8f6f 	isb	sy
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	61bb      	str	r3, [r7, #24]
}
 800540c:	bf00      	nop
 800540e:	bf00      	nop
 8005410:	e7fd      	b.n	800540e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005412:	68ba      	ldr	r2, [r7, #8]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	429a      	cmp	r2, r3
 8005418:	d90b      	bls.n	8005432 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	617b      	str	r3, [r7, #20]
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005432:	2302      	movs	r3, #2
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	2100      	movs	r1, #0
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f7ff fe3f 	bl	80050c0 <xQueueGenericCreateStatic>
 8005442:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005450:	69fb      	ldr	r3, [r7, #28]
	}
 8005452:	4618      	mov	r0, r3
 8005454:	3720      	adds	r7, #32
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800545a:	b580      	push	{r7, lr}
 800545c:	b086      	sub	sp, #24
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
 8005462:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d10b      	bne.n	8005482 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800546a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800546e:	f383 8811 	msr	BASEPRI, r3
 8005472:	f3bf 8f6f 	isb	sy
 8005476:	f3bf 8f4f 	dsb	sy
 800547a:	613b      	str	r3, [r7, #16]
}
 800547c:	bf00      	nop
 800547e:	bf00      	nop
 8005480:	e7fd      	b.n	800547e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d90b      	bls.n	80054a2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800548a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800548e:	f383 8811 	msr	BASEPRI, r3
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	f3bf 8f4f 	dsb	sy
 800549a:	60fb      	str	r3, [r7, #12]
}
 800549c:	bf00      	nop
 800549e:	bf00      	nop
 80054a0:	e7fd      	b.n	800549e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80054a2:	2202      	movs	r2, #2
 80054a4:	2100      	movs	r1, #0
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f7ff fe87 	bl	80051ba <xQueueGenericCreate>
 80054ac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	683a      	ldr	r2, [r7, #0]
 80054b8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80054ba:	697b      	ldr	r3, [r7, #20]
	}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08e      	sub	sp, #56	@ 0x38
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	60f8      	str	r0, [r7, #12]
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054d2:	2300      	movs	r3, #0
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80054da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10b      	bne.n	80054f8 <xQueueGenericSend+0x34>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80054f2:	bf00      	nop
 80054f4:	bf00      	nop
 80054f6:	e7fd      	b.n	80054f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <xQueueGenericSend+0x42>
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d101      	bne.n	800550a <xQueueGenericSend+0x46>
 8005506:	2301      	movs	r3, #1
 8005508:	e000      	b.n	800550c <xQueueGenericSend+0x48>
 800550a:	2300      	movs	r3, #0
 800550c:	2b00      	cmp	r3, #0
 800550e:	d10b      	bne.n	8005528 <xQueueGenericSend+0x64>
	__asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005522:	bf00      	nop
 8005524:	bf00      	nop
 8005526:	e7fd      	b.n	8005524 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	2b02      	cmp	r3, #2
 800552c:	d103      	bne.n	8005536 <xQueueGenericSend+0x72>
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005532:	2b01      	cmp	r3, #1
 8005534:	d101      	bne.n	800553a <xQueueGenericSend+0x76>
 8005536:	2301      	movs	r3, #1
 8005538:	e000      	b.n	800553c <xQueueGenericSend+0x78>
 800553a:	2300      	movs	r3, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <xQueueGenericSend+0x94>
	__asm volatile
 8005540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005544:	f383 8811 	msr	BASEPRI, r3
 8005548:	f3bf 8f6f 	isb	sy
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	623b      	str	r3, [r7, #32]
}
 8005552:	bf00      	nop
 8005554:	bf00      	nop
 8005556:	e7fd      	b.n	8005554 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005558:	f001 fd92 	bl	8007080 <xTaskGetSchedulerState>
 800555c:	4603      	mov	r3, r0
 800555e:	2b00      	cmp	r3, #0
 8005560:	d102      	bne.n	8005568 <xQueueGenericSend+0xa4>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <xQueueGenericSend+0xa8>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <xQueueGenericSend+0xaa>
 800556c:	2300      	movs	r3, #0
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10b      	bne.n	800558a <xQueueGenericSend+0xc6>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	61fb      	str	r3, [r7, #28]
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	e7fd      	b.n	8005586 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800558a:	f002 fbe5 	bl	8007d58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800558e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005590:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	429a      	cmp	r2, r3
 8005598:	d302      	bcc.n	80055a0 <xQueueGenericSend+0xdc>
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	2b02      	cmp	r3, #2
 800559e:	d129      	bne.n	80055f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	68b9      	ldr	r1, [r7, #8]
 80055a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80055a6:	f000 fcab 	bl	8005f00 <prvCopyDataToQueue>
 80055aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d010      	beq.n	80055d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055b6:	3324      	adds	r3, #36	@ 0x24
 80055b8:	4618      	mov	r0, r3
 80055ba:	f001 fb91 	bl	8006ce0 <xTaskRemoveFromEventList>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d013      	beq.n	80055ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80055c4:	4b3f      	ldr	r3, [pc, #252]	@ (80056c4 <xQueueGenericSend+0x200>)
 80055c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055ca:	601a      	str	r2, [r3, #0]
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	e00a      	b.n	80055ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80055d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80055dc:	4b39      	ldr	r3, [pc, #228]	@ (80056c4 <xQueueGenericSend+0x200>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80055ec:	f002 fbe6 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e063      	b.n	80056bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d103      	bne.n	8005602 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80055fa:	f002 fbdf 	bl	8007dbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	e05c      	b.n	80056bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005604:	2b00      	cmp	r3, #0
 8005606:	d106      	bne.n	8005616 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005608:	f107 0314 	add.w	r3, r7, #20
 800560c:	4618      	mov	r0, r3
 800560e:	f001 fbcb 	bl	8006da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005612:	2301      	movs	r3, #1
 8005614:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005616:	f002 fbd1 	bl	8007dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800561a:	f001 f929 	bl	8006870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800561e:	f002 fb9b 	bl	8007d58 <vPortEnterCritical>
 8005622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005624:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005628:	b25b      	sxtb	r3, r3
 800562a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800562e:	d103      	bne.n	8005638 <xQueueGenericSend+0x174>
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	2200      	movs	r2, #0
 8005634:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800563e:	b25b      	sxtb	r3, r3
 8005640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005644:	d103      	bne.n	800564e <xQueueGenericSend+0x18a>
 8005646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005648:	2200      	movs	r2, #0
 800564a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800564e:	f002 fbb5 	bl	8007dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005652:	1d3a      	adds	r2, r7, #4
 8005654:	f107 0314 	add.w	r3, r7, #20
 8005658:	4611      	mov	r1, r2
 800565a:	4618      	mov	r0, r3
 800565c:	f001 fbba 	bl	8006dd4 <xTaskCheckForTimeOut>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d124      	bne.n	80056b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005666:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005668:	f000 fd42 	bl	80060f0 <prvIsQueueFull>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d018      	beq.n	80056a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005674:	3310      	adds	r3, #16
 8005676:	687a      	ldr	r2, [r7, #4]
 8005678:	4611      	mov	r1, r2
 800567a:	4618      	mov	r0, r3
 800567c:	f001 fade 	bl	8006c3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005680:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005682:	f000 fccd 	bl	8006020 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005686:	f001 f901 	bl	800688c <xTaskResumeAll>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	f47f af7c 	bne.w	800558a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005692:	4b0c      	ldr	r3, [pc, #48]	@ (80056c4 <xQueueGenericSend+0x200>)
 8005694:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	e772      	b.n	800558a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80056a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056a6:	f000 fcbb 	bl	8006020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056aa:	f001 f8ef 	bl	800688c <xTaskResumeAll>
 80056ae:	e76c      	b.n	800558a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80056b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80056b2:	f000 fcb5 	bl	8006020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056b6:	f001 f8e9 	bl	800688c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80056ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3738      	adds	r7, #56	@ 0x38
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b090      	sub	sp, #64	@ 0x40
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
 80056d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80056da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d103      	bne.n	8005706 <xQueueGenericSendFromISR+0x3e>
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <xQueueGenericSendFromISR+0x42>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <xQueueGenericSendFromISR+0x44>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	e7fd      	b.n	8005724 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2b02      	cmp	r3, #2
 800572c:	d103      	bne.n	8005736 <xQueueGenericSendFromISR+0x6e>
 800572e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <xQueueGenericSendFromISR+0x72>
 8005736:	2301      	movs	r3, #1
 8005738:	e000      	b.n	800573c <xQueueGenericSendFromISR+0x74>
 800573a:	2300      	movs	r3, #0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	623b      	str	r3, [r7, #32]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005758:	f002 fbde 	bl	8007f18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800575c:	f3ef 8211 	mrs	r2, BASEPRI
 8005760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005764:	f383 8811 	msr	BASEPRI, r3
 8005768:	f3bf 8f6f 	isb	sy
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	61fa      	str	r2, [r7, #28]
 8005772:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005774:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005776:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800577c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	429a      	cmp	r2, r3
 8005782:	d302      	bcc.n	800578a <xQueueGenericSendFromISR+0xc2>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d12f      	bne.n	80057ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800578a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005790:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	68b9      	ldr	r1, [r7, #8]
 800579e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057a0:	f000 fbae 	bl	8005f00 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80057a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80057a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ac:	d112      	bne.n	80057d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d016      	beq.n	80057e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	3324      	adds	r3, #36	@ 0x24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f001 fa90 	bl	8006ce0 <xTaskRemoveFromEventList>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00e      	beq.n	80057e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00b      	beq.n	80057e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e007      	b.n	80057e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80057d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80057d8:	3301      	adds	r3, #1
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	b25a      	sxtb	r2, r3
 80057de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80057e4:	2301      	movs	r3, #1
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80057e8:	e001      	b.n	80057ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80057f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3740      	adds	r7, #64	@ 0x40
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}

08005804 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08e      	sub	sp, #56	@ 0x38
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10b      	bne.n	8005830 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	623b      	str	r3, [r7, #32]
}
 800582a:	bf00      	nop
 800582c:	bf00      	nop
 800582e:	e7fd      	b.n	800582c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d00b      	beq.n	8005850 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	61fb      	str	r3, [r7, #28]
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d103      	bne.n	8005860 <xQueueGiveFromISR+0x5c>
 8005858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d101      	bne.n	8005864 <xQueueGiveFromISR+0x60>
 8005860:	2301      	movs	r3, #1
 8005862:	e000      	b.n	8005866 <xQueueGiveFromISR+0x62>
 8005864:	2300      	movs	r3, #0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10b      	bne.n	8005882 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800586a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586e:	f383 8811 	msr	BASEPRI, r3
 8005872:	f3bf 8f6f 	isb	sy
 8005876:	f3bf 8f4f 	dsb	sy
 800587a:	61bb      	str	r3, [r7, #24]
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	e7fd      	b.n	800587e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005882:	f002 fb49 	bl	8007f18 <vPortValidateInterruptPriority>
	__asm volatile
 8005886:	f3ef 8211 	mrs	r2, BASEPRI
 800588a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588e:	f383 8811 	msr	BASEPRI, r3
 8005892:	f3bf 8f6f 	isb	sy
 8005896:	f3bf 8f4f 	dsb	sy
 800589a:	617a      	str	r2, [r7, #20]
 800589c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800589e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d22b      	bcs.n	800590a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	1c5a      	adds	r2, r3, #1
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80058c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058cc:	d112      	bne.n	80058f4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d016      	beq.n	8005904 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	3324      	adds	r3, #36	@ 0x24
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 fa00 	bl	8006ce0 <xTaskRemoveFromEventList>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d00e      	beq.n	8005904 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00b      	beq.n	8005904 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	2201      	movs	r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e007      	b.n	8005904 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058f8:	3301      	adds	r3, #1
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	b25a      	sxtb	r2, r3
 80058fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005904:	2301      	movs	r3, #1
 8005906:	637b      	str	r3, [r7, #52]	@ 0x34
 8005908:	e001      	b.n	800590e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800590a:	2300      	movs	r3, #0
 800590c:	637b      	str	r3, [r7, #52]	@ 0x34
 800590e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005910:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	f383 8811 	msr	BASEPRI, r3
}
 8005918:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800591a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800591c:	4618      	mov	r0, r3
 800591e:	3738      	adds	r7, #56	@ 0x38
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b08c      	sub	sp, #48	@ 0x30
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005930:	2300      	movs	r3, #0
 8005932:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10b      	bne.n	8005956 <xQueueReceive+0x32>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	623b      	str	r3, [r7, #32]
}
 8005950:	bf00      	nop
 8005952:	bf00      	nop
 8005954:	e7fd      	b.n	8005952 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d103      	bne.n	8005964 <xQueueReceive+0x40>
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <xQueueReceive+0x44>
 8005964:	2301      	movs	r3, #1
 8005966:	e000      	b.n	800596a <xQueueReceive+0x46>
 8005968:	2300      	movs	r3, #0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10b      	bne.n	8005986 <xQueueReceive+0x62>
	__asm volatile
 800596e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005972:	f383 8811 	msr	BASEPRI, r3
 8005976:	f3bf 8f6f 	isb	sy
 800597a:	f3bf 8f4f 	dsb	sy
 800597e:	61fb      	str	r3, [r7, #28]
}
 8005980:	bf00      	nop
 8005982:	bf00      	nop
 8005984:	e7fd      	b.n	8005982 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005986:	f001 fb7b 	bl	8007080 <xTaskGetSchedulerState>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d102      	bne.n	8005996 <xQueueReceive+0x72>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <xQueueReceive+0x76>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <xQueueReceive+0x78>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d10b      	bne.n	80059b8 <xQueueReceive+0x94>
	__asm volatile
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	61bb      	str	r3, [r7, #24]
}
 80059b2:	bf00      	nop
 80059b4:	bf00      	nop
 80059b6:	e7fd      	b.n	80059b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80059b8:	f002 f9ce 	bl	8007d58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d01f      	beq.n	8005a08 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80059c8:	68b9      	ldr	r1, [r7, #8]
 80059ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80059cc:	f000 fb02 	bl	8005fd4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	1e5a      	subs	r2, r3, #1
 80059d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00f      	beq.n	8005a00 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059e2:	3310      	adds	r3, #16
 80059e4:	4618      	mov	r0, r3
 80059e6:	f001 f97b 	bl	8006ce0 <xTaskRemoveFromEventList>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d007      	beq.n	8005a00 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059f0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ae4 <xQueueReceive+0x1c0>)
 80059f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005a00:	f002 f9dc 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e069      	b.n	8005adc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d103      	bne.n	8005a16 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005a0e:	f002 f9d5 	bl	8007dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e062      	b.n	8005adc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d106      	bne.n	8005a2a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005a1c:	f107 0310 	add.w	r3, r7, #16
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 f9c1 	bl	8006da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005a26:	2301      	movs	r3, #1
 8005a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005a2a:	f002 f9c7 	bl	8007dbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005a2e:	f000 ff1f 	bl	8006870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005a32:	f002 f991 	bl	8007d58 <vPortEnterCritical>
 8005a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a3c:	b25b      	sxtb	r3, r3
 8005a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a42:	d103      	bne.n	8005a4c <xQueueReceive+0x128>
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a52:	b25b      	sxtb	r3, r3
 8005a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a58:	d103      	bne.n	8005a62 <xQueueReceive+0x13e>
 8005a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a62:	f002 f9ab 	bl	8007dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a66:	1d3a      	adds	r2, r7, #4
 8005a68:	f107 0310 	add.w	r3, r7, #16
 8005a6c:	4611      	mov	r1, r2
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 f9b0 	bl	8006dd4 <xTaskCheckForTimeOut>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d123      	bne.n	8005ac2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a7c:	f000 fb22 	bl	80060c4 <prvIsQueueEmpty>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d017      	beq.n	8005ab6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a88:	3324      	adds	r3, #36	@ 0x24
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f001 f8d4 	bl	8006c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a96:	f000 fac3 	bl	8006020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a9a:	f000 fef7 	bl	800688c <xTaskResumeAll>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d189      	bne.n	80059b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8005ae4 <xQueueReceive+0x1c0>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	e780      	b.n	80059b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ab6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ab8:	f000 fab2 	bl	8006020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005abc:	f000 fee6 	bl	800688c <xTaskResumeAll>
 8005ac0:	e77a      	b.n	80059b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ac4:	f000 faac 	bl	8006020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ac8:	f000 fee0 	bl	800688c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005acc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ace:	f000 faf9 	bl	80060c4 <prvIsQueueEmpty>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f43f af6f 	beq.w	80059b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ada:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3730      	adds	r7, #48	@ 0x30
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	e000ed04 	.word	0xe000ed04

08005ae8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b08e      	sub	sp, #56	@ 0x38
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005af2:	2300      	movs	r3, #0
 8005af4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005afa:	2300      	movs	r3, #0
 8005afc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	623b      	str	r3, [r7, #32]
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8005b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b28:	f383 8811 	msr	BASEPRI, r3
 8005b2c:	f3bf 8f6f 	isb	sy
 8005b30:	f3bf 8f4f 	dsb	sy
 8005b34:	61fb      	str	r3, [r7, #28]
}
 8005b36:	bf00      	nop
 8005b38:	bf00      	nop
 8005b3a:	e7fd      	b.n	8005b38 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b3c:	f001 faa0 	bl	8007080 <xTaskGetSchedulerState>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d102      	bne.n	8005b4c <xQueueSemaphoreTake+0x64>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <xQueueSemaphoreTake+0x68>
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e000      	b.n	8005b52 <xQueueSemaphoreTake+0x6a>
 8005b50:	2300      	movs	r3, #0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10b      	bne.n	8005b6e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b5a:	f383 8811 	msr	BASEPRI, r3
 8005b5e:	f3bf 8f6f 	isb	sy
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	61bb      	str	r3, [r7, #24]
}
 8005b68:	bf00      	nop
 8005b6a:	bf00      	nop
 8005b6c:	e7fd      	b.n	8005b6a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b6e:	f002 f8f3 	bl	8007d58 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d024      	beq.n	8005bc8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b84:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005b8e:	f001 fbf1 	bl	8007374 <pvTaskIncrementMutexHeldCount>
 8005b92:	4602      	mov	r2, r0
 8005b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b96:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	691b      	ldr	r3, [r3, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00f      	beq.n	8005bc0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba2:	3310      	adds	r3, #16
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f001 f89b 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d007      	beq.n	8005bc0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005bb0:	4b54      	ldr	r3, [pc, #336]	@ (8005d04 <xQueueSemaphoreTake+0x21c>)
 8005bb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bb6:	601a      	str	r2, [r3, #0]
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005bc0:	f002 f8fc 	bl	8007dbc <vPortExitCritical>
				return pdPASS;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e098      	b.n	8005cfa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d112      	bne.n	8005bf4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	617b      	str	r3, [r7, #20]
}
 8005be6:	bf00      	nop
 8005be8:	bf00      	nop
 8005bea:	e7fd      	b.n	8005be8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005bec:	f002 f8e6 	bl	8007dbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e082      	b.n	8005cfa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d106      	bne.n	8005c08 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bfa:	f107 030c 	add.w	r3, r7, #12
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f8d2 	bl	8006da8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c08:	f002 f8d8 	bl	8007dbc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c0c:	f000 fe30 	bl	8006870 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c10:	f002 f8a2 	bl	8007d58 <vPortEnterCritical>
 8005c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c16:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c1a:	b25b      	sxtb	r3, r3
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d103      	bne.n	8005c2a <xQueueSemaphoreTake+0x142>
 8005c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c30:	b25b      	sxtb	r3, r3
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d103      	bne.n	8005c40 <xQueueSemaphoreTake+0x158>
 8005c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c40:	f002 f8bc 	bl	8007dbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c44:	463a      	mov	r2, r7
 8005c46:	f107 030c 	add.w	r3, r7, #12
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 f8c1 	bl	8006dd4 <xTaskCheckForTimeOut>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d132      	bne.n	8005cbe <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c5a:	f000 fa33 	bl	80060c4 <prvIsQueueEmpty>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d026      	beq.n	8005cb2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d109      	bne.n	8005c80 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8005c6c:	f002 f874 	bl	8007d58 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 fa21 	bl	80070bc <xTaskPriorityInherit>
 8005c7a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8005c7c:	f002 f89e 	bl	8007dbc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	3324      	adds	r3, #36	@ 0x24
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	4611      	mov	r1, r2
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f000 ffd7 	bl	8006c3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005c8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c90:	f000 f9c6 	bl	8006020 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005c94:	f000 fdfa 	bl	800688c <xTaskResumeAll>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f47f af67 	bne.w	8005b6e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005ca0:	4b18      	ldr	r3, [pc, #96]	@ (8005d04 <xQueueSemaphoreTake+0x21c>)
 8005ca2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ca6:	601a      	str	r2, [r3, #0]
 8005ca8:	f3bf 8f4f 	dsb	sy
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	e75d      	b.n	8005b6e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005cb2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cb4:	f000 f9b4 	bl	8006020 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cb8:	f000 fde8 	bl	800688c <xTaskResumeAll>
 8005cbc:	e757      	b.n	8005b6e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005cbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cc0:	f000 f9ae 	bl	8006020 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cc4:	f000 fde2 	bl	800688c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005cca:	f000 f9fb 	bl	80060c4 <prvIsQueueEmpty>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f43f af4c 	beq.w	8005b6e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00d      	beq.n	8005cf8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8005cdc:	f002 f83c 	bl	8007d58 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005ce0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005ce2:	f000 f8f5 	bl	8005ed0 <prvGetDisinheritPriorityAfterTimeout>
 8005ce6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fabc 	bl	800726c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005cf4:	f002 f862 	bl	8007dbc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005cf8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3738      	adds	r7, #56	@ 0x38
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b08e      	sub	sp, #56	@ 0x38
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	623b      	str	r3, [r7, #32]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <xQueueReceiveFromISR+0x3c>
 8005d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <xQueueReceiveFromISR+0x40>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <xQueueReceiveFromISR+0x42>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	61fb      	str	r3, [r7, #28]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d66:	f002 f8d7 	bl	8007f18 <vPortValidateInterruptPriority>
	__asm volatile
 8005d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8005d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	61ba      	str	r2, [r7, #24]
 8005d80:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005d82:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d84:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d02f      	beq.n	8005df2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d9c:	68b9      	ldr	r1, [r7, #8]
 8005d9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005da0:	f000 f918 	bl	8005fd4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005da6:	1e5a      	subs	r2, r3, #1
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005dac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005db4:	d112      	bne.n	8005ddc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d016      	beq.n	8005dec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	3310      	adds	r3, #16
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 ff8c 	bl	8006ce0 <xTaskRemoveFromEventList>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d00e      	beq.n	8005dec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00b      	beq.n	8005dec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	e007      	b.n	8005dec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005de0:	3301      	adds	r3, #1
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	b25a      	sxtb	r2, r3
 8005de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005dec:	2301      	movs	r3, #1
 8005dee:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df0:	e001      	b.n	8005df6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005df2:	2300      	movs	r3, #0
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	f383 8811 	msr	BASEPRI, r3
}
 8005e00:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3738      	adds	r7, #56	@ 0x38
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10b      	bne.n	8005e32 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 8005e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1e:	f383 8811 	msr	BASEPRI, r3
 8005e22:	f3bf 8f6f 	isb	sy
 8005e26:	f3bf 8f4f 	dsb	sy
 8005e2a:	60bb      	str	r3, [r7, #8]
}
 8005e2c:	bf00      	nop
 8005e2e:	bf00      	nop
 8005e30:	e7fd      	b.n	8005e2e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005e32:	f001 ff91 	bl	8007d58 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005e3c:	f001 ffbe 	bl	8007dbc <vPortExitCritical>

	return uxReturn;
 8005e40:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d10b      	bne.n	8005e74 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8005e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e60:	f383 8811 	msr	BASEPRI, r3
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	60fb      	str	r3, [r7, #12]
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	e7fd      	b.n	8005e70 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e78:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005e7a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	371c      	adds	r7, #28
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <vQueueDelete+0x2a>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	60bb      	str	r3, [r7, #8]
}
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 f95e 	bl	8006174 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d102      	bne.n	8005ec8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f002 f938 	bl	8008138 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005ec8:	bf00      	nop
 8005eca:	3710      	adds	r7, #16
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b085      	sub	sp, #20
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d006      	beq.n	8005eee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8005eea:	60fb      	str	r3, [r7, #12]
 8005eec:	e001      	b.n	8005ef2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f14:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10d      	bne.n	8005f3a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d14d      	bne.n	8005fc2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 f92e 	bl	800718c <xTaskPriorityDisinherit>
 8005f30:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	609a      	str	r2, [r3, #8]
 8005f38:	e043      	b.n	8005fc2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d119      	bne.n	8005f74 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6858      	ldr	r0, [r3, #4]
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	f015 fdd3 	bl	801baf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685a      	ldr	r2, [r3, #4]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f58:	441a      	add	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	429a      	cmp	r2, r3
 8005f68:	d32b      	bcc.n	8005fc2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	e026      	b.n	8005fc2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	68d8      	ldr	r0, [r3, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68b9      	ldr	r1, [r7, #8]
 8005f80:	f015 fdb9 	bl	801baf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	68da      	ldr	r2, [r3, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	425b      	negs	r3, r3
 8005f8e:	441a      	add	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d207      	bcs.n	8005fb0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	689a      	ldr	r2, [r3, #8]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	425b      	negs	r3, r3
 8005faa:	441a      	add	r2, r3
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d105      	bne.n	8005fc2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005fca:	697b      	ldr	r3, [r7, #20]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d018      	beq.n	8006018 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	441a      	add	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	68da      	ldr	r2, [r3, #12]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d303      	bcc.n	8006008 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68d9      	ldr	r1, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	461a      	mov	r2, r3
 8006012:	6838      	ldr	r0, [r7, #0]
 8006014:	f015 fd6f 	bl	801baf6 <memcpy>
	}
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006028:	f001 fe96 	bl	8007d58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006032:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006034:	e011      	b.n	800605a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800603a:	2b00      	cmp	r3, #0
 800603c:	d012      	beq.n	8006064 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	3324      	adds	r3, #36	@ 0x24
 8006042:	4618      	mov	r0, r3
 8006044:	f000 fe4c 	bl	8006ce0 <xTaskRemoveFromEventList>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800604e:	f000 ff25 	bl	8006e9c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006052:	7bfb      	ldrb	r3, [r7, #15]
 8006054:	3b01      	subs	r3, #1
 8006056:	b2db      	uxtb	r3, r3
 8006058:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800605a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800605e:	2b00      	cmp	r3, #0
 8006060:	dce9      	bgt.n	8006036 <prvUnlockQueue+0x16>
 8006062:	e000      	b.n	8006066 <prvUnlockQueue+0x46>
					break;
 8006064:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	22ff      	movs	r2, #255	@ 0xff
 800606a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800606e:	f001 fea5 	bl	8007dbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006072:	f001 fe71 	bl	8007d58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800607c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800607e:	e011      	b.n	80060a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d012      	beq.n	80060ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	3310      	adds	r3, #16
 800608c:	4618      	mov	r0, r3
 800608e:	f000 fe27 	bl	8006ce0 <xTaskRemoveFromEventList>
 8006092:	4603      	mov	r3, r0
 8006094:	2b00      	cmp	r3, #0
 8006096:	d001      	beq.n	800609c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006098:	f000 ff00 	bl	8006e9c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800609c:	7bbb      	ldrb	r3, [r7, #14]
 800609e:	3b01      	subs	r3, #1
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	dce9      	bgt.n	8006080 <prvUnlockQueue+0x60>
 80060ac:	e000      	b.n	80060b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	22ff      	movs	r2, #255	@ 0xff
 80060b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80060b8:	f001 fe80 	bl	8007dbc <vPortExitCritical>
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b084      	sub	sp, #16
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060cc:	f001 fe44 	bl	8007d58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d102      	bne.n	80060de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e001      	b.n	80060e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060de:	2300      	movs	r3, #0
 80060e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060e2:	f001 fe6b 	bl	8007dbc <vPortExitCritical>

	return xReturn;
 80060e6:	68fb      	ldr	r3, [r7, #12]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060f8:	f001 fe2e 	bl	8007d58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006104:	429a      	cmp	r2, r3
 8006106:	d102      	bne.n	800610e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006108:	2301      	movs	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	e001      	b.n	8006112 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800610e:	2300      	movs	r3, #0
 8006110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006112:	f001 fe53 	bl	8007dbc <vPortExitCritical>

	return xReturn;
 8006116:	68fb      	ldr	r3, [r7, #12]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e014      	b.n	800615a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006130:	4a0f      	ldr	r2, [pc, #60]	@ (8006170 <vQueueAddToRegistry+0x50>)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10b      	bne.n	8006154 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800613c:	490c      	ldr	r1, [pc, #48]	@ (8006170 <vQueueAddToRegistry+0x50>)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006146:	4a0a      	ldr	r2, [pc, #40]	@ (8006170 <vQueueAddToRegistry+0x50>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	00db      	lsls	r3, r3, #3
 800614c:	4413      	add	r3, r2
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006152:	e006      	b.n	8006162 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2b07      	cmp	r3, #7
 800615e:	d9e7      	bls.n	8006130 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20004244 	.word	0x20004244

08006174 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800617c:	2300      	movs	r3, #0
 800617e:	60fb      	str	r3, [r7, #12]
 8006180:	e016      	b.n	80061b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006182:	4a10      	ldr	r2, [pc, #64]	@ (80061c4 <vQueueUnregisterQueue+0x50>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4413      	add	r3, r2
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	429a      	cmp	r2, r3
 8006190:	d10b      	bne.n	80061aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006192:	4a0c      	ldr	r2, [pc, #48]	@ (80061c4 <vQueueUnregisterQueue+0x50>)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2100      	movs	r1, #0
 8006198:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800619c:	4a09      	ldr	r2, [pc, #36]	@ (80061c4 <vQueueUnregisterQueue+0x50>)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	00db      	lsls	r3, r3, #3
 80061a2:	4413      	add	r3, r2
 80061a4:	2200      	movs	r2, #0
 80061a6:	605a      	str	r2, [r3, #4]
				break;
 80061a8:	e006      	b.n	80061b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2b07      	cmp	r3, #7
 80061b4:	d9e5      	bls.n	8006182 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	3714      	adds	r7, #20
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr
 80061c4:	20004244 	.word	0x20004244

080061c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80061d8:	f001 fdbe 	bl	8007d58 <vPortEnterCritical>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061e2:	b25b      	sxtb	r3, r3
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d103      	bne.n	80061f2 <vQueueWaitForMessageRestricted+0x2a>
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061f8:	b25b      	sxtb	r3, r3
 80061fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061fe:	d103      	bne.n	8006208 <vQueueWaitForMessageRestricted+0x40>
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	2200      	movs	r2, #0
 8006204:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006208:	f001 fdd8 	bl	8007dbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	2b00      	cmp	r3, #0
 8006212:	d106      	bne.n	8006222 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	3324      	adds	r3, #36	@ 0x24
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	68b9      	ldr	r1, [r7, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f000 fd33 	bl	8006c88 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006222:	6978      	ldr	r0, [r7, #20]
 8006224:	f7ff fefc 	bl	8006020 <prvUnlockQueue>
	}
 8006228:	bf00      	nop
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08e      	sub	sp, #56	@ 0x38
 8006234:	af04      	add	r7, sp, #16
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]
 800623c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800623e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
}
 8006256:	bf00      	nop
 8006258:	bf00      	nop
 800625a:	e7fd      	b.n	8006258 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800625c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10b      	bne.n	800627a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	61fb      	str	r3, [r7, #28]
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800627a:	235c      	movs	r3, #92	@ 0x5c
 800627c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b5c      	cmp	r3, #92	@ 0x5c
 8006282:	d00b      	beq.n	800629c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	61bb      	str	r3, [r7, #24]
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800629c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d01e      	beq.n	80062e2 <xTaskCreateStatic+0xb2>
 80062a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01b      	beq.n	80062e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	2202      	movs	r2, #2
 80062b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062bc:	2300      	movs	r3, #0
 80062be:	9303      	str	r3, [sp, #12]
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	9302      	str	r3, [sp, #8]
 80062c4:	f107 0314 	add.w	r3, r7, #20
 80062c8:	9301      	str	r3, [sp, #4]
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	68b9      	ldr	r1, [r7, #8]
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f000 f850 	bl	800637a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80062dc:	f000 f8de 	bl	800649c <prvAddNewTaskToReadyList>
 80062e0:	e001      	b.n	80062e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062e6:	697b      	ldr	r3, [r7, #20]
	}
 80062e8:	4618      	mov	r0, r3
 80062ea:	3728      	adds	r7, #40	@ 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08c      	sub	sp, #48	@ 0x30
 80062f4:	af04      	add	r7, sp, #16
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	603b      	str	r3, [r7, #0]
 80062fc:	4613      	mov	r3, r2
 80062fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006300:	88fb      	ldrh	r3, [r7, #6]
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4618      	mov	r0, r3
 8006306:	f001 fe49 	bl	8007f9c <pvPortMalloc>
 800630a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00e      	beq.n	8006330 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006312:	205c      	movs	r0, #92	@ 0x5c
 8006314:	f001 fe42 	bl	8007f9c <pvPortMalloc>
 8006318:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	631a      	str	r2, [r3, #48]	@ 0x30
 8006326:	e005      	b.n	8006334 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006328:	6978      	ldr	r0, [r7, #20]
 800632a:	f001 ff05 	bl	8008138 <vPortFree>
 800632e:	e001      	b.n	8006334 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006330:	2300      	movs	r3, #0
 8006332:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d017      	beq.n	800636a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006342:	88fa      	ldrh	r2, [r7, #6]
 8006344:	2300      	movs	r3, #0
 8006346:	9303      	str	r3, [sp, #12]
 8006348:	69fb      	ldr	r3, [r7, #28]
 800634a:	9302      	str	r3, [sp, #8]
 800634c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800634e:	9301      	str	r3, [sp, #4]
 8006350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006352:	9300      	str	r3, [sp, #0]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f000 f80e 	bl	800637a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800635e:	69f8      	ldr	r0, [r7, #28]
 8006360:	f000 f89c 	bl	800649c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006364:	2301      	movs	r3, #1
 8006366:	61bb      	str	r3, [r7, #24]
 8006368:	e002      	b.n	8006370 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800636a:	f04f 33ff 	mov.w	r3, #4294967295
 800636e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006370:	69bb      	ldr	r3, [r7, #24]
	}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}

0800637a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b088      	sub	sp, #32
 800637e:	af00      	add	r7, sp, #0
 8006380:	60f8      	str	r0, [r7, #12]
 8006382:	60b9      	str	r1, [r7, #8]
 8006384:	607a      	str	r2, [r7, #4]
 8006386:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800638a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	461a      	mov	r2, r3
 8006392:	21a5      	movs	r1, #165	@ 0xa5
 8006394:	f015 fb28 	bl	801b9e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063a2:	3b01      	subs	r3, #1
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	f023 0307 	bic.w	r3, r3, #7
 80063b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	f003 0307 	and.w	r3, r3, #7
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00b      	beq.n	80063d4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	617b      	str	r3, [r7, #20]
}
 80063ce:	bf00      	nop
 80063d0:	bf00      	nop
 80063d2:	e7fd      	b.n	80063d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d01f      	beq.n	800641a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063da:	2300      	movs	r3, #0
 80063dc:	61fb      	str	r3, [r7, #28]
 80063de:	e012      	b.n	8006406 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	7819      	ldrb	r1, [r3, #0]
 80063e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	4413      	add	r3, r2
 80063ee:	3334      	adds	r3, #52	@ 0x34
 80063f0:	460a      	mov	r2, r1
 80063f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063f4:	68ba      	ldr	r2, [r7, #8]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	4413      	add	r3, r2
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d006      	beq.n	800640e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006400:	69fb      	ldr	r3, [r7, #28]
 8006402:	3301      	adds	r3, #1
 8006404:	61fb      	str	r3, [r7, #28]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	2b0f      	cmp	r3, #15
 800640a:	d9e9      	bls.n	80063e0 <prvInitialiseNewTask+0x66>
 800640c:	e000      	b.n	8006410 <prvInitialiseNewTask+0x96>
			{
				break;
 800640e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006418:	e003      	b.n	8006422 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006424:	2b37      	cmp	r3, #55	@ 0x37
 8006426:	d901      	bls.n	800642c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006428:	2337      	movs	r3, #55	@ 0x37
 800642a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800642c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006430:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006436:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	2200      	movs	r2, #0
 800643c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800643e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006440:	3304      	adds	r3, #4
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe fd3e 	bl	8004ec4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644a:	3318      	adds	r3, #24
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe fd39 	bl	8004ec4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006456:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006466:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646a:	2200      	movs	r2, #0
 800646c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	2200      	movs	r2, #0
 8006472:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	68f9      	ldr	r1, [r7, #12]
 800647a:	69b8      	ldr	r0, [r7, #24]
 800647c:	f001 fb3c 	bl	8007af8 <pxPortInitialiseStack>
 8006480:	4602      	mov	r2, r0
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006492:	bf00      	nop
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80064a4:	f001 fc58 	bl	8007d58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80064a8:	4b2d      	ldr	r3, [pc, #180]	@ (8006560 <prvAddNewTaskToReadyList+0xc4>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	3301      	adds	r3, #1
 80064ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006560 <prvAddNewTaskToReadyList+0xc4>)
 80064b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80064b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d109      	bne.n	80064ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80064ba:	4a2a      	ldr	r2, [pc, #168]	@ (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064c0:	4b27      	ldr	r3, [pc, #156]	@ (8006560 <prvAddNewTaskToReadyList+0xc4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d110      	bne.n	80064ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80064c8:	f000 fd0c 	bl	8006ee4 <prvInitialiseTaskLists>
 80064cc:	e00d      	b.n	80064ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80064ce:	4b26      	ldr	r3, [pc, #152]	@ (8006568 <prvAddNewTaskToReadyList+0xcc>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064d6:	4b23      	ldr	r3, [pc, #140]	@ (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d802      	bhi.n	80064ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80064e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006564 <prvAddNewTaskToReadyList+0xc8>)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064ea:	4b20      	ldr	r3, [pc, #128]	@ (800656c <prvAddNewTaskToReadyList+0xd0>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3301      	adds	r3, #1
 80064f0:	4a1e      	ldr	r2, [pc, #120]	@ (800656c <prvAddNewTaskToReadyList+0xd0>)
 80064f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064f4:	4b1d      	ldr	r3, [pc, #116]	@ (800656c <prvAddNewTaskToReadyList+0xd0>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006500:	4b1b      	ldr	r3, [pc, #108]	@ (8006570 <prvAddNewTaskToReadyList+0xd4>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	429a      	cmp	r2, r3
 8006506:	d903      	bls.n	8006510 <prvAddNewTaskToReadyList+0x74>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650c:	4a18      	ldr	r2, [pc, #96]	@ (8006570 <prvAddNewTaskToReadyList+0xd4>)
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006514:	4613      	mov	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4a15      	ldr	r2, [pc, #84]	@ (8006574 <prvAddNewTaskToReadyList+0xd8>)
 800651e:	441a      	add	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	3304      	adds	r3, #4
 8006524:	4619      	mov	r1, r3
 8006526:	4610      	mov	r0, r2
 8006528:	f7fe fcd9 	bl	8004ede <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800652c:	f001 fc46 	bl	8007dbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006530:	4b0d      	ldr	r3, [pc, #52]	@ (8006568 <prvAddNewTaskToReadyList+0xcc>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d00e      	beq.n	8006556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006538:	4b0a      	ldr	r3, [pc, #40]	@ (8006564 <prvAddNewTaskToReadyList+0xc8>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006542:	429a      	cmp	r2, r3
 8006544:	d207      	bcs.n	8006556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006546:	4b0c      	ldr	r3, [pc, #48]	@ (8006578 <prvAddNewTaskToReadyList+0xdc>)
 8006548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	f3bf 8f4f 	dsb	sy
 8006552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006556:	bf00      	nop
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
 800655e:	bf00      	nop
 8006560:	20004758 	.word	0x20004758
 8006564:	20004284 	.word	0x20004284
 8006568:	20004764 	.word	0x20004764
 800656c:	20004774 	.word	0x20004774
 8006570:	20004760 	.word	0x20004760
 8006574:	20004288 	.word	0x20004288
 8006578:	e000ed04 	.word	0xe000ed04

0800657c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8006584:	f001 fbe8 	bl	8007d58 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <vTaskDelete+0x18>
 800658e:	4b2d      	ldr	r3, [pc, #180]	@ (8006644 <vTaskDelete+0xc8>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	e000      	b.n	8006596 <vTaskDelete+0x1a>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3304      	adds	r3, #4
 800659c:	4618      	mov	r0, r3
 800659e:	f7fe fcfb 	bl	8004f98 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	3318      	adds	r3, #24
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7fe fcf2 	bl	8004f98 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80065b4:	4b24      	ldr	r3, [pc, #144]	@ (8006648 <vTaskDelete+0xcc>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	4a23      	ldr	r2, [pc, #140]	@ (8006648 <vTaskDelete+0xcc>)
 80065bc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80065be:	4b21      	ldr	r3, [pc, #132]	@ (8006644 <vTaskDelete+0xc8>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d10b      	bne.n	80065e0 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	481f      	ldr	r0, [pc, #124]	@ (800664c <vTaskDelete+0xd0>)
 80065d0:	f7fe fc85 	bl	8004ede <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80065d4:	4b1e      	ldr	r3, [pc, #120]	@ (8006650 <vTaskDelete+0xd4>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	3301      	adds	r3, #1
 80065da:	4a1d      	ldr	r2, [pc, #116]	@ (8006650 <vTaskDelete+0xd4>)
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e009      	b.n	80065f4 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80065e0:	4b1c      	ldr	r3, [pc, #112]	@ (8006654 <vTaskDelete+0xd8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	4a1b      	ldr	r2, [pc, #108]	@ (8006654 <vTaskDelete+0xd8>)
 80065e8:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	f000 fce8 	bl	8006fc0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80065f0:	f000 fd16 	bl	8007020 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80065f4:	f001 fbe2 	bl	8007dbc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80065f8:	4b17      	ldr	r3, [pc, #92]	@ (8006658 <vTaskDelete+0xdc>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d01c      	beq.n	800663a <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8006600:	4b10      	ldr	r3, [pc, #64]	@ (8006644 <vTaskDelete+0xc8>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	429a      	cmp	r2, r3
 8006608:	d117      	bne.n	800663a <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800660a:	4b14      	ldr	r3, [pc, #80]	@ (800665c <vTaskDelete+0xe0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <vTaskDelete+0xae>
	__asm volatile
 8006612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006616:	f383 8811 	msr	BASEPRI, r3
 800661a:	f3bf 8f6f 	isb	sy
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	60bb      	str	r3, [r7, #8]
}
 8006624:	bf00      	nop
 8006626:	bf00      	nop
 8006628:	e7fd      	b.n	8006626 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800662a:	4b0d      	ldr	r3, [pc, #52]	@ (8006660 <vTaskDelete+0xe4>)
 800662c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800663a:	bf00      	nop
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	20004284 	.word	0x20004284
 8006648:	20004774 	.word	0x20004774
 800664c:	2000472c 	.word	0x2000472c
 8006650:	20004740 	.word	0x20004740
 8006654:	20004758 	.word	0x20004758
 8006658:	20004764 	.word	0x20004764
 800665c:	20004780 	.word	0x20004780
 8006660:	e000ed04 	.word	0xe000ed04

08006664 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800666c:	2300      	movs	r3, #0
 800666e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d018      	beq.n	80066a8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006676:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <vTaskDelay+0x64>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00b      	beq.n	8006696 <vTaskDelay+0x32>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60bb      	str	r3, [r7, #8]
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	e7fd      	b.n	8006692 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006696:	f000 f8eb 	bl	8006870 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800669a:	2100      	movs	r1, #0
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fe7d 	bl	800739c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80066a2:	f000 f8f3 	bl	800688c <xTaskResumeAll>
 80066a6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d107      	bne.n	80066be <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80066ae:	4b07      	ldr	r3, [pc, #28]	@ (80066cc <vTaskDelay+0x68>)
 80066b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066b4:	601a      	str	r2, [r3, #0]
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	20004780 	.word	0x20004780
 80066cc:	e000ed04 	.word	0xe000ed04

080066d0 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b088      	sub	sp, #32
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10b      	bne.n	80066fa <eTaskGetState+0x2a>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60bb      	str	r3, [r7, #8]
}
 80066f4:	bf00      	nop
 80066f6:	bf00      	nop
 80066f8:	e7fd      	b.n	80066f6 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80066fa:	4b24      	ldr	r3, [pc, #144]	@ (800678c <eTaskGetState+0xbc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69ba      	ldr	r2, [r7, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	d102      	bne.n	800670a <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8006704:	2300      	movs	r3, #0
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e03a      	b.n	8006780 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 800670a:	f001 fb25 	bl	8007d58 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8006714:	4b1e      	ldr	r3, [pc, #120]	@ (8006790 <eTaskGetState+0xc0>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800671a:	4b1e      	ldr	r3, [pc, #120]	@ (8006794 <eTaskGetState+0xc4>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8006720:	f001 fb4c 	bl	8007dbc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	429a      	cmp	r2, r3
 800672a:	d003      	beq.n	8006734 <eTaskGetState+0x64>
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	429a      	cmp	r2, r3
 8006732:	d102      	bne.n	800673a <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8006734:	2302      	movs	r3, #2
 8006736:	77fb      	strb	r3, [r7, #31]
 8006738:	e022      	b.n	8006780 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4a16      	ldr	r2, [pc, #88]	@ (8006798 <eTaskGetState+0xc8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d112      	bne.n	8006768 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10b      	bne.n	8006762 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800674a:	69bb      	ldr	r3, [r7, #24]
 800674c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b01      	cmp	r3, #1
 8006754:	d102      	bne.n	800675c <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8006756:	2302      	movs	r3, #2
 8006758:	77fb      	strb	r3, [r7, #31]
 800675a:	e011      	b.n	8006780 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 800675c:	2303      	movs	r3, #3
 800675e:	77fb      	strb	r3, [r7, #31]
 8006760:	e00e      	b.n	8006780 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8006762:	2302      	movs	r3, #2
 8006764:	77fb      	strb	r3, [r7, #31]
 8006766:	e00b      	b.n	8006780 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	4a0c      	ldr	r2, [pc, #48]	@ (800679c <eTaskGetState+0xcc>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d002      	beq.n	8006776 <eTaskGetState+0xa6>
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d102      	bne.n	800677c <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8006776:	2304      	movs	r3, #4
 8006778:	77fb      	strb	r3, [r7, #31]
 800677a:	e001      	b.n	8006780 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800677c:	2301      	movs	r3, #1
 800677e:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8006780:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006782:	4618      	mov	r0, r3
 8006784:	3720      	adds	r7, #32
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20004284 	.word	0x20004284
 8006790:	20004710 	.word	0x20004710
 8006794:	20004714 	.word	0x20004714
 8006798:	20004744 	.word	0x20004744
 800679c:	2000472c 	.word	0x2000472c

080067a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b08a      	sub	sp, #40	@ 0x28
 80067a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067ae:	463a      	mov	r2, r7
 80067b0:	1d39      	adds	r1, r7, #4
 80067b2:	f107 0308 	add.w	r3, r7, #8
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fe fb30 	bl	8004e1c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	9202      	str	r2, [sp, #8]
 80067c4:	9301      	str	r3, [sp, #4]
 80067c6:	2300      	movs	r3, #0
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	2300      	movs	r3, #0
 80067cc:	460a      	mov	r2, r1
 80067ce:	4922      	ldr	r1, [pc, #136]	@ (8006858 <vTaskStartScheduler+0xb8>)
 80067d0:	4822      	ldr	r0, [pc, #136]	@ (800685c <vTaskStartScheduler+0xbc>)
 80067d2:	f7ff fd2d 	bl	8006230 <xTaskCreateStatic>
 80067d6:	4603      	mov	r3, r0
 80067d8:	4a21      	ldr	r2, [pc, #132]	@ (8006860 <vTaskStartScheduler+0xc0>)
 80067da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067dc:	4b20      	ldr	r3, [pc, #128]	@ (8006860 <vTaskStartScheduler+0xc0>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067e4:	2301      	movs	r3, #1
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e001      	b.n	80067ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d102      	bne.n	80067fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067f4:	f000 fe26 	bl	8007444 <xTimerCreateTimerTask>
 80067f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d116      	bne.n	800682e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006804:	f383 8811 	msr	BASEPRI, r3
 8006808:	f3bf 8f6f 	isb	sy
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	613b      	str	r3, [r7, #16]
}
 8006812:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006814:	4b13      	ldr	r3, [pc, #76]	@ (8006864 <vTaskStartScheduler+0xc4>)
 8006816:	f04f 32ff 	mov.w	r2, #4294967295
 800681a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800681c:	4b12      	ldr	r3, [pc, #72]	@ (8006868 <vTaskStartScheduler+0xc8>)
 800681e:	2201      	movs	r2, #1
 8006820:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006822:	4b12      	ldr	r3, [pc, #72]	@ (800686c <vTaskStartScheduler+0xcc>)
 8006824:	2200      	movs	r2, #0
 8006826:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006828:	f001 f9f2 	bl	8007c10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800682c:	e00f      	b.n	800684e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006834:	d10b      	bne.n	800684e <vTaskStartScheduler+0xae>
	__asm volatile
 8006836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800683a:	f383 8811 	msr	BASEPRI, r3
 800683e:	f3bf 8f6f 	isb	sy
 8006842:	f3bf 8f4f 	dsb	sy
 8006846:	60fb      	str	r3, [r7, #12]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <vTaskStartScheduler+0xaa>
}
 800684e:	bf00      	nop
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	0801c610 	.word	0x0801c610
 800685c:	08006eb5 	.word	0x08006eb5
 8006860:	2000477c 	.word	0x2000477c
 8006864:	20004778 	.word	0x20004778
 8006868:	20004764 	.word	0x20004764
 800686c:	2000475c 	.word	0x2000475c

08006870 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006870:	b480      	push	{r7}
 8006872:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006874:	4b04      	ldr	r3, [pc, #16]	@ (8006888 <vTaskSuspendAll+0x18>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a03      	ldr	r2, [pc, #12]	@ (8006888 <vTaskSuspendAll+0x18>)
 800687c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800687e:	bf00      	nop
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	20004780 	.word	0x20004780

0800688c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800689a:	4b42      	ldr	r3, [pc, #264]	@ (80069a4 <xTaskResumeAll+0x118>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10b      	bne.n	80068ba <xTaskResumeAll+0x2e>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	603b      	str	r3, [r7, #0]
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	e7fd      	b.n	80068b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068ba:	f001 fa4d 	bl	8007d58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068be:	4b39      	ldr	r3, [pc, #228]	@ (80069a4 <xTaskResumeAll+0x118>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4a37      	ldr	r2, [pc, #220]	@ (80069a4 <xTaskResumeAll+0x118>)
 80068c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068c8:	4b36      	ldr	r3, [pc, #216]	@ (80069a4 <xTaskResumeAll+0x118>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d162      	bne.n	8006996 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068d0:	4b35      	ldr	r3, [pc, #212]	@ (80069a8 <xTaskResumeAll+0x11c>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d05e      	beq.n	8006996 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068d8:	e02f      	b.n	800693a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068da:	4b34      	ldr	r3, [pc, #208]	@ (80069ac <xTaskResumeAll+0x120>)
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3318      	adds	r3, #24
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7fe fb56 	bl	8004f98 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	3304      	adds	r3, #4
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fe fb51 	bl	8004f98 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fa:	4b2d      	ldr	r3, [pc, #180]	@ (80069b0 <xTaskResumeAll+0x124>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d903      	bls.n	800690a <xTaskResumeAll+0x7e>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006906:	4a2a      	ldr	r2, [pc, #168]	@ (80069b0 <xTaskResumeAll+0x124>)
 8006908:	6013      	str	r3, [r2, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690e:	4613      	mov	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	4a27      	ldr	r2, [pc, #156]	@ (80069b4 <xTaskResumeAll+0x128>)
 8006918:	441a      	add	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	3304      	adds	r3, #4
 800691e:	4619      	mov	r1, r3
 8006920:	4610      	mov	r0, r2
 8006922:	f7fe fadc 	bl	8004ede <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692a:	4b23      	ldr	r3, [pc, #140]	@ (80069b8 <xTaskResumeAll+0x12c>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006930:	429a      	cmp	r2, r3
 8006932:	d302      	bcc.n	800693a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006934:	4b21      	ldr	r3, [pc, #132]	@ (80069bc <xTaskResumeAll+0x130>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800693a:	4b1c      	ldr	r3, [pc, #112]	@ (80069ac <xTaskResumeAll+0x120>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1cb      	bne.n	80068da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d001      	beq.n	800694c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006948:	f000 fb6a 	bl	8007020 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800694c:	4b1c      	ldr	r3, [pc, #112]	@ (80069c0 <xTaskResumeAll+0x134>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d010      	beq.n	800697a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006958:	f000 f858 	bl	8006a0c <xTaskIncrementTick>
 800695c:	4603      	mov	r3, r0
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006962:	4b16      	ldr	r3, [pc, #88]	@ (80069bc <xTaskResumeAll+0x130>)
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	3b01      	subs	r3, #1
 800696c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1f1      	bne.n	8006958 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006974:	4b12      	ldr	r3, [pc, #72]	@ (80069c0 <xTaskResumeAll+0x134>)
 8006976:	2200      	movs	r2, #0
 8006978:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800697a:	4b10      	ldr	r3, [pc, #64]	@ (80069bc <xTaskResumeAll+0x130>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d009      	beq.n	8006996 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006982:	2301      	movs	r3, #1
 8006984:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006986:	4b0f      	ldr	r3, [pc, #60]	@ (80069c4 <xTaskResumeAll+0x138>)
 8006988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006996:	f001 fa11 	bl	8007dbc <vPortExitCritical>

	return xAlreadyYielded;
 800699a:	68bb      	ldr	r3, [r7, #8]
}
 800699c:	4618      	mov	r0, r3
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	20004780 	.word	0x20004780
 80069a8:	20004758 	.word	0x20004758
 80069ac:	20004718 	.word	0x20004718
 80069b0:	20004760 	.word	0x20004760
 80069b4:	20004288 	.word	0x20004288
 80069b8:	20004284 	.word	0x20004284
 80069bc:	2000476c 	.word	0x2000476c
 80069c0:	20004768 	.word	0x20004768
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069ce:	4b05      	ldr	r3, [pc, #20]	@ (80069e4 <xTaskGetTickCount+0x1c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069d4:	687b      	ldr	r3, [r7, #4]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2000475c 	.word	0x2000475c

080069e8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80069ee:	f001 fa93 	bl	8007f18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80069f2:	2300      	movs	r3, #0
 80069f4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80069f6:	4b04      	ldr	r3, [pc, #16]	@ (8006a08 <xTaskGetTickCountFromISR+0x20>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80069fc:	683b      	ldr	r3, [r7, #0]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	2000475c 	.word	0x2000475c

08006a0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a16:	4b4f      	ldr	r3, [pc, #316]	@ (8006b54 <xTaskIncrementTick+0x148>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f040 8090 	bne.w	8006b40 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a20:	4b4d      	ldr	r3, [pc, #308]	@ (8006b58 <xTaskIncrementTick+0x14c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3301      	adds	r3, #1
 8006a26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a28:	4a4b      	ldr	r2, [pc, #300]	@ (8006b58 <xTaskIncrementTick+0x14c>)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d121      	bne.n	8006a78 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a34:	4b49      	ldr	r3, [pc, #292]	@ (8006b5c <xTaskIncrementTick+0x150>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00b      	beq.n	8006a56 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a42:	f383 8811 	msr	BASEPRI, r3
 8006a46:	f3bf 8f6f 	isb	sy
 8006a4a:	f3bf 8f4f 	dsb	sy
 8006a4e:	603b      	str	r3, [r7, #0]
}
 8006a50:	bf00      	nop
 8006a52:	bf00      	nop
 8006a54:	e7fd      	b.n	8006a52 <xTaskIncrementTick+0x46>
 8006a56:	4b41      	ldr	r3, [pc, #260]	@ (8006b5c <xTaskIncrementTick+0x150>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	4b40      	ldr	r3, [pc, #256]	@ (8006b60 <xTaskIncrementTick+0x154>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a3e      	ldr	r2, [pc, #248]	@ (8006b5c <xTaskIncrementTick+0x150>)
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	4a3e      	ldr	r2, [pc, #248]	@ (8006b60 <xTaskIncrementTick+0x154>)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b64 <xTaskIncrementTick+0x158>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	4a3c      	ldr	r2, [pc, #240]	@ (8006b64 <xTaskIncrementTick+0x158>)
 8006a72:	6013      	str	r3, [r2, #0]
 8006a74:	f000 fad4 	bl	8007020 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a78:	4b3b      	ldr	r3, [pc, #236]	@ (8006b68 <xTaskIncrementTick+0x15c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	693a      	ldr	r2, [r7, #16]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d349      	bcc.n	8006b16 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a82:	4b36      	ldr	r3, [pc, #216]	@ (8006b5c <xTaskIncrementTick+0x150>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d104      	bne.n	8006a96 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a8c:	4b36      	ldr	r3, [pc, #216]	@ (8006b68 <xTaskIncrementTick+0x15c>)
 8006a8e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a92:	601a      	str	r2, [r3, #0]
					break;
 8006a94:	e03f      	b.n	8006b16 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a96:	4b31      	ldr	r3, [pc, #196]	@ (8006b5c <xTaskIncrementTick+0x150>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d203      	bcs.n	8006ab6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006aae:	4a2e      	ldr	r2, [pc, #184]	@ (8006b68 <xTaskIncrementTick+0x15c>)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ab4:	e02f      	b.n	8006b16 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	3304      	adds	r3, #4
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fa6c 	bl	8004f98 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d004      	beq.n	8006ad2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	3318      	adds	r3, #24
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fa63 	bl	8004f98 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad6:	4b25      	ldr	r3, [pc, #148]	@ (8006b6c <xTaskIncrementTick+0x160>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d903      	bls.n	8006ae6 <xTaskIncrementTick+0xda>
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ae2:	4a22      	ldr	r2, [pc, #136]	@ (8006b6c <xTaskIncrementTick+0x160>)
 8006ae4:	6013      	str	r3, [r2, #0]
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aea:	4613      	mov	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	009b      	lsls	r3, r3, #2
 8006af2:	4a1f      	ldr	r2, [pc, #124]	@ (8006b70 <xTaskIncrementTick+0x164>)
 8006af4:	441a      	add	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	3304      	adds	r3, #4
 8006afa:	4619      	mov	r1, r3
 8006afc:	4610      	mov	r0, r2
 8006afe:	f7fe f9ee 	bl	8004ede <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b06:	4b1b      	ldr	r3, [pc, #108]	@ (8006b74 <xTaskIncrementTick+0x168>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d3b8      	bcc.n	8006a82 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b14:	e7b5      	b.n	8006a82 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b16:	4b17      	ldr	r3, [pc, #92]	@ (8006b74 <xTaskIncrementTick+0x168>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b1c:	4914      	ldr	r1, [pc, #80]	@ (8006b70 <xTaskIncrementTick+0x164>)
 8006b1e:	4613      	mov	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4413      	add	r3, r2
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	440b      	add	r3, r1
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d901      	bls.n	8006b32 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b32:	4b11      	ldr	r3, [pc, #68]	@ (8006b78 <xTaskIncrementTick+0x16c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	617b      	str	r3, [r7, #20]
 8006b3e:	e004      	b.n	8006b4a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b40:	4b0e      	ldr	r3, [pc, #56]	@ (8006b7c <xTaskIncrementTick+0x170>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a0d      	ldr	r2, [pc, #52]	@ (8006b7c <xTaskIncrementTick+0x170>)
 8006b48:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b4a:	697b      	ldr	r3, [r7, #20]
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3718      	adds	r7, #24
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}
 8006b54:	20004780 	.word	0x20004780
 8006b58:	2000475c 	.word	0x2000475c
 8006b5c:	20004710 	.word	0x20004710
 8006b60:	20004714 	.word	0x20004714
 8006b64:	20004770 	.word	0x20004770
 8006b68:	20004778 	.word	0x20004778
 8006b6c:	20004760 	.word	0x20004760
 8006b70:	20004288 	.word	0x20004288
 8006b74:	20004284 	.word	0x20004284
 8006b78:	2000476c 	.word	0x2000476c
 8006b7c:	20004768 	.word	0x20004768

08006b80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b86:	4b28      	ldr	r3, [pc, #160]	@ (8006c28 <vTaskSwitchContext+0xa8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b8e:	4b27      	ldr	r3, [pc, #156]	@ (8006c2c <vTaskSwitchContext+0xac>)
 8006b90:	2201      	movs	r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b94:	e042      	b.n	8006c1c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006b96:	4b25      	ldr	r3, [pc, #148]	@ (8006c2c <vTaskSwitchContext+0xac>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9c:	4b24      	ldr	r3, [pc, #144]	@ (8006c30 <vTaskSwitchContext+0xb0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	e011      	b.n	8006bc8 <vTaskSwitchContext+0x48>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <vTaskSwitchContext+0x42>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	607b      	str	r3, [r7, #4]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <vTaskSwitchContext+0x3e>
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]
 8006bc8:	491a      	ldr	r1, [pc, #104]	@ (8006c34 <vTaskSwitchContext+0xb4>)
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	4613      	mov	r3, r2
 8006bce:	009b      	lsls	r3, r3, #2
 8006bd0:	4413      	add	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	440b      	add	r3, r1
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0e3      	beq.n	8006ba4 <vTaskSwitchContext+0x24>
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	4613      	mov	r3, r2
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	4413      	add	r3, r2
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4a13      	ldr	r2, [pc, #76]	@ (8006c34 <vTaskSwitchContext+0xb4>)
 8006be8:	4413      	add	r3, r2
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	685a      	ldr	r2, [r3, #4]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	3308      	adds	r3, #8
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d104      	bne.n	8006c0c <vTaskSwitchContext+0x8c>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	605a      	str	r2, [r3, #4]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	4a09      	ldr	r2, [pc, #36]	@ (8006c38 <vTaskSwitchContext+0xb8>)
 8006c14:	6013      	str	r3, [r2, #0]
 8006c16:	4a06      	ldr	r2, [pc, #24]	@ (8006c30 <vTaskSwitchContext+0xb0>)
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6013      	str	r3, [r2, #0]
}
 8006c1c:	bf00      	nop
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	20004780 	.word	0x20004780
 8006c2c:	2000476c 	.word	0x2000476c
 8006c30:	20004760 	.word	0x20004760
 8006c34:	20004288 	.word	0x20004288
 8006c38:	20004284 	.word	0x20004284

08006c3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60fb      	str	r3, [r7, #12]
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c64:	4b07      	ldr	r3, [pc, #28]	@ (8006c84 <vTaskPlaceOnEventList+0x48>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3318      	adds	r3, #24
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fe f95a 	bl	8004f26 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c72:	2101      	movs	r1, #1
 8006c74:	6838      	ldr	r0, [r7, #0]
 8006c76:	f000 fb91 	bl	800739c <prvAddCurrentTaskToDelayedList>
}
 8006c7a:	bf00      	nop
 8006c7c:	3710      	adds	r7, #16
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	20004284 	.word	0x20004284

08006c88 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10b      	bne.n	8006cb2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	617b      	str	r3, [r7, #20]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cb2:	4b0a      	ldr	r3, [pc, #40]	@ (8006cdc <vTaskPlaceOnEventListRestricted+0x54>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3318      	adds	r3, #24
 8006cb8:	4619      	mov	r1, r3
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f7fe f90f 	bl	8004ede <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	68b8      	ldr	r0, [r7, #8]
 8006cd0:	f000 fb64 	bl	800739c <prvAddCurrentTaskToDelayedList>
	}
 8006cd4:	bf00      	nop
 8006cd6:	3718      	adds	r7, #24
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20004284 	.word	0x20004284

08006ce0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68db      	ldr	r3, [r3, #12]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10b      	bne.n	8006d0e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cfa:	f383 8811 	msr	BASEPRI, r3
 8006cfe:	f3bf 8f6f 	isb	sy
 8006d02:	f3bf 8f4f 	dsb	sy
 8006d06:	60fb      	str	r3, [r7, #12]
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	e7fd      	b.n	8006d0a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	3318      	adds	r3, #24
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe f940 	bl	8004f98 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d18:	4b1d      	ldr	r3, [pc, #116]	@ (8006d90 <xTaskRemoveFromEventList+0xb0>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d11d      	bne.n	8006d5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	3304      	adds	r3, #4
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fe f937 	bl	8004f98 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d2e:	4b19      	ldr	r3, [pc, #100]	@ (8006d94 <xTaskRemoveFromEventList+0xb4>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d903      	bls.n	8006d3e <xTaskRemoveFromEventList+0x5e>
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3a:	4a16      	ldr	r2, [pc, #88]	@ (8006d94 <xTaskRemoveFromEventList+0xb4>)
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d42:	4613      	mov	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	4413      	add	r3, r2
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	4a13      	ldr	r2, [pc, #76]	@ (8006d98 <xTaskRemoveFromEventList+0xb8>)
 8006d4c:	441a      	add	r2, r3
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3304      	adds	r3, #4
 8006d52:	4619      	mov	r1, r3
 8006d54:	4610      	mov	r0, r2
 8006d56:	f7fe f8c2 	bl	8004ede <vListInsertEnd>
 8006d5a:	e005      	b.n	8006d68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3318      	adds	r3, #24
 8006d60:	4619      	mov	r1, r3
 8006d62:	480e      	ldr	r0, [pc, #56]	@ (8006d9c <xTaskRemoveFromEventList+0xbc>)
 8006d64:	f7fe f8bb 	bl	8004ede <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8006da0 <xTaskRemoveFromEventList+0xc0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d905      	bls.n	8006d82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <xTaskRemoveFromEventList+0xc4>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e001      	b.n	8006d86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d86:	697b      	ldr	r3, [r7, #20]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3718      	adds	r7, #24
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	20004780 	.word	0x20004780
 8006d94:	20004760 	.word	0x20004760
 8006d98:	20004288 	.word	0x20004288
 8006d9c:	20004718 	.word	0x20004718
 8006da0:	20004284 	.word	0x20004284
 8006da4:	2000476c 	.word	0x2000476c

08006da8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b083      	sub	sp, #12
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006db0:	4b06      	ldr	r3, [pc, #24]	@ (8006dcc <vTaskInternalSetTimeOutState+0x24>)
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006db8:	4b05      	ldr	r3, [pc, #20]	@ (8006dd0 <vTaskInternalSetTimeOutState+0x28>)
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	605a      	str	r2, [r3, #4]
}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	20004770 	.word	0x20004770
 8006dd0:	2000475c 	.word	0x2000475c

08006dd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b088      	sub	sp, #32
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10b      	bne.n	8006dfc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	613b      	str	r3, [r7, #16]
}
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
 8006dfa:	e7fd      	b.n	8006df8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10b      	bne.n	8006e1a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	60fb      	str	r3, [r7, #12]
}
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	e7fd      	b.n	8006e16 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e1a:	f000 ff9d 	bl	8007d58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8006e94 <xTaskCheckForTimeOut+0xc0>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e36:	d102      	bne.n	8006e3e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
 8006e3c:	e023      	b.n	8006e86 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	4b15      	ldr	r3, [pc, #84]	@ (8006e98 <xTaskCheckForTimeOut+0xc4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d007      	beq.n	8006e5a <xTaskCheckForTimeOut+0x86>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	69ba      	ldr	r2, [r7, #24]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d302      	bcc.n	8006e5a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e54:	2301      	movs	r3, #1
 8006e56:	61fb      	str	r3, [r7, #28]
 8006e58:	e015      	b.n	8006e86 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d20b      	bcs.n	8006e7c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	1ad2      	subs	r2, r2, r3
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff99 	bl	8006da8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
 8006e7a:	e004      	b.n	8006e86 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e82:	2301      	movs	r3, #1
 8006e84:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e86:	f000 ff99 	bl	8007dbc <vPortExitCritical>

	return xReturn;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3720      	adds	r7, #32
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	2000475c 	.word	0x2000475c
 8006e98:	20004770 	.word	0x20004770

08006e9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ea0:	4b03      	ldr	r3, [pc, #12]	@ (8006eb0 <vTaskMissedYield+0x14>)
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	601a      	str	r2, [r3, #0]
}
 8006ea6:	bf00      	nop
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	2000476c 	.word	0x2000476c

08006eb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ebc:	f000 f852 	bl	8006f64 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ec0:	4b06      	ldr	r3, [pc, #24]	@ (8006edc <prvIdleTask+0x28>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d9f9      	bls.n	8006ebc <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ec8:	4b05      	ldr	r3, [pc, #20]	@ (8006ee0 <prvIdleTask+0x2c>)
 8006eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ece:	601a      	str	r2, [r3, #0]
 8006ed0:	f3bf 8f4f 	dsb	sy
 8006ed4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ed8:	e7f0      	b.n	8006ebc <prvIdleTask+0x8>
 8006eda:	bf00      	nop
 8006edc:	20004288 	.word	0x20004288
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006eea:	2300      	movs	r3, #0
 8006eec:	607b      	str	r3, [r7, #4]
 8006eee:	e00c      	b.n	8006f0a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4a12      	ldr	r2, [pc, #72]	@ (8006f44 <prvInitialiseTaskLists+0x60>)
 8006efc:	4413      	add	r3, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fd ffc0 	bl	8004e84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	3301      	adds	r3, #1
 8006f08:	607b      	str	r3, [r7, #4]
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b37      	cmp	r3, #55	@ 0x37
 8006f0e:	d9ef      	bls.n	8006ef0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f10:	480d      	ldr	r0, [pc, #52]	@ (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f12:	f7fd ffb7 	bl	8004e84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f16:	480d      	ldr	r0, [pc, #52]	@ (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f18:	f7fd ffb4 	bl	8004e84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f1c:	480c      	ldr	r0, [pc, #48]	@ (8006f50 <prvInitialiseTaskLists+0x6c>)
 8006f1e:	f7fd ffb1 	bl	8004e84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f22:	480c      	ldr	r0, [pc, #48]	@ (8006f54 <prvInitialiseTaskLists+0x70>)
 8006f24:	f7fd ffae 	bl	8004e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f28:	480b      	ldr	r0, [pc, #44]	@ (8006f58 <prvInitialiseTaskLists+0x74>)
 8006f2a:	f7fd ffab 	bl	8004e84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f5c <prvInitialiseTaskLists+0x78>)
 8006f30:	4a05      	ldr	r2, [pc, #20]	@ (8006f48 <prvInitialiseTaskLists+0x64>)
 8006f32:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f34:	4b0a      	ldr	r3, [pc, #40]	@ (8006f60 <prvInitialiseTaskLists+0x7c>)
 8006f36:	4a05      	ldr	r2, [pc, #20]	@ (8006f4c <prvInitialiseTaskLists+0x68>)
 8006f38:	601a      	str	r2, [r3, #0]
}
 8006f3a:	bf00      	nop
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}
 8006f42:	bf00      	nop
 8006f44:	20004288 	.word	0x20004288
 8006f48:	200046e8 	.word	0x200046e8
 8006f4c:	200046fc 	.word	0x200046fc
 8006f50:	20004718 	.word	0x20004718
 8006f54:	2000472c 	.word	0x2000472c
 8006f58:	20004744 	.word	0x20004744
 8006f5c:	20004710 	.word	0x20004710
 8006f60:	20004714 	.word	0x20004714

08006f64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f6a:	e019      	b.n	8006fa0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f6c:	f000 fef4 	bl	8007d58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f70:	4b10      	ldr	r3, [pc, #64]	@ (8006fb4 <prvCheckTasksWaitingTermination+0x50>)
 8006f72:	68db      	ldr	r3, [r3, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe f80b 	bl	8004f98 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f82:	4b0d      	ldr	r3, [pc, #52]	@ (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	4a0b      	ldr	r2, [pc, #44]	@ (8006fb8 <prvCheckTasksWaitingTermination+0x54>)
 8006f8a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	4a0a      	ldr	r2, [pc, #40]	@ (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006f94:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006f96:	f000 ff11 	bl	8007dbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 f810 	bl	8006fc0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fa0:	4b06      	ldr	r3, [pc, #24]	@ (8006fbc <prvCheckTasksWaitingTermination+0x58>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d1e1      	bne.n	8006f6c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fa8:	bf00      	nop
 8006faa:	bf00      	nop
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	2000472c 	.word	0x2000472c
 8006fb8:	20004758 	.word	0x20004758
 8006fbc:	20004740 	.word	0x20004740

08006fc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d108      	bne.n	8006fe4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f001 f8ae 	bl	8008138 <vPortFree>
				vPortFree( pxTCB );
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f001 f8ab 	bl	8008138 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006fe2:	e019      	b.n	8007018 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d103      	bne.n	8006ff6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f001 f8a2 	bl	8008138 <vPortFree>
	}
 8006ff4:	e010      	b.n	8007018 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d00b      	beq.n	8007018 <prvDeleteTCB+0x58>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	bf00      	nop
 8007016:	e7fd      	b.n	8007014 <prvDeleteTCB+0x54>
	}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007026:	4b0c      	ldr	r3, [pc, #48]	@ (8007058 <prvResetNextTaskUnblockTime+0x38>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d104      	bne.n	800703a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007030:	4b0a      	ldr	r3, [pc, #40]	@ (800705c <prvResetNextTaskUnblockTime+0x3c>)
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
 8007036:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007038:	e008      	b.n	800704c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800703a:	4b07      	ldr	r3, [pc, #28]	@ (8007058 <prvResetNextTaskUnblockTime+0x38>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	4a04      	ldr	r2, [pc, #16]	@ (800705c <prvResetNextTaskUnblockTime+0x3c>)
 800704a:	6013      	str	r3, [r2, #0]
}
 800704c:	bf00      	nop
 800704e:	370c      	adds	r7, #12
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	20004710 	.word	0x20004710
 800705c:	20004778 	.word	0x20004778

08007060 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007066:	4b05      	ldr	r3, [pc, #20]	@ (800707c <xTaskGetCurrentTaskHandle+0x1c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800706c:	687b      	ldr	r3, [r7, #4]
	}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20004284 	.word	0x20004284

08007080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007086:	4b0b      	ldr	r3, [pc, #44]	@ (80070b4 <xTaskGetSchedulerState+0x34>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d102      	bne.n	8007094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800708e:	2301      	movs	r3, #1
 8007090:	607b      	str	r3, [r7, #4]
 8007092:	e008      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007094:	4b08      	ldr	r3, [pc, #32]	@ (80070b8 <xTaskGetSchedulerState+0x38>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800709c:	2302      	movs	r3, #2
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	e001      	b.n	80070a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070a2:	2300      	movs	r3, #0
 80070a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070a6:	687b      	ldr	r3, [r7, #4]
	}
 80070a8:	4618      	mov	r0, r3
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr
 80070b4:	20004764 	.word	0x20004764
 80070b8:	20004780 	.word	0x20004780

080070bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80070c8:	2300      	movs	r3, #0
 80070ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d051      	beq.n	8007176 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d6:	4b2a      	ldr	r3, [pc, #168]	@ (8007180 <xTaskPriorityInherit+0xc4>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070dc:	429a      	cmp	r2, r3
 80070de:	d241      	bcs.n	8007164 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	699b      	ldr	r3, [r3, #24]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	db06      	blt.n	80070f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070e8:	4b25      	ldr	r3, [pc, #148]	@ (8007180 <xTaskPriorityInherit+0xc4>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	6959      	ldr	r1, [r3, #20]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fe:	4613      	mov	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	4413      	add	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4a1f      	ldr	r2, [pc, #124]	@ (8007184 <xTaskPriorityInherit+0xc8>)
 8007108:	4413      	add	r3, r2
 800710a:	4299      	cmp	r1, r3
 800710c:	d122      	bne.n	8007154 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	3304      	adds	r3, #4
 8007112:	4618      	mov	r0, r3
 8007114:	f7fd ff40 	bl	8004f98 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007118:	4b19      	ldr	r3, [pc, #100]	@ (8007180 <xTaskPriorityInherit+0xc4>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007126:	4b18      	ldr	r3, [pc, #96]	@ (8007188 <xTaskPriorityInherit+0xcc>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	429a      	cmp	r2, r3
 800712c:	d903      	bls.n	8007136 <xTaskPriorityInherit+0x7a>
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007132:	4a15      	ldr	r2, [pc, #84]	@ (8007188 <xTaskPriorityInherit+0xcc>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4a10      	ldr	r2, [pc, #64]	@ (8007184 <xTaskPriorityInherit+0xc8>)
 8007144:	441a      	add	r2, r3
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	3304      	adds	r3, #4
 800714a:	4619      	mov	r1, r3
 800714c:	4610      	mov	r0, r2
 800714e:	f7fd fec6 	bl	8004ede <vListInsertEnd>
 8007152:	e004      	b.n	800715e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007154:	4b0a      	ldr	r3, [pc, #40]	@ (8007180 <xTaskPriorityInherit+0xc4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800715e:	2301      	movs	r3, #1
 8007160:	60fb      	str	r3, [r7, #12]
 8007162:	e008      	b.n	8007176 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007168:	4b05      	ldr	r3, [pc, #20]	@ (8007180 <xTaskPriorityInherit+0xc4>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	429a      	cmp	r2, r3
 8007170:	d201      	bcs.n	8007176 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007172:	2301      	movs	r3, #1
 8007174:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007176:	68fb      	ldr	r3, [r7, #12]
	}
 8007178:	4618      	mov	r0, r3
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}
 8007180:	20004284 	.word	0x20004284
 8007184:	20004288 	.word	0x20004288
 8007188:	20004760 	.word	0x20004760

0800718c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d058      	beq.n	8007254 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80071a2:	4b2f      	ldr	r3, [pc, #188]	@ (8007260 <xTaskPriorityDisinherit+0xd4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d00b      	beq.n	80071c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80071ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071b0:	f383 8811 	msr	BASEPRI, r3
 80071b4:	f3bf 8f6f 	isb	sy
 80071b8:	f3bf 8f4f 	dsb	sy
 80071bc:	60fb      	str	r3, [r7, #12]
}
 80071be:	bf00      	nop
 80071c0:	bf00      	nop
 80071c2:	e7fd      	b.n	80071c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10b      	bne.n	80071e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071d0:	f383 8811 	msr	BASEPRI, r3
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	f3bf 8f4f 	dsb	sy
 80071dc:	60bb      	str	r3, [r7, #8]
}
 80071de:	bf00      	nop
 80071e0:	bf00      	nop
 80071e2:	e7fd      	b.n	80071e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071e8:	1e5a      	subs	r2, r3, #1
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d02c      	beq.n	8007254 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d128      	bne.n	8007254 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	3304      	adds	r3, #4
 8007206:	4618      	mov	r0, r3
 8007208:	f7fd fec6 	bl	8004f98 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007224:	4b0f      	ldr	r3, [pc, #60]	@ (8007264 <xTaskPriorityDisinherit+0xd8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	429a      	cmp	r2, r3
 800722a:	d903      	bls.n	8007234 <xTaskPriorityDisinherit+0xa8>
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	4a0c      	ldr	r2, [pc, #48]	@ (8007264 <xTaskPriorityDisinherit+0xd8>)
 8007232:	6013      	str	r3, [r2, #0]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007238:	4613      	mov	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4a09      	ldr	r2, [pc, #36]	@ (8007268 <xTaskPriorityDisinherit+0xdc>)
 8007242:	441a      	add	r2, r3
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	4610      	mov	r0, r2
 800724c:	f7fd fe47 	bl	8004ede <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007250:	2301      	movs	r3, #1
 8007252:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007254:	697b      	ldr	r3, [r7, #20]
	}
 8007256:	4618      	mov	r0, r3
 8007258:	3718      	adds	r7, #24
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20004284 	.word	0x20004284
 8007264:	20004760 	.word	0x20004760
 8007268:	20004288 	.word	0x20004288

0800726c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800726c:	b580      	push	{r7, lr}
 800726e:	b088      	sub	sp, #32
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800727a:	2301      	movs	r3, #1
 800727c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d06c      	beq.n	800735e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007288:	2b00      	cmp	r3, #0
 800728a:	d10b      	bne.n	80072a4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800728c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007290:	f383 8811 	msr	BASEPRI, r3
 8007294:	f3bf 8f6f 	isb	sy
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	60fb      	str	r3, [r7, #12]
}
 800729e:	bf00      	nop
 80072a0:	bf00      	nop
 80072a2:	e7fd      	b.n	80072a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072a8:	683a      	ldr	r2, [r7, #0]
 80072aa:	429a      	cmp	r2, r3
 80072ac:	d902      	bls.n	80072b4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	e002      	b.n	80072ba <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80072b8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d04c      	beq.n	800735e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80072c4:	69bb      	ldr	r3, [r7, #24]
 80072c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d147      	bne.n	800735e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80072ce:	4b26      	ldr	r3, [pc, #152]	@ (8007368 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69ba      	ldr	r2, [r7, #24]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d10b      	bne.n	80072f0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	60bb      	str	r3, [r7, #8]
}
 80072ea:	bf00      	nop
 80072ec:	bf00      	nop
 80072ee:	e7fd      	b.n	80072ec <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	69fa      	ldr	r2, [r7, #28]
 80072fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	2b00      	cmp	r3, #0
 8007302:	db04      	blt.n	800730e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007304:	69fb      	ldr	r3, [r7, #28]
 8007306:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	6959      	ldr	r1, [r3, #20]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4613      	mov	r3, r2
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4a13      	ldr	r2, [pc, #76]	@ (800736c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800731e:	4413      	add	r3, r2
 8007320:	4299      	cmp	r1, r3
 8007322:	d11c      	bne.n	800735e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	3304      	adds	r3, #4
 8007328:	4618      	mov	r0, r3
 800732a:	f7fd fe35 	bl	8004f98 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007332:	4b0f      	ldr	r3, [pc, #60]	@ (8007370 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	429a      	cmp	r2, r3
 8007338:	d903      	bls.n	8007342 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800733e:	4a0c      	ldr	r2, [pc, #48]	@ (8007370 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007346:	4613      	mov	r3, r2
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4a07      	ldr	r2, [pc, #28]	@ (800736c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007350:	441a      	add	r2, r3
 8007352:	69bb      	ldr	r3, [r7, #24]
 8007354:	3304      	adds	r3, #4
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f7fd fdc0 	bl	8004ede <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800735e:	bf00      	nop
 8007360:	3720      	adds	r7, #32
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20004284 	.word	0x20004284
 800736c:	20004288 	.word	0x20004288
 8007370:	20004760 	.word	0x20004760

08007374 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007378:	4b07      	ldr	r3, [pc, #28]	@ (8007398 <pvTaskIncrementMutexHeldCount+0x24>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d004      	beq.n	800738a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007380:	4b05      	ldr	r3, [pc, #20]	@ (8007398 <pvTaskIncrementMutexHeldCount+0x24>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007386:	3201      	adds	r2, #1
 8007388:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800738a:	4b03      	ldr	r3, [pc, #12]	@ (8007398 <pvTaskIncrementMutexHeldCount+0x24>)
 800738c:	681b      	ldr	r3, [r3, #0]
	}
 800738e:	4618      	mov	r0, r3
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	20004284 	.word	0x20004284

0800739c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073a6:	4b21      	ldr	r3, [pc, #132]	@ (800742c <prvAddCurrentTaskToDelayedList+0x90>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073ac:	4b20      	ldr	r3, [pc, #128]	@ (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7fd fdf0 	bl	8004f98 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073be:	d10a      	bne.n	80073d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d007      	beq.n	80073d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4619      	mov	r1, r3
 80073ce:	4819      	ldr	r0, [pc, #100]	@ (8007434 <prvAddCurrentTaskToDelayedList+0x98>)
 80073d0:	f7fd fd85 	bl	8004ede <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80073d4:	e026      	b.n	8007424 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4413      	add	r3, r2
 80073dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80073de:	4b14      	ldr	r3, [pc, #80]	@ (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	429a      	cmp	r2, r3
 80073ec:	d209      	bcs.n	8007402 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80073ee:	4b12      	ldr	r3, [pc, #72]	@ (8007438 <prvAddCurrentTaskToDelayedList+0x9c>)
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	4b0f      	ldr	r3, [pc, #60]	@ (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3304      	adds	r3, #4
 80073f8:	4619      	mov	r1, r3
 80073fa:	4610      	mov	r0, r2
 80073fc:	f7fd fd93 	bl	8004f26 <vListInsert>
}
 8007400:	e010      	b.n	8007424 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007402:	4b0e      	ldr	r3, [pc, #56]	@ (800743c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	4b0a      	ldr	r3, [pc, #40]	@ (8007430 <prvAddCurrentTaskToDelayedList+0x94>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3304      	adds	r3, #4
 800740c:	4619      	mov	r1, r3
 800740e:	4610      	mov	r0, r2
 8007410:	f7fd fd89 	bl	8004f26 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007414:	4b0a      	ldr	r3, [pc, #40]	@ (8007440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68ba      	ldr	r2, [r7, #8]
 800741a:	429a      	cmp	r2, r3
 800741c:	d202      	bcs.n	8007424 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800741e:	4a08      	ldr	r2, [pc, #32]	@ (8007440 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6013      	str	r3, [r2, #0]
}
 8007424:	bf00      	nop
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	2000475c 	.word	0x2000475c
 8007430:	20004284 	.word	0x20004284
 8007434:	20004744 	.word	0x20004744
 8007438:	20004714 	.word	0x20004714
 800743c:	20004710 	.word	0x20004710
 8007440:	20004778 	.word	0x20004778

08007444 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b08a      	sub	sp, #40	@ 0x28
 8007448:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800744a:	2300      	movs	r3, #0
 800744c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800744e:	f000 fb13 	bl	8007a78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007452:	4b1d      	ldr	r3, [pc, #116]	@ (80074c8 <xTimerCreateTimerTask+0x84>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d021      	beq.n	800749e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800745a:	2300      	movs	r3, #0
 800745c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007462:	1d3a      	adds	r2, r7, #4
 8007464:	f107 0108 	add.w	r1, r7, #8
 8007468:	f107 030c 	add.w	r3, r7, #12
 800746c:	4618      	mov	r0, r3
 800746e:	f7fd fcef 	bl	8004e50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007472:	6879      	ldr	r1, [r7, #4]
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	9202      	str	r2, [sp, #8]
 800747a:	9301      	str	r3, [sp, #4]
 800747c:	2302      	movs	r3, #2
 800747e:	9300      	str	r3, [sp, #0]
 8007480:	2300      	movs	r3, #0
 8007482:	460a      	mov	r2, r1
 8007484:	4911      	ldr	r1, [pc, #68]	@ (80074cc <xTimerCreateTimerTask+0x88>)
 8007486:	4812      	ldr	r0, [pc, #72]	@ (80074d0 <xTimerCreateTimerTask+0x8c>)
 8007488:	f7fe fed2 	bl	8006230 <xTaskCreateStatic>
 800748c:	4603      	mov	r3, r0
 800748e:	4a11      	ldr	r2, [pc, #68]	@ (80074d4 <xTimerCreateTimerTask+0x90>)
 8007490:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007492:	4b10      	ldr	r3, [pc, #64]	@ (80074d4 <xTimerCreateTimerTask+0x90>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800749a:	2301      	movs	r3, #1
 800749c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d10b      	bne.n	80074bc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80074a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a8:	f383 8811 	msr	BASEPRI, r3
 80074ac:	f3bf 8f6f 	isb	sy
 80074b0:	f3bf 8f4f 	dsb	sy
 80074b4:	613b      	str	r3, [r7, #16]
}
 80074b6:	bf00      	nop
 80074b8:	bf00      	nop
 80074ba:	e7fd      	b.n	80074b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80074bc:	697b      	ldr	r3, [r7, #20]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3718      	adds	r7, #24
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	200047b4 	.word	0x200047b4
 80074cc:	0801c618 	.word	0x0801c618
 80074d0:	08007611 	.word	0x08007611
 80074d4:	200047b8 	.word	0x200047b8

080074d8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08a      	sub	sp, #40	@ 0x28
 80074dc:	af00      	add	r7, sp, #0
 80074de:	60f8      	str	r0, [r7, #12]
 80074e0:	60b9      	str	r1, [r7, #8]
 80074e2:	607a      	str	r2, [r7, #4]
 80074e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80074e6:	2300      	movs	r3, #0
 80074e8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <xTimerGenericCommand+0x30>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	623b      	str	r3, [r7, #32]
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007508:	4b19      	ldr	r3, [pc, #100]	@ (8007570 <xTimerGenericCommand+0x98>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d02a      	beq.n	8007566 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b05      	cmp	r3, #5
 8007520:	dc18      	bgt.n	8007554 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007522:	f7ff fdad 	bl	8007080 <xTaskGetSchedulerState>
 8007526:	4603      	mov	r3, r0
 8007528:	2b02      	cmp	r3, #2
 800752a:	d109      	bne.n	8007540 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800752c:	4b10      	ldr	r3, [pc, #64]	@ (8007570 <xTimerGenericCommand+0x98>)
 800752e:	6818      	ldr	r0, [r3, #0]
 8007530:	f107 0110 	add.w	r1, r7, #16
 8007534:	2300      	movs	r3, #0
 8007536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007538:	f7fd ffc4 	bl	80054c4 <xQueueGenericSend>
 800753c:	6278      	str	r0, [r7, #36]	@ 0x24
 800753e:	e012      	b.n	8007566 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007540:	4b0b      	ldr	r3, [pc, #44]	@ (8007570 <xTimerGenericCommand+0x98>)
 8007542:	6818      	ldr	r0, [r3, #0]
 8007544:	f107 0110 	add.w	r1, r7, #16
 8007548:	2300      	movs	r3, #0
 800754a:	2200      	movs	r2, #0
 800754c:	f7fd ffba 	bl	80054c4 <xQueueGenericSend>
 8007550:	6278      	str	r0, [r7, #36]	@ 0x24
 8007552:	e008      	b.n	8007566 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007554:	4b06      	ldr	r3, [pc, #24]	@ (8007570 <xTimerGenericCommand+0x98>)
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	f107 0110 	add.w	r1, r7, #16
 800755c:	2300      	movs	r3, #0
 800755e:	683a      	ldr	r2, [r7, #0]
 8007560:	f7fe f8b2 	bl	80056c8 <xQueueGenericSendFromISR>
 8007564:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007568:	4618      	mov	r0, r3
 800756a:	3728      	adds	r7, #40	@ 0x28
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}
 8007570:	200047b4 	.word	0x200047b4

08007574 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b088      	sub	sp, #32
 8007578:	af02      	add	r7, sp, #8
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800757e:	4b23      	ldr	r3, [pc, #140]	@ (800760c <prvProcessExpiredTimer+0x98>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	3304      	adds	r3, #4
 800758c:	4618      	mov	r0, r3
 800758e:	f7fd fd03 	bl	8004f98 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007598:	f003 0304 	and.w	r3, r3, #4
 800759c:	2b00      	cmp	r3, #0
 800759e:	d023      	beq.n	80075e8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	699a      	ldr	r2, [r3, #24]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	18d1      	adds	r1, r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	6978      	ldr	r0, [r7, #20]
 80075ae:	f000 f8d5 	bl	800775c <prvInsertTimerInActiveList>
 80075b2:	4603      	mov	r3, r0
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d020      	beq.n	80075fa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075b8:	2300      	movs	r3, #0
 80075ba:	9300      	str	r3, [sp, #0]
 80075bc:	2300      	movs	r3, #0
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	2100      	movs	r1, #0
 80075c2:	6978      	ldr	r0, [r7, #20]
 80075c4:	f7ff ff88 	bl	80074d8 <xTimerGenericCommand>
 80075c8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d114      	bne.n	80075fa <prvProcessExpiredTimer+0x86>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60fb      	str	r3, [r7, #12]
}
 80075e2:	bf00      	nop
 80075e4:	bf00      	nop
 80075e6:	e7fd      	b.n	80075e4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	6a1b      	ldr	r3, [r3, #32]
 80075fe:	6978      	ldr	r0, [r7, #20]
 8007600:	4798      	blx	r3
}
 8007602:	bf00      	nop
 8007604:	3718      	adds	r7, #24
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	200047ac 	.word	0x200047ac

08007610 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007618:	f107 0308 	add.w	r3, r7, #8
 800761c:	4618      	mov	r0, r3
 800761e:	f000 f859 	bl	80076d4 <prvGetNextExpireTime>
 8007622:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4619      	mov	r1, r3
 8007628:	68f8      	ldr	r0, [r7, #12]
 800762a:	f000 f805 	bl	8007638 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800762e:	f000 f8d7 	bl	80077e0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007632:	bf00      	nop
 8007634:	e7f0      	b.n	8007618 <prvTimerTask+0x8>
	...

08007638 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007642:	f7ff f915 	bl	8006870 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007646:	f107 0308 	add.w	r3, r7, #8
 800764a:	4618      	mov	r0, r3
 800764c:	f000 f866 	bl	800771c <prvSampleTimeNow>
 8007650:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d130      	bne.n	80076ba <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10a      	bne.n	8007674 <prvProcessTimerOrBlockTask+0x3c>
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	429a      	cmp	r2, r3
 8007664:	d806      	bhi.n	8007674 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007666:	f7ff f911 	bl	800688c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800766a:	68f9      	ldr	r1, [r7, #12]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff ff81 	bl	8007574 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007672:	e024      	b.n	80076be <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007674:	683b      	ldr	r3, [r7, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d008      	beq.n	800768c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800767a:	4b13      	ldr	r3, [pc, #76]	@ (80076c8 <prvProcessTimerOrBlockTask+0x90>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <prvProcessTimerOrBlockTask+0x50>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <prvProcessTimerOrBlockTask+0x52>
 8007688:	2300      	movs	r3, #0
 800768a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800768c:	4b0f      	ldr	r3, [pc, #60]	@ (80076cc <prvProcessTimerOrBlockTask+0x94>)
 800768e:	6818      	ldr	r0, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	4619      	mov	r1, r3
 800769a:	f7fe fd95 	bl	80061c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800769e:	f7ff f8f5 	bl	800688c <xTaskResumeAll>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d10a      	bne.n	80076be <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076a8:	4b09      	ldr	r3, [pc, #36]	@ (80076d0 <prvProcessTimerOrBlockTask+0x98>)
 80076aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ae:	601a      	str	r2, [r3, #0]
 80076b0:	f3bf 8f4f 	dsb	sy
 80076b4:	f3bf 8f6f 	isb	sy
}
 80076b8:	e001      	b.n	80076be <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076ba:	f7ff f8e7 	bl	800688c <xTaskResumeAll>
}
 80076be:	bf00      	nop
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	200047b0 	.word	0x200047b0
 80076cc:	200047b4 	.word	0x200047b4
 80076d0:	e000ed04 	.word	0xe000ed04

080076d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80076dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007718 <prvGetNextExpireTime+0x44>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d101      	bne.n	80076ea <prvGetNextExpireTime+0x16>
 80076e6:	2201      	movs	r2, #1
 80076e8:	e000      	b.n	80076ec <prvGetNextExpireTime+0x18>
 80076ea:	2200      	movs	r2, #0
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80076f8:	4b07      	ldr	r3, [pc, #28]	@ (8007718 <prvGetNextExpireTime+0x44>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	68db      	ldr	r3, [r3, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	e001      	b.n	8007708 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007708:	68fb      	ldr	r3, [r7, #12]
}
 800770a:	4618      	mov	r0, r3
 800770c:	3714      	adds	r7, #20
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	200047ac 	.word	0x200047ac

0800771c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b084      	sub	sp, #16
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007724:	f7ff f950 	bl	80069c8 <xTaskGetTickCount>
 8007728:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800772a:	4b0b      	ldr	r3, [pc, #44]	@ (8007758 <prvSampleTimeNow+0x3c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	429a      	cmp	r2, r3
 8007732:	d205      	bcs.n	8007740 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007734:	f000 f93a 	bl	80079ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	601a      	str	r2, [r3, #0]
 800773e:	e002      	b.n	8007746 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007746:	4a04      	ldr	r2, [pc, #16]	@ (8007758 <prvSampleTimeNow+0x3c>)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800774c:	68fb      	ldr	r3, [r7, #12]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	200047bc 	.word	0x200047bc

0800775c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800776a:	2300      	movs	r3, #0
 800776c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	68ba      	ldr	r2, [r7, #8]
 8007772:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	429a      	cmp	r2, r3
 8007780:	d812      	bhi.n	80077a8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	1ad2      	subs	r2, r2, r3
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	429a      	cmp	r2, r3
 800778e:	d302      	bcc.n	8007796 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007790:	2301      	movs	r3, #1
 8007792:	617b      	str	r3, [r7, #20]
 8007794:	e01b      	b.n	80077ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007796:	4b10      	ldr	r3, [pc, #64]	@ (80077d8 <prvInsertTimerInActiveList+0x7c>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3304      	adds	r3, #4
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f7fd fbc0 	bl	8004f26 <vListInsert>
 80077a6:	e012      	b.n	80077ce <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d206      	bcs.n	80077be <prvInsertTimerInActiveList+0x62>
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d302      	bcc.n	80077be <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077b8:	2301      	movs	r3, #1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	e007      	b.n	80077ce <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077be:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <prvInsertTimerInActiveList+0x80>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3304      	adds	r3, #4
 80077c6:	4619      	mov	r1, r3
 80077c8:	4610      	mov	r0, r2
 80077ca:	f7fd fbac 	bl	8004f26 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80077ce:	697b      	ldr	r3, [r7, #20]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3718      	adds	r7, #24
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200047b0 	.word	0x200047b0
 80077dc:	200047ac 	.word	0x200047ac

080077e0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b08e      	sub	sp, #56	@ 0x38
 80077e4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077e6:	e0ce      	b.n	8007986 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	da19      	bge.n	8007822 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80077ee:	1d3b      	adds	r3, r7, #4
 80077f0:	3304      	adds	r3, #4
 80077f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80077f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10b      	bne.n	8007812 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	61fb      	str	r3, [r7, #28]
}
 800780c:	bf00      	nop
 800780e:	bf00      	nop
 8007810:	e7fd      	b.n	800780e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007818:	6850      	ldr	r0, [r2, #4]
 800781a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800781c:	6892      	ldr	r2, [r2, #8]
 800781e:	4611      	mov	r1, r2
 8007820:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	f2c0 80ae 	blt.w	8007986 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800782e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007830:	695b      	ldr	r3, [r3, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d004      	beq.n	8007840 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007838:	3304      	adds	r3, #4
 800783a:	4618      	mov	r0, r3
 800783c:	f7fd fbac 	bl	8004f98 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007840:	463b      	mov	r3, r7
 8007842:	4618      	mov	r0, r3
 8007844:	f7ff ff6a 	bl	800771c <prvSampleTimeNow>
 8007848:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b09      	cmp	r3, #9
 800784e:	f200 8097 	bhi.w	8007980 <prvProcessReceivedCommands+0x1a0>
 8007852:	a201      	add	r2, pc, #4	@ (adr r2, 8007858 <prvProcessReceivedCommands+0x78>)
 8007854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007858:	08007881 	.word	0x08007881
 800785c:	08007881 	.word	0x08007881
 8007860:	08007881 	.word	0x08007881
 8007864:	080078f7 	.word	0x080078f7
 8007868:	0800790b 	.word	0x0800790b
 800786c:	08007957 	.word	0x08007957
 8007870:	08007881 	.word	0x08007881
 8007874:	08007881 	.word	0x08007881
 8007878:	080078f7 	.word	0x080078f7
 800787c:	0800790b 	.word	0x0800790b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007882:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007886:	f043 0301 	orr.w	r3, r3, #1
 800788a:	b2da      	uxtb	r2, r3
 800788c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007896:	699b      	ldr	r3, [r3, #24]
 8007898:	18d1      	adds	r1, r2, r3
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800789e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078a0:	f7ff ff5c 	bl	800775c <prvInsertTimerInActiveList>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d06c      	beq.n	8007984 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ac:	6a1b      	ldr	r3, [r3, #32]
 80078ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d061      	beq.n	8007984 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80078c0:	68ba      	ldr	r2, [r7, #8]
 80078c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	441a      	add	r2, r3
 80078c8:	2300      	movs	r3, #0
 80078ca:	9300      	str	r3, [sp, #0]
 80078cc:	2300      	movs	r3, #0
 80078ce:	2100      	movs	r1, #0
 80078d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078d2:	f7ff fe01 	bl	80074d8 <xTimerGenericCommand>
 80078d6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d152      	bne.n	8007984 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	61bb      	str	r3, [r7, #24]
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078fc:	f023 0301 	bic.w	r3, r3, #1
 8007900:	b2da      	uxtb	r2, r3
 8007902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007904:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007908:	e03d      	b.n	8007986 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800790a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800790c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007910:	f043 0301 	orr.w	r3, r3, #1
 8007914:	b2da      	uxtb	r2, r3
 8007916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007918:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800791c:	68ba      	ldr	r2, [r7, #8]
 800791e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007920:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	617b      	str	r3, [r7, #20]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	699a      	ldr	r2, [r3, #24]
 8007946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007948:	18d1      	adds	r1, r2, r3
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800794c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800794e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007950:	f7ff ff04 	bl	800775c <prvInsertTimerInActiveList>
					break;
 8007954:	e017      	b.n	8007986 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007958:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800795c:	f003 0302 	and.w	r3, r3, #2
 8007960:	2b00      	cmp	r3, #0
 8007962:	d103      	bne.n	800796c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007964:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007966:	f000 fbe7 	bl	8008138 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800796a:	e00c      	b.n	8007986 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800796c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007972:	f023 0301 	bic.w	r3, r3, #1
 8007976:	b2da      	uxtb	r2, r3
 8007978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800797e:	e002      	b.n	8007986 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007980:	bf00      	nop
 8007982:	e000      	b.n	8007986 <prvProcessReceivedCommands+0x1a6>
					break;
 8007984:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007986:	4b08      	ldr	r3, [pc, #32]	@ (80079a8 <prvProcessReceivedCommands+0x1c8>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	1d39      	adds	r1, r7, #4
 800798c:	2200      	movs	r2, #0
 800798e:	4618      	mov	r0, r3
 8007990:	f7fd ffc8 	bl	8005924 <xQueueReceive>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	f47f af26 	bne.w	80077e8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	3730      	adds	r7, #48	@ 0x30
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	200047b4 	.word	0x200047b4

080079ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079b2:	e049      	b.n	8007a48 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079b4:	4b2e      	ldr	r3, [pc, #184]	@ (8007a70 <prvSwitchTimerLists+0xc4>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079be:	4b2c      	ldr	r3, [pc, #176]	@ (8007a70 <prvSwitchTimerLists+0xc4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	3304      	adds	r3, #4
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7fd fae3 	bl	8004f98 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6a1b      	ldr	r3, [r3, #32]
 80079d6:	68f8      	ldr	r0, [r7, #12]
 80079d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d02f      	beq.n	8007a48 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	693a      	ldr	r2, [r7, #16]
 80079ee:	4413      	add	r3, r2
 80079f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d90e      	bls.n	8007a18 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a06:	4b1a      	ldr	r3, [pc, #104]	@ (8007a70 <prvSwitchTimerLists+0xc4>)
 8007a08:	681a      	ldr	r2, [r3, #0]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	3304      	adds	r3, #4
 8007a0e:	4619      	mov	r1, r3
 8007a10:	4610      	mov	r0, r2
 8007a12:	f7fd fa88 	bl	8004f26 <vListInsert>
 8007a16:	e017      	b.n	8007a48 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a18:	2300      	movs	r3, #0
 8007a1a:	9300      	str	r3, [sp, #0]
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	693a      	ldr	r2, [r7, #16]
 8007a20:	2100      	movs	r1, #0
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f7ff fd58 	bl	80074d8 <xTimerGenericCommand>
 8007a28:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	603b      	str	r3, [r7, #0]
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a48:	4b09      	ldr	r3, [pc, #36]	@ (8007a70 <prvSwitchTimerLists+0xc4>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1b0      	bne.n	80079b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a52:	4b07      	ldr	r3, [pc, #28]	@ (8007a70 <prvSwitchTimerLists+0xc4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a58:	4b06      	ldr	r3, [pc, #24]	@ (8007a74 <prvSwitchTimerLists+0xc8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a04      	ldr	r2, [pc, #16]	@ (8007a70 <prvSwitchTimerLists+0xc4>)
 8007a5e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007a60:	4a04      	ldr	r2, [pc, #16]	@ (8007a74 <prvSwitchTimerLists+0xc8>)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	6013      	str	r3, [r2, #0]
}
 8007a66:	bf00      	nop
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200047ac 	.word	0x200047ac
 8007a74:	200047b0 	.word	0x200047b0

08007a78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b082      	sub	sp, #8
 8007a7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007a7e:	f000 f96b 	bl	8007d58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007a82:	4b15      	ldr	r3, [pc, #84]	@ (8007ad8 <prvCheckForValidListAndQueue+0x60>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d120      	bne.n	8007acc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007a8a:	4814      	ldr	r0, [pc, #80]	@ (8007adc <prvCheckForValidListAndQueue+0x64>)
 8007a8c:	f7fd f9fa 	bl	8004e84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007a90:	4813      	ldr	r0, [pc, #76]	@ (8007ae0 <prvCheckForValidListAndQueue+0x68>)
 8007a92:	f7fd f9f7 	bl	8004e84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007a96:	4b13      	ldr	r3, [pc, #76]	@ (8007ae4 <prvCheckForValidListAndQueue+0x6c>)
 8007a98:	4a10      	ldr	r2, [pc, #64]	@ (8007adc <prvCheckForValidListAndQueue+0x64>)
 8007a9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007a9c:	4b12      	ldr	r3, [pc, #72]	@ (8007ae8 <prvCheckForValidListAndQueue+0x70>)
 8007a9e:	4a10      	ldr	r2, [pc, #64]	@ (8007ae0 <prvCheckForValidListAndQueue+0x68>)
 8007aa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	4b11      	ldr	r3, [pc, #68]	@ (8007aec <prvCheckForValidListAndQueue+0x74>)
 8007aa8:	4a11      	ldr	r2, [pc, #68]	@ (8007af0 <prvCheckForValidListAndQueue+0x78>)
 8007aaa:	2110      	movs	r1, #16
 8007aac:	200a      	movs	r0, #10
 8007aae:	f7fd fb07 	bl	80050c0 <xQueueGenericCreateStatic>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	4a08      	ldr	r2, [pc, #32]	@ (8007ad8 <prvCheckForValidListAndQueue+0x60>)
 8007ab6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ab8:	4b07      	ldr	r3, [pc, #28]	@ (8007ad8 <prvCheckForValidListAndQueue+0x60>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ac0:	4b05      	ldr	r3, [pc, #20]	@ (8007ad8 <prvCheckForValidListAndQueue+0x60>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	490b      	ldr	r1, [pc, #44]	@ (8007af4 <prvCheckForValidListAndQueue+0x7c>)
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fb2a 	bl	8006120 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007acc:	f000 f976 	bl	8007dbc <vPortExitCritical>
}
 8007ad0:	bf00      	nop
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	200047b4 	.word	0x200047b4
 8007adc:	20004784 	.word	0x20004784
 8007ae0:	20004798 	.word	0x20004798
 8007ae4:	200047ac 	.word	0x200047ac
 8007ae8:	200047b0 	.word	0x200047b0
 8007aec:	20004860 	.word	0x20004860
 8007af0:	200047c0 	.word	0x200047c0
 8007af4:	0801c620 	.word	0x0801c620

08007af8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	3b04      	subs	r3, #4
 8007b08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	3b04      	subs	r3, #4
 8007b16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	f023 0201 	bic.w	r2, r3, #1
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b28:	4a0c      	ldr	r2, [pc, #48]	@ (8007b5c <pxPortInitialiseStack+0x64>)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	3b14      	subs	r3, #20
 8007b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3b04      	subs	r3, #4
 8007b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f06f 0202 	mvn.w	r2, #2
 8007b46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3b20      	subs	r3, #32
 8007b4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	3714      	adds	r7, #20
 8007b54:	46bd      	mov	sp, r7
 8007b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5a:	4770      	bx	lr
 8007b5c:	08007b61 	.word	0x08007b61

08007b60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b6a:	4b13      	ldr	r3, [pc, #76]	@ (8007bb8 <prvTaskExitError+0x58>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b72:	d00b      	beq.n	8007b8c <prvTaskExitError+0x2c>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	60fb      	str	r3, [r7, #12]
}
 8007b86:	bf00      	nop
 8007b88:	bf00      	nop
 8007b8a:	e7fd      	b.n	8007b88 <prvTaskExitError+0x28>
	__asm volatile
 8007b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b90:	f383 8811 	msr	BASEPRI, r3
 8007b94:	f3bf 8f6f 	isb	sy
 8007b98:	f3bf 8f4f 	dsb	sy
 8007b9c:	60bb      	str	r3, [r7, #8]
}
 8007b9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ba0:	bf00      	nop
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0fc      	beq.n	8007ba2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007ba8:	bf00      	nop
 8007baa:	bf00      	nop
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	20000020 	.word	0x20000020
 8007bbc:	00000000 	.word	0x00000000

08007bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bc0:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <pxCurrentTCBConst2>)
 8007bc2:	6819      	ldr	r1, [r3, #0]
 8007bc4:	6808      	ldr	r0, [r1, #0]
 8007bc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	f380 8809 	msr	PSP, r0
 8007bce:	f3bf 8f6f 	isb	sy
 8007bd2:	f04f 0000 	mov.w	r0, #0
 8007bd6:	f380 8811 	msr	BASEPRI, r0
 8007bda:	4770      	bx	lr
 8007bdc:	f3af 8000 	nop.w

08007be0 <pxCurrentTCBConst2>:
 8007be0:	20004284 	.word	0x20004284
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007be4:	bf00      	nop
 8007be6:	bf00      	nop

08007be8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007be8:	4808      	ldr	r0, [pc, #32]	@ (8007c0c <prvPortStartFirstTask+0x24>)
 8007bea:	6800      	ldr	r0, [r0, #0]
 8007bec:	6800      	ldr	r0, [r0, #0]
 8007bee:	f380 8808 	msr	MSP, r0
 8007bf2:	f04f 0000 	mov.w	r0, #0
 8007bf6:	f380 8814 	msr	CONTROL, r0
 8007bfa:	b662      	cpsie	i
 8007bfc:	b661      	cpsie	f
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
 8007c06:	df00      	svc	0
 8007c08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c0a:	bf00      	nop
 8007c0c:	e000ed08 	.word	0xe000ed08

08007c10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c16:	4b47      	ldr	r3, [pc, #284]	@ (8007d34 <xPortStartScheduler+0x124>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	4a47      	ldr	r2, [pc, #284]	@ (8007d38 <xPortStartScheduler+0x128>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d10b      	bne.n	8007c38 <xPortStartScheduler+0x28>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	613b      	str	r3, [r7, #16]
}
 8007c32:	bf00      	nop
 8007c34:	bf00      	nop
 8007c36:	e7fd      	b.n	8007c34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c38:	4b3e      	ldr	r3, [pc, #248]	@ (8007d34 <xPortStartScheduler+0x124>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d3c <xPortStartScheduler+0x12c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d10b      	bne.n	8007c5a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	60fb      	str	r3, [r7, #12]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c5a:	4b39      	ldr	r3, [pc, #228]	@ (8007d40 <xPortStartScheduler+0x130>)
 8007c5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	22ff      	movs	r2, #255	@ 0xff
 8007c6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	b2db      	uxtb	r3, r3
 8007c72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	4b31      	ldr	r3, [pc, #196]	@ (8007d44 <xPortStartScheduler+0x134>)
 8007c80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c82:	4b31      	ldr	r3, [pc, #196]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007c84:	2207      	movs	r2, #7
 8007c86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c88:	e009      	b.n	8007c9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	4a2d      	ldr	r2, [pc, #180]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007c92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	005b      	lsls	r3, r3, #1
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c9e:	78fb      	ldrb	r3, [r7, #3]
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ca6:	2b80      	cmp	r3, #128	@ 0x80
 8007ca8:	d0ef      	beq.n	8007c8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007caa:	4b27      	ldr	r3, [pc, #156]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f1c3 0307 	rsb	r3, r3, #7
 8007cb2:	2b04      	cmp	r3, #4
 8007cb4:	d00b      	beq.n	8007cce <xPortStartScheduler+0xbe>
	__asm volatile
 8007cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cba:	f383 8811 	msr	BASEPRI, r3
 8007cbe:	f3bf 8f6f 	isb	sy
 8007cc2:	f3bf 8f4f 	dsb	sy
 8007cc6:	60bb      	str	r3, [r7, #8]
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	e7fd      	b.n	8007cca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cce:	4b1e      	ldr	r3, [pc, #120]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	021b      	lsls	r3, r3, #8
 8007cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007cd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007ce0:	4a19      	ldr	r2, [pc, #100]	@ (8007d48 <xPortStartScheduler+0x138>)
 8007ce2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cec:	4b17      	ldr	r3, [pc, #92]	@ (8007d4c <xPortStartScheduler+0x13c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4a16      	ldr	r2, [pc, #88]	@ (8007d4c <xPortStartScheduler+0x13c>)
 8007cf2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007cf6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007cf8:	4b14      	ldr	r3, [pc, #80]	@ (8007d4c <xPortStartScheduler+0x13c>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a13      	ldr	r2, [pc, #76]	@ (8007d4c <xPortStartScheduler+0x13c>)
 8007cfe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d04:	f000 f8da 	bl	8007ebc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d08:	4b11      	ldr	r3, [pc, #68]	@ (8007d50 <xPortStartScheduler+0x140>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d0e:	f000 f8f9 	bl	8007f04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d12:	4b10      	ldr	r3, [pc, #64]	@ (8007d54 <xPortStartScheduler+0x144>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4a0f      	ldr	r2, [pc, #60]	@ (8007d54 <xPortStartScheduler+0x144>)
 8007d18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d1e:	f7ff ff63 	bl	8007be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d22:	f7fe ff2d 	bl	8006b80 <vTaskSwitchContext>
	prvTaskExitError();
 8007d26:	f7ff ff1b 	bl	8007b60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	e000ed00 	.word	0xe000ed00
 8007d38:	410fc271 	.word	0x410fc271
 8007d3c:	410fc270 	.word	0x410fc270
 8007d40:	e000e400 	.word	0xe000e400
 8007d44:	200048b0 	.word	0x200048b0
 8007d48:	200048b4 	.word	0x200048b4
 8007d4c:	e000ed20 	.word	0xe000ed20
 8007d50:	20000020 	.word	0x20000020
 8007d54:	e000ef34 	.word	0xe000ef34

08007d58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
}
 8007d70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d72:	4b10      	ldr	r3, [pc, #64]	@ (8007db4 <vPortEnterCritical+0x5c>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3301      	adds	r3, #1
 8007d78:	4a0e      	ldr	r2, [pc, #56]	@ (8007db4 <vPortEnterCritical+0x5c>)
 8007d7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007db4 <vPortEnterCritical+0x5c>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d110      	bne.n	8007da6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d84:	4b0c      	ldr	r3, [pc, #48]	@ (8007db8 <vPortEnterCritical+0x60>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	b2db      	uxtb	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00b      	beq.n	8007da6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	603b      	str	r3, [r7, #0]
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <vPortEnterCritical+0x4a>
	}
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr
 8007db2:	bf00      	nop
 8007db4:	20000020 	.word	0x20000020
 8007db8:	e000ed04 	.word	0xe000ed04

08007dbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dc2:	4b12      	ldr	r3, [pc, #72]	@ (8007e0c <vPortExitCritical+0x50>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10b      	bne.n	8007de2 <vPortExitCritical+0x26>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	607b      	str	r3, [r7, #4]
}
 8007ddc:	bf00      	nop
 8007dde:	bf00      	nop
 8007de0:	e7fd      	b.n	8007dde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007de2:	4b0a      	ldr	r3, [pc, #40]	@ (8007e0c <vPortExitCritical+0x50>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	3b01      	subs	r3, #1
 8007de8:	4a08      	ldr	r2, [pc, #32]	@ (8007e0c <vPortExitCritical+0x50>)
 8007dea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007dec:	4b07      	ldr	r3, [pc, #28]	@ (8007e0c <vPortExitCritical+0x50>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d105      	bne.n	8007e00 <vPortExitCritical+0x44>
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f383 8811 	msr	BASEPRI, r3
}
 8007dfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	20000020 	.word	0x20000020

08007e10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e10:	f3ef 8009 	mrs	r0, PSP
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	4b15      	ldr	r3, [pc, #84]	@ (8007e70 <pxCurrentTCBConst>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	f01e 0f10 	tst.w	lr, #16
 8007e20:	bf08      	it	eq
 8007e22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e2a:	6010      	str	r0, [r2, #0]
 8007e2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e34:	f380 8811 	msr	BASEPRI, r0
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
 8007e40:	f7fe fe9e 	bl	8006b80 <vTaskSwitchContext>
 8007e44:	f04f 0000 	mov.w	r0, #0
 8007e48:	f380 8811 	msr	BASEPRI, r0
 8007e4c:	bc09      	pop	{r0, r3}
 8007e4e:	6819      	ldr	r1, [r3, #0]
 8007e50:	6808      	ldr	r0, [r1, #0]
 8007e52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e56:	f01e 0f10 	tst.w	lr, #16
 8007e5a:	bf08      	it	eq
 8007e5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e60:	f380 8809 	msr	PSP, r0
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	f3af 8000 	nop.w

08007e70 <pxCurrentTCBConst>:
 8007e70:	20004284 	.word	0x20004284
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e74:	bf00      	nop
 8007e76:	bf00      	nop

08007e78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e82:	f383 8811 	msr	BASEPRI, r3
 8007e86:	f3bf 8f6f 	isb	sy
 8007e8a:	f3bf 8f4f 	dsb	sy
 8007e8e:	607b      	str	r3, [r7, #4]
}
 8007e90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007e92:	f7fe fdbb 	bl	8006a0c <xTaskIncrementTick>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e9c:	4b06      	ldr	r3, [pc, #24]	@ (8007eb8 <xPortSysTickHandler+0x40>)
 8007e9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	f383 8811 	msr	BASEPRI, r3
}
 8007eae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007eb0:	bf00      	nop
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	e000ed04 	.word	0xe000ed04

08007ebc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef0 <vPortSetupTimerInterrupt+0x34>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef4 <vPortSetupTimerInterrupt+0x38>)
 8007ec8:	2200      	movs	r2, #0
 8007eca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef8 <vPortSetupTimerInterrupt+0x3c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8007efc <vPortSetupTimerInterrupt+0x40>)
 8007ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ed6:	099b      	lsrs	r3, r3, #6
 8007ed8:	4a09      	ldr	r2, [pc, #36]	@ (8007f00 <vPortSetupTimerInterrupt+0x44>)
 8007eda:	3b01      	subs	r3, #1
 8007edc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007ede:	4b04      	ldr	r3, [pc, #16]	@ (8007ef0 <vPortSetupTimerInterrupt+0x34>)
 8007ee0:	2207      	movs	r2, #7
 8007ee2:	601a      	str	r2, [r3, #0]
}
 8007ee4:	bf00      	nop
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	e000e010 	.word	0xe000e010
 8007ef4:	e000e018 	.word	0xe000e018
 8007ef8:	20000000 	.word	0x20000000
 8007efc:	10624dd3 	.word	0x10624dd3
 8007f00:	e000e014 	.word	0xe000e014

08007f04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f14 <vPortEnableVFP+0x10>
 8007f08:	6801      	ldr	r1, [r0, #0]
 8007f0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f0e:	6001      	str	r1, [r0, #0]
 8007f10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f12:	bf00      	nop
 8007f14:	e000ed88 	.word	0xe000ed88

08007f18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f18:	b480      	push	{r7}
 8007f1a:	b085      	sub	sp, #20
 8007f1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f1e:	f3ef 8305 	mrs	r3, IPSR
 8007f22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b0f      	cmp	r3, #15
 8007f28:	d915      	bls.n	8007f56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f2a:	4a18      	ldr	r2, [pc, #96]	@ (8007f8c <vPortValidateInterruptPriority+0x74>)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f34:	4b16      	ldr	r3, [pc, #88]	@ (8007f90 <vPortValidateInterruptPriority+0x78>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	7afa      	ldrb	r2, [r7, #11]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d20b      	bcs.n	8007f56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	607b      	str	r3, [r7, #4]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f56:	4b0f      	ldr	r3, [pc, #60]	@ (8007f94 <vPortValidateInterruptPriority+0x7c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f98 <vPortValidateInterruptPriority+0x80>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d90b      	bls.n	8007f7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	603b      	str	r3, [r7, #0]
}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	e7fd      	b.n	8007f7a <vPortValidateInterruptPriority+0x62>
	}
 8007f7e:	bf00      	nop
 8007f80:	3714      	adds	r7, #20
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	e000e3f0 	.word	0xe000e3f0
 8007f90:	200048b0 	.word	0x200048b0
 8007f94:	e000ed0c 	.word	0xe000ed0c
 8007f98:	200048b4 	.word	0x200048b4

08007f9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b08a      	sub	sp, #40	@ 0x28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fa8:	f7fe fc62 	bl	8006870 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fac:	4b5c      	ldr	r3, [pc, #368]	@ (8008120 <pvPortMalloc+0x184>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fb4:	f000 f924 	bl	8008200 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8008124 <pvPortMalloc+0x188>)
 8007fba:	681a      	ldr	r2, [r3, #0]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4013      	ands	r3, r2
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	f040 8095 	bne.w	80080f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01e      	beq.n	800800a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007fcc:	2208      	movs	r2, #8
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d015      	beq.n	800800a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f023 0307 	bic.w	r3, r3, #7
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f003 0307 	and.w	r3, r3, #7
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00b      	beq.n	800800a <pvPortMalloc+0x6e>
	__asm volatile
 8007ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ff6:	f383 8811 	msr	BASEPRI, r3
 8007ffa:	f3bf 8f6f 	isb	sy
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	617b      	str	r3, [r7, #20]
}
 8008004:	bf00      	nop
 8008006:	bf00      	nop
 8008008:	e7fd      	b.n	8008006 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d06f      	beq.n	80080f0 <pvPortMalloc+0x154>
 8008010:	4b45      	ldr	r3, [pc, #276]	@ (8008128 <pvPortMalloc+0x18c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	687a      	ldr	r2, [r7, #4]
 8008016:	429a      	cmp	r2, r3
 8008018:	d86a      	bhi.n	80080f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800801a:	4b44      	ldr	r3, [pc, #272]	@ (800812c <pvPortMalloc+0x190>)
 800801c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800801e:	4b43      	ldr	r3, [pc, #268]	@ (800812c <pvPortMalloc+0x190>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008024:	e004      	b.n	8008030 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d903      	bls.n	8008042 <pvPortMalloc+0xa6>
 800803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1f1      	bne.n	8008026 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008042:	4b37      	ldr	r3, [pc, #220]	@ (8008120 <pvPortMalloc+0x184>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008048:	429a      	cmp	r2, r3
 800804a:	d051      	beq.n	80080f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800804c:	6a3b      	ldr	r3, [r7, #32]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2208      	movs	r2, #8
 8008052:	4413      	add	r3, r2
 8008054:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	6a3b      	ldr	r3, [r7, #32]
 800805c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800805e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	1ad2      	subs	r2, r2, r3
 8008066:	2308      	movs	r3, #8
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	429a      	cmp	r2, r3
 800806c:	d920      	bls.n	80080b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800806e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4413      	add	r3, r2
 8008074:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <pvPortMalloc+0xfc>
	__asm volatile
 8008080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008084:	f383 8811 	msr	BASEPRI, r3
 8008088:	f3bf 8f6f 	isb	sy
 800808c:	f3bf 8f4f 	dsb	sy
 8008090:	613b      	str	r3, [r7, #16]
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	e7fd      	b.n	8008094 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809a:	685a      	ldr	r2, [r3, #4]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	1ad2      	subs	r2, r2, r3
 80080a0:	69bb      	ldr	r3, [r7, #24]
 80080a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080aa:	69b8      	ldr	r0, [r7, #24]
 80080ac:	f000 f90a 	bl	80082c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008128 <pvPortMalloc+0x18c>)
 80080b2:	681a      	ldr	r2, [r3, #0]
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008128 <pvPortMalloc+0x18c>)
 80080bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080be:	4b1a      	ldr	r3, [pc, #104]	@ (8008128 <pvPortMalloc+0x18c>)
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008130 <pvPortMalloc+0x194>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	429a      	cmp	r2, r3
 80080c8:	d203      	bcs.n	80080d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080ca:	4b17      	ldr	r3, [pc, #92]	@ (8008128 <pvPortMalloc+0x18c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a18      	ldr	r2, [pc, #96]	@ (8008130 <pvPortMalloc+0x194>)
 80080d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d4:	685a      	ldr	r2, [r3, #4]
 80080d6:	4b13      	ldr	r3, [pc, #76]	@ (8008124 <pvPortMalloc+0x188>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	431a      	orrs	r2, r3
 80080dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e2:	2200      	movs	r2, #0
 80080e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80080e6:	4b13      	ldr	r3, [pc, #76]	@ (8008134 <pvPortMalloc+0x198>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	3301      	adds	r3, #1
 80080ec:	4a11      	ldr	r2, [pc, #68]	@ (8008134 <pvPortMalloc+0x198>)
 80080ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080f0:	f7fe fbcc 	bl	800688c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00b      	beq.n	8008116 <pvPortMalloc+0x17a>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	60fb      	str	r3, [r7, #12]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <pvPortMalloc+0x176>
	return pvReturn;
 8008116:	69fb      	ldr	r3, [r7, #28]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3728      	adds	r7, #40	@ 0x28
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}
 8008120:	2000c0c0 	.word	0x2000c0c0
 8008124:	2000c0d4 	.word	0x2000c0d4
 8008128:	2000c0c4 	.word	0x2000c0c4
 800812c:	2000c0b8 	.word	0x2000c0b8
 8008130:	2000c0c8 	.word	0x2000c0c8
 8008134:	2000c0cc 	.word	0x2000c0cc

08008138 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b086      	sub	sp, #24
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d04f      	beq.n	80081ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800814a:	2308      	movs	r3, #8
 800814c:	425b      	negs	r3, r3
 800814e:	697a      	ldr	r2, [r7, #20]
 8008150:	4413      	add	r3, r2
 8008152:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	4b25      	ldr	r3, [pc, #148]	@ (80081f4 <vPortFree+0xbc>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4013      	ands	r3, r2
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10b      	bne.n	800817e <vPortFree+0x46>
	__asm volatile
 8008166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816a:	f383 8811 	msr	BASEPRI, r3
 800816e:	f3bf 8f6f 	isb	sy
 8008172:	f3bf 8f4f 	dsb	sy
 8008176:	60fb      	str	r3, [r7, #12]
}
 8008178:	bf00      	nop
 800817a:	bf00      	nop
 800817c:	e7fd      	b.n	800817a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00b      	beq.n	800819e <vPortFree+0x66>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818a:	f383 8811 	msr	BASEPRI, r3
 800818e:	f3bf 8f6f 	isb	sy
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	60bb      	str	r3, [r7, #8]
}
 8008198:	bf00      	nop
 800819a:	bf00      	nop
 800819c:	e7fd      	b.n	800819a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	4b14      	ldr	r3, [pc, #80]	@ (80081f4 <vPortFree+0xbc>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4013      	ands	r3, r2
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01e      	beq.n	80081ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d11a      	bne.n	80081ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	4b0e      	ldr	r3, [pc, #56]	@ (80081f4 <vPortFree+0xbc>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	43db      	mvns	r3, r3
 80081be:	401a      	ands	r2, r3
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081c4:	f7fe fb54 	bl	8006870 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	4b0a      	ldr	r3, [pc, #40]	@ (80081f8 <vPortFree+0xc0>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4413      	add	r3, r2
 80081d2:	4a09      	ldr	r2, [pc, #36]	@ (80081f8 <vPortFree+0xc0>)
 80081d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081d6:	6938      	ldr	r0, [r7, #16]
 80081d8:	f000 f874 	bl	80082c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80081dc:	4b07      	ldr	r3, [pc, #28]	@ (80081fc <vPortFree+0xc4>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3301      	adds	r3, #1
 80081e2:	4a06      	ldr	r2, [pc, #24]	@ (80081fc <vPortFree+0xc4>)
 80081e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80081e6:	f7fe fb51 	bl	800688c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081ea:	bf00      	nop
 80081ec:	3718      	adds	r7, #24
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	2000c0d4 	.word	0x2000c0d4
 80081f8:	2000c0c4 	.word	0x2000c0c4
 80081fc:	2000c0d0 	.word	0x2000c0d0

08008200 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008200:	b480      	push	{r7}
 8008202:	b085      	sub	sp, #20
 8008204:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008206:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 800820a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800820c:	4b27      	ldr	r3, [pc, #156]	@ (80082ac <prvHeapInit+0xac>)
 800820e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00c      	beq.n	8008234 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3307      	adds	r3, #7
 800821e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0307 	bic.w	r3, r3, #7
 8008226:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008228:	68ba      	ldr	r2, [r7, #8]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	4a1f      	ldr	r2, [pc, #124]	@ (80082ac <prvHeapInit+0xac>)
 8008230:	4413      	add	r3, r2
 8008232:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008238:	4a1d      	ldr	r2, [pc, #116]	@ (80082b0 <prvHeapInit+0xb0>)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800823e:	4b1c      	ldr	r3, [pc, #112]	@ (80082b0 <prvHeapInit+0xb0>)
 8008240:	2200      	movs	r2, #0
 8008242:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68ba      	ldr	r2, [r7, #8]
 8008248:	4413      	add	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800824c:	2208      	movs	r2, #8
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	1a9b      	subs	r3, r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0307 	bic.w	r3, r3, #7
 800825a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4a15      	ldr	r2, [pc, #84]	@ (80082b4 <prvHeapInit+0xb4>)
 8008260:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008262:	4b14      	ldr	r3, [pc, #80]	@ (80082b4 <prvHeapInit+0xb4>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2200      	movs	r2, #0
 8008268:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800826a:	4b12      	ldr	r3, [pc, #72]	@ (80082b4 <prvHeapInit+0xb4>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2200      	movs	r2, #0
 8008270:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	1ad2      	subs	r2, r2, r3
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008280:	4b0c      	ldr	r3, [pc, #48]	@ (80082b4 <prvHeapInit+0xb4>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	685b      	ldr	r3, [r3, #4]
 800828c:	4a0a      	ldr	r2, [pc, #40]	@ (80082b8 <prvHeapInit+0xb8>)
 800828e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	4a09      	ldr	r2, [pc, #36]	@ (80082bc <prvHeapInit+0xbc>)
 8008296:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008298:	4b09      	ldr	r3, [pc, #36]	@ (80082c0 <prvHeapInit+0xc0>)
 800829a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800829e:	601a      	str	r2, [r3, #0]
}
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr
 80082ac:	200048b8 	.word	0x200048b8
 80082b0:	2000c0b8 	.word	0x2000c0b8
 80082b4:	2000c0c0 	.word	0x2000c0c0
 80082b8:	2000c0c8 	.word	0x2000c0c8
 80082bc:	2000c0c4 	.word	0x2000c0c4
 80082c0:	2000c0d4 	.word	0x2000c0d4

080082c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082cc:	4b28      	ldr	r3, [pc, #160]	@ (8008370 <prvInsertBlockIntoFreeList+0xac>)
 80082ce:	60fb      	str	r3, [r7, #12]
 80082d0:	e002      	b.n	80082d8 <prvInsertBlockIntoFreeList+0x14>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d8f7      	bhi.n	80082d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	4413      	add	r3, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d108      	bne.n	8008306 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	441a      	add	r2, r3
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	68ba      	ldr	r2, [r7, #8]
 8008310:	441a      	add	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	429a      	cmp	r2, r3
 8008318:	d118      	bne.n	800834c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	4b15      	ldr	r3, [pc, #84]	@ (8008374 <prvInsertBlockIntoFreeList+0xb0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	429a      	cmp	r2, r3
 8008324:	d00d      	beq.n	8008342 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	441a      	add	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e008      	b.n	8008354 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008342:	4b0c      	ldr	r3, [pc, #48]	@ (8008374 <prvInsertBlockIntoFreeList+0xb0>)
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	601a      	str	r2, [r3, #0]
 800834a:	e003      	b.n	8008354 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008354:	68fa      	ldr	r2, [r7, #12]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	429a      	cmp	r2, r3
 800835a:	d002      	beq.n	8008362 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	2000c0b8 	.word	0x2000c0b8
 8008374:	2000c0c0 	.word	0x2000c0c0

08008378 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b084      	sub	sp, #16
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  err_t err;

#ifdef LWIP_DEBUG
  /* catch functions that don't set err */
  apimsg->err = ERR_VAL;
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	22fa      	movs	r2, #250	@ 0xfa
 8008386:	711a      	strb	r2, [r3, #4]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	330c      	adds	r3, #12
 800838e:	461a      	mov	r2, r3
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f002 fbc0 	bl	800ab18 <tcpip_send_msg_wait_sem>
 8008398:	4603      	mov	r3, r0
 800839a:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800839c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d103      	bne.n	80083ac <netconn_apimsg+0x34>
    return apimsg->err;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80083aa:	e001      	b.n	80083b0 <netconn_apimsg+0x38>
  }
  return err;
 80083ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08c      	sub	sp, #48	@ 0x30
 80083bc:	af00      	add	r7, sp, #0
 80083be:	4603      	mov	r3, r0
 80083c0:	603a      	str	r2, [r7, #0]
 80083c2:	71fb      	strb	r3, [r7, #7]
 80083c4:	460b      	mov	r3, r1
 80083c6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80083c8:	79fb      	ldrb	r3, [r7, #7]
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 f9b3 	bl	8009738 <netconn_alloc>
 80083d2:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 80083d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d060      	beq.n	800849c <netconn_new_with_proto_and_callback+0xe4>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80083da:	79bb      	ldrb	r3, [r7, #6]
 80083dc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80083de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083e0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 80083e2:	f107 0308 	add.w	r3, r7, #8
 80083e6:	4619      	mov	r1, r3
 80083e8:	482f      	ldr	r0, [pc, #188]	@ (80084a8 <netconn_new_with_proto_and_callback+0xf0>)
 80083ea:	f7ff ffc5 	bl	8008378 <netconn_apimsg>
 80083ee:	4603      	mov	r3, r0
 80083f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 80083f4:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d04f      	beq.n	800849c <netconn_new_with_proto_and_callback+0xe4>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 80083fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d008      	beq.n	8008416 <netconn_new_with_proto_and_callback+0x5e>
 8008404:	4b29      	ldr	r3, [pc, #164]	@ (80084ac <netconn_new_with_proto_and_callback+0xf4>)
 8008406:	22a3      	movs	r2, #163	@ 0xa3
 8008408:	4929      	ldr	r1, [pc, #164]	@ (80084b0 <netconn_new_with_proto_and_callback+0xf8>)
 800840a:	482a      	ldr	r0, [pc, #168]	@ (80084b4 <netconn_new_with_proto_and_callback+0xfc>)
 800840c:	f013 f98c 	bl	801b728 <iprintf>
 8008410:	2000      	movs	r0, #0
 8008412:	f013 f8b3 	bl	801b57c <fflush>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8008416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008418:	3310      	adds	r3, #16
 800841a:	4618      	mov	r0, r3
 800841c:	f012 fe9c 	bl	801b158 <sys_mbox_valid>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d108      	bne.n	8008438 <netconn_new_with_proto_and_callback+0x80>
 8008426:	4b21      	ldr	r3, [pc, #132]	@ (80084ac <netconn_new_with_proto_and_callback+0xf4>)
 8008428:	22a4      	movs	r2, #164	@ 0xa4
 800842a:	4923      	ldr	r1, [pc, #140]	@ (80084b8 <netconn_new_with_proto_and_callback+0x100>)
 800842c:	4821      	ldr	r0, [pc, #132]	@ (80084b4 <netconn_new_with_proto_and_callback+0xfc>)
 800842e:	f013 f97b 	bl	801b728 <iprintf>
 8008432:	2000      	movs	r0, #0
 8008434:	f013 f8a2 	bl	801b57c <fflush>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843a:	3314      	adds	r3, #20
 800843c:	4618      	mov	r0, r3
 800843e:	f012 fe8b 	bl	801b158 <sys_mbox_valid>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d008      	beq.n	800845a <netconn_new_with_proto_and_callback+0xa2>
 8008448:	4b18      	ldr	r3, [pc, #96]	@ (80084ac <netconn_new_with_proto_and_callback+0xf4>)
 800844a:	22a6      	movs	r2, #166	@ 0xa6
 800844c:	491b      	ldr	r1, [pc, #108]	@ (80084bc <netconn_new_with_proto_and_callback+0x104>)
 800844e:	4819      	ldr	r0, [pc, #100]	@ (80084b4 <netconn_new_with_proto_and_callback+0xfc>)
 8008450:	f013 f96a 	bl	801b728 <iprintf>
 8008454:	2000      	movs	r0, #0
 8008456:	f013 f891 	bl	801b57c <fflush>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800845a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845c:	330c      	adds	r3, #12
 800845e:	4618      	mov	r0, r3
 8008460:	f012 ff08 	bl	801b274 <sys_sem_valid>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d108      	bne.n	800847c <netconn_new_with_proto_and_callback+0xc4>
 800846a:	4b10      	ldr	r3, [pc, #64]	@ (80084ac <netconn_new_with_proto_and_callback+0xf4>)
 800846c:	22a9      	movs	r2, #169	@ 0xa9
 800846e:	4914      	ldr	r1, [pc, #80]	@ (80084c0 <netconn_new_with_proto_and_callback+0x108>)
 8008470:	4810      	ldr	r0, [pc, #64]	@ (80084b4 <netconn_new_with_proto_and_callback+0xfc>)
 8008472:	f013 f959 	bl	801b728 <iprintf>
 8008476:	2000      	movs	r0, #0
 8008478:	f013 f880 	bl	801b57c <fflush>
      sys_sem_free(&conn->op_completed);
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	330c      	adds	r3, #12
 8008480:	4618      	mov	r0, r3
 8008482:	f012 feea 	bl	801b25a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8008486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008488:	3310      	adds	r3, #16
 800848a:	4618      	mov	r0, r3
 800848c:	f012 fdf0 	bl	801b070 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8008490:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008492:	2007      	movs	r0, #7
 8008494:	f003 f9c4 	bl	800b820 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8008498:	2300      	movs	r3, #0
 800849a:	e000      	b.n	800849e <netconn_new_with_proto_and_callback+0xe6>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800849c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3730      	adds	r7, #48	@ 0x30
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	0800970d 	.word	0x0800970d
 80084ac:	0801c628 	.word	0x0801c628
 80084b0:	0801c65c 	.word	0x0801c65c
 80084b4:	0801c680 	.word	0x0801c680
 80084b8:	0801c6a8 	.word	0x0801c6a8
 80084bc:	0801c6c0 	.word	0x0801c6c0
 80084c0:	0801c6e4 	.word	0x0801c6e4

080084c4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08c      	sub	sp, #48	@ 0x30
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d101      	bne.n	80084d6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 80084d2:	2300      	movs	r3, #0
 80084d4:	e014      	b.n	8008500 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80084da:	2329      	movs	r3, #41	@ 0x29
 80084dc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80084de:	f107 030c 	add.w	r3, r7, #12
 80084e2:	4619      	mov	r1, r3
 80084e4:	4808      	ldr	r0, [pc, #32]	@ (8008508 <netconn_prepare_delete+0x44>)
 80084e6:	f7ff ff47 	bl	8008378 <netconn_apimsg>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80084f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <netconn_prepare_delete+0x3a>
    return err;
 80084f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80084fc:	e000      	b.n	8008500 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 80084fe:	2300      	movs	r3, #0
}
 8008500:	4618      	mov	r0, r3
 8008502:	3730      	adds	r7, #48	@ 0x30
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}
 8008508:	08009cbd 	.word	0x08009cbd

0800850c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d101      	bne.n	800851e <netconn_delete+0x12>
    return ERR_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	e00d      	b.n	800853a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff ffd0 	bl	80084c4 <netconn_prepare_delete>
 8008524:	4603      	mov	r3, r0
 8008526:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8008528:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d102      	bne.n	8008536 <netconn_delete+0x2a>
    netconn_free(conn);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f001 f973 	bl	800981c <netconn_free>
  }
  return err;
 8008536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3710      	adds	r7, #16
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08e      	sub	sp, #56	@ 0x38
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	4613      	mov	r3, r2
 8008550:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d10c      	bne.n	8008572 <netconn_bind+0x2e>
 8008558:	4b13      	ldr	r3, [pc, #76]	@ (80085a8 <netconn_bind+0x64>)
 800855a:	f44f 729c 	mov.w	r2, #312	@ 0x138
 800855e:	4913      	ldr	r1, [pc, #76]	@ (80085ac <netconn_bind+0x68>)
 8008560:	4813      	ldr	r0, [pc, #76]	@ (80085b0 <netconn_bind+0x6c>)
 8008562:	f013 f8e1 	bl	801b728 <iprintf>
 8008566:	2000      	movs	r0, #0
 8008568:	f013 f808 	bl	801b57c <fflush>
 800856c:	f06f 030f 	mvn.w	r3, #15
 8008570:	e015      	b.n	800859e <netconn_bind+0x5a>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <netconn_bind+0x38>
    addr = IP4_ADDR_ANY;
 8008578:	4b0e      	ldr	r3, [pc, #56]	@ (80085b4 <netconn_bind+0x70>)
 800857a:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8008584:	88fb      	ldrh	r3, [r7, #6]
 8008586:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8008588:	f107 0314 	add.w	r3, r7, #20
 800858c:	4619      	mov	r1, r3
 800858e:	480a      	ldr	r0, [pc, #40]	@ (80085b8 <netconn_bind+0x74>)
 8008590:	f7ff fef2 	bl	8008378 <netconn_apimsg>
 8008594:	4603      	mov	r3, r0
 8008596:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800859a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800859e:	4618      	mov	r0, r3
 80085a0:	3738      	adds	r7, #56	@ 0x38
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	0801c628 	.word	0x0801c628
 80085ac:	0801c760 	.word	0x0801c760
 80085b0:	0801c680 	.word	0x0801c680
 80085b4:	08025270 	.word	0x08025270
 80085b8:	08009ea1 	.word	0x08009ea1

080085bc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08c      	sub	sp, #48	@ 0x30
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	460b      	mov	r3, r1
 80085c6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d10c      	bne.n	80085e8 <netconn_listen_with_backlog+0x2c>
 80085ce:	4b0f      	ldr	r3, [pc, #60]	@ (800860c <netconn_listen_with_backlog+0x50>)
 80085d0:	f240 12bb 	movw	r2, #443	@ 0x1bb
 80085d4:	490e      	ldr	r1, [pc, #56]	@ (8008610 <netconn_listen_with_backlog+0x54>)
 80085d6:	480f      	ldr	r0, [pc, #60]	@ (8008614 <netconn_listen_with_backlog+0x58>)
 80085d8:	f013 f8a6 	bl	801b728 <iprintf>
 80085dc:	2000      	movs	r0, #0
 80085de:	f012 ffcd 	bl	801b57c <fflush>
 80085e2:	f06f 030f 	mvn.w	r3, #15
 80085e6:	e00c      	b.n	8008602 <netconn_listen_with_backlog+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	4619      	mov	r1, r3
 80085f2:	4809      	ldr	r0, [pc, #36]	@ (8008618 <netconn_listen_with_backlog+0x5c>)
 80085f4:	f7ff fec0 	bl	8008378 <netconn_apimsg>
 80085f8:	4603      	mov	r3, r0
 80085fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80085fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008602:	4618      	mov	r0, r3
 8008604:	3730      	adds	r7, #48	@ 0x30
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	0801c628 	.word	0x0801c628
 8008610:	0801c7e0 	.word	0x0801c7e0
 8008614:	0801c680 	.word	0x0801c680
 8008618:	08009f15 	.word	0x08009f15

0800861c <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d10c      	bne.n	8008646 <netconn_accept+0x2a>
 800862c:	4b40      	ldr	r3, [pc, #256]	@ (8008730 <netconn_accept+0x114>)
 800862e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8008632:	4940      	ldr	r1, [pc, #256]	@ (8008734 <netconn_accept+0x118>)
 8008634:	4840      	ldr	r0, [pc, #256]	@ (8008738 <netconn_accept+0x11c>)
 8008636:	f013 f877 	bl	801b728 <iprintf>
 800863a:	2000      	movs	r0, #0
 800863c:	f012 ff9e 	bl	801b57c <fflush>
 8008640:	f06f 030f 	mvn.w	r3, #15
 8008644:	e06f      	b.n	8008726 <netconn_accept+0x10a>
  *new_conn = NULL;
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d10c      	bne.n	800866c <netconn_accept+0x50>
 8008652:	4b37      	ldr	r3, [pc, #220]	@ (8008730 <netconn_accept+0x114>)
 8008654:	f240 12e3 	movw	r2, #483	@ 0x1e3
 8008658:	4938      	ldr	r1, [pc, #224]	@ (800873c <netconn_accept+0x120>)
 800865a:	4837      	ldr	r0, [pc, #220]	@ (8008738 <netconn_accept+0x11c>)
 800865c:	f013 f864 	bl	801b728 <iprintf>
 8008660:	2000      	movs	r0, #0
 8008662:	f012 ff8b 	bl	801b57c <fflush>
 8008666:	f06f 030f 	mvn.w	r3, #15
 800866a:	e05c      	b.n	8008726 <netconn_accept+0x10a>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f000 fb98 	bl	8008da2 <netconn_err>
 8008672:	4603      	mov	r3, r0
 8008674:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8008676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <netconn_accept+0x68>
    /* return pending error */
    return err;
 800867e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008682:	e050      	b.n	8008726 <netconn_accept+0x10a>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	3314      	adds	r3, #20
 8008688:	4618      	mov	r0, r3
 800868a:	f012 fd65 	bl	801b158 <sys_mbox_valid>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <netconn_accept+0x84>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	7f1b      	ldrb	r3, [r3, #28]
 8008698:	f003 0301 	and.w	r3, r3, #1
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <netconn_accept+0x8a>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 80086a0:	f06f 030e 	mvn.w	r3, #14
 80086a4:	e03f      	b.n	8008726 <netconn_accept+0x10a>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	7f1b      	ldrb	r3, [r3, #28]
 80086aa:	f003 0302 	and.w	r3, r3, #2
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d00e      	beq.n	80086d0 <netconn_accept+0xb4>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	3314      	adds	r3, #20
 80086b6:	f107 020c 	add.w	r2, r7, #12
 80086ba:	4611      	mov	r1, r2
 80086bc:	4618      	mov	r0, r3
 80086be:	f012 fd34 	bl	801b12a <sys_arch_mbox_tryfetch>
 80086c2:	4603      	mov	r3, r0
 80086c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086c8:	d10a      	bne.n	80086e0 <netconn_accept+0xc4>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80086ca:	f06f 0306 	mvn.w	r3, #6
 80086ce:	e02a      	b.n	8008726 <netconn_accept+0x10a>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	3314      	adds	r3, #20
 80086d4:	f107 010c 	add.w	r1, r7, #12
 80086d8:	2200      	movs	r2, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f012 fcf4 	bl	801b0c8 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <netconn_accept+0xd8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ec:	2200      	movs	r2, #0
 80086ee:	2101      	movs	r1, #1
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f107 0213 	add.w	r2, r7, #19
 80086fa:	4611      	mov	r1, r2
 80086fc:	4618      	mov	r0, r3
 80086fe:	f000 fba3 	bl	8008e48 <lwip_netconn_is_err_msg>
 8008702:	4603      	mov	r3, r0
 8008704:	2b00      	cmp	r3, #0
 8008706:	d002      	beq.n	800870e <netconn_accept+0xf2>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8008708:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800870c:	e00b      	b.n	8008726 <netconn_accept+0x10a>
  }
  if (accept_ptr == NULL) {
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d102      	bne.n	800871a <netconn_accept+0xfe>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8008714:	f06f 030e 	mvn.w	r3, #14
 8008718:	e005      	b.n	8008726 <netconn_accept+0x10a>
  }
  newconn = (struct netconn *)accept_ptr;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	697a      	ldr	r2, [r7, #20]
 8008722:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8008724:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	0801c628 	.word	0x0801c628
 8008734:	0801c800 	.word	0x0801c800
 8008738:	0801c680 	.word	0x0801c680
 800873c:	0801c820 	.word	0x0801c820

08008740 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b088      	sub	sp, #32
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	4613      	mov	r3, r2
 800874c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800874e:	2300      	movs	r3, #0
 8008750:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10c      	bne.n	8008772 <netconn_recv_data+0x32>
 8008758:	4b61      	ldr	r3, [pc, #388]	@ (80088e0 <netconn_recv_data+0x1a0>)
 800875a:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800875e:	4961      	ldr	r1, [pc, #388]	@ (80088e4 <netconn_recv_data+0x1a4>)
 8008760:	4861      	ldr	r0, [pc, #388]	@ (80088e8 <netconn_recv_data+0x1a8>)
 8008762:	f012 ffe1 	bl	801b728 <iprintf>
 8008766:	2000      	movs	r0, #0
 8008768:	f012 ff08 	bl	801b57c <fflush>
 800876c:	f06f 030f 	mvn.w	r3, #15
 8008770:	e0b1      	b.n	80088d6 <netconn_recv_data+0x196>
  *new_buf = NULL;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	2200      	movs	r2, #0
 8008776:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d10c      	bne.n	8008798 <netconn_recv_data+0x58>
 800877e:	4b58      	ldr	r3, [pc, #352]	@ (80088e0 <netconn_recv_data+0x1a0>)
 8008780:	f240 224a 	movw	r2, #586	@ 0x24a
 8008784:	4959      	ldr	r1, [pc, #356]	@ (80088ec <netconn_recv_data+0x1ac>)
 8008786:	4858      	ldr	r0, [pc, #352]	@ (80088e8 <netconn_recv_data+0x1a8>)
 8008788:	f012 ffce 	bl	801b728 <iprintf>
 800878c:	2000      	movs	r0, #0
 800878e:	f012 fef5 	bl	801b57c <fflush>
 8008792:	f06f 030f 	mvn.w	r3, #15
 8008796:	e09e      	b.n	80088d6 <netconn_recv_data+0x196>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3310      	adds	r3, #16
 800879c:	4618      	mov	r0, r3
 800879e:	f012 fcdb 	bl	801b158 <sys_mbox_valid>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d10e      	bne.n	80087c6 <netconn_recv_data+0x86>
    err_t err = netconn_err(conn);
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f000 fafa 	bl	8008da2 <netconn_err>
 80087ae:	4603      	mov	r3, r0
 80087b0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80087b2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d002      	beq.n	80087c0 <netconn_recv_data+0x80>
      /* return pending error */
      return err;
 80087ba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80087be:	e08a      	b.n	80088d6 <netconn_recv_data+0x196>
    }
    return ERR_CONN;
 80087c0:	f06f 030a 	mvn.w	r3, #10
 80087c4:	e087      	b.n	80088d6 <netconn_recv_data+0x196>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	7f1b      	ldrb	r3, [r3, #28]
 80087ca:	f003 0302 	and.w	r3, r3, #2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10f      	bne.n	80087f2 <netconn_recv_data+0xb2>
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	f003 0304 	and.w	r3, r3, #4
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d10a      	bne.n	80087f2 <netconn_recv_data+0xb2>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	7f1b      	ldrb	r3, [r3, #28]
 80087e0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d104      	bne.n	80087f2 <netconn_recv_data+0xb2>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d023      	beq.n	800883a <netconn_recv_data+0xfa>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3310      	adds	r3, #16
 80087f6:	f107 0218 	add.w	r2, r7, #24
 80087fa:	4611      	mov	r1, r2
 80087fc:	4618      	mov	r0, r3
 80087fe:	f012 fc94 	bl	801b12a <sys_arch_mbox_tryfetch>
 8008802:	4603      	mov	r3, r0
 8008804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008808:	d11f      	bne.n	800884a <netconn_recv_data+0x10a>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fac9 	bl	8008da2 <netconn_err>
 8008810:	4603      	mov	r3, r0
 8008812:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8008814:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d002      	beq.n	8008822 <netconn_recv_data+0xe2>
        /* return pending error */
        return err;
 800881c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8008820:	e059      	b.n	80088d6 <netconn_recv_data+0x196>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	7f1b      	ldrb	r3, [r3, #28]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d002      	beq.n	8008834 <netconn_recv_data+0xf4>
        return ERR_CONN;
 800882e:	f06f 030a 	mvn.w	r3, #10
 8008832:	e050      	b.n	80088d6 <netconn_recv_data+0x196>
      }
      return ERR_WOULDBLOCK;
 8008834:	f06f 0306 	mvn.w	r3, #6
 8008838:	e04d      	b.n	80088d6 <netconn_recv_data+0x196>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	3310      	adds	r3, #16
 800883e:	f107 0118 	add.w	r1, r7, #24
 8008842:	2200      	movs	r2, #0
 8008844:	4618      	mov	r0, r3
 8008846:	f012 fc3f 	bl	801b0c8 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008852:	2b10      	cmp	r3, #16
 8008854:	d117      	bne.n	8008886 <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	f107 0217 	add.w	r2, r7, #23
 800885c:	4611      	mov	r1, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f000 faf2 	bl	8008e48 <lwip_netconn_is_err_msg>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d009      	beq.n	800887e <netconn_recv_data+0x13e>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800886a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800886e:	f113 0f0f 	cmn.w	r3, #15
 8008872:	d101      	bne.n	8008878 <netconn_recv_data+0x138>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8008874:	2300      	movs	r3, #0
 8008876:	e02e      	b.n	80088d6 <netconn_recv_data+0x196>
      }
      return err;
 8008878:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800887c:	e02b      	b.n	80088d6 <netconn_recv_data+0x196>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800887e:	69bb      	ldr	r3, [r7, #24]
 8008880:	891b      	ldrh	r3, [r3, #8]
 8008882:	83fb      	strh	r3, [r7, #30]
 8008884:	e010      	b.n	80088a8 <netconn_recv_data+0x168>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8008886:	69bb      	ldr	r3, [r7, #24]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d109      	bne.n	80088a0 <netconn_recv_data+0x160>
 800888c:	4b14      	ldr	r3, [pc, #80]	@ (80088e0 <netconn_recv_data+0x1a0>)
 800888e:	f240 2291 	movw	r2, #657	@ 0x291
 8008892:	4917      	ldr	r1, [pc, #92]	@ (80088f0 <netconn_recv_data+0x1b0>)
 8008894:	4814      	ldr	r0, [pc, #80]	@ (80088e8 <netconn_recv_data+0x1a8>)
 8008896:	f012 ff47 	bl	801b728 <iprintf>
 800889a:	2000      	movs	r0, #0
 800889c:	f012 fe6e 	bl	801b57c <fflush>
    len = netbuf_len((struct netbuf *)buf);
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	891b      	ldrh	r3, [r3, #8]
 80088a6:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d005      	beq.n	80088bc <netconn_recv_data+0x17c>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	8bfa      	ldrh	r2, [r7, #30]
 80088b6:	2101      	movs	r1, #1
 80088b8:	68f8      	ldr	r0, [r7, #12]
 80088ba:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	8bfa      	ldrh	r2, [r7, #30]
 80088c0:	4619      	mov	r1, r3
 80088c2:	480c      	ldr	r0, [pc, #48]	@ (80088f4 <netconn_recv_data+0x1b4>)
 80088c4:	f012 ff30 	bl	801b728 <iprintf>
 80088c8:	2000      	movs	r0, #0
 80088ca:	f012 fe57 	bl	801b57c <fflush>

  *new_buf = buf;
 80088ce:	69ba      	ldr	r2, [r7, #24]
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3720      	adds	r7, #32
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	0801c628 	.word	0x0801c628
 80088e4:	0801c840 	.word	0x0801c840
 80088e8:	0801c680 	.word	0x0801c680
 80088ec:	0801c860 	.word	0x0801c860
 80088f0:	0801c87c 	.word	0x0801c87c
 80088f4:	0801c888 	.word	0x0801c888

080088f8 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d005      	beq.n	8008916 <netconn_tcp_recvd_msg+0x1e>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008912:	2b10      	cmp	r3, #16
 8008914:	d00c      	beq.n	8008930 <netconn_tcp_recvd_msg+0x38>
 8008916:	4b0e      	ldr	r3, [pc, #56]	@ (8008950 <netconn_tcp_recvd_msg+0x58>)
 8008918:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800891c:	490d      	ldr	r1, [pc, #52]	@ (8008954 <netconn_tcp_recvd_msg+0x5c>)
 800891e:	480e      	ldr	r0, [pc, #56]	@ (8008958 <netconn_tcp_recvd_msg+0x60>)
 8008920:	f012 ff02 	bl	801b728 <iprintf>
 8008924:	2000      	movs	r0, #0
 8008926:	f012 fe29 	bl	801b57c <fflush>
 800892a:	f06f 030f 	mvn.w	r3, #15
 800892e:	e00a      	b.n	8008946 <netconn_tcp_recvd_msg+0x4e>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800893c:	6879      	ldr	r1, [r7, #4]
 800893e:	4807      	ldr	r0, [pc, #28]	@ (800895c <netconn_tcp_recvd_msg+0x64>)
 8008940:	f7ff fd1a 	bl	8008378 <netconn_apimsg>
 8008944:	4603      	mov	r3, r0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	0801c628 	.word	0x0801c628
 8008954:	0801c8b4 	.word	0x0801c8b4
 8008958:	0801c680 	.word	0x0801c680
 800895c:	0800a045 	.word	0x0800a045

08008960 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b090      	sub	sp, #64	@ 0x40
 8008964:	af00      	add	r7, sp, #0
 8008966:	60f8      	str	r0, [r7, #12]
 8008968:	60b9      	str	r1, [r7, #8]
 800896a:	4613      	mov	r3, r2
 800896c:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3310      	adds	r3, #16
 8008972:	4618      	mov	r0, r3
 8008974:	f012 fbf0 	bl	801b158 <sys_mbox_valid>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d102      	bne.n	8008984 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800897e:	f06f 030a 	mvn.w	r3, #10
 8008982:	e06d      	b.n	8008a60 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	7f1b      	ldrb	r3, [r3, #28]
 8008988:	b25b      	sxtb	r3, r3
 800898a:	2b00      	cmp	r3, #0
 800898c:	da07      	bge.n	800899e <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	7f1b      	ldrb	r3, [r3, #28]
 8008992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008996:	b2da      	uxtb	r2, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800899c:	e039      	b.n	8008a12 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800899e:	79fb      	ldrb	r3, [r7, #7]
 80089a0:	461a      	mov	r2, r3
 80089a2:	68b9      	ldr	r1, [r7, #8]
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f7ff fecb 	bl	8008740 <netconn_recv_data>
 80089aa:	4603      	mov	r3, r0
 80089ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 80089b0:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d002      	beq.n	80089be <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80089b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 80089bc:	e050      	b.n	8008a60 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80089c4:	79fb      	ldrb	r3, [r7, #7]
 80089c6:	f003 0308 	and.w	r3, r3, #8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10e      	bne.n	80089ec <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80089ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d002      	beq.n	80089da <netconn_recv_data_tcp+0x7a>
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	891b      	ldrh	r3, [r3, #8]
 80089d8:	e000      	b.n	80089dc <netconn_recv_data_tcp+0x7c>
 80089da:	2301      	movs	r3, #1
 80089dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80089de:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80089e0:	f107 0214 	add.w	r2, r7, #20
 80089e4:	4619      	mov	r1, r3
 80089e6:	68f8      	ldr	r0, [r7, #12]
 80089e8:	f7ff ff86 	bl	80088f8 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80089ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d134      	bne.n	8008a5c <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d009      	beq.n	8008a10 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7f1b      	ldrb	r3, [r3, #28]
 8008a00:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008a04:	b2da      	uxtb	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8008a0a:	f06f 0306 	mvn.w	r3, #6
 8008a0e:	e027      	b.n	8008a60 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8008a10:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <netconn_recv_data_tcp+0xc6>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1e:	2200      	movs	r2, #0
 8008a20:	2101      	movs	r1, #1
 8008a22:	68f8      	ldr	r0, [r7, #12]
 8008a24:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10f      	bne.n	8008a4e <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 f9b7 	bl	8008da2 <netconn_err>
 8008a34:	4603      	mov	r3, r0
 8008a36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 8008a3a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <netconn_recv_data_tcp+0xe8>
          return err;
 8008a42:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008a46:	e00b      	b.n	8008a60 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8008a48:	f06f 030d 	mvn.w	r3, #13
 8008a4c:	e008      	b.n	8008a60 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8008a4e:	2101      	movs	r1, #1
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f965 	bl	8008d20 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8008a56:	f06f 030e 	mvn.w	r3, #14
 8008a5a:	e001      	b.n	8008a60 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8008a5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3740      	adds	r7, #64	@ 0x40
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}

08008a68 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d10c      	bne.n	8008a96 <netconn_recv+0x2e>
 8008a7c:	4b36      	ldr	r3, [pc, #216]	@ (8008b58 <netconn_recv+0xf0>)
 8008a7e:	f240 3263 	movw	r2, #867	@ 0x363
 8008a82:	4936      	ldr	r1, [pc, #216]	@ (8008b5c <netconn_recv+0xf4>)
 8008a84:	4836      	ldr	r0, [pc, #216]	@ (8008b60 <netconn_recv+0xf8>)
 8008a86:	f012 fe4f 	bl	801b728 <iprintf>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	f012 fd76 	bl	801b57c <fflush>
 8008a90:	f06f 030f 	mvn.w	r3, #15
 8008a94:	e05c      	b.n	8008b50 <netconn_recv+0xe8>
  *new_buf = NULL;
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10c      	bne.n	8008abc <netconn_recv+0x54>
 8008aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8008b58 <netconn_recv+0xf0>)
 8008aa4:	f240 3265 	movw	r2, #869	@ 0x365
 8008aa8:	492e      	ldr	r1, [pc, #184]	@ (8008b64 <netconn_recv+0xfc>)
 8008aaa:	482d      	ldr	r0, [pc, #180]	@ (8008b60 <netconn_recv+0xf8>)
 8008aac:	f012 fe3c 	bl	801b728 <iprintf>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f012 fd63 	bl	801b57c <fflush>
 8008ab6:	f06f 030f 	mvn.w	r3, #15
 8008aba:	e049      	b.n	8008b50 <netconn_recv+0xe8>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ac4:	2b10      	cmp	r3, #16
 8008ac6:	d13d      	bne.n	8008b44 <netconn_recv+0xdc>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008acc:	2006      	movs	r0, #6
 8008ace:	f002 fe25 	bl	800b71c <memp_malloc>
 8008ad2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <netconn_recv+0x78>
      return ERR_MEM;
 8008ada:	f04f 33ff 	mov.w	r3, #4294967295
 8008ade:	e037      	b.n	8008b50 <netconn_recv+0xe8>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8008ae0:	f107 030c 	add.w	r3, r7, #12
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f7ff ff39 	bl	8008960 <netconn_recv_data_tcp>
 8008aee:	4603      	mov	r3, r0
 8008af0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8008af2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d006      	beq.n	8008b08 <netconn_recv+0xa0>
      memp_free(MEMP_NETBUF, buf);
 8008afa:	6979      	ldr	r1, [r7, #20]
 8008afc:	2006      	movs	r0, #6
 8008afe:	f002 fe8f 	bl	800b820 <memp_free>
      return err;
 8008b02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8008b06:	e023      	b.n	8008b50 <netconn_recv+0xe8>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d109      	bne.n	8008b22 <netconn_recv+0xba>
 8008b0e:	4b12      	ldr	r3, [pc, #72]	@ (8008b58 <netconn_recv+0xf0>)
 8008b10:	f240 3279 	movw	r2, #889	@ 0x379
 8008b14:	4914      	ldr	r1, [pc, #80]	@ (8008b68 <netconn_recv+0x100>)
 8008b16:	4812      	ldr	r0, [pc, #72]	@ (8008b60 <netconn_recv+0xf8>)
 8008b18:	f012 fe06 	bl	801b728 <iprintf>
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	f012 fd2d 	bl	801b57c <fflush>

    buf->p = p;
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008b28:	68fa      	ldr	r2, [r7, #12]
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2200      	movs	r2, #0
 8008b32:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2200      	movs	r2, #0
 8008b38:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	697a      	ldr	r2, [r7, #20]
 8008b3e:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e005      	b.n	8008b50 <netconn_recv+0xe8>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8008b44:	2200      	movs	r2, #0
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f7ff fdf9 	bl	8008740 <netconn_recv_data>
 8008b4e:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3718      	adds	r7, #24
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	0801c628 	.word	0x0801c628
 8008b5c:	0801c840 	.word	0x0801c840
 8008b60:	0801c680 	.word	0x0801c680
 8008b64:	0801c860 	.word	0x0801c860
 8008b68:	0801c904 	.word	0x0801c904

08008b6c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b088      	sub	sp, #32
 8008b70:	af02      	add	r7, sp, #8
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
 8008b78:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8008b82:	78fa      	ldrb	r2, [r7, #3]
 8008b84:	f107 0110 	add.w	r1, r7, #16
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	4613      	mov	r3, r2
 8008b8e:	2201      	movs	r2, #1
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 f805 	bl	8008ba0 <netconn_write_vectors_partly>
 8008b96:	4603      	mov	r3, r0
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3718      	adds	r7, #24
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b092      	sub	sp, #72	@ 0x48
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	4611      	mov	r1, r2
 8008bac:	461a      	mov	r2, r3
 8008bae:	460b      	mov	r3, r1
 8008bb0:	80fb      	strh	r3, [r7, #6]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10c      	bne.n	8008bd6 <netconn_write_vectors_partly+0x36>
 8008bbc:	4b52      	ldr	r3, [pc, #328]	@ (8008d08 <netconn_write_vectors_partly+0x168>)
 8008bbe:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008bc2:	4952      	ldr	r1, [pc, #328]	@ (8008d0c <netconn_write_vectors_partly+0x16c>)
 8008bc4:	4852      	ldr	r0, [pc, #328]	@ (8008d10 <netconn_write_vectors_partly+0x170>)
 8008bc6:	f012 fdaf 	bl	801b728 <iprintf>
 8008bca:	2000      	movs	r0, #0
 8008bcc:	f012 fcd6 	bl	801b57c <fflush>
 8008bd0:	f06f 030f 	mvn.w	r3, #15
 8008bd4:	e094      	b.n	8008d00 <netconn_write_vectors_partly+0x160>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008bde:	2b10      	cmp	r3, #16
 8008be0:	d00c      	beq.n	8008bfc <netconn_write_vectors_partly+0x5c>
 8008be2:	4b49      	ldr	r3, [pc, #292]	@ (8008d08 <netconn_write_vectors_partly+0x168>)
 8008be4:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 8008be8:	494a      	ldr	r1, [pc, #296]	@ (8008d14 <netconn_write_vectors_partly+0x174>)
 8008bea:	4849      	ldr	r0, [pc, #292]	@ (8008d10 <netconn_write_vectors_partly+0x170>)
 8008bec:	f012 fd9c 	bl	801b728 <iprintf>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	f012 fcc3 	bl	801b57c <fflush>
 8008bf6:	f06f 0305 	mvn.w	r3, #5
 8008bfa:	e081      	b.n	8008d00 <netconn_write_vectors_partly+0x160>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	7f1b      	ldrb	r3, [r3, #28]
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d104      	bne.n	8008c12 <netconn_write_vectors_partly+0x72>
 8008c08:	797b      	ldrb	r3, [r7, #5]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <netconn_write_vectors_partly+0x76>
 8008c12:	2301      	movs	r3, #1
 8008c14:	e000      	b.n	8008c18 <netconn_write_vectors_partly+0x78>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8008c1c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d005      	beq.n	8008c30 <netconn_write_vectors_partly+0x90>
 8008c24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <netconn_write_vectors_partly+0x90>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8008c2a:	f06f 0305 	mvn.w	r3, #5
 8008c2e:	e067      	b.n	8008d00 <netconn_write_vectors_partly+0x160>
  }

  /* sum up the total size */
  size = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 8008c34:	2300      	movs	r3, #0
 8008c36:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c38:	e015      	b.n	8008c66 <netconn_write_vectors_partly+0xc6>
    size += vectors[i].len;
 8008c3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c3c:	00db      	lsls	r3, r3, #3
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	4413      	add	r3, r2
 8008c42:	685b      	ldr	r3, [r3, #4]
 8008c44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c46:	4413      	add	r3, r2
 8008c48:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 8008c4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c4c:	00db      	lsls	r3, r3, #3
 8008c4e:	68ba      	ldr	r2, [r7, #8]
 8008c50:	4413      	add	r3, r2
 8008c52:	685b      	ldr	r3, [r3, #4]
 8008c54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d202      	bcs.n	8008c60 <netconn_write_vectors_partly+0xc0>
      /* overflow */
      return ERR_VAL;
 8008c5a:	f06f 0305 	mvn.w	r3, #5
 8008c5e:	e04f      	b.n	8008d00 <netconn_write_vectors_partly+0x160>
  for (i = 0; i < vectorcnt; i++) {
 8008c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008c62:	3301      	adds	r3, #1
 8008c64:	643b      	str	r3, [r7, #64]	@ 0x40
 8008c66:	88fb      	ldrh	r3, [r7, #6]
 8008c68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	dbe5      	blt.n	8008c3a <netconn_write_vectors_partly+0x9a>
    }
  }
  if (size == 0) {
 8008c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d101      	bne.n	8008c78 <netconn_write_vectors_partly+0xd8>
    return ERR_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	e043      	b.n	8008d00 <netconn_write_vectors_partly+0x160>
  } else if (size > SSIZE_MAX) {
 8008c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	da0a      	bge.n	8008c94 <netconn_write_vectors_partly+0xf4>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8008c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d102      	bne.n	8008c8a <netconn_write_vectors_partly+0xea>
      return ERR_VAL;
 8008c84:	f06f 0305 	mvn.w	r3, #5
 8008c88:	e03a      	b.n	8008d00 <netconn_write_vectors_partly+0x160>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8008c8a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8008c8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 8008c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c92:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8008c9c:	88fb      	ldrh	r3, [r7, #6]
 8008c9e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8008ca4:	797b      	ldrb	r3, [r7, #5]
 8008ca6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8008caa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8008cb2:	f107 0314 	add.w	r3, r7, #20
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	4817      	ldr	r0, [pc, #92]	@ (8008d18 <netconn_write_vectors_partly+0x178>)
 8008cba:	f7ff fb5d 	bl	8008378 <netconn_apimsg>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 8008cc4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d117      	bne.n	8008cfc <netconn_write_vectors_partly+0x15c>
    if (bytes_written != NULL) {
 8008ccc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d002      	beq.n	8008cd8 <netconn_write_vectors_partly+0x138>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8008cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cd6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8008cd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d10d      	bne.n	8008cfc <netconn_write_vectors_partly+0x15c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8008ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d009      	beq.n	8008cfc <netconn_write_vectors_partly+0x15c>
 8008ce8:	4b07      	ldr	r3, [pc, #28]	@ (8008d08 <netconn_write_vectors_partly+0x168>)
 8008cea:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8008cee:	490b      	ldr	r1, [pc, #44]	@ (8008d1c <netconn_write_vectors_partly+0x17c>)
 8008cf0:	4807      	ldr	r0, [pc, #28]	@ (8008d10 <netconn_write_vectors_partly+0x170>)
 8008cf2:	f012 fd19 	bl	801b728 <iprintf>
 8008cf6:	2000      	movs	r0, #0
 8008cf8:	f012 fc40 	bl	801b57c <fflush>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8008cfc:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3748      	adds	r7, #72	@ 0x48
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	0801c628 	.word	0x0801c628
 8008d0c:	0801c950 	.word	0x0801c950
 8008d10:	0801c680 	.word	0x0801c680
 8008d14:	0801c96c 	.word	0x0801c96c
 8008d18:	0800a475 	.word	0x0800a475
 8008d1c:	0801c990 	.word	0x0801c990

08008d20 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b08c      	sub	sp, #48	@ 0x30
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	460b      	mov	r3, r1
 8008d2a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10c      	bne.n	8008d4c <netconn_close_shutdown+0x2c>
 8008d32:	4b11      	ldr	r3, [pc, #68]	@ (8008d78 <netconn_close_shutdown+0x58>)
 8008d34:	f240 4247 	movw	r2, #1095	@ 0x447
 8008d38:	4910      	ldr	r1, [pc, #64]	@ (8008d7c <netconn_close_shutdown+0x5c>)
 8008d3a:	4811      	ldr	r0, [pc, #68]	@ (8008d80 <netconn_close_shutdown+0x60>)
 8008d3c:	f012 fcf4 	bl	801b728 <iprintf>
 8008d40:	2000      	movs	r0, #0
 8008d42:	f012 fc1b 	bl	801b57c <fflush>
 8008d46:	f06f 030f 	mvn.w	r3, #15
 8008d4a:	e010      	b.n	8008d6e <netconn_close_shutdown+0x4e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8008d54:	2329      	movs	r3, #41	@ 0x29
 8008d56:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8008d58:	f107 030c 	add.w	r3, r7, #12
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	4809      	ldr	r0, [pc, #36]	@ (8008d84 <netconn_close_shutdown+0x64>)
 8008d60:	f7ff fb0a 	bl	8008378 <netconn_apimsg>
 8008d64:	4603      	mov	r3, r0
 8008d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008d6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3730      	adds	r7, #48	@ 0x30
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}
 8008d76:	bf00      	nop
 8008d78:	0801c628 	.word	0x0801c628
 8008d7c:	0801c9b4 	.word	0x0801c9b4
 8008d80:	0801c680 	.word	0x0801c680
 8008d84:	0800a5a5 	.word	0x0800a5a5

08008d88 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008d90:	2103      	movs	r1, #3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff ffc4 	bl	8008d20 <netconn_close_shutdown>
 8008d98:	4603      	mov	r3, r0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3708      	adds	r7, #8
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d101      	bne.n	8008db4 <netconn_err+0x12>
    return ERR_OK;
 8008db0:	2300      	movs	r3, #0
 8008db2:	e00d      	b.n	8008dd0 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008db4:	f012 fada 	bl	801b36c <sys_arch_protect>
 8008db8:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	7a1b      	ldrb	r3, [r3, #8]
 8008dbe:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f012 fade 	bl	801b388 <sys_arch_unprotect>
  return err;
 8008dcc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}

08008dd8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	4603      	mov	r3, r0
 8008de0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008de6:	f113 0f0d 	cmn.w	r3, #13
 8008dea:	d009      	beq.n	8008e00 <lwip_netconn_err_to_msg+0x28>
 8008dec:	f113 0f0d 	cmn.w	r3, #13
 8008df0:	dc0c      	bgt.n	8008e0c <lwip_netconn_err_to_msg+0x34>
 8008df2:	f113 0f0f 	cmn.w	r3, #15
 8008df6:	d007      	beq.n	8008e08 <lwip_netconn_err_to_msg+0x30>
 8008df8:	f113 0f0e 	cmn.w	r3, #14
 8008dfc:	d002      	beq.n	8008e04 <lwip_netconn_err_to_msg+0x2c>
 8008dfe:	e005      	b.n	8008e0c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008e00:	4b0b      	ldr	r3, [pc, #44]	@ (8008e30 <lwip_netconn_err_to_msg+0x58>)
 8008e02:	e011      	b.n	8008e28 <lwip_netconn_err_to_msg+0x50>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008e04:	4b0b      	ldr	r3, [pc, #44]	@ (8008e34 <lwip_netconn_err_to_msg+0x5c>)
 8008e06:	e00f      	b.n	8008e28 <lwip_netconn_err_to_msg+0x50>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8008e08:	4b0b      	ldr	r3, [pc, #44]	@ (8008e38 <lwip_netconn_err_to_msg+0x60>)
 8008e0a:	e00d      	b.n	8008e28 <lwip_netconn_err_to_msg+0x50>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8008e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d008      	beq.n	8008e26 <lwip_netconn_err_to_msg+0x4e>
 8008e14:	4b09      	ldr	r3, [pc, #36]	@ (8008e3c <lwip_netconn_err_to_msg+0x64>)
 8008e16:	227d      	movs	r2, #125	@ 0x7d
 8008e18:	4909      	ldr	r1, [pc, #36]	@ (8008e40 <lwip_netconn_err_to_msg+0x68>)
 8008e1a:	480a      	ldr	r0, [pc, #40]	@ (8008e44 <lwip_netconn_err_to_msg+0x6c>)
 8008e1c:	f012 fc84 	bl	801b728 <iprintf>
 8008e20:	2000      	movs	r0, #0
 8008e22:	f012 fbab 	bl	801b57c <fflush>
      return NULL;
 8008e26:	2300      	movs	r3, #0
  }
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3708      	adds	r7, #8
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}
 8008e30:	080242fc 	.word	0x080242fc
 8008e34:	080242fd 	.word	0x080242fd
 8008e38:	080242fe 	.word	0x080242fe
 8008e3c:	0801c9d0 	.word	0x0801c9d0
 8008e40:	0801ca04 	.word	0x0801ca04
 8008e44:	0801ca14 	.word	0x0801ca14

08008e48 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b082      	sub	sp, #8
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d108      	bne.n	8008e6a <lwip_netconn_is_err_msg+0x22>
 8008e58:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <lwip_netconn_is_err_msg+0x64>)
 8008e5a:	2285      	movs	r2, #133	@ 0x85
 8008e5c:	4914      	ldr	r1, [pc, #80]	@ (8008eb0 <lwip_netconn_is_err_msg+0x68>)
 8008e5e:	4815      	ldr	r0, [pc, #84]	@ (8008eb4 <lwip_netconn_is_err_msg+0x6c>)
 8008e60:	f012 fc62 	bl	801b728 <iprintf>
 8008e64:	2000      	movs	r0, #0
 8008e66:	f012 fb89 	bl	801b57c <fflush>

  if (msg == &netconn_aborted) {
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a12      	ldr	r2, [pc, #72]	@ (8008eb8 <lwip_netconn_is_err_msg+0x70>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d104      	bne.n	8008e7c <lwip_netconn_is_err_msg+0x34>
    *err = ERR_ABRT;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	22f3      	movs	r2, #243	@ 0xf3
 8008e76:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e012      	b.n	8008ea2 <lwip_netconn_is_err_msg+0x5a>
  } else if (msg == &netconn_reset) {
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a0f      	ldr	r2, [pc, #60]	@ (8008ebc <lwip_netconn_is_err_msg+0x74>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d104      	bne.n	8008e8e <lwip_netconn_is_err_msg+0x46>
    *err = ERR_RST;
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	22f2      	movs	r2, #242	@ 0xf2
 8008e88:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e009      	b.n	8008ea2 <lwip_netconn_is_err_msg+0x5a>
  } else if (msg == &netconn_closed) {
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a0b      	ldr	r2, [pc, #44]	@ (8008ec0 <lwip_netconn_is_err_msg+0x78>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d104      	bne.n	8008ea0 <lwip_netconn_is_err_msg+0x58>
    *err = ERR_CLSD;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	22f1      	movs	r2, #241	@ 0xf1
 8008e9a:	701a      	strb	r2, [r3, #0]
    return 1;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e000      	b.n	8008ea2 <lwip_netconn_is_err_msg+0x5a>
  }
  return 0;
 8008ea0:	2300      	movs	r3, #0
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3708      	adds	r7, #8
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	0801c9d0 	.word	0x0801c9d0
 8008eb0:	0801ca3c 	.word	0x0801ca3c
 8008eb4:	0801ca14 	.word	0x0801ca14
 8008eb8:	080242fc 	.word	0x080242fc
 8008ebc:	080242fd 	.word	0x080242fd
 8008ec0:	080242fe 	.word	0x080242fe

08008ec4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b088      	sub	sp, #32
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
 8008ed0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d108      	bne.n	8008eea <recv_udp+0x26>
 8008ed8:	4b38      	ldr	r3, [pc, #224]	@ (8008fbc <recv_udp+0xf8>)
 8008eda:	22e5      	movs	r2, #229	@ 0xe5
 8008edc:	4938      	ldr	r1, [pc, #224]	@ (8008fc0 <recv_udp+0xfc>)
 8008ede:	4839      	ldr	r0, [pc, #228]	@ (8008fc4 <recv_udp+0x100>)
 8008ee0:	f012 fc22 	bl	801b728 <iprintf>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	f012 fb49 	bl	801b57c <fflush>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d108      	bne.n	8008f02 <recv_udp+0x3e>
 8008ef0:	4b32      	ldr	r3, [pc, #200]	@ (8008fbc <recv_udp+0xf8>)
 8008ef2:	22e6      	movs	r2, #230	@ 0xe6
 8008ef4:	4934      	ldr	r1, [pc, #208]	@ (8008fc8 <recv_udp+0x104>)
 8008ef6:	4833      	ldr	r0, [pc, #204]	@ (8008fc4 <recv_udp+0x100>)
 8008ef8:	f012 fc16 	bl	801b728 <iprintf>
 8008efc:	2000      	movs	r0, #0
 8008efe:	f012 fb3d 	bl	801b57c <fflush>
  conn = (struct netconn *)arg;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d103      	bne.n	8008f14 <recv_udp+0x50>
    pbuf_free(p);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f003 fd05 	bl	800c91c <pbuf_free>
    return;
 8008f12:	e050      	b.n	8008fb6 <recv_udp+0xf2>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	429a      	cmp	r2, r3
 8008f1c:	d008      	beq.n	8008f30 <recv_udp+0x6c>
 8008f1e:	4b27      	ldr	r3, [pc, #156]	@ (8008fbc <recv_udp+0xf8>)
 8008f20:	22ee      	movs	r2, #238	@ 0xee
 8008f22:	492a      	ldr	r1, [pc, #168]	@ (8008fcc <recv_udp+0x108>)
 8008f24:	4827      	ldr	r0, [pc, #156]	@ (8008fc4 <recv_udp+0x100>)
 8008f26:	f012 fbff 	bl	801b728 <iprintf>
 8008f2a:	2000      	movs	r0, #0
 8008f2c:	f012 fb26 	bl	801b57c <fflush>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	3310      	adds	r3, #16
 8008f34:	4618      	mov	r0, r3
 8008f36:	f012 f90f 	bl	801b158 <sys_mbox_valid>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d103      	bne.n	8008f48 <recv_udp+0x84>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f003 fceb 	bl	800c91c <pbuf_free>
    return;
 8008f46:	e036      	b.n	8008fb6 <recv_udp+0xf2>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8008f48:	2006      	movs	r0, #6
 8008f4a:	f002 fbe7 	bl	800b71c <memp_malloc>
 8008f4e:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d103      	bne.n	8008f5e <recv_udp+0x9a>
    pbuf_free(p);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f003 fce0 	bl	800c91c <pbuf_free>
    return;
 8008f5c:	e02b      	b.n	8008fb6 <recv_udp+0xf2>
  } else {
    buf->p = p;
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	687a      	ldr	r2, [r7, #4]
 8008f62:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <recv_udp+0xb2>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	e000      	b.n	8008f78 <recv_udp+0xb4>
 8008f76:	2300      	movs	r3, #0
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008f80:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	891b      	ldrh	r3, [r3, #8]
 8008f86:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	3310      	adds	r3, #16
 8008f8c:	69b9      	ldr	r1, [r7, #24]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f012 f880 	bl	801b094 <sys_mbox_trypost>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d003      	beq.n	8008fa2 <recv_udp+0xde>
    netbuf_delete(buf);
 8008f9a:	69b8      	ldr	r0, [r7, #24]
 8008f9c:	f001 fbb6 	bl	800a70c <netbuf_delete>
    return;
 8008fa0:	e009      	b.n	8008fb6 <recv_udp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d005      	beq.n	8008fb6 <recv_udp+0xf2>
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fae:	8afa      	ldrh	r2, [r7, #22]
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	69f8      	ldr	r0, [r7, #28]
 8008fb4:	4798      	blx	r3
  }
}
 8008fb6:	3720      	adds	r7, #32
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	0801c9d0 	.word	0x0801c9d0
 8008fc0:	0801ca48 	.word	0x0801ca48
 8008fc4:	0801ca14 	.word	0x0801ca14
 8008fc8:	0801ca6c 	.word	0x0801ca6c
 8008fcc:	0801ca8c 	.word	0x0801ca8c

08008fd0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b088      	sub	sp, #32
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	607a      	str	r2, [r7, #4]
 8008fdc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d109      	bne.n	8008ff8 <recv_tcp+0x28>
 8008fe4:	4b3c      	ldr	r3, [pc, #240]	@ (80090d8 <recv_tcp+0x108>)
 8008fe6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8008fea:	493c      	ldr	r1, [pc, #240]	@ (80090dc <recv_tcp+0x10c>)
 8008fec:	483c      	ldr	r0, [pc, #240]	@ (80090e0 <recv_tcp+0x110>)
 8008fee:	f012 fb9b 	bl	801b728 <iprintf>
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	f012 fac2 	bl	801b57c <fflush>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d109      	bne.n	8009012 <recv_tcp+0x42>
 8008ffe:	4b36      	ldr	r3, [pc, #216]	@ (80090d8 <recv_tcp+0x108>)
 8009000:	f240 122d 	movw	r2, #301	@ 0x12d
 8009004:	4937      	ldr	r1, [pc, #220]	@ (80090e4 <recv_tcp+0x114>)
 8009006:	4836      	ldr	r0, [pc, #216]	@ (80090e0 <recv_tcp+0x110>)
 8009008:	f012 fb8e 	bl	801b728 <iprintf>
 800900c:	2000      	movs	r0, #0
 800900e:	f012 fab5 	bl	801b57c <fflush>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8009012:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d009      	beq.n	800902e <recv_tcp+0x5e>
 800901a:	4b2f      	ldr	r3, [pc, #188]	@ (80090d8 <recv_tcp+0x108>)
 800901c:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 8009020:	4931      	ldr	r1, [pc, #196]	@ (80090e8 <recv_tcp+0x118>)
 8009022:	482f      	ldr	r0, [pc, #188]	@ (80090e0 <recv_tcp+0x110>)
 8009024:	f012 fb80 	bl	801b728 <iprintf>
 8009028:	2000      	movs	r0, #0
 800902a:	f012 faa7 	bl	801b57c <fflush>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d102      	bne.n	800903e <recv_tcp+0x6e>
    return ERR_VAL;
 8009038:	f06f 0305 	mvn.w	r3, #5
 800903c:	e048      	b.n	80090d0 <recv_tcp+0x100>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	68ba      	ldr	r2, [r7, #8]
 8009044:	429a      	cmp	r2, r3
 8009046:	d009      	beq.n	800905c <recv_tcp+0x8c>
 8009048:	4b23      	ldr	r3, [pc, #140]	@ (80090d8 <recv_tcp+0x108>)
 800904a:	f240 1235 	movw	r2, #309	@ 0x135
 800904e:	4927      	ldr	r1, [pc, #156]	@ (80090ec <recv_tcp+0x11c>)
 8009050:	4823      	ldr	r0, [pc, #140]	@ (80090e0 <recv_tcp+0x110>)
 8009052:	f012 fb69 	bl	801b728 <iprintf>
 8009056:	2000      	movs	r0, #0
 8009058:	f012 fa90 	bl	801b57c <fflush>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	3310      	adds	r3, #16
 8009060:	4618      	mov	r0, r3
 8009062:	f012 f879 	bl	801b158 <sys_mbox_valid>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10d      	bne.n	8009088 <recv_tcp+0xb8>
    /* recvmbox already deleted */
    if (p != NULL) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d008      	beq.n	8009084 <recv_tcp+0xb4>
      tcp_recved(pcb, p->tot_len);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	891b      	ldrh	r3, [r3, #8]
 8009076:	4619      	mov	r1, r3
 8009078:	68b8      	ldr	r0, [r7, #8]
 800907a:	f004 fce3 	bl	800da44 <tcp_recved>
      pbuf_free(p);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f003 fc4c 	bl	800c91c <pbuf_free>
    }
    return ERR_OK;
 8009084:	2300      	movs	r3, #0
 8009086:	e023      	b.n	80090d0 <recv_tcp+0x100>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d005      	beq.n	800909a <recv_tcp+0xca>
    msg = p;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	891b      	ldrh	r3, [r3, #8]
 8009096:	83fb      	strh	r3, [r7, #30]
 8009098:	e003      	b.n	80090a2 <recv_tcp+0xd2>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800909a:	4b15      	ldr	r3, [pc, #84]	@ (80090f0 <recv_tcp+0x120>)
 800909c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800909e:	2300      	movs	r3, #0
 80090a0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	3310      	adds	r3, #16
 80090a6:	69b9      	ldr	r1, [r7, #24]
 80090a8:	4618      	mov	r0, r3
 80090aa:	f011 fff3 	bl	801b094 <sys_mbox_trypost>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d002      	beq.n	80090ba <recv_tcp+0xea>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80090b4:	f04f 33ff 	mov.w	r3, #4294967295
 80090b8:	e00a      	b.n	80090d0 <recv_tcp+0x100>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80090ba:	697b      	ldr	r3, [r7, #20]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d005      	beq.n	80090ce <recv_tcp+0xfe>
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c6:	8bfa      	ldrh	r2, [r7, #30]
 80090c8:	2100      	movs	r1, #0
 80090ca:	6978      	ldr	r0, [r7, #20]
 80090cc:	4798      	blx	r3
  }

  return ERR_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3720      	adds	r7, #32
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	0801c9d0 	.word	0x0801c9d0
 80090dc:	0801caac 	.word	0x0801caac
 80090e0:	0801ca14 	.word	0x0801ca14
 80090e4:	0801cad0 	.word	0x0801cad0
 80090e8:	0801caf0 	.word	0x0801caf0
 80090ec:	0801cb08 	.word	0x0801cb08
 80090f0:	080242fe 	.word	0x080242fe

080090f4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d109      	bne.n	800911c <poll_tcp+0x28>
 8009108:	4b2b      	ldr	r3, [pc, #172]	@ (80091b8 <poll_tcp+0xc4>)
 800910a:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800910e:	492b      	ldr	r1, [pc, #172]	@ (80091bc <poll_tcp+0xc8>)
 8009110:	482b      	ldr	r0, [pc, #172]	@ (80091c0 <poll_tcp+0xcc>)
 8009112:	f012 fb09 	bl	801b728 <iprintf>
 8009116:	2000      	movs	r0, #0
 8009118:	f012 fa30 	bl	801b57c <fflush>

  if (conn->state == NETCONN_WRITE) {
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	785b      	ldrb	r3, [r3, #1]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d104      	bne.n	800912e <poll_tcp+0x3a>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8009124:	2101      	movs	r1, #1
 8009126:	68f8      	ldr	r0, [r7, #12]
 8009128:	f000 ffc2 	bl	800a0b0 <lwip_netconn_do_writemore>
 800912c:	e016      	b.n	800915c <poll_tcp+0x68>
  } else if (conn->state == NETCONN_CLOSE) {
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	785b      	ldrb	r3, [r3, #1]
 8009132:	2b04      	cmp	r3, #4
 8009134:	d112      	bne.n	800915c <poll_tcp+0x68>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	6a1b      	ldr	r3, [r3, #32]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00a      	beq.n	8009154 <poll_tcp+0x60>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	7a5b      	ldrb	r3, [r3, #9]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d005      	beq.n	8009154 <poll_tcp+0x60>
      conn->current_msg->msg.sd.polls_left--;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	6a1b      	ldr	r3, [r3, #32]
 800914c:	7a5a      	ldrb	r2, [r3, #9]
 800914e:	3a01      	subs	r2, #1
 8009150:	b2d2      	uxtb	r2, r2
 8009152:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009154:	2101      	movs	r1, #1
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	f000 fc30 	bl	80099bc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	7f1b      	ldrb	r3, [r3, #28]
 8009160:	f003 0310 	and.w	r3, r3, #16
 8009164:	2b00      	cmp	r3, #0
 8009166:	d021      	beq.n	80091ac <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d01d      	beq.n	80091ac <poll_tcp+0xb8>
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009178:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800917c:	d316      	bcc.n	80091ac <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009186:	2b04      	cmp	r3, #4
 8009188:	d810      	bhi.n	80091ac <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	7f1b      	ldrb	r3, [r3, #28]
 800918e:	f023 0310 	bic.w	r3, r3, #16
 8009192:	b2da      	uxtb	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	d005      	beq.n	80091ac <poll_tcp+0xb8>
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091a4:	2200      	movs	r2, #0
 80091a6:	2102      	movs	r1, #2
 80091a8:	68f8      	ldr	r0, [r7, #12]
 80091aa:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	3710      	adds	r7, #16
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}
 80091b6:	bf00      	nop
 80091b8:	0801c9d0 	.word	0x0801c9d0
 80091bc:	0801cb28 	.word	0x0801cb28
 80091c0:	0801ca14 	.word	0x0801ca14

080091c4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b086      	sub	sp, #24
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	60f8      	str	r0, [r7, #12]
 80091cc:	60b9      	str	r1, [r7, #8]
 80091ce:	4613      	mov	r3, r2
 80091d0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d109      	bne.n	80091f0 <sent_tcp+0x2c>
 80091dc:	4b22      	ldr	r3, [pc, #136]	@ (8009268 <sent_tcp+0xa4>)
 80091de:	f240 1293 	movw	r2, #403	@ 0x193
 80091e2:	4922      	ldr	r1, [pc, #136]	@ (800926c <sent_tcp+0xa8>)
 80091e4:	4822      	ldr	r0, [pc, #136]	@ (8009270 <sent_tcp+0xac>)
 80091e6:	f012 fa9f 	bl	801b728 <iprintf>
 80091ea:	2000      	movs	r0, #0
 80091ec:	f012 f9c6 	bl	801b57c <fflush>

  if (conn) {
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d032      	beq.n	800925c <sent_tcp+0x98>
    if (conn->state == NETCONN_WRITE) {
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	785b      	ldrb	r3, [r3, #1]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d104      	bne.n	8009208 <sent_tcp+0x44>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80091fe:	2101      	movs	r1, #1
 8009200:	6978      	ldr	r0, [r7, #20]
 8009202:	f000 ff55 	bl	800a0b0 <lwip_netconn_do_writemore>
 8009206:	e007      	b.n	8009218 <sent_tcp+0x54>
    } else if (conn->state == NETCONN_CLOSE) {
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	785b      	ldrb	r3, [r3, #1]
 800920c:	2b04      	cmp	r3, #4
 800920e:	d103      	bne.n	8009218 <sent_tcp+0x54>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8009210:	2101      	movs	r1, #1
 8009212:	6978      	ldr	r0, [r7, #20]
 8009214:	f000 fbd2 	bl	80099bc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d01d      	beq.n	800925c <sent_tcp+0x98>
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8009228:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800922c:	d316      	bcc.n	800925c <sent_tcp+0x98>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8009236:	2b04      	cmp	r3, #4
 8009238:	d810      	bhi.n	800925c <sent_tcp+0x98>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	7f1b      	ldrb	r3, [r3, #28]
 800923e:	f023 0310 	bic.w	r3, r3, #16
 8009242:	b2da      	uxtb	r2, r3
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d005      	beq.n	800925c <sent_tcp+0x98>
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	88fa      	ldrh	r2, [r7, #6]
 8009256:	2102      	movs	r1, #2
 8009258:	6978      	ldr	r0, [r7, #20]
 800925a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3718      	adds	r7, #24
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	0801c9d0 	.word	0x0801c9d0
 800926c:	0801cb28 	.word	0x0801cb28
 8009270:	0801ca14 	.word	0x0801ca14

08009274 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b088      	sub	sp, #32
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8009284:	69fb      	ldr	r3, [r7, #28]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d109      	bne.n	800929e <err_tcp+0x2a>
 800928a:	4b65      	ldr	r3, [pc, #404]	@ (8009420 <err_tcp+0x1ac>)
 800928c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8009290:	4964      	ldr	r1, [pc, #400]	@ (8009424 <err_tcp+0x1b0>)
 8009292:	4865      	ldr	r0, [pc, #404]	@ (8009428 <err_tcp+0x1b4>)
 8009294:	f012 fa48 	bl	801b728 <iprintf>
 8009298:	2000      	movs	r0, #0
 800929a:	f012 f96f 	bl	801b57c <fflush>

  SYS_ARCH_PROTECT(lev);
 800929e:	f012 f865 	bl	801b36c <sys_arch_protect>
 80092a2:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	2200      	movs	r2, #0
 80092a8:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80092aa:	69fb      	ldr	r3, [r7, #28]
 80092ac:	78fa      	ldrb	r2, [r7, #3]
 80092ae:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	7f1b      	ldrb	r3, [r3, #28]
 80092b4:	f043 0301 	orr.w	r3, r3, #1
 80092b8:	b2da      	uxtb	r2, r3
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80092be:	69fb      	ldr	r3, [r7, #28]
 80092c0:	785b      	ldrb	r3, [r3, #1]
 80092c2:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80092c4:	69fb      	ldr	r3, [r7, #28]
 80092c6:	2200      	movs	r2, #0
 80092c8:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80092ca:	69b8      	ldr	r0, [r7, #24]
 80092cc:	f012 f85c 	bl	801b388 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80092d0:	69fb      	ldr	r3, [r7, #28]
 80092d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d005      	beq.n	80092e4 <err_tcp+0x70>
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092dc:	2200      	movs	r2, #0
 80092de:	2104      	movs	r1, #4
 80092e0:	69f8      	ldr	r0, [r7, #28]
 80092e2:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d005      	beq.n	80092f8 <err_tcp+0x84>
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f0:	2200      	movs	r2, #0
 80092f2:	2100      	movs	r1, #0
 80092f4:	69f8      	ldr	r0, [r7, #28]
 80092f6:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80092f8:	69fb      	ldr	r3, [r7, #28]
 80092fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <err_tcp+0x98>
 8009300:	69fb      	ldr	r3, [r7, #28]
 8009302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009304:	2200      	movs	r2, #0
 8009306:	2102      	movs	r1, #2
 8009308:	69f8      	ldr	r0, [r7, #28]
 800930a:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800930c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009310:	4618      	mov	r0, r3
 8009312:	f7ff fd61 	bl	8008dd8 <lwip_netconn_err_to_msg>
 8009316:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	3310      	adds	r3, #16
 800931c:	4618      	mov	r0, r3
 800931e:	f011 ff1b 	bl	801b158 <sys_mbox_valid>
 8009322:	4603      	mov	r3, r0
 8009324:	2b00      	cmp	r3, #0
 8009326:	d005      	beq.n	8009334 <err_tcp+0xc0>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	3310      	adds	r3, #16
 800932c:	6939      	ldr	r1, [r7, #16]
 800932e:	4618      	mov	r0, r3
 8009330:	f011 feb0 	bl	801b094 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	3314      	adds	r3, #20
 8009338:	4618      	mov	r0, r3
 800933a:	f011 ff0d 	bl	801b158 <sys_mbox_valid>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d005      	beq.n	8009350 <err_tcp+0xdc>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3314      	adds	r3, #20
 8009348:	6939      	ldr	r1, [r7, #16]
 800934a:	4618      	mov	r0, r3
 800934c:	f011 fea2 	bl	801b094 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8009350:	7dfb      	ldrb	r3, [r7, #23]
 8009352:	2b01      	cmp	r3, #1
 8009354:	d005      	beq.n	8009362 <err_tcp+0xee>
 8009356:	7dfb      	ldrb	r3, [r7, #23]
 8009358:	2b04      	cmp	r3, #4
 800935a:	d002      	beq.n	8009362 <err_tcp+0xee>
 800935c:	7dfb      	ldrb	r3, [r7, #23]
 800935e:	2b03      	cmp	r3, #3
 8009360:	d149      	bne.n	80093f6 <err_tcp+0x182>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	7f1b      	ldrb	r3, [r3, #28]
 8009366:	f003 0304 	and.w	r3, r3, #4
 800936a:	2b00      	cmp	r3, #0
 800936c:	bf14      	ite	ne
 800936e:	2301      	movne	r3, #1
 8009370:	2300      	moveq	r3, #0
 8009372:	b2db      	uxtb	r3, r3
 8009374:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	7f1b      	ldrb	r3, [r3, #28]
 800937a:	f023 0304 	bic.w	r3, r3, #4
 800937e:	b2da      	uxtb	r2, r3
 8009380:	69fb      	ldr	r3, [r7, #28]
 8009382:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d144      	bne.n	8009414 <err_tcp+0x1a0>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800938a:	69fb      	ldr	r3, [r7, #28]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d109      	bne.n	80093a6 <err_tcp+0x132>
 8009392:	4b23      	ldr	r3, [pc, #140]	@ (8009420 <err_tcp+0x1ac>)
 8009394:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8009398:	4924      	ldr	r1, [pc, #144]	@ (800942c <err_tcp+0x1b8>)
 800939a:	4823      	ldr	r0, [pc, #140]	@ (8009428 <err_tcp+0x1b4>)
 800939c:	f012 f9c4 	bl	801b728 <iprintf>
 80093a0:	2000      	movs	r0, #0
 80093a2:	f012 f8eb 	bl	801b57c <fflush>
      if (old_state == NETCONN_CLOSE) {
 80093a6:	7dfb      	ldrb	r3, [r7, #23]
 80093a8:	2b04      	cmp	r3, #4
 80093aa:	d104      	bne.n	80093b6 <err_tcp+0x142>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	2200      	movs	r2, #0
 80093b2:	711a      	strb	r2, [r3, #4]
 80093b4:	e003      	b.n	80093be <err_tcp+0x14a>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	78fa      	ldrb	r2, [r7, #3]
 80093bc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80093be:	69fb      	ldr	r3, [r7, #28]
 80093c0:	6a1b      	ldr	r3, [r3, #32]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	330c      	adds	r3, #12
 80093c6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80093c8:	68b8      	ldr	r0, [r7, #8]
 80093ca:	f011 ff53 	bl	801b274 <sys_sem_valid>
 80093ce:	4603      	mov	r3, r0
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d109      	bne.n	80093e8 <err_tcp+0x174>
 80093d4:	4b12      	ldr	r3, [pc, #72]	@ (8009420 <err_tcp+0x1ac>)
 80093d6:	f240 12ef 	movw	r2, #495	@ 0x1ef
 80093da:	4915      	ldr	r1, [pc, #84]	@ (8009430 <err_tcp+0x1bc>)
 80093dc:	4812      	ldr	r0, [pc, #72]	@ (8009428 <err_tcp+0x1b4>)
 80093de:	f012 f9a3 	bl	801b728 <iprintf>
 80093e2:	2000      	movs	r0, #0
 80093e4:	f012 f8ca 	bl	801b57c <fflush>
      conn->current_msg = NULL;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	2200      	movs	r2, #0
 80093ec:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80093ee:	68b8      	ldr	r0, [r7, #8]
 80093f0:	f011 ff26 	bl	801b240 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80093f4:	e00e      	b.n	8009414 <err_tcp+0x1a0>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80093f6:	69fb      	ldr	r3, [r7, #28]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d00b      	beq.n	8009416 <err_tcp+0x1a2>
 80093fe:	4b08      	ldr	r3, [pc, #32]	@ (8009420 <err_tcp+0x1ac>)
 8009400:	f240 12f7 	movw	r2, #503	@ 0x1f7
 8009404:	490b      	ldr	r1, [pc, #44]	@ (8009434 <err_tcp+0x1c0>)
 8009406:	4808      	ldr	r0, [pc, #32]	@ (8009428 <err_tcp+0x1b4>)
 8009408:	f012 f98e 	bl	801b728 <iprintf>
 800940c:	2000      	movs	r0, #0
 800940e:	f012 f8b5 	bl	801b57c <fflush>
  }
}
 8009412:	e000      	b.n	8009416 <err_tcp+0x1a2>
      (old_state == NETCONN_CONNECT)) {
 8009414:	bf00      	nop
}
 8009416:	bf00      	nop
 8009418:	3720      	adds	r7, #32
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}
 800941e:	bf00      	nop
 8009420:	0801c9d0 	.word	0x0801c9d0
 8009424:	0801cb28 	.word	0x0801cb28
 8009428:	0801ca14 	.word	0x0801ca14
 800942c:	0801cb38 	.word	0x0801cb38
 8009430:	0801cb54 	.word	0x0801cb54
 8009434:	0801cb70 	.word	0x0801cb70

08009438 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8009446:	6879      	ldr	r1, [r7, #4]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f005 fb19 	bl	800ea80 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800944e:	490a      	ldr	r1, [pc, #40]	@ (8009478 <setup_tcp+0x40>)
 8009450:	68f8      	ldr	r0, [r7, #12]
 8009452:	f005 fb27 	bl	800eaa4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8009456:	4909      	ldr	r1, [pc, #36]	@ (800947c <setup_tcp+0x44>)
 8009458:	68f8      	ldr	r0, [r7, #12]
 800945a:	f005 fb47 	bl	800eaec <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800945e:	2202      	movs	r2, #2
 8009460:	4907      	ldr	r1, [pc, #28]	@ (8009480 <setup_tcp+0x48>)
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f005 fba2 	bl	800ebac <tcp_poll>
  tcp_err(pcb, err_tcp);
 8009468:	4906      	ldr	r1, [pc, #24]	@ (8009484 <setup_tcp+0x4c>)
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	f005 fb62 	bl	800eb34 <tcp_err>
}
 8009470:	bf00      	nop
 8009472:	3710      	adds	r7, #16
 8009474:	46bd      	mov	sp, r7
 8009476:	bd80      	pop	{r7, pc}
 8009478:	08008fd1 	.word	0x08008fd1
 800947c:	080091c5 	.word	0x080091c5
 8009480:	080090f5 	.word	0x080090f5
 8009484:	08009275 	.word	0x08009275

08009488 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8009488:	b590      	push	{r4, r7, lr}
 800948a:	b089      	sub	sp, #36	@ 0x24
 800948c:	af00      	add	r7, sp, #0
 800948e:	60f8      	str	r0, [r7, #12]
 8009490:	60b9      	str	r1, [r7, #8]
 8009492:	4613      	mov	r3, r2
 8009494:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800949a:	69fb      	ldr	r3, [r7, #28]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d102      	bne.n	80094a6 <accept_function+0x1e>
    return ERR_VAL;
 80094a0:	f06f 0305 	mvn.w	r3, #5
 80094a4:	e0b7      	b.n	8009616 <accept_function+0x18e>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	3314      	adds	r3, #20
 80094aa:	4618      	mov	r0, r3
 80094ac:	f011 fe54 	bl	801b158 <sys_mbox_valid>
 80094b0:	4603      	mov	r3, r0
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d108      	bne.n	80094c8 <accept_function+0x40>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
 80094b6:	485a      	ldr	r0, [pc, #360]	@ (8009620 <accept_function+0x198>)
 80094b8:	f012 f9a6 	bl	801b808 <puts>
 80094bc:	2000      	movs	r0, #0
 80094be:	f012 f85d 	bl	801b57c <fflush>
    return ERR_VAL;
 80094c2:	f06f 0305 	mvn.w	r3, #5
 80094c6:	e0a6      	b.n	8009616 <accept_function+0x18e>
  }

  if (newpcb == NULL) {
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d11b      	bne.n	8009506 <accept_function+0x7e>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80094ce:	69fb      	ldr	r3, [r7, #28]
 80094d0:	f103 0414 	add.w	r4, r3, #20
 80094d4:	f06f 000c 	mvn.w	r0, #12
 80094d8:	f7ff fc7e 	bl	8008dd8 <lwip_netconn_err_to_msg>
 80094dc:	4603      	mov	r3, r0
 80094de:	4619      	mov	r1, r3
 80094e0:	4620      	mov	r0, r4
 80094e2:	f011 fdd7 	bl	801b094 <sys_mbox_trypost>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d109      	bne.n	8009500 <accept_function+0x78>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d005      	beq.n	8009500 <accept_function+0x78>
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f8:	2200      	movs	r2, #0
 80094fa:	2100      	movs	r1, #0
 80094fc:	69f8      	ldr	r0, [r7, #28]
 80094fe:	4798      	blx	r3
    }
    return ERR_VAL;
 8009500:	f06f 0305 	mvn.w	r3, #5
 8009504:	e087      	b.n	8009616 <accept_function+0x18e>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8009506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d009      	beq.n	8009522 <accept_function+0x9a>
 800950e:	4b45      	ldr	r3, [pc, #276]	@ (8009624 <accept_function+0x19c>)
 8009510:	f240 222a 	movw	r2, #554	@ 0x22a
 8009514:	4944      	ldr	r1, [pc, #272]	@ (8009628 <accept_function+0x1a0>)
 8009516:	4845      	ldr	r0, [pc, #276]	@ (800962c <accept_function+0x1a4>)
 8009518:	f012 f906 	bl	801b728 <iprintf>
 800951c:	2000      	movs	r0, #0
 800951e:	f012 f82d 	bl	801b57c <fflush>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	7d1b      	ldrb	r3, [r3, #20]
 8009526:	4618      	mov	r0, r3
 8009528:	f005 fd90 	bl	800f04c <tcp_debug_state_str>
 800952c:	4603      	mov	r3, r0
 800952e:	4619      	mov	r1, r3
 8009530:	483f      	ldr	r0, [pc, #252]	@ (8009630 <accept_function+0x1a8>)
 8009532:	f012 f8f9 	bl	801b728 <iprintf>
 8009536:	2000      	movs	r0, #0
 8009538:	f012 f820 	bl	801b57c <fflush>

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	781a      	ldrb	r2, [r3, #0]
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009544:	4619      	mov	r1, r3
 8009546:	4610      	mov	r0, r2
 8009548:	f000 f8f6 	bl	8009738 <netconn_alloc>
 800954c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d11b      	bne.n	800958c <accept_function+0x104>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8009554:	69fb      	ldr	r3, [r7, #28]
 8009556:	f103 0414 	add.w	r4, r3, #20
 800955a:	f06f 000c 	mvn.w	r0, #12
 800955e:	f7ff fc3b 	bl	8008dd8 <lwip_netconn_err_to_msg>
 8009562:	4603      	mov	r3, r0
 8009564:	4619      	mov	r1, r3
 8009566:	4620      	mov	r0, r4
 8009568:	f011 fd94 	bl	801b094 <sys_mbox_trypost>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d109      	bne.n	8009586 <accept_function+0xfe>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009572:	69fb      	ldr	r3, [r7, #28]
 8009574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009576:	2b00      	cmp	r3, #0
 8009578:	d005      	beq.n	8009586 <accept_function+0xfe>
 800957a:	69fb      	ldr	r3, [r7, #28]
 800957c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800957e:	2200      	movs	r2, #0
 8009580:	2100      	movs	r1, #0
 8009582:	69f8      	ldr	r0, [r7, #28]
 8009584:	4798      	blx	r3
    }
    return ERR_MEM;
 8009586:	f04f 33ff 	mov.w	r3, #4294967295
 800958a:	e044      	b.n	8009616 <accept_function+0x18e>
  }
  newconn->pcb.tcp = newpcb;
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8009592:	69b8      	ldr	r0, [r7, #24]
 8009594:	f7ff ff50 	bl	8009438 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	3314      	adds	r3, #20
 800959c:	69b9      	ldr	r1, [r7, #24]
 800959e:	4618      	mov	r0, r3
 80095a0:	f011 fd78 	bl	801b094 <sys_mbox_trypost>
 80095a4:	4603      	mov	r3, r0
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d02a      	beq.n	8009600 <accept_function+0x178>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80095aa:	69bb      	ldr	r3, [r7, #24]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80095b0:	2100      	movs	r1, #0
 80095b2:	6978      	ldr	r0, [r7, #20]
 80095b4:	f005 fa64 	bl	800ea80 <tcp_arg>
    tcp_recv(pcb, NULL);
 80095b8:	2100      	movs	r1, #0
 80095ba:	6978      	ldr	r0, [r7, #20]
 80095bc:	f005 fa72 	bl	800eaa4 <tcp_recv>
    tcp_sent(pcb, NULL);
 80095c0:	2100      	movs	r1, #0
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f005 fa92 	bl	800eaec <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80095c8:	2200      	movs	r2, #0
 80095ca:	2100      	movs	r1, #0
 80095cc:	6978      	ldr	r0, [r7, #20]
 80095ce:	f005 faed 	bl	800ebac <tcp_poll>
    tcp_err(pcb, NULL);
 80095d2:	2100      	movs	r1, #0
 80095d4:	6978      	ldr	r0, [r7, #20]
 80095d6:	f005 faad 	bl	800eb34 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	2200      	movs	r2, #0
 80095de:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	3310      	adds	r3, #16
 80095e4:	4618      	mov	r0, r3
 80095e6:	f011 fd43 	bl	801b070 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	3310      	adds	r3, #16
 80095ee:	4618      	mov	r0, r3
 80095f0:	f011 fdc3 	bl	801b17a <sys_mbox_set_invalid>
    netconn_free(newconn);
 80095f4:	69b8      	ldr	r0, [r7, #24]
 80095f6:	f000 f911 	bl	800981c <netconn_free>
    return ERR_MEM;
 80095fa:	f04f 33ff 	mov.w	r3, #4294967295
 80095fe:	e00a      	b.n	8009616 <accept_function+0x18e>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009604:	2b00      	cmp	r3, #0
 8009606:	d005      	beq.n	8009614 <accept_function+0x18c>
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800960c:	2200      	movs	r2, #0
 800960e:	2100      	movs	r1, #0
 8009610:	69f8      	ldr	r0, [r7, #28]
 8009612:	4798      	blx	r3
  }

  return ERR_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3724      	adds	r7, #36	@ 0x24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd90      	pop	{r4, r7, pc}
 800961e:	bf00      	nop
 8009620:	0801cb8c 	.word	0x0801cb8c
 8009624:	0801c9d0 	.word	0x0801c9d0
 8009628:	0801cbb8 	.word	0x0801cbb8
 800962c:	0801ca14 	.word	0x0801ca14
 8009630:	0801cbe0 	.word	0x0801cbe0

08009634 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8009634:	b590      	push	{r4, r7, lr}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d009      	beq.n	800965e <pcb_new+0x2a>
 800964a:	4b2c      	ldr	r3, [pc, #176]	@ (80096fc <pcb_new+0xc8>)
 800964c:	f240 2265 	movw	r2, #613	@ 0x265
 8009650:	492b      	ldr	r1, [pc, #172]	@ (8009700 <pcb_new+0xcc>)
 8009652:	482c      	ldr	r0, [pc, #176]	@ (8009704 <pcb_new+0xd0>)
 8009654:	f012 f868 	bl	801b728 <iprintf>
 8009658:	2000      	movs	r0, #0
 800965a:	f011 ff8f 	bl	801b57c <fflush>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009668:	2b10      	cmp	r3, #16
 800966a:	d022      	beq.n	80096b2 <pcb_new+0x7e>
 800966c:	2b20      	cmp	r3, #32
 800966e:	d133      	bne.n	80096d8 <pcb_new+0xa4>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681c      	ldr	r4, [r3, #0]
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	4618      	mov	r0, r3
 8009678:	f00c f8e5 	bl	8015846 <udp_new_ip_type>
 800967c:	4603      	mov	r3, r0
 800967e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d02a      	beq.n	80096e0 <pcb_new+0xac>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	2b22      	cmp	r3, #34	@ 0x22
 8009692:	d104      	bne.n	800969e <pcb_new+0x6a>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	2201      	movs	r2, #1
 800969c:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	6858      	ldr	r0, [r3, #4]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	461a      	mov	r2, r3
 80096aa:	4917      	ldr	r1, [pc, #92]	@ (8009708 <pcb_new+0xd4>)
 80096ac:	f00c f84c 	bl	8015748 <udp_recv>
      }
      break;
 80096b0:	e016      	b.n	80096e0 <pcb_new+0xac>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681c      	ldr	r4, [r3, #0]
 80096b6:	7bfb      	ldrb	r3, [r7, #15]
 80096b8:	4618      	mov	r0, r3
 80096ba:	f005 f9d3 	bl	800ea64 <tcp_new_ip_type>
 80096be:	4603      	mov	r3, r0
 80096c0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <pcb_new+0xb0>
        setup_tcp(msg->conn);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f7ff feb1 	bl	8009438 <setup_tcp>
      }
      break;
 80096d6:	e005      	b.n	80096e4 <pcb_new+0xb0>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	22fa      	movs	r2, #250	@ 0xfa
 80096dc:	711a      	strb	r2, [r3, #4]
      return;
 80096de:	e00a      	b.n	80096f6 <pcb_new+0xc2>
      break;
 80096e0:	bf00      	nop
 80096e2:	e000      	b.n	80096e6 <pcb_new+0xb2>
      break;
 80096e4:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <pcb_new+0xc2>
    msg->err = ERR_MEM;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	22ff      	movs	r2, #255	@ 0xff
 80096f4:	711a      	strb	r2, [r3, #4]
  }
}
 80096f6:	3714      	adds	r7, #20
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd90      	pop	{r4, r7, pc}
 80096fc:	0801c9d0 	.word	0x0801c9d0
 8009700:	0801cc04 	.word	0x0801cc04
 8009704:	0801ca14 	.word	0x0801ca14
 8009708:	08008ec5 	.word	0x08008ec5

0800970c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2200      	movs	r2, #0
 800971c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d102      	bne.n	800972e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8009728:	68f8      	ldr	r0, [r7, #12]
 800972a:	f7ff ff83 	bl	8009634 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800972e:	bf00      	nop
 8009730:	3710      	adds	r7, #16
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
	...

08009738 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8009748:	2007      	movs	r0, #7
 800974a:	f001 ffe7 	bl	800b71c <memp_malloc>
 800974e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <netconn_alloc+0x22>
    return NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	e055      	b.n	8009806 <netconn_alloc+0xce>
  }

  conn->pending_err = ERR_OK;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	79fa      	ldrb	r2, [r7, #7]
 8009764:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	2200      	movs	r2, #0
 800976a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009772:	2b10      	cmp	r3, #16
 8009774:	d004      	beq.n	8009780 <netconn_alloc+0x48>
 8009776:	2b20      	cmp	r3, #32
 8009778:	d105      	bne.n	8009786 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800977a:	2306      	movs	r3, #6
 800977c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800977e:	e00d      	b.n	800979c <netconn_alloc+0x64>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8009780:	2306      	movs	r3, #6
 8009782:	617b      	str	r3, [r7, #20]
      break;
 8009784:	e00a      	b.n	800979c <netconn_alloc+0x64>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8009786:	4b22      	ldr	r3, [pc, #136]	@ (8009810 <netconn_alloc+0xd8>)
 8009788:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800978c:	4921      	ldr	r1, [pc, #132]	@ (8009814 <netconn_alloc+0xdc>)
 800978e:	4822      	ldr	r0, [pc, #136]	@ (8009818 <netconn_alloc+0xe0>)
 8009790:	f011 ffca 	bl	801b728 <iprintf>
 8009794:	2000      	movs	r0, #0
 8009796:	f011 fef1 	bl	801b57c <fflush>
      goto free_and_return;
 800979a:	e02f      	b.n	80097fc <netconn_alloc+0xc4>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	3310      	adds	r3, #16
 80097a0:	6979      	ldr	r1, [r7, #20]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f011 fc4a 	bl	801b03c <sys_mbox_new>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d125      	bne.n	80097fa <netconn_alloc+0xc2>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	330c      	adds	r3, #12
 80097b2:	2100      	movs	r1, #0
 80097b4:	4618      	mov	r0, r3
 80097b6:	f011 fced 	bl	801b194 <sys_sem_new>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d005      	beq.n	80097cc <netconn_alloc+0x94>
    sys_mbox_free(&conn->recvmbox);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	3310      	adds	r3, #16
 80097c4:	4618      	mov	r0, r3
 80097c6:	f011 fc53 	bl	801b070 <sys_mbox_free>
    goto free_and_return;
 80097ca:	e017      	b.n	80097fc <netconn_alloc+0xc4>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	3314      	adds	r3, #20
 80097d0:	4618      	mov	r0, r3
 80097d2:	f011 fcd2 	bl	801b17a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	f04f 32ff 	mov.w	r2, #4294967295
 80097e2:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	683a      	ldr	r2, [r7, #0]
 80097e8:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2200      	movs	r2, #0
 80097ee:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	7cfa      	ldrb	r2, [r7, #19]
 80097f4:	771a      	strb	r2, [r3, #28]
  return conn;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	e005      	b.n	8009806 <netconn_alloc+0xce>
    goto free_and_return;
 80097fa:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80097fc:	68f9      	ldr	r1, [r7, #12]
 80097fe:	2007      	movs	r0, #7
 8009800:	f002 f80e 	bl	800b820 <memp_free>
  return NULL;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	0801c9d0 	.word	0x0801c9d0
 8009814:	0801cc24 	.word	0x0801cc24
 8009818:	0801ca14 	.word	0x0801ca14

0800981c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b082      	sub	sp, #8
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d009      	beq.n	8009840 <netconn_free+0x24>
 800982c:	4b1f      	ldr	r3, [pc, #124]	@ (80098ac <netconn_free+0x90>)
 800982e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8009832:	491f      	ldr	r1, [pc, #124]	@ (80098b0 <netconn_free+0x94>)
 8009834:	481f      	ldr	r0, [pc, #124]	@ (80098b4 <netconn_free+0x98>)
 8009836:	f011 ff77 	bl	801b728 <iprintf>
 800983a:	2000      	movs	r0, #0
 800983c:	f011 fe9e 	bl	801b57c <fflush>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	3310      	adds	r3, #16
 8009844:	4618      	mov	r0, r3
 8009846:	f011 fc87 	bl	801b158 <sys_mbox_valid>
 800984a:	4603      	mov	r3, r0
 800984c:	2b00      	cmp	r3, #0
 800984e:	d009      	beq.n	8009864 <netconn_free+0x48>
 8009850:	4b16      	ldr	r3, [pc, #88]	@ (80098ac <netconn_free+0x90>)
 8009852:	f240 3223 	movw	r2, #803	@ 0x323
 8009856:	4918      	ldr	r1, [pc, #96]	@ (80098b8 <netconn_free+0x9c>)
 8009858:	4816      	ldr	r0, [pc, #88]	@ (80098b4 <netconn_free+0x98>)
 800985a:	f011 ff65 	bl	801b728 <iprintf>
 800985e:	2000      	movs	r0, #0
 8009860:	f011 fe8c 	bl	801b57c <fflush>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	3314      	adds	r3, #20
 8009868:	4618      	mov	r0, r3
 800986a:	f011 fc75 	bl	801b158 <sys_mbox_valid>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d009      	beq.n	8009888 <netconn_free+0x6c>
 8009874:	4b0d      	ldr	r3, [pc, #52]	@ (80098ac <netconn_free+0x90>)
 8009876:	f240 3226 	movw	r2, #806	@ 0x326
 800987a:	4910      	ldr	r1, [pc, #64]	@ (80098bc <netconn_free+0xa0>)
 800987c:	480d      	ldr	r0, [pc, #52]	@ (80098b4 <netconn_free+0x98>)
 800987e:	f011 ff53 	bl	801b728 <iprintf>
 8009882:	2000      	movs	r0, #0
 8009884:	f011 fe7a 	bl	801b57c <fflush>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	330c      	adds	r3, #12
 800988c:	4618      	mov	r0, r3
 800988e:	f011 fce4 	bl	801b25a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	330c      	adds	r3, #12
 8009896:	4618      	mov	r0, r3
 8009898:	f011 fcfd 	bl	801b296 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	2007      	movs	r0, #7
 80098a0:	f001 ffbe 	bl	800b820 <memp_free>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	0801c9d0 	.word	0x0801c9d0
 80098b0:	0801cc4c 	.word	0x0801cc4c
 80098b4:	0801ca14 	.word	0x0801ca14
 80098b8:	0801cc7c 	.word	0x0801cc7c
 80098bc:	0801ccb8 	.word	0x0801ccb8

080098c0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b086      	sub	sp, #24
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3310      	adds	r3, #16
 80098cc:	4618      	mov	r0, r3
 80098ce:	f011 fc43 	bl	801b158 <sys_mbox_valid>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d02f      	beq.n	8009938 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80098d8:	e018      	b.n	800990c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80098e2:	2b10      	cmp	r3, #16
 80098e4:	d10e      	bne.n	8009904 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	f107 020f 	add.w	r2, r7, #15
 80098ec:	4611      	mov	r1, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7ff faaa 	bl	8008e48 <lwip_netconn_is_err_msg>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d108      	bne.n	800990c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	4618      	mov	r0, r3
 80098fe:	f003 f80d 	bl	800c91c <pbuf_free>
 8009902:	e003      	b.n	800990c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 ff00 	bl	800a70c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	3310      	adds	r3, #16
 8009910:	f107 0210 	add.w	r2, r7, #16
 8009914:	4611      	mov	r1, r2
 8009916:	4618      	mov	r0, r3
 8009918:	f011 fc07 	bl	801b12a <sys_arch_mbox_tryfetch>
 800991c:	4603      	mov	r3, r0
 800991e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009922:	d1da      	bne.n	80098da <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3310      	adds	r3, #16
 8009928:	4618      	mov	r0, r3
 800992a:	f011 fba1 	bl	801b070 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	3310      	adds	r3, #16
 8009932:	4618      	mov	r0, r3
 8009934:	f011 fc21 	bl	801b17a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3314      	adds	r3, #20
 800993c:	4618      	mov	r0, r3
 800993e:	f011 fc0b 	bl	801b158 <sys_mbox_valid>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d034      	beq.n	80099b2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009948:	e01d      	b.n	8009986 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f107 020e 	add.w	r2, r7, #14
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f7ff fa78 	bl	8008e48 <lwip_netconn_is_err_msg>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d113      	bne.n	8009986 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8009962:	6978      	ldr	r0, [r7, #20]
 8009964:	f7ff ffac 	bl	80098c0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d007      	beq.n	8009980 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4618      	mov	r0, r3
 8009976:	f003 fe7d 	bl	800d674 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	2200      	movs	r2, #0
 800997e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8009980:	6978      	ldr	r0, [r7, #20]
 8009982:	f7ff ff4b 	bl	800981c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3314      	adds	r3, #20
 800998a:	f107 0210 	add.w	r2, r7, #16
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f011 fbca 	bl	801b12a <sys_arch_mbox_tryfetch>
 8009996:	4603      	mov	r3, r0
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999c:	d1d5      	bne.n	800994a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	3314      	adds	r3, #20
 80099a2:	4618      	mov	r0, r3
 80099a4:	f011 fb64 	bl	801b070 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	3314      	adds	r3, #20
 80099ac:	4618      	mov	r0, r3
 80099ae:	f011 fbe4 	bl	801b17a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80099b2:	bf00      	nop
 80099b4:	3718      	adds	r7, #24
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
	...

080099bc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b086      	sub	sp, #24
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
 80099c4:	460b      	mov	r3, r1
 80099c6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d109      	bne.n	80099e6 <lwip_netconn_do_close_internal+0x2a>
 80099d2:	4b8f      	ldr	r3, [pc, #572]	@ (8009c10 <lwip_netconn_do_close_internal+0x254>)
 80099d4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 80099d8:	498e      	ldr	r1, [pc, #568]	@ (8009c14 <lwip_netconn_do_close_internal+0x258>)
 80099da:	488f      	ldr	r0, [pc, #572]	@ (8009c18 <lwip_netconn_do_close_internal+0x25c>)
 80099dc:	f011 fea4 	bl	801b728 <iprintf>
 80099e0:	2000      	movs	r0, #0
 80099e2:	f011 fdcb 	bl	801b57c <fflush>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	781b      	ldrb	r3, [r3, #0]
 80099ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80099ee:	2b10      	cmp	r3, #16
 80099f0:	d009      	beq.n	8009a06 <lwip_netconn_do_close_internal+0x4a>
 80099f2:	4b87      	ldr	r3, [pc, #540]	@ (8009c10 <lwip_netconn_do_close_internal+0x254>)
 80099f4:	f240 32a3 	movw	r2, #931	@ 0x3a3
 80099f8:	4988      	ldr	r1, [pc, #544]	@ (8009c1c <lwip_netconn_do_close_internal+0x260>)
 80099fa:	4887      	ldr	r0, [pc, #540]	@ (8009c18 <lwip_netconn_do_close_internal+0x25c>)
 80099fc:	f011 fe94 	bl	801b728 <iprintf>
 8009a00:	2000      	movs	r0, #0
 8009a02:	f011 fdbb 	bl	801b57c <fflush>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	785b      	ldrb	r3, [r3, #1]
 8009a0a:	2b04      	cmp	r3, #4
 8009a0c:	d009      	beq.n	8009a22 <lwip_netconn_do_close_internal+0x66>
 8009a0e:	4b80      	ldr	r3, [pc, #512]	@ (8009c10 <lwip_netconn_do_close_internal+0x254>)
 8009a10:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 8009a14:	4982      	ldr	r1, [pc, #520]	@ (8009c20 <lwip_netconn_do_close_internal+0x264>)
 8009a16:	4880      	ldr	r0, [pc, #512]	@ (8009c18 <lwip_netconn_do_close_internal+0x25c>)
 8009a18:	f011 fe86 	bl	801b728 <iprintf>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f011 fdad 	bl	801b57c <fflush>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <lwip_netconn_do_close_internal+0x82>
 8009a2a:	4b79      	ldr	r3, [pc, #484]	@ (8009c10 <lwip_netconn_do_close_internal+0x254>)
 8009a2c:	f240 32a5 	movw	r2, #933	@ 0x3a5
 8009a30:	497c      	ldr	r1, [pc, #496]	@ (8009c24 <lwip_netconn_do_close_internal+0x268>)
 8009a32:	4879      	ldr	r0, [pc, #484]	@ (8009c18 <lwip_netconn_do_close_internal+0x25c>)
 8009a34:	f011 fe78 	bl	801b728 <iprintf>
 8009a38:	2000      	movs	r0, #0
 8009a3a:	f011 fd9f 	bl	801b57c <fflush>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d109      	bne.n	8009a5a <lwip_netconn_do_close_internal+0x9e>
 8009a46:	4b72      	ldr	r3, [pc, #456]	@ (8009c10 <lwip_netconn_do_close_internal+0x254>)
 8009a48:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8009a4c:	4976      	ldr	r1, [pc, #472]	@ (8009c28 <lwip_netconn_do_close_internal+0x26c>)
 8009a4e:	4872      	ldr	r0, [pc, #456]	@ (8009c18 <lwip_netconn_do_close_internal+0x25c>)
 8009a50:	f011 fe6a 	bl	801b728 <iprintf>
 8009a54:	2000      	movs	r0, #0
 8009a56:	f011 fd91 	bl	801b57c <fflush>

  tpcb = conn->pcb.tcp;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a1b      	ldr	r3, [r3, #32]
 8009a64:	7a1b      	ldrb	r3, [r3, #8]
 8009a66:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8009a68:	7bfb      	ldrb	r3, [r7, #15]
 8009a6a:	f003 0301 	and.w	r3, r3, #1
 8009a6e:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
 8009a72:	f003 0302 	and.w	r3, r3, #2
 8009a76:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
 8009a7a:	2b03      	cmp	r3, #3
 8009a7c:	d102      	bne.n	8009a84 <lwip_netconn_do_close_internal+0xc8>
    shut_close = 1;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75bb      	strb	r3, [r7, #22]
 8009a82:	e01f      	b.n	8009ac4 <lwip_netconn_do_close_internal+0x108>
  } else if (shut_rx &&
 8009a84:	7bbb      	ldrb	r3, [r7, #14]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00e      	beq.n	8009aa8 <lwip_netconn_do_close_internal+0xec>
             ((tpcb->state == FIN_WAIT_1) ||
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	d007      	beq.n	8009aa2 <lwip_netconn_do_close_internal+0xe6>
              (tpcb->state == FIN_WAIT_2) ||
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8009a96:	2b06      	cmp	r3, #6
 8009a98:	d003      	beq.n	8009aa2 <lwip_netconn_do_close_internal+0xe6>
              (tpcb->state == CLOSING))) {
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8009a9e:	2b08      	cmp	r3, #8
 8009aa0:	d102      	bne.n	8009aa8 <lwip_netconn_do_close_internal+0xec>
    shut_close = 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	75bb      	strb	r3, [r7, #22]
 8009aa6:	e00d      	b.n	8009ac4 <lwip_netconn_do_close_internal+0x108>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8009aa8:	7b7b      	ldrb	r3, [r7, #13]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d008      	beq.n	8009ac0 <lwip_netconn_do_close_internal+0x104>
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	8b5b      	ldrh	r3, [r3, #26]
 8009ab2:	f003 0310 	and.w	r3, r3, #16
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d002      	beq.n	8009ac0 <lwip_netconn_do_close_internal+0x104>
    shut_close = 1;
 8009aba:	2301      	movs	r3, #1
 8009abc:	75bb      	strb	r3, [r7, #22]
 8009abe:	e001      	b.n	8009ac4 <lwip_netconn_do_close_internal+0x108>
  } else {
    shut_close = 0;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8009ac4:	7dbb      	ldrb	r3, [r7, #22]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d003      	beq.n	8009ad2 <lwip_netconn_do_close_internal+0x116>
    tcp_arg(tpcb, NULL);
 8009aca:	2100      	movs	r1, #0
 8009acc:	6938      	ldr	r0, [r7, #16]
 8009ace:	f004 ffd7 	bl	800ea80 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	7d1b      	ldrb	r3, [r3, #20]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d104      	bne.n	8009ae4 <lwip_netconn_do_close_internal+0x128>
    tcp_accept(tpcb, NULL);
 8009ada:	2100      	movs	r1, #0
 8009adc:	6938      	ldr	r0, [r7, #16]
 8009ade:	f005 f84d 	bl	800eb7c <tcp_accept>
 8009ae2:	e01d      	b.n	8009b20 <lwip_netconn_do_close_internal+0x164>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8009ae4:	7bbb      	ldrb	r3, [r7, #14]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d007      	beq.n	8009afa <lwip_netconn_do_close_internal+0x13e>
      tcp_recv(tpcb, NULL);
 8009aea:	2100      	movs	r1, #0
 8009aec:	6938      	ldr	r0, [r7, #16]
 8009aee:	f004 ffd9 	bl	800eaa4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8009af2:	2100      	movs	r1, #0
 8009af4:	6938      	ldr	r0, [r7, #16]
 8009af6:	f005 f841 	bl	800eb7c <tcp_accept>
    }
    if (shut_tx) {
 8009afa:	7b7b      	ldrb	r3, [r7, #13]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <lwip_netconn_do_close_internal+0x14c>
      tcp_sent(tpcb, NULL);
 8009b00:	2100      	movs	r1, #0
 8009b02:	6938      	ldr	r0, [r7, #16]
 8009b04:	f004 fff2 	bl	800eaec <tcp_sent>
    }
    if (shut_close) {
 8009b08:	7dbb      	ldrb	r3, [r7, #22]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d008      	beq.n	8009b20 <lwip_netconn_do_close_internal+0x164>
      tcp_poll(tpcb, NULL, 0);
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2100      	movs	r1, #0
 8009b12:	6938      	ldr	r0, [r7, #16]
 8009b14:	f005 f84a 	bl	800ebac <tcp_poll>
      tcp_err(tpcb, NULL);
 8009b18:	2100      	movs	r1, #0
 8009b1a:	6938      	ldr	r0, [r7, #16]
 8009b1c:	f005 f80a 	bl	800eb34 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8009b20:	7dbb      	ldrb	r3, [r7, #22]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d005      	beq.n	8009b32 <lwip_netconn_do_close_internal+0x176>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8009b26:	6938      	ldr	r0, [r7, #16]
 8009b28:	f003 fc3e 	bl	800d3a8 <tcp_close>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	75fb      	strb	r3, [r7, #23]
 8009b30:	e007      	b.n	8009b42 <lwip_netconn_do_close_internal+0x186>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	7b7a      	ldrb	r2, [r7, #13]
 8009b36:	4619      	mov	r1, r3
 8009b38:	6938      	ldr	r0, [r7, #16]
 8009b3a:	f003 fc71 	bl	800d420 <tcp_shutdown>
 8009b3e:	4603      	mov	r3, r0
 8009b40:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8009b42:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d102      	bne.n	8009b50 <lwip_netconn_do_close_internal+0x194>
    close_finished = 1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	757b      	strb	r3, [r7, #21]
 8009b4e:	e016      	b.n	8009b7e <lwip_netconn_do_close_internal+0x1c2>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8009b50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b58:	d10f      	bne.n	8009b7a <lwip_netconn_do_close_internal+0x1be>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	6a1b      	ldr	r3, [r3, #32]
 8009b5e:	7a5b      	ldrb	r3, [r3, #9]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d10c      	bne.n	8009b7e <lwip_netconn_do_close_internal+0x1c2>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8009b64:	2301      	movs	r3, #1
 8009b66:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8009b68:	7dbb      	ldrb	r3, [r7, #22]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d007      	beq.n	8009b7e <lwip_netconn_do_close_internal+0x1c2>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8009b6e:	6938      	ldr	r0, [r7, #16]
 8009b70:	f003 fd80 	bl	800d674 <tcp_abort>
          err = ERR_OK;
 8009b74:	2300      	movs	r3, #0
 8009b76:	75fb      	strb	r3, [r7, #23]
 8009b78:	e001      	b.n	8009b7e <lwip_netconn_do_close_internal+0x1c2>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8009b7e:	7d7b      	ldrb	r3, [r7, #21]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d053      	beq.n	8009c2c <lwip_netconn_do_close_internal+0x270>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6a1b      	ldr	r3, [r3, #32]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	330c      	adds	r3, #12
 8009b8c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	7dfa      	ldrb	r2, [r7, #23]
 8009b94:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8009ba2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d129      	bne.n	8009bfe <lwip_netconn_do_close_internal+0x242>
      if (shut_close) {
 8009baa:	7dbb      	ldrb	r3, [r7, #22]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d00c      	beq.n	8009bca <lwip_netconn_do_close_internal+0x20e>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d005      	beq.n	8009bca <lwip_netconn_do_close_internal+0x20e>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2104      	movs	r1, #4
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
      }
      if (shut_rx) {
 8009bca:	7bbb      	ldrb	r3, [r7, #14]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d009      	beq.n	8009be4 <lwip_netconn_do_close_internal+0x228>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d005      	beq.n	8009be4 <lwip_netconn_do_close_internal+0x228>
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bdc:	2200      	movs	r2, #0
 8009bde:	2100      	movs	r1, #0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	4798      	blx	r3
      }
      if (shut_tx) {
 8009be4:	7b7b      	ldrb	r3, [r7, #13]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d009      	beq.n	8009bfe <lwip_netconn_do_close_internal+0x242>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d005      	beq.n	8009bfe <lwip_netconn_do_close_internal+0x242>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	2102      	movs	r1, #2
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8009bfe:	78fb      	ldrb	r3, [r7, #3]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d002      	beq.n	8009c0a <lwip_netconn_do_close_internal+0x24e>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8009c04:	68b8      	ldr	r0, [r7, #8]
 8009c06:	f011 fb1b 	bl	801b240 <sys_sem_signal>
    }
    return ERR_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e043      	b.n	8009c96 <lwip_netconn_do_close_internal+0x2da>
 8009c0e:	bf00      	nop
 8009c10:	0801c9d0 	.word	0x0801c9d0
 8009c14:	0801ccf4 	.word	0x0801ccf4
 8009c18:	0801ca14 	.word	0x0801ca14
 8009c1c:	0801cd04 	.word	0x0801cd04
 8009c20:	0801cd24 	.word	0x0801cd24
 8009c24:	0801cd48 	.word	0x0801cd48
 8009c28:	0801cb38 	.word	0x0801cb38
  }
  if (!close_finished) {
 8009c2c:	7d7b      	ldrb	r3, [r7, #21]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d121      	bne.n	8009c76 <lwip_netconn_do_close_internal+0x2ba>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8009c32:	693b      	ldr	r3, [r7, #16]
 8009c34:	7d1b      	ldrb	r3, [r3, #20]
 8009c36:	2b01      	cmp	r3, #1
 8009c38:	d109      	bne.n	8009c4e <lwip_netconn_do_close_internal+0x292>
 8009c3a:	4b19      	ldr	r3, [pc, #100]	@ (8009ca0 <lwip_netconn_do_close_internal+0x2e4>)
 8009c3c:	f240 4241 	movw	r2, #1089	@ 0x441
 8009c40:	4918      	ldr	r1, [pc, #96]	@ (8009ca4 <lwip_netconn_do_close_internal+0x2e8>)
 8009c42:	4819      	ldr	r0, [pc, #100]	@ (8009ca8 <lwip_netconn_do_close_internal+0x2ec>)
 8009c44:	f011 fd70 	bl	801b728 <iprintf>
 8009c48:	2000      	movs	r0, #0
 8009c4a:	f011 fc97 	bl	801b57c <fflush>
    if (shut_tx) {
 8009c4e:	7b7b      	ldrb	r3, [r7, #13]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <lwip_netconn_do_close_internal+0x2a0>
      tcp_sent(tpcb, sent_tcp);
 8009c54:	4915      	ldr	r1, [pc, #84]	@ (8009cac <lwip_netconn_do_close_internal+0x2f0>)
 8009c56:	6938      	ldr	r0, [r7, #16]
 8009c58:	f004 ff48 	bl	800eaec <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	4914      	ldr	r1, [pc, #80]	@ (8009cb0 <lwip_netconn_do_close_internal+0x2f4>)
 8009c60:	6938      	ldr	r0, [r7, #16]
 8009c62:	f004 ffa3 	bl	800ebac <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8009c66:	4913      	ldr	r1, [pc, #76]	@ (8009cb4 <lwip_netconn_do_close_internal+0x2f8>)
 8009c68:	6938      	ldr	r0, [r7, #16]
 8009c6a:	f004 ff63 	bl	800eb34 <tcp_err>
    tcp_arg(tpcb, conn);
 8009c6e:	6879      	ldr	r1, [r7, #4]
 8009c70:	6938      	ldr	r0, [r7, #16]
 8009c72:	f004 ff05 	bl	800ea80 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8009c76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d109      	bne.n	8009c92 <lwip_netconn_do_close_internal+0x2d6>
 8009c7e:	4b08      	ldr	r3, [pc, #32]	@ (8009ca0 <lwip_netconn_do_close_internal+0x2e4>)
 8009c80:	f240 424d 	movw	r2, #1101	@ 0x44d
 8009c84:	490c      	ldr	r1, [pc, #48]	@ (8009cb8 <lwip_netconn_do_close_internal+0x2fc>)
 8009c86:	4808      	ldr	r0, [pc, #32]	@ (8009ca8 <lwip_netconn_do_close_internal+0x2ec>)
 8009c88:	f011 fd4e 	bl	801b728 <iprintf>
 8009c8c:	2000      	movs	r0, #0
 8009c8e:	f011 fc75 	bl	801b57c <fflush>
  return err;
 8009c92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3718      	adds	r7, #24
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	0801c9d0 	.word	0x0801c9d0
 8009ca4:	0801cd5c 	.word	0x0801cd5c
 8009ca8:	0801ca14 	.word	0x0801ca14
 8009cac:	080091c5 	.word	0x080091c5
 8009cb0:	080090f5 	.word	0x080090f5
 8009cb4:	08009275 	.word	0x08009275
 8009cb8:	0801cd80 	.word	0x0801cd80

08009cbc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b084      	sub	sp, #16
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	785b      	ldrb	r3, [r3, #1]
 8009cce:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8009cd0:	7afb      	ldrb	r3, [r7, #11]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d010      	beq.n	8009cf8 <lwip_netconn_do_delconn+0x3c>
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ce0:	2b10      	cmp	r3, #16
 8009ce2:	d009      	beq.n	8009cf8 <lwip_netconn_do_delconn+0x3c>
 8009ce4:	4b67      	ldr	r3, [pc, #412]	@ (8009e84 <lwip_netconn_do_delconn+0x1c8>)
 8009ce6:	f240 425e 	movw	r2, #1118	@ 0x45e
 8009cea:	4967      	ldr	r1, [pc, #412]	@ (8009e88 <lwip_netconn_do_delconn+0x1cc>)
 8009cec:	4867      	ldr	r0, [pc, #412]	@ (8009e8c <lwip_netconn_do_delconn+0x1d0>)
 8009cee:	f011 fd1b 	bl	801b728 <iprintf>
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	f011 fc42 	bl	801b57c <fflush>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d005      	beq.n	8009d0a <lwip_netconn_do_delconn+0x4e>
 8009cfe:	7afb      	ldrb	r3, [r7, #11]
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d002      	beq.n	8009d0a <lwip_netconn_do_delconn+0x4e>
       (state != NETCONN_LISTEN) &&
 8009d04:	7afb      	ldrb	r3, [r7, #11]
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d109      	bne.n	8009d1e <lwip_netconn_do_delconn+0x62>
       (state != NETCONN_CONNECT)) ||
 8009d0a:	7afb      	ldrb	r3, [r7, #11]
 8009d0c:	2b03      	cmp	r3, #3
 8009d0e:	d10a      	bne.n	8009d26 <lwip_netconn_do_delconn+0x6a>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	7f1b      	ldrb	r3, [r3, #28]
 8009d16:	f003 0304 	and.w	r3, r3, #4
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d103      	bne.n	8009d26 <lwip_netconn_do_delconn+0x6a>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	22fb      	movs	r2, #251	@ 0xfb
 8009d22:	711a      	strb	r2, [r3, #4]
 8009d24:	e0a3      	b.n	8009e6e <lwip_netconn_do_delconn+0x1b2>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8009d26:	7afb      	ldrb	r3, [r7, #11]
 8009d28:	2b03      	cmp	r3, #3
 8009d2a:	d110      	bne.n	8009d4e <lwip_netconn_do_delconn+0x92>
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	7f1b      	ldrb	r3, [r3, #28]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d109      	bne.n	8009d4e <lwip_netconn_do_delconn+0x92>
 8009d3a:	4b52      	ldr	r3, [pc, #328]	@ (8009e84 <lwip_netconn_do_delconn+0x1c8>)
 8009d3c:	f240 427a 	movw	r2, #1146	@ 0x47a
 8009d40:	4953      	ldr	r1, [pc, #332]	@ (8009e90 <lwip_netconn_do_delconn+0x1d4>)
 8009d42:	4852      	ldr	r0, [pc, #328]	@ (8009e8c <lwip_netconn_do_delconn+0x1d0>)
 8009d44:	f011 fcf0 	bl	801b728 <iprintf>
 8009d48:	2000      	movs	r0, #0
 8009d4a:	f011 fc17 	bl	801b57c <fflush>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f7ff fdb1 	bl	80098c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d068      	beq.n	8009e3a <lwip_netconn_do_delconn+0x17e>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d72:	2b10      	cmp	r3, #16
 8009d74:	d00d      	beq.n	8009d92 <lwip_netconn_do_delconn+0xd6>
 8009d76:	2b20      	cmp	r3, #32
 8009d78:	d15a      	bne.n	8009e30 <lwip_netconn_do_delconn+0x174>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	685b      	ldr	r3, [r3, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f00b fd00 	bl	8015790 <udp_remove>
          break;
 8009d90:	e04f      	b.n	8009e32 <lwip_netconn_do_delconn+0x176>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d009      	beq.n	8009db0 <lwip_netconn_do_delconn+0xf4>
 8009d9c:	4b39      	ldr	r3, [pc, #228]	@ (8009e84 <lwip_netconn_do_delconn+0x1c8>)
 8009d9e:	f240 4294 	movw	r2, #1172	@ 0x494
 8009da2:	493c      	ldr	r1, [pc, #240]	@ (8009e94 <lwip_netconn_do_delconn+0x1d8>)
 8009da4:	4839      	ldr	r0, [pc, #228]	@ (8009e8c <lwip_netconn_do_delconn+0x1d0>)
 8009da6:	f011 fcbf 	bl	801b728 <iprintf>
 8009daa:	2000      	movs	r0, #0
 8009dac:	f011 fbe6 	bl	801b57c <fflush>
          msg->conn->state = NETCONN_CLOSE;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2204      	movs	r2, #4
 8009db6:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2203      	movs	r2, #3
 8009dbc:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2100      	movs	r1, #0
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff fdf5 	bl	80099bc <lwip_netconn_do_close_internal>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d051      	beq.n	8009e7c <lwip_netconn_do_delconn+0x1c0>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	785b      	ldrb	r3, [r3, #1]
 8009dde:	2b04      	cmp	r3, #4
 8009de0:	d009      	beq.n	8009df6 <lwip_netconn_do_delconn+0x13a>
 8009de2:	4b28      	ldr	r3, [pc, #160]	@ (8009e84 <lwip_netconn_do_delconn+0x1c8>)
 8009de4:	f240 429a 	movw	r2, #1178	@ 0x49a
 8009de8:	492b      	ldr	r1, [pc, #172]	@ (8009e98 <lwip_netconn_do_delconn+0x1dc>)
 8009dea:	4828      	ldr	r0, [pc, #160]	@ (8009e8c <lwip_netconn_do_delconn+0x1d0>)
 8009dec:	f011 fc9c 	bl	801b728 <iprintf>
 8009df0:	2000      	movs	r0, #0
 8009df2:	f011 fbc3 	bl	801b57c <fflush>
            UNLOCK_TCPIP_CORE();
 8009df6:	4829      	ldr	r0, [pc, #164]	@ (8009e9c <lwip_netconn_do_delconn+0x1e0>)
 8009df8:	f011 fa8b 	bl	801b312 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	2100      	movs	r1, #0
 8009e04:	4618      	mov	r0, r3
 8009e06:	f011 f9ea 	bl	801b1de <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8009e0a:	4824      	ldr	r0, [pc, #144]	@ (8009e9c <lwip_netconn_do_delconn+0x1e0>)
 8009e0c:	f011 fa72 	bl	801b2f4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	785b      	ldrb	r3, [r3, #1]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d030      	beq.n	8009e7c <lwip_netconn_do_delconn+0x1c0>
 8009e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8009e84 <lwip_netconn_do_delconn+0x1c8>)
 8009e1c:	f240 429e 	movw	r2, #1182	@ 0x49e
 8009e20:	491d      	ldr	r1, [pc, #116]	@ (8009e98 <lwip_netconn_do_delconn+0x1dc>)
 8009e22:	481a      	ldr	r0, [pc, #104]	@ (8009e8c <lwip_netconn_do_delconn+0x1d0>)
 8009e24:	f011 fc80 	bl	801b728 <iprintf>
 8009e28:	2000      	movs	r0, #0
 8009e2a:	f011 fba7 	bl	801b57c <fflush>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8009e2e:	e025      	b.n	8009e7c <lwip_netconn_do_delconn+0x1c0>
#endif /* LWIP_TCP */
        default:
          break;
 8009e30:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	2200      	movs	r2, #0
 8009e38:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d007      	beq.n	8009e54 <lwip_netconn_do_delconn+0x198>
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	6810      	ldr	r0, [r2, #0]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	2100      	movs	r1, #0
 8009e52:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d007      	beq.n	8009e6e <lwip_netconn_do_delconn+0x1b2>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	6810      	ldr	r0, [r2, #0]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	2102      	movs	r1, #2
 8009e6c:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	330c      	adds	r3, #12
 8009e74:	4618      	mov	r0, r3
 8009e76:	f011 f9fd 	bl	801b274 <sys_sem_valid>
 8009e7a:	e000      	b.n	8009e7e <lwip_netconn_do_delconn+0x1c2>
          return;
 8009e7c:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	0801c9d0 	.word	0x0801c9d0
 8009e88:	0801cd90 	.word	0x0801cd90
 8009e8c:	0801ca14 	.word	0x0801ca14
 8009e90:	0801cda4 	.word	0x0801cda4
 8009e94:	0801cdc4 	.word	0x0801cdc4
 8009e98:	0801cde0 	.word	0x0801cde0
 8009e9c:	2000c0e4 	.word	0x2000c0e4

08009ea0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d025      	beq.n	8009f02 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ec0:	2b10      	cmp	r3, #16
 8009ec2:	d00e      	beq.n	8009ee2 <lwip_netconn_do_bind+0x42>
 8009ec4:	2b20      	cmp	r3, #32
 8009ec6:	d119      	bne.n	8009efc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	6858      	ldr	r0, [r3, #4]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	6899      	ldr	r1, [r3, #8]
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	899b      	ldrh	r3, [r3, #12]
 8009ed6:	461a      	mov	r2, r3
 8009ed8:	f00b fa8a 	bl	80153f0 <udp_bind>
 8009edc:	4603      	mov	r3, r0
 8009ede:	73fb      	strb	r3, [r7, #15]
        break;
 8009ee0:	e011      	b.n	8009f06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009ee2:	68bb      	ldr	r3, [r7, #8]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6858      	ldr	r0, [r3, #4]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	6899      	ldr	r1, [r3, #8]
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	899b      	ldrh	r3, [r3, #12]
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	f003 fbcb 	bl	800d68c <tcp_bind>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	73fb      	strb	r3, [r7, #15]
        break;
 8009efa:	e004      	b.n	8009f06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009efc:	23fa      	movs	r3, #250	@ 0xfa
 8009efe:	73fb      	strb	r3, [r7, #15]
        break;
 8009f00:	e001      	b.n	8009f06 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8009f02:	23fa      	movs	r3, #250	@ 0xfa
 8009f04:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	7bfa      	ldrb	r2, [r7, #15]
 8009f0a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8009f0c:	bf00      	nop
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d07f      	beq.n	800a02a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	781b      	ldrb	r3, [r3, #0]
 8009f30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009f34:	2b10      	cmp	r3, #16
 8009f36:	d175      	bne.n	800a024 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	785b      	ldrb	r3, [r3, #1]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d165      	bne.n	800a00e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	7d1b      	ldrb	r3, [r3, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8009f4e:	23fa      	movs	r3, #250	@ 0xfa
 8009f50:	72fb      	strb	r3, [r7, #11]
 8009f52:	e06c      	b.n	800a02e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8009f54:	23ff      	movs	r3, #255	@ 0xff
 8009f56:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8009f58:	697b      	ldr	r3, [r7, #20]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	f107 020b 	add.w	r2, r7, #11
 8009f62:	7cf9      	ldrb	r1, [r7, #19]
 8009f64:	4618      	mov	r0, r3
 8009f66:	f003 fc5d 	bl	800d824 <tcp_listen_with_backlog_and_err>
 8009f6a:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d05d      	beq.n	800a02e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	3310      	adds	r3, #16
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f011 f8ed 	bl	801b158 <sys_mbox_valid>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	3310      	adds	r3, #16
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f011 f870 	bl	801b070 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3310      	adds	r3, #16
 8009f96:	4618      	mov	r0, r3
 8009f98:	f011 f8ef 	bl	801b17a <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	3314      	adds	r3, #20
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f011 f8d6 	bl	801b158 <sys_mbox_valid>
 8009fac:	4603      	mov	r3, r0
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d108      	bne.n	8009fc4 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8009fb2:	697b      	ldr	r3, [r7, #20]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3314      	adds	r3, #20
 8009fb8:	2106      	movs	r1, #6
 8009fba:	4618      	mov	r0, r3
 8009fbc:	f011 f83e 	bl	801b03c <sys_mbox_new>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8009fc4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d118      	bne.n	8009ffe <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009fcc:	697b      	ldr	r3, [r7, #20]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	2202      	movs	r2, #2
 8009fd2:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	4610      	mov	r0, r2
 8009fea:	f004 fd49 	bl	800ea80 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	4912      	ldr	r1, [pc, #72]	@ (800a040 <lwip_netconn_do_listen+0x12c>)
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f004 fdc0 	bl	800eb7c <tcp_accept>
 8009ffc:	e017      	b.n	800a02e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009ffe:	68f8      	ldr	r0, [r7, #12]
 800a000:	f003 f9d2 	bl	800d3a8 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	2200      	movs	r2, #0
 800a00a:	605a      	str	r2, [r3, #4]
 800a00c:	e00f      	b.n	800a02e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	785b      	ldrb	r3, [r3, #1]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d102      	bne.n	800a01e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 800a018:	2300      	movs	r3, #0
 800a01a:	72fb      	strb	r3, [r7, #11]
 800a01c:	e007      	b.n	800a02e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 800a01e:	23f5      	movs	r3, #245	@ 0xf5
 800a020:	72fb      	strb	r3, [r7, #11]
 800a022:	e004      	b.n	800a02e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 800a024:	23f0      	movs	r3, #240	@ 0xf0
 800a026:	72fb      	strb	r3, [r7, #11]
 800a028:	e001      	b.n	800a02e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 800a02a:	23f5      	movs	r3, #245	@ 0xf5
 800a02c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 800a02e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800a036:	bf00      	nop
 800a038:	3718      	adds	r7, #24
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	08009489 	.word	0x08009489

0800a044 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b086      	sub	sp, #24
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2200      	movs	r2, #0
 800a054:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	685b      	ldr	r3, [r3, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d022      	beq.n	800a0a6 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a06a:	2b10      	cmp	r3, #16
 800a06c:	d11b      	bne.n	800a0a6 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800a06e:	693b      	ldr	r3, [r7, #16]
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a07a:	d202      	bcs.n	800a082 <lwip_netconn_do_recv+0x3e>
 800a07c:	697b      	ldr	r3, [r7, #20]
 800a07e:	b29b      	uxth	r3, r3
 800a080:	e001      	b.n	800a086 <lwip_netconn_do_recv+0x42>
 800a082:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a086:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	89fa      	ldrh	r2, [r7, #14]
 800a090:	4611      	mov	r1, r2
 800a092:	4618      	mov	r0, r3
 800a094:	f003 fcd6 	bl	800da44 <tcp_recved>
        remaining -= recved;
 800a098:	89fb      	ldrh	r3, [r7, #14]
 800a09a:	697a      	ldr	r2, [r7, #20]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e6      	bne.n	800a074 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a0a6:	bf00      	nop
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
	...

0800a0b0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b088      	sub	sp, #32
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800a0bc:	2300      	movs	r3, #0
 800a0be:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d109      	bne.n	800a0da <lwip_netconn_do_writemore+0x2a>
 800a0c6:	4b6b      	ldr	r3, [pc, #428]	@ (800a274 <lwip_netconn_do_writemore+0x1c4>)
 800a0c8:	f240 6273 	movw	r2, #1651	@ 0x673
 800a0cc:	496a      	ldr	r1, [pc, #424]	@ (800a278 <lwip_netconn_do_writemore+0x1c8>)
 800a0ce:	486b      	ldr	r0, [pc, #428]	@ (800a27c <lwip_netconn_do_writemore+0x1cc>)
 800a0d0:	f011 fb2a 	bl	801b728 <iprintf>
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	f011 fa51 	bl	801b57c <fflush>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	785b      	ldrb	r3, [r3, #1]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d009      	beq.n	800a0f6 <lwip_netconn_do_writemore+0x46>
 800a0e2:	4b64      	ldr	r3, [pc, #400]	@ (800a274 <lwip_netconn_do_writemore+0x1c4>)
 800a0e4:	f240 6274 	movw	r2, #1652	@ 0x674
 800a0e8:	4965      	ldr	r1, [pc, #404]	@ (800a280 <lwip_netconn_do_writemore+0x1d0>)
 800a0ea:	4864      	ldr	r0, [pc, #400]	@ (800a27c <lwip_netconn_do_writemore+0x1cc>)
 800a0ec:	f011 fb1c 	bl	801b728 <iprintf>
 800a0f0:	2000      	movs	r0, #0
 800a0f2:	f011 fa43 	bl	801b57c <fflush>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6a1b      	ldr	r3, [r3, #32]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d109      	bne.n	800a112 <lwip_netconn_do_writemore+0x62>
 800a0fe:	4b5d      	ldr	r3, [pc, #372]	@ (800a274 <lwip_netconn_do_writemore+0x1c4>)
 800a100:	f240 6275 	movw	r2, #1653	@ 0x675
 800a104:	495f      	ldr	r1, [pc, #380]	@ (800a284 <lwip_netconn_do_writemore+0x1d4>)
 800a106:	485d      	ldr	r0, [pc, #372]	@ (800a27c <lwip_netconn_do_writemore+0x1cc>)
 800a108:	f011 fb0e 	bl	801b728 <iprintf>
 800a10c:	2000      	movs	r0, #0
 800a10e:	f011 fa35 	bl	801b57c <fflush>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d109      	bne.n	800a12e <lwip_netconn_do_writemore+0x7e>
 800a11a:	4b56      	ldr	r3, [pc, #344]	@ (800a274 <lwip_netconn_do_writemore+0x1c4>)
 800a11c:	f240 6276 	movw	r2, #1654	@ 0x676
 800a120:	4959      	ldr	r1, [pc, #356]	@ (800a288 <lwip_netconn_do_writemore+0x1d8>)
 800a122:	4856      	ldr	r0, [pc, #344]	@ (800a27c <lwip_netconn_do_writemore+0x1cc>)
 800a124:	f011 fb00 	bl	801b728 <iprintf>
 800a128:	2000      	movs	r0, #0
 800a12a:	f011 fa27 	bl	801b57c <fflush>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a1b      	ldr	r3, [r3, #32]
 800a132:	699a      	ldr	r2, [r3, #24]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	6a1b      	ldr	r3, [r3, #32]
 800a138:	695b      	ldr	r3, [r3, #20]
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d309      	bcc.n	800a152 <lwip_netconn_do_writemore+0xa2>
 800a13e:	4b4d      	ldr	r3, [pc, #308]	@ (800a274 <lwip_netconn_do_writemore+0x1c4>)
 800a140:	f240 6277 	movw	r2, #1655	@ 0x677
 800a144:	4951      	ldr	r1, [pc, #324]	@ (800a28c <lwip_netconn_do_writemore+0x1dc>)
 800a146:	484d      	ldr	r0, [pc, #308]	@ (800a27c <lwip_netconn_do_writemore+0x1cc>)
 800a148:	f011 faee 	bl	801b728 <iprintf>
 800a14c:	2000      	movs	r0, #0
 800a14e:	f011 fa15 	bl	801b57c <fflush>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6a1b      	ldr	r3, [r3, #32]
 800a156:	899b      	ldrh	r3, [r3, #12]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d109      	bne.n	800a170 <lwip_netconn_do_writemore+0xc0>
 800a15c:	4b45      	ldr	r3, [pc, #276]	@ (800a274 <lwip_netconn_do_writemore+0x1c4>)
 800a15e:	f240 6279 	movw	r2, #1657	@ 0x679
 800a162:	494b      	ldr	r1, [pc, #300]	@ (800a290 <lwip_netconn_do_writemore+0x1e0>)
 800a164:	4845      	ldr	r0, [pc, #276]	@ (800a27c <lwip_netconn_do_writemore+0x1cc>)
 800a166:	f011 fadf 	bl	801b728 <iprintf>
 800a16a:	2000      	movs	r0, #0
 800a16c:	f011 fa06 	bl	801b57c <fflush>

  apiflags = conn->current_msg->msg.w.apiflags;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6a1b      	ldr	r3, [r3, #32]
 800a174:	7f1b      	ldrb	r3, [r3, #28]
 800a176:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	7f1b      	ldrb	r3, [r3, #28]
 800a17c:	f003 0302 	and.w	r3, r3, #2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d104      	bne.n	800a18e <lwip_netconn_do_writemore+0xde>
 800a184:	7ebb      	ldrb	r3, [r7, #26]
 800a186:	f003 0304 	and.w	r3, r3, #4
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <lwip_netconn_do_writemore+0xe2>
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <lwip_netconn_do_writemore+0xe4>
 800a192:	2300      	movs	r3, #0
 800a194:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6a1b      	ldr	r3, [r3, #32]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	681a      	ldr	r2, [r3, #0]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a1b      	ldr	r3, [r3, #32]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	689b      	ldr	r3, [r3, #8]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a1b      	ldr	r3, [r3, #32]
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	1ad3      	subs	r3, r2, r3
 800a1b8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1c0:	d307      	bcc.n	800a1d2 <lwip_netconn_do_writemore+0x122>
        len = 0xffff;
 800a1c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a1c6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a1c8:	7ebb      	ldrb	r3, [r7, #26]
 800a1ca:	f043 0302 	orr.w	r3, r3, #2
 800a1ce:	76bb      	strb	r3, [r7, #26]
 800a1d0:	e001      	b.n	800a1d6 <lwip_netconn_do_writemore+0x126>
      } else {
        len = (u16_t)diff;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a1de:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800a1e0:	89fa      	ldrh	r2, [r7, #14]
 800a1e2:	8bbb      	ldrh	r3, [r7, #28]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d216      	bcs.n	800a216 <lwip_netconn_do_writemore+0x166>
        /* don't try to write more than sendbuf */
        len = available;
 800a1e8:	89fb      	ldrh	r3, [r7, #14]
 800a1ea:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800a1ec:	7e3b      	ldrb	r3, [r7, #24]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d00d      	beq.n	800a20e <lwip_netconn_do_writemore+0x15e>
          if (!len) {
 800a1f2:	8bbb      	ldrh	r3, [r7, #28]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d10e      	bne.n	800a216 <lwip_netconn_do_writemore+0x166>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6a1b      	ldr	r3, [r3, #32]
 800a1fc:	699b      	ldr	r3, [r3, #24]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d102      	bne.n	800a208 <lwip_netconn_do_writemore+0x158>
 800a202:	f06f 0306 	mvn.w	r3, #6
 800a206:	e000      	b.n	800a20a <lwip_netconn_do_writemore+0x15a>
 800a208:	2300      	movs	r3, #0
 800a20a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800a20c:	e092      	b.n	800a334 <lwip_netconn_do_writemore+0x284>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800a20e:	7ebb      	ldrb	r3, [r7, #26]
 800a210:	f043 0302 	orr.w	r3, r3, #2
 800a214:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6a1b      	ldr	r3, [r3, #32]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	8bbb      	ldrh	r3, [r7, #28]
 800a21e:	441a      	add	r2, r3
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a1b      	ldr	r3, [r3, #32]
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d909      	bls.n	800a240 <lwip_netconn_do_writemore+0x190>
 800a22c:	4b11      	ldr	r3, [pc, #68]	@ (800a274 <lwip_netconn_do_writemore+0x1c4>)
 800a22e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800a232:	4918      	ldr	r1, [pc, #96]	@ (800a294 <lwip_netconn_do_writemore+0x1e4>)
 800a234:	4811      	ldr	r0, [pc, #68]	@ (800a27c <lwip_netconn_do_writemore+0x1cc>)
 800a236:	f011 fa77 	bl	801b728 <iprintf>
 800a23a:	2000      	movs	r0, #0
 800a23c:	f011 f99e 	bl	801b57c <fflush>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a240:	8bbb      	ldrh	r3, [r7, #28]
 800a242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a246:	4293      	cmp	r3, r2
 800a248:	d103      	bne.n	800a252 <lwip_netconn_do_writemore+0x1a2>
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a250:	d209      	bcs.n	800a266 <lwip_netconn_do_writemore+0x1b6>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800a256:	8bba      	ldrh	r2, [r7, #28]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d11d      	bne.n	800a298 <lwip_netconn_do_writemore+0x1e8>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	899b      	ldrh	r3, [r3, #12]
 800a262:	2b01      	cmp	r3, #1
 800a264:	d918      	bls.n	800a298 <lwip_netconn_do_writemore+0x1e8>
        write_more = 1;
 800a266:	2301      	movs	r3, #1
 800a268:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800a26a:	7ebb      	ldrb	r3, [r7, #26]
 800a26c:	f043 0302 	orr.w	r3, r3, #2
 800a270:	76bb      	strb	r3, [r7, #26]
 800a272:	e013      	b.n	800a29c <lwip_netconn_do_writemore+0x1ec>
 800a274:	0801c9d0 	.word	0x0801c9d0
 800a278:	0801cb28 	.word	0x0801cb28
 800a27c:	0801ca14 	.word	0x0801ca14
 800a280:	0801ce80 	.word	0x0801ce80
 800a284:	0801cb38 	.word	0x0801cb38
 800a288:	0801cea0 	.word	0x0801cea0
 800a28c:	0801ceb8 	.word	0x0801ceb8
 800a290:	0801cef8 	.word	0x0801cef8
 800a294:	0801cf20 	.word	0x0801cf20
      } else {
        write_more = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6858      	ldr	r0, [r3, #4]
 800a2a0:	7ebb      	ldrb	r3, [r7, #26]
 800a2a2:	8bba      	ldrh	r2, [r7, #28]
 800a2a4:	6979      	ldr	r1, [r7, #20]
 800a2a6:	f008 f96f 	bl	8012588 <tcp_write>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800a2ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d12c      	bne.n	800a310 <lwip_netconn_do_writemore+0x260>
        conn->current_msg->msg.w.offset += len;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6a1b      	ldr	r3, [r3, #32]
 800a2ba:	6999      	ldr	r1, [r3, #24]
 800a2bc:	8bba      	ldrh	r2, [r7, #28]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6a1b      	ldr	r3, [r3, #32]
 800a2c2:	440a      	add	r2, r1
 800a2c4:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	6919      	ldr	r1, [r3, #16]
 800a2cc:	8bba      	ldrh	r2, [r7, #28]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	6a1b      	ldr	r3, [r3, #32]
 800a2d2:	440a      	add	r2, r1
 800a2d4:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d113      	bne.n	800a310 <lwip_netconn_do_writemore+0x260>
          conn->current_msg->msg.w.vector_cnt--;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6a1b      	ldr	r3, [r3, #32]
 800a2ec:	899a      	ldrh	r2, [r3, #12]
 800a2ee:	3a01      	subs	r2, #1
 800a2f0:	b292      	uxth	r2, r2
 800a2f2:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a1b      	ldr	r3, [r3, #32]
 800a2f8:	899b      	ldrh	r3, [r3, #12]
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d008      	beq.n	800a310 <lwip_netconn_do_writemore+0x260>
            conn->current_msg->msg.w.vector++;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	689a      	ldr	r2, [r3, #8]
 800a304:	3208      	adds	r2, #8
 800a306:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	2200      	movs	r2, #0
 800a30e:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800a310:	7e7b      	ldrb	r3, [r7, #25]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d004      	beq.n	800a320 <lwip_netconn_do_writemore+0x270>
 800a316:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	f43f af3b 	beq.w	800a196 <lwip_netconn_do_writemore+0xe6>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800a320:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d004      	beq.n	800a332 <lwip_netconn_do_writemore+0x282>
 800a328:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a330:	d134      	bne.n	800a39c <lwip_netconn_do_writemore+0x2ec>
err_mem:
 800a332:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800a334:	7e3b      	ldrb	r3, [r7, #24]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d019      	beq.n	800a36e <lwip_netconn_do_writemore+0x2be>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	699a      	ldr	r2, [r3, #24]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	695b      	ldr	r3, [r3, #20]
 800a346:	429a      	cmp	r2, r3
 800a348:	d211      	bcs.n	800a36e <lwip_netconn_do_writemore+0x2be>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d005      	beq.n	800a35e <lwip_netconn_do_writemore+0x2ae>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a356:	2200      	movs	r2, #0
 800a358:	2103      	movs	r1, #3
 800a35a:	6878      	ldr	r0, [r7, #4]
 800a35c:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	7f1b      	ldrb	r3, [r3, #28]
 800a362:	f043 0310 	orr.w	r3, r3, #16
 800a366:	b2da      	uxtb	r2, r3
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	771a      	strb	r2, [r3, #28]
 800a36c:	e016      	b.n	800a39c <lwip_netconn_do_writemore+0x2ec>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800a376:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800a37a:	d305      	bcc.n	800a388 <lwip_netconn_do_writemore+0x2d8>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800a384:	2b04      	cmp	r3, #4
 800a386:	d909      	bls.n	800a39c <lwip_netconn_do_writemore+0x2ec>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <lwip_netconn_do_writemore+0x2ec>
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a394:	2200      	movs	r2, #0
 800a396:	2103      	movs	r1, #3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800a39c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d11d      	bne.n	800a3e0 <lwip_netconn_do_writemore+0x330>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	699a      	ldr	r2, [r3, #24]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	d002      	beq.n	800a3ba <lwip_netconn_do_writemore+0x30a>
 800a3b4:	7e3b      	ldrb	r3, [r7, #24]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d001      	beq.n	800a3be <lwip_netconn_do_writemore+0x30e>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800a3ba:	2301      	movs	r3, #1
 800a3bc:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f009 f852 	bl	801346c <tcp_output>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800a3cc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800a3d0:	f113 0f04 	cmn.w	r3, #4
 800a3d4:	d12c      	bne.n	800a430 <lwip_netconn_do_writemore+0x380>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a3d6:	7b3b      	ldrb	r3, [r7, #12]
 800a3d8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a3da:	2301      	movs	r3, #1
 800a3dc:	76fb      	strb	r3, [r7, #27]
 800a3de:	e027      	b.n	800a430 <lwip_netconn_do_writemore+0x380>
      }
    } else if (err == ERR_MEM) {
 800a3e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e8:	d120      	bne.n	800a42c <lwip_netconn_do_writemore+0x37c>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f009 f83c 	bl	801346c <tcp_output>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800a3f8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800a3fc:	f113 0f04 	cmn.w	r3, #4
 800a400:	d104      	bne.n	800a40c <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800a402:	7b7b      	ldrb	r3, [r7, #13]
 800a404:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a406:	2301      	movs	r3, #1
 800a408:	76fb      	strb	r3, [r7, #27]
 800a40a:	e011      	b.n	800a430 <lwip_netconn_do_writemore+0x380>
      } else if (dontblock) {
 800a40c:	7e3b      	ldrb	r3, [r7, #24]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00e      	beq.n	800a430 <lwip_netconn_do_writemore+0x380>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <lwip_netconn_do_writemore+0x372>
 800a41c:	f06f 0306 	mvn.w	r3, #6
 800a420:	e000      	b.n	800a424 <lwip_netconn_do_writemore+0x374>
 800a422:	2300      	movs	r3, #0
 800a424:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800a426:	2301      	movs	r3, #1
 800a428:	76fb      	strb	r3, [r7, #27]
 800a42a:	e001      	b.n	800a430 <lwip_netconn_do_writemore+0x380>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800a42c:	2301      	movs	r3, #1
 800a42e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800a430:	7efb      	ldrb	r3, [r7, #27]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d015      	beq.n	800a462 <lwip_netconn_do_writemore+0x3b2>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a1b      	ldr	r3, [r3, #32]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	330c      	adds	r3, #12
 800a43e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	7ffa      	ldrb	r2, [r7, #31]
 800a446:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2200      	movs	r2, #0
 800a44c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800a454:	78fb      	ldrb	r3, [r7, #3]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d006      	beq.n	800a468 <lwip_netconn_do_writemore+0x3b8>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800a45a:	68b8      	ldr	r0, [r7, #8]
 800a45c:	f010 fef0 	bl	801b240 <sys_sem_signal>
 800a460:	e002      	b.n	800a468 <lwip_netconn_do_writemore+0x3b8>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800a462:	f04f 33ff 	mov.w	r3, #4294967295
 800a466:	e000      	b.n	800a46a <lwip_netconn_do_writemore+0x3ba>
  }
#endif
  return ERR_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3720      	adds	r7, #32
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop

0800a474 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4618      	mov	r0, r3
 800a486:	f7fe fc8c 	bl	8008da2 <netconn_err>
 800a48a:	4603      	mov	r3, r0
 800a48c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800a48e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d172      	bne.n	800a57c <lwip_netconn_do_write+0x108>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	781b      	ldrb	r3, [r3, #0]
 800a49c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a4a0:	2b10      	cmp	r3, #16
 800a4a2:	d169      	bne.n	800a578 <lwip_netconn_do_write+0x104>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	785b      	ldrb	r3, [r3, #1]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d002      	beq.n	800a4b4 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800a4ae:	23fb      	movs	r3, #251	@ 0xfb
 800a4b0:	73fb      	strb	r3, [r7, #15]
 800a4b2:	e063      	b.n	800a57c <lwip_netconn_do_write+0x108>
      } else if (msg->conn->pcb.tcp != NULL) {
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d059      	beq.n	800a572 <lwip_netconn_do_write+0xfe>
        msg->conn->state = NETCONN_WRITE;
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a4c6:	68bb      	ldr	r3, [r7, #8]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d009      	beq.n	800a4e4 <lwip_netconn_do_write+0x70>
 800a4d0:	4b2e      	ldr	r3, [pc, #184]	@ (800a58c <lwip_netconn_do_write+0x118>)
 800a4d2:	f240 7223 	movw	r2, #1827	@ 0x723
 800a4d6:	492e      	ldr	r1, [pc, #184]	@ (800a590 <lwip_netconn_do_write+0x11c>)
 800a4d8:	482e      	ldr	r0, [pc, #184]	@ (800a594 <lwip_netconn_do_write+0x120>)
 800a4da:	f011 f925 	bl	801b728 <iprintf>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	f011 f84c 	bl	801b57c <fflush>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800a4e4:	68bb      	ldr	r3, [r7, #8]
 800a4e6:	695b      	ldr	r3, [r3, #20]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d109      	bne.n	800a500 <lwip_netconn_do_write+0x8c>
 800a4ec:	4b27      	ldr	r3, [pc, #156]	@ (800a58c <lwip_netconn_do_write+0x118>)
 800a4ee:	f240 7224 	movw	r2, #1828	@ 0x724
 800a4f2:	4929      	ldr	r1, [pc, #164]	@ (800a598 <lwip_netconn_do_write+0x124>)
 800a4f4:	4827      	ldr	r0, [pc, #156]	@ (800a594 <lwip_netconn_do_write+0x120>)
 800a4f6:	f011 f917 	bl	801b728 <iprintf>
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	f011 f83e 	bl	801b57c <fflush>
        msg->conn->current_msg = msg;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	68ba      	ldr	r2, [r7, #8]
 800a506:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	2100      	movs	r1, #0
 800a50e:	4618      	mov	r0, r3
 800a510:	f7ff fdce 	bl	800a0b0 <lwip_netconn_do_writemore>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d034      	beq.n	800a584 <lwip_netconn_do_write+0x110>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	785b      	ldrb	r3, [r3, #1]
 800a520:	2b01      	cmp	r3, #1
 800a522:	d009      	beq.n	800a538 <lwip_netconn_do_write+0xc4>
 800a524:	4b19      	ldr	r3, [pc, #100]	@ (800a58c <lwip_netconn_do_write+0x118>)
 800a526:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800a52a:	491c      	ldr	r1, [pc, #112]	@ (800a59c <lwip_netconn_do_write+0x128>)
 800a52c:	4819      	ldr	r0, [pc, #100]	@ (800a594 <lwip_netconn_do_write+0x120>)
 800a52e:	f011 f8fb 	bl	801b728 <iprintf>
 800a532:	2000      	movs	r0, #0
 800a534:	f011 f822 	bl	801b57c <fflush>
          UNLOCK_TCPIP_CORE();
 800a538:	4819      	ldr	r0, [pc, #100]	@ (800a5a0 <lwip_netconn_do_write+0x12c>)
 800a53a:	f010 feea 	bl	801b312 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	330c      	adds	r3, #12
 800a544:	2100      	movs	r1, #0
 800a546:	4618      	mov	r0, r3
 800a548:	f010 fe49 	bl	801b1de <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800a54c:	4814      	ldr	r0, [pc, #80]	@ (800a5a0 <lwip_netconn_do_write+0x12c>)
 800a54e:	f010 fed1 	bl	801b2f4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	785b      	ldrb	r3, [r3, #1]
 800a558:	2b01      	cmp	r3, #1
 800a55a:	d113      	bne.n	800a584 <lwip_netconn_do_write+0x110>
 800a55c:	4b0b      	ldr	r3, [pc, #44]	@ (800a58c <lwip_netconn_do_write+0x118>)
 800a55e:	f240 722c 	movw	r2, #1836	@ 0x72c
 800a562:	490e      	ldr	r1, [pc, #56]	@ (800a59c <lwip_netconn_do_write+0x128>)
 800a564:	480b      	ldr	r0, [pc, #44]	@ (800a594 <lwip_netconn_do_write+0x120>)
 800a566:	f011 f8df 	bl	801b728 <iprintf>
 800a56a:	2000      	movs	r0, #0
 800a56c:	f011 f806 	bl	801b57c <fflush>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800a570:	e008      	b.n	800a584 <lwip_netconn_do_write+0x110>
      } else {
        err = ERR_CONN;
 800a572:	23f5      	movs	r3, #245	@ 0xf5
 800a574:	73fb      	strb	r3, [r7, #15]
 800a576:	e001      	b.n	800a57c <lwip_netconn_do_write+0x108>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800a578:	23fa      	movs	r3, #250	@ 0xfa
 800a57a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	7bfa      	ldrb	r2, [r7, #15]
 800a580:	711a      	strb	r2, [r3, #4]
 800a582:	e000      	b.n	800a586 <lwip_netconn_do_write+0x112>
        return;
 800a584:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800a586:	3710      	adds	r7, #16
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	0801c9d0 	.word	0x0801c9d0
 800a590:	0801cdc4 	.word	0x0801cdc4
 800a594:	0801ca14 	.word	0x0801ca14
 800a598:	0801cf4c 	.word	0x0801cf4c
 800a59c:	0801cde0 	.word	0x0801cde0
 800a5a0:	2000c0e4 	.word	0x2000c0e4

0800a5a4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b084      	sub	sp, #16
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d072      	beq.n	800a6a8 <lwip_netconn_do_close+0x104>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800a5cc:	2b10      	cmp	r3, #16
 800a5ce:	d16b      	bne.n	800a6a8 <lwip_netconn_do_close+0x104>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800a5d4:	2b03      	cmp	r3, #3
 800a5d6:	d002      	beq.n	800a5de <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800a5d8:	7afb      	ldrb	r3, [r7, #11]
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d064      	beq.n	800a6a8 <lwip_netconn_do_close+0x104>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800a5de:	7afb      	ldrb	r3, [r7, #11]
 800a5e0:	2b03      	cmp	r3, #3
 800a5e2:	d103      	bne.n	800a5ec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	22f5      	movs	r2, #245	@ 0xf5
 800a5e8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a5ea:	e062      	b.n	800a6b2 <lwip_netconn_do_close+0x10e>
    } else if (state == NETCONN_WRITE) {
 800a5ec:	7afb      	ldrb	r3, [r7, #11]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d103      	bne.n	800a5fa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	22fb      	movs	r2, #251	@ 0xfb
 800a5f6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800a5f8:	e05b      	b.n	800a6b2 <lwip_netconn_do_close+0x10e>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	7a1b      	ldrb	r3, [r3, #8]
 800a5fe:	f003 0301 	and.w	r3, r3, #1
 800a602:	2b00      	cmp	r3, #0
 800a604:	d004      	beq.n	800a610 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7ff f958 	bl	80098c0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	6a1b      	ldr	r3, [r3, #32]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d009      	beq.n	800a62e <lwip_netconn_do_close+0x8a>
 800a61a:	4b27      	ldr	r3, [pc, #156]	@ (800a6b8 <lwip_netconn_do_close+0x114>)
 800a61c:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800a620:	4926      	ldr	r1, [pc, #152]	@ (800a6bc <lwip_netconn_do_close+0x118>)
 800a622:	4827      	ldr	r0, [pc, #156]	@ (800a6c0 <lwip_netconn_do_close+0x11c>)
 800a624:	f011 f880 	bl	801b728 <iprintf>
 800a628:	2000      	movs	r0, #0
 800a62a:	f010 ffa7 	bl	801b57c <fflush>
      msg->conn->state = NETCONN_CLOSE;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	2204      	movs	r2, #4
 800a634:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2100      	movs	r1, #0
 800a644:	4618      	mov	r0, r3
 800a646:	f7ff f9b9 	bl	80099bc <lwip_netconn_do_close_internal>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d02f      	beq.n	800a6b0 <lwip_netconn_do_close+0x10c>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	785b      	ldrb	r3, [r3, #1]
 800a656:	2b04      	cmp	r3, #4
 800a658:	d009      	beq.n	800a66e <lwip_netconn_do_close+0xca>
 800a65a:	4b17      	ldr	r3, [pc, #92]	@ (800a6b8 <lwip_netconn_do_close+0x114>)
 800a65c:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800a660:	4918      	ldr	r1, [pc, #96]	@ (800a6c4 <lwip_netconn_do_close+0x120>)
 800a662:	4817      	ldr	r0, [pc, #92]	@ (800a6c0 <lwip_netconn_do_close+0x11c>)
 800a664:	f011 f860 	bl	801b728 <iprintf>
 800a668:	2000      	movs	r0, #0
 800a66a:	f010 ff87 	bl	801b57c <fflush>
        UNLOCK_TCPIP_CORE();
 800a66e:	4816      	ldr	r0, [pc, #88]	@ (800a6c8 <lwip_netconn_do_close+0x124>)
 800a670:	f010 fe4f 	bl	801b312 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	330c      	adds	r3, #12
 800a67a:	2100      	movs	r1, #0
 800a67c:	4618      	mov	r0, r3
 800a67e:	f010 fdae 	bl	801b1de <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800a682:	4811      	ldr	r0, [pc, #68]	@ (800a6c8 <lwip_netconn_do_close+0x124>)
 800a684:	f010 fe36 	bl	801b2f4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	785b      	ldrb	r3, [r3, #1]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d00e      	beq.n	800a6b0 <lwip_netconn_do_close+0x10c>
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <lwip_netconn_do_close+0x114>)
 800a694:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800a698:	490a      	ldr	r1, [pc, #40]	@ (800a6c4 <lwip_netconn_do_close+0x120>)
 800a69a:	4809      	ldr	r0, [pc, #36]	@ (800a6c0 <lwip_netconn_do_close+0x11c>)
 800a69c:	f011 f844 	bl	801b728 <iprintf>
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	f010 ff6b 	bl	801b57c <fflush>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800a6a6:	e003      	b.n	800a6b0 <lwip_netconn_do_close+0x10c>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	22f5      	movs	r2, #245	@ 0xf5
 800a6ac:	711a      	strb	r2, [r3, #4]
 800a6ae:	e000      	b.n	800a6b2 <lwip_netconn_do_close+0x10e>
      return;
 800a6b0:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	0801c9d0 	.word	0x0801c9d0
 800a6bc:	0801cdc4 	.word	0x0801cdc4
 800a6c0:	0801ca14 	.word	0x0801ca14
 800a6c4:	0801cde0 	.word	0x0801cde0
 800a6c8:	2000c0e4 	.word	0x2000c0e4

0800a6cc <lwip_strerr>:
 * @param err an lwip internal err_t
 * @return a string representation for err
 */
const char *
lwip_strerr(err_t err)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_strerr))) {
 800a6d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	dc04      	bgt.n	800a6e8 <lwip_strerr+0x1c>
 800a6de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6e2:	f113 0f10 	cmn.w	r3, #16
 800a6e6:	da01      	bge.n	800a6ec <lwip_strerr+0x20>
    return "Unknown error.";
 800a6e8:	4b06      	ldr	r3, [pc, #24]	@ (800a704 <lwip_strerr+0x38>)
 800a6ea:	e005      	b.n	800a6f8 <lwip_strerr+0x2c>
  }
  return err_strerr[-err];
 800a6ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6f0:	425b      	negs	r3, r3
 800a6f2:	4a05      	ldr	r2, [pc, #20]	@ (800a708 <lwip_strerr+0x3c>)
 800a6f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr
 800a704:	0801d0b4 	.word	0x0801d0b4
 800a708:	20000024 	.word	0x20000024

0800a70c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d013      	beq.n	800a742 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00b      	beq.n	800a73a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4618      	mov	r0, r3
 800a728:	f002 f8f8 	bl	800c91c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	605a      	str	r2, [r3, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685a      	ldr	r2, [r3, #4]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800a73a:	6879      	ldr	r1, [r7, #4]
 800a73c:	2006      	movs	r0, #6
 800a73e:	f001 f86f 	bl	800b820 <memp_free>
  }
}
 800a742:	bf00      	nop
 800a744:	3708      	adds	r7, #8
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
	...

0800a74c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	60f8      	str	r0, [r7, #12]
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10b      	bne.n	800a776 <netbuf_data+0x2a>
 800a75e:	4b20      	ldr	r3, [pc, #128]	@ (800a7e0 <netbuf_data+0x94>)
 800a760:	22c6      	movs	r2, #198	@ 0xc6
 800a762:	4920      	ldr	r1, [pc, #128]	@ (800a7e4 <netbuf_data+0x98>)
 800a764:	4820      	ldr	r0, [pc, #128]	@ (800a7e8 <netbuf_data+0x9c>)
 800a766:	f010 ffdf 	bl	801b728 <iprintf>
 800a76a:	2000      	movs	r0, #0
 800a76c:	f010 ff06 	bl	801b57c <fflush>
 800a770:	f06f 030f 	mvn.w	r3, #15
 800a774:	e02f      	b.n	800a7d6 <netbuf_data+0x8a>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d10b      	bne.n	800a794 <netbuf_data+0x48>
 800a77c:	4b18      	ldr	r3, [pc, #96]	@ (800a7e0 <netbuf_data+0x94>)
 800a77e:	22c7      	movs	r2, #199	@ 0xc7
 800a780:	491a      	ldr	r1, [pc, #104]	@ (800a7ec <netbuf_data+0xa0>)
 800a782:	4819      	ldr	r0, [pc, #100]	@ (800a7e8 <netbuf_data+0x9c>)
 800a784:	f010 ffd0 	bl	801b728 <iprintf>
 800a788:	2000      	movs	r0, #0
 800a78a:	f010 fef7 	bl	801b57c <fflush>
 800a78e:	f06f 030f 	mvn.w	r3, #15
 800a792:	e020      	b.n	800a7d6 <netbuf_data+0x8a>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d10b      	bne.n	800a7b2 <netbuf_data+0x66>
 800a79a:	4b11      	ldr	r3, [pc, #68]	@ (800a7e0 <netbuf_data+0x94>)
 800a79c:	22c8      	movs	r2, #200	@ 0xc8
 800a79e:	4914      	ldr	r1, [pc, #80]	@ (800a7f0 <netbuf_data+0xa4>)
 800a7a0:	4811      	ldr	r0, [pc, #68]	@ (800a7e8 <netbuf_data+0x9c>)
 800a7a2:	f010 ffc1 	bl	801b728 <iprintf>
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	f010 fee8 	bl	801b57c <fflush>
 800a7ac:	f06f 030f 	mvn.w	r3, #15
 800a7b0:	e011      	b.n	800a7d6 <netbuf_data+0x8a>

  if (buf->ptr == NULL) {
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d102      	bne.n	800a7c0 <netbuf_data+0x74>
    return ERR_BUF;
 800a7ba:	f06f 0301 	mvn.w	r3, #1
 800a7be:	e00a      	b.n	800a7d6 <netbuf_data+0x8a>
  }
  *dataptr = buf->ptr->payload;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	685a      	ldr	r2, [r3, #4]
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	895a      	ldrh	r2, [r3, #10]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800a7d4:	2300      	movs	r3, #0
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	bd80      	pop	{r7, pc}
 800a7de:	bf00      	nop
 800a7e0:	0801d0c4 	.word	0x0801d0c4
 800a7e4:	0801d1cc 	.word	0x0801d1cc
 800a7e8:	0801d114 	.word	0x0801d114
 800a7ec:	0801d1e8 	.word	0x0801d1e8
 800a7f0:	0801d208 	.word	0x0801d208

0800a7f4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a7fe:	f00a f93f 	bl	8014a80 <sys_timeouts_sleeptime>
 800a802:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d10b      	bne.n	800a824 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a80c:	4813      	ldr	r0, [pc, #76]	@ (800a85c <tcpip_timeouts_mbox_fetch+0x68>)
 800a80e:	f010 fd80 	bl	801b312 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a812:	2200      	movs	r2, #0
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f010 fc56 	bl	801b0c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a81c:	480f      	ldr	r0, [pc, #60]	@ (800a85c <tcpip_timeouts_mbox_fetch+0x68>)
 800a81e:	f010 fd69 	bl	801b2f4 <sys_mutex_lock>
    return;
 800a822:	e018      	b.n	800a856 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d102      	bne.n	800a830 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a82a:	f00a f8db 	bl	80149e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a82e:	e7e6      	b.n	800a7fe <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a830:	480a      	ldr	r0, [pc, #40]	@ (800a85c <tcpip_timeouts_mbox_fetch+0x68>)
 800a832:	f010 fd6e 	bl	801b312 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	6839      	ldr	r1, [r7, #0]
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f010 fc44 	bl	801b0c8 <sys_arch_mbox_fetch>
 800a840:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a842:	4806      	ldr	r0, [pc, #24]	@ (800a85c <tcpip_timeouts_mbox_fetch+0x68>)
 800a844:	f010 fd56 	bl	801b2f4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a84e:	d102      	bne.n	800a856 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a850:	f00a f8c8 	bl	80149e4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a854:	e7d3      	b.n	800a7fe <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}
 800a85c:	2000c0e4 	.word	0x2000c0e4

0800a860 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a860:	b580      	push	{r7, lr}
 800a862:	b084      	sub	sp, #16
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a868:	4815      	ldr	r0, [pc, #84]	@ (800a8c0 <tcpip_thread+0x60>)
 800a86a:	f010 fd43 	bl	801b2f4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a86e:	4b15      	ldr	r3, [pc, #84]	@ (800a8c4 <tcpip_thread+0x64>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d005      	beq.n	800a882 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a876:	4b13      	ldr	r3, [pc, #76]	@ (800a8c4 <tcpip_thread+0x64>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4a13      	ldr	r2, [pc, #76]	@ (800a8c8 <tcpip_thread+0x68>)
 800a87c:	6812      	ldr	r2, [r2, #0]
 800a87e:	4610      	mov	r0, r2
 800a880:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a882:	f107 030c 	add.w	r3, r7, #12
 800a886:	4619      	mov	r1, r3
 800a888:	4810      	ldr	r0, [pc, #64]	@ (800a8cc <tcpip_thread+0x6c>)
 800a88a:	f7ff ffb3 	bl	800a7f4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d10f      	bne.n	800a8b4 <tcpip_thread+0x54>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
 800a894:	480e      	ldr	r0, [pc, #56]	@ (800a8d0 <tcpip_thread+0x70>)
 800a896:	f010 ffb7 	bl	801b808 <puts>
 800a89a:	2000      	movs	r0, #0
 800a89c:	f010 fe6e 	bl	801b57c <fflush>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a8a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a8d4 <tcpip_thread+0x74>)
 800a8a2:	2291      	movs	r2, #145	@ 0x91
 800a8a4:	490c      	ldr	r1, [pc, #48]	@ (800a8d8 <tcpip_thread+0x78>)
 800a8a6:	480d      	ldr	r0, [pc, #52]	@ (800a8dc <tcpip_thread+0x7c>)
 800a8a8:	f010 ff3e 	bl	801b728 <iprintf>
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	f010 fe65 	bl	801b57c <fflush>
      continue;
 800a8b2:	e003      	b.n	800a8bc <tcpip_thread+0x5c>
    }
    tcpip_thread_handle_msg(msg);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	f000 f812 	bl	800a8e0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a8bc:	e7e1      	b.n	800a882 <tcpip_thread+0x22>
 800a8be:	bf00      	nop
 800a8c0:	2000c0e4 	.word	0x2000c0e4
 800a8c4:	2000c0d8 	.word	0x2000c0d8
 800a8c8:	2000c0dc 	.word	0x2000c0dc
 800a8cc:	2000c0e0 	.word	0x2000c0e0
 800a8d0:	0801d25c 	.word	0x0801d25c
 800a8d4:	0801d280 	.word	0x0801d280
 800a8d8:	0801d2b0 	.word	0x0801d2b0
 800a8dc:	0801d2d0 	.word	0x0801d2d0

0800a8e0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	781b      	ldrb	r3, [r3, #0]
 800a8ec:	2b02      	cmp	r3, #2
 800a8ee:	d034      	beq.n	800a95a <tcpip_thread_handle_msg+0x7a>
 800a8f0:	2b02      	cmp	r3, #2
 800a8f2:	dc40      	bgt.n	800a976 <tcpip_thread_handle_msg+0x96>
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d002      	beq.n	800a8fe <tcpip_thread_handle_msg+0x1e>
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d01c      	beq.n	800a936 <tcpip_thread_handle_msg+0x56>
 800a8fc:	e03b      	b.n	800a976 <tcpip_thread_handle_msg+0x96>
      break;
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
 800a8fe:	6879      	ldr	r1, [r7, #4]
 800a900:	4828      	ldr	r0, [pc, #160]	@ (800a9a4 <tcpip_thread_handle_msg+0xc4>)
 800a902:	f010 ff11 	bl	801b728 <iprintf>
 800a906:	2000      	movs	r0, #0
 800a908:	f010 fe38 	bl	801b57c <fflush>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	6850      	ldr	r0, [r2, #4]
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	6892      	ldr	r2, [r2, #8]
 800a918:	4611      	mov	r1, r2
 800a91a:	4798      	blx	r3
 800a91c:	4603      	mov	r3, r0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d004      	beq.n	800a92c <tcpip_thread_handle_msg+0x4c>
        pbuf_free(msg->msg.inp.p);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	4618      	mov	r0, r3
 800a928:	f001 fff8 	bl	800c91c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a92c:	6879      	ldr	r1, [r7, #4]
 800a92e:	2009      	movs	r0, #9
 800a930:	f000 ff76 	bl	800b820 <memp_free>
      break;
 800a934:	e032      	b.n	800a99c <tcpip_thread_handle_msg+0xbc>
      memp_free(MEMP_TCPIP_MSG_API, msg);
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
 800a936:	6879      	ldr	r1, [r7, #4]
 800a938:	481b      	ldr	r0, [pc, #108]	@ (800a9a8 <tcpip_thread_handle_msg+0xc8>)
 800a93a:	f010 fef5 	bl	801b728 <iprintf>
 800a93e:	2000      	movs	r0, #0
 800a940:	f010 fe1c 	bl	801b57c <fflush>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	687a      	ldr	r2, [r7, #4]
 800a94a:	6892      	ldr	r2, [r2, #8]
 800a94c:	4610      	mov	r0, r2
 800a94e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a950:	6879      	ldr	r1, [r7, #4]
 800a952:	2008      	movs	r0, #8
 800a954:	f000 ff64 	bl	800b820 <memp_free>
      break;
 800a958:	e020      	b.n	800a99c <tcpip_thread_handle_msg+0xbc>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
 800a95a:	6879      	ldr	r1, [r7, #4]
 800a95c:	4813      	ldr	r0, [pc, #76]	@ (800a9ac <tcpip_thread_handle_msg+0xcc>)
 800a95e:	f010 fee3 	bl	801b728 <iprintf>
 800a962:	2000      	movs	r0, #0
 800a964:	f010 fe0a 	bl	801b57c <fflush>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	6892      	ldr	r2, [r2, #8]
 800a970:	4610      	mov	r0, r2
 800a972:	4798      	blx	r3
      break;
 800a974:	e012      	b.n	800a99c <tcpip_thread_handle_msg+0xbc>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	4619      	mov	r1, r3
 800a97c:	480c      	ldr	r0, [pc, #48]	@ (800a9b0 <tcpip_thread_handle_msg+0xd0>)
 800a97e:	f010 fed3 	bl	801b728 <iprintf>
 800a982:	2000      	movs	r0, #0
 800a984:	f010 fdfa 	bl	801b57c <fflush>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a988:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b4 <tcpip_thread_handle_msg+0xd4>)
 800a98a:	22cf      	movs	r2, #207	@ 0xcf
 800a98c:	490a      	ldr	r1, [pc, #40]	@ (800a9b8 <tcpip_thread_handle_msg+0xd8>)
 800a98e:	480b      	ldr	r0, [pc, #44]	@ (800a9bc <tcpip_thread_handle_msg+0xdc>)
 800a990:	f010 feca 	bl	801b728 <iprintf>
 800a994:	2000      	movs	r0, #0
 800a996:	f010 fdf1 	bl	801b57c <fflush>
      break;
 800a99a:	bf00      	nop
  }
}
 800a99c:	bf00      	nop
 800a99e:	3708      	adds	r7, #8
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}
 800a9a4:	0801d2f8 	.word	0x0801d2f8
 800a9a8:	0801d314 	.word	0x0801d314
 800a9ac:	0801d330 	.word	0x0801d330
 800a9b0:	0801d354 	.word	0x0801d354
 800a9b4:	0801d280 	.word	0x0801d280
 800a9b8:	0801d2b0 	.word	0x0801d2b0
 800a9bc:	0801d2d0 	.word	0x0801d2d0

0800a9c0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	60b9      	str	r1, [r7, #8]
 800a9ca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a9cc:	481b      	ldr	r0, [pc, #108]	@ (800aa3c <tcpip_inpkt+0x7c>)
 800a9ce:	f010 fbc3 	bl	801b158 <sys_mbox_valid>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d108      	bne.n	800a9ea <tcpip_inpkt+0x2a>
 800a9d8:	4b19      	ldr	r3, [pc, #100]	@ (800aa40 <tcpip_inpkt+0x80>)
 800a9da:	22fc      	movs	r2, #252	@ 0xfc
 800a9dc:	4919      	ldr	r1, [pc, #100]	@ (800aa44 <tcpip_inpkt+0x84>)
 800a9de:	481a      	ldr	r0, [pc, #104]	@ (800aa48 <tcpip_inpkt+0x88>)
 800a9e0:	f010 fea2 	bl	801b728 <iprintf>
 800a9e4:	2000      	movs	r0, #0
 800a9e6:	f010 fdc9 	bl	801b57c <fflush>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a9ea:	2009      	movs	r0, #9
 800a9ec:	f000 fe96 	bl	800b71c <memp_malloc>
 800a9f0:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <tcpip_inpkt+0x3e>
    return ERR_MEM;
 800a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fc:	e01a      	b.n	800aa34 <tcpip_inpkt+0x74>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	2200      	movs	r2, #0
 800aa02:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aa16:	6979      	ldr	r1, [r7, #20]
 800aa18:	4808      	ldr	r0, [pc, #32]	@ (800aa3c <tcpip_inpkt+0x7c>)
 800aa1a:	f010 fb3b 	bl	801b094 <sys_mbox_trypost>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d006      	beq.n	800aa32 <tcpip_inpkt+0x72>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800aa24:	6979      	ldr	r1, [r7, #20]
 800aa26:	2009      	movs	r0, #9
 800aa28:	f000 fefa 	bl	800b820 <memp_free>
    return ERR_MEM;
 800aa2c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa30:	e000      	b.n	800aa34 <tcpip_inpkt+0x74>
  }
  return ERR_OK;
 800aa32:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	3718      	adds	r7, #24
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	2000c0e0 	.word	0x2000c0e0
 800aa40:	0801d280 	.word	0x0801d280
 800aa44:	0801d378 	.word	0x0801d378
 800aa48:	0801d2d0 	.word	0x0801d2d0

0800aa4c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800aa5c:	f003 0318 	and.w	r3, r3, #24
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d006      	beq.n	800aa72 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800aa64:	4a08      	ldr	r2, [pc, #32]	@ (800aa88 <tcpip_input+0x3c>)
 800aa66:	6839      	ldr	r1, [r7, #0]
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f7ff ffa9 	bl	800a9c0 <tcpip_inpkt>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	e005      	b.n	800aa7e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800aa72:	4a06      	ldr	r2, [pc, #24]	@ (800aa8c <tcpip_input+0x40>)
 800aa74:	6839      	ldr	r1, [r7, #0]
 800aa76:	6878      	ldr	r0, [r7, #4]
 800aa78:	f7ff ffa2 	bl	800a9c0 <tcpip_inpkt>
 800aa7c:	4603      	mov	r3, r0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3708      	adds	r7, #8
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	0801ad8d 	.word	0x0801ad8d
 800aa8c:	08019771 	.word	0x08019771

0800aa90 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800aa9a:	481b      	ldr	r0, [pc, #108]	@ (800ab08 <tcpip_try_callback+0x78>)
 800aa9c:	f010 fb5c 	bl	801b158 <sys_mbox_valid>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d109      	bne.n	800aaba <tcpip_try_callback+0x2a>
 800aaa6:	4b19      	ldr	r3, [pc, #100]	@ (800ab0c <tcpip_try_callback+0x7c>)
 800aaa8:	f240 125d 	movw	r2, #349	@ 0x15d
 800aaac:	4918      	ldr	r1, [pc, #96]	@ (800ab10 <tcpip_try_callback+0x80>)
 800aaae:	4819      	ldr	r0, [pc, #100]	@ (800ab14 <tcpip_try_callback+0x84>)
 800aab0:	f010 fe3a 	bl	801b728 <iprintf>
 800aab4:	2000      	movs	r0, #0
 800aab6:	f010 fd61 	bl	801b57c <fflush>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800aaba:	2008      	movs	r0, #8
 800aabc:	f000 fe2e 	bl	800b71c <memp_malloc>
 800aac0:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <tcpip_try_callback+0x3e>
    return ERR_MEM;
 800aac8:	f04f 33ff 	mov.w	r3, #4294967295
 800aacc:	e017      	b.n	800aafe <tcpip_try_callback+0x6e>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	2201      	movs	r2, #1
 800aad2:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	683a      	ldr	r2, [r7, #0]
 800aade:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800aae0:	68f9      	ldr	r1, [r7, #12]
 800aae2:	4809      	ldr	r0, [pc, #36]	@ (800ab08 <tcpip_try_callback+0x78>)
 800aae4:	f010 fad6 	bl	801b094 <sys_mbox_trypost>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d006      	beq.n	800aafc <tcpip_try_callback+0x6c>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800aaee:	68f9      	ldr	r1, [r7, #12]
 800aaf0:	2008      	movs	r0, #8
 800aaf2:	f000 fe95 	bl	800b820 <memp_free>
    return ERR_MEM;
 800aaf6:	f04f 33ff 	mov.w	r3, #4294967295
 800aafa:	e000      	b.n	800aafe <tcpip_try_callback+0x6e>
  }
  return ERR_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	2000c0e0 	.word	0x2000c0e0
 800ab0c:	0801d280 	.word	0x0801d280
 800ab10:	0801d378 	.word	0x0801d378
 800ab14:	0801d2d0 	.word	0x0801d2d0

0800ab18 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ab24:	4806      	ldr	r0, [pc, #24]	@ (800ab40 <tcpip_send_msg_wait_sem+0x28>)
 800ab26:	f010 fbe5 	bl	801b2f4 <sys_mutex_lock>
  fn(apimsg);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	68b8      	ldr	r0, [r7, #8]
 800ab2e:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ab30:	4803      	ldr	r0, [pc, #12]	@ (800ab40 <tcpip_send_msg_wait_sem+0x28>)
 800ab32:	f010 fbee 	bl	801b312 <sys_mutex_unlock>
  return ERR_OK;
 800ab36:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3710      	adds	r7, #16
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	2000c0e4 	.word	0x2000c0e4

0800ab44 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af02      	add	r7, sp, #8
 800ab4a:	6078      	str	r0, [r7, #4]
 800ab4c:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ab4e:	f000 f8bf 	bl	800acd0 <lwip_init>

  tcpip_init_done = initfunc;
 800ab52:	4a1a      	ldr	r2, [pc, #104]	@ (800abbc <tcpip_init+0x78>)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ab58:	4a19      	ldr	r2, [pc, #100]	@ (800abc0 <tcpip_init+0x7c>)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ab5e:	2106      	movs	r1, #6
 800ab60:	4818      	ldr	r0, [pc, #96]	@ (800abc4 <tcpip_init+0x80>)
 800ab62:	f010 fa6b 	bl	801b03c <sys_mbox_new>
 800ab66:	4603      	mov	r3, r0
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d009      	beq.n	800ab80 <tcpip_init+0x3c>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ab6c:	4b16      	ldr	r3, [pc, #88]	@ (800abc8 <tcpip_init+0x84>)
 800ab6e:	f240 2261 	movw	r2, #609	@ 0x261
 800ab72:	4916      	ldr	r1, [pc, #88]	@ (800abcc <tcpip_init+0x88>)
 800ab74:	4816      	ldr	r0, [pc, #88]	@ (800abd0 <tcpip_init+0x8c>)
 800ab76:	f010 fdd7 	bl	801b728 <iprintf>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	f010 fcfe 	bl	801b57c <fflush>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ab80:	4814      	ldr	r0, [pc, #80]	@ (800abd4 <tcpip_init+0x90>)
 800ab82:	f010 fba1 	bl	801b2c8 <sys_mutex_new>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d009      	beq.n	800aba0 <tcpip_init+0x5c>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ab8c:	4b0e      	ldr	r3, [pc, #56]	@ (800abc8 <tcpip_init+0x84>)
 800ab8e:	f240 2265 	movw	r2, #613	@ 0x265
 800ab92:	4911      	ldr	r1, [pc, #68]	@ (800abd8 <tcpip_init+0x94>)
 800ab94:	480e      	ldr	r0, [pc, #56]	@ (800abd0 <tcpip_init+0x8c>)
 800ab96:	f010 fdc7 	bl	801b728 <iprintf>
 800ab9a:	2000      	movs	r0, #0
 800ab9c:	f010 fcee 	bl	801b57c <fflush>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800aba0:	2318      	movs	r3, #24
 800aba2:	9300      	str	r3, [sp, #0]
 800aba4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aba8:	2200      	movs	r2, #0
 800abaa:	490c      	ldr	r1, [pc, #48]	@ (800abdc <tcpip_init+0x98>)
 800abac:	480c      	ldr	r0, [pc, #48]	@ (800abe0 <tcpip_init+0x9c>)
 800abae:	f010 fbbd 	bl	801b32c <sys_thread_new>
}
 800abb2:	bf00      	nop
 800abb4:	3708      	adds	r7, #8
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	2000c0d8 	.word	0x2000c0d8
 800abc0:	2000c0dc 	.word	0x2000c0dc
 800abc4:	2000c0e0 	.word	0x2000c0e0
 800abc8:	0801d280 	.word	0x0801d280
 800abcc:	0801d388 	.word	0x0801d388
 800abd0:	0801d2d0 	.word	0x0801d2d0
 800abd4:	2000c0e4 	.word	0x2000c0e4
 800abd8:	0801d3ac 	.word	0x0801d3ac
 800abdc:	0800a861 	.word	0x0800a861
 800abe0:	0801d3d0 	.word	0x0801d3d0

0800abe4 <fs_open>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */

/*-----------------------------------------------------------------------------------*/
err_t
fs_open(struct fs_file *file, const char *name)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d002      	beq.n	800abfa <fs_open+0x16>
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d102      	bne.n	800ac00 <fs_open+0x1c>
    return ERR_ARG;
 800abfa:	f06f 030f 	mvn.w	r3, #15
 800abfe:	e028      	b.n	800ac52 <fs_open+0x6e>
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ac00:	4b16      	ldr	r3, [pc, #88]	@ (800ac5c <fs_open+0x78>)
 800ac02:	60fb      	str	r3, [r7, #12]
 800ac04:	e020      	b.n	800ac48 <fs_open+0x64>
    if (!strcmp(name, (const char *)f->name)) {
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6838      	ldr	r0, [r7, #0]
 800ac0e:	f7f5 faef 	bl	80001f0 <strcmp>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d114      	bne.n	800ac42 <fs_open+0x5e>
      file->data = (const char *)f->data;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	689a      	ldr	r2, [r3, #8]
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	601a      	str	r2, [r3, #0]
      file->len = f->len;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	68da      	ldr	r2, [r3, #12]
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	605a      	str	r2, [r3, #4]
      file->index = f->len;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	68da      	ldr	r2, [r3, #12]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	609a      	str	r2, [r3, #8]
      file->pextension = NULL;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2200      	movs	r2, #0
 800ac34:	60da      	str	r2, [r3, #12]
      file->flags = f->flags;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	7c1a      	ldrb	r2, [r3, #16]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	741a      	strb	r2, [r3, #16]
      file->chksum = f->chksum;
#endif /* HTTPD_PRECALCULATED_CHECKSUM */
#if LWIP_HTTPD_FILE_STATE
      file->state = fs_state_init(file, name);
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e007      	b.n	800ac52 <fs_open+0x6e>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	60fb      	str	r3, [r7, #12]
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d1db      	bne.n	800ac06 <fs_open+0x22>
    }
  }
  /* file not found */
  return ERR_VAL;
 800ac4e:	f06f 0305 	mvn.w	r3, #5
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3710      	adds	r7, #16
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	080250c8 	.word	0x080250c8

0800ac60 <fs_close>:

/*-----------------------------------------------------------------------------------*/
void
fs_close(struct fs_file *file)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 800ac68:	bf00      	nop
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac72:	4770      	bx	lr

0800ac74 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b083      	sub	sp, #12
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ac7e:	88fb      	ldrh	r3, [r7, #6]
 800ac80:	021b      	lsls	r3, r3, #8
 800ac82:	b21a      	sxth	r2, r3
 800ac84:	88fb      	ldrh	r3, [r7, #6]
 800ac86:	0a1b      	lsrs	r3, r3, #8
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	b21b      	sxth	r3, r3
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	b21b      	sxth	r3, r3
 800ac90:	b29b      	uxth	r3, r3
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	370c      	adds	r7, #12
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	b083      	sub	sp, #12
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	061a      	lsls	r2, r3, #24
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	021b      	lsls	r3, r3, #8
 800acae:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800acb2:	431a      	orrs	r2, r3
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	0a1b      	lsrs	r3, r3, #8
 800acb8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800acbc:	431a      	orrs	r2, r3
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	0e1b      	lsrs	r3, r3, #24
 800acc2:	4313      	orrs	r3, r2
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	370c      	adds	r7, #12
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800acd6:	2300      	movs	r3, #0
 800acd8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800acda:	f010 fae9 	bl	801b2b0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800acde:	f000 f8e1 	bl	800aea4 <mem_init>
  memp_init();
 800ace2:	f000 fc9d 	bl	800b620 <memp_init>
  pbuf_init();
  netif_init();
 800ace6:	f000 fdc7 	bl	800b878 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800acea:	f009 ff03 	bl	8014af4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800acee:	f002 f931 	bl	800cf54 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800acf2:	f009 fe21 	bl	8014938 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800acf6:	bf00      	nop
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	4603      	mov	r3, r0
 800ad08:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ad0a:	4b05      	ldr	r3, [pc, #20]	@ (800ad20 <ptr_to_mem+0x20>)
 800ad0c:	681a      	ldr	r2, [r3, #0]
 800ad0e:	88fb      	ldrh	r3, [r7, #6]
 800ad10:	4413      	add	r3, r2
}
 800ad12:	4618      	mov	r0, r3
 800ad14:	370c      	adds	r7, #12
 800ad16:	46bd      	mov	sp, r7
 800ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1c:	4770      	bx	lr
 800ad1e:	bf00      	nop
 800ad20:	2000e914 	.word	0x2000e914

0800ad24 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ad2c:	4b05      	ldr	r3, [pc, #20]	@ (800ad44 <mem_to_ptr+0x20>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	687a      	ldr	r2, [r7, #4]
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	b29b      	uxth	r3, r3
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	370c      	adds	r7, #12
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	2000e914 	.word	0x2000e914

0800ad48 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ad48:	b590      	push	{r4, r7, lr}
 800ad4a:	b085      	sub	sp, #20
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ad50:	4b4b      	ldr	r3, [pc, #300]	@ (800ae80 <plug_holes+0x138>)
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d209      	bcs.n	800ad6e <plug_holes+0x26>
 800ad5a:	4b4a      	ldr	r3, [pc, #296]	@ (800ae84 <plug_holes+0x13c>)
 800ad5c:	f240 12df 	movw	r2, #479	@ 0x1df
 800ad60:	4949      	ldr	r1, [pc, #292]	@ (800ae88 <plug_holes+0x140>)
 800ad62:	484a      	ldr	r0, [pc, #296]	@ (800ae8c <plug_holes+0x144>)
 800ad64:	f010 fce0 	bl	801b728 <iprintf>
 800ad68:	2000      	movs	r0, #0
 800ad6a:	f010 fc07 	bl	801b57c <fflush>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ad6e:	4b48      	ldr	r3, [pc, #288]	@ (800ae90 <plug_holes+0x148>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d309      	bcc.n	800ad8c <plug_holes+0x44>
 800ad78:	4b42      	ldr	r3, [pc, #264]	@ (800ae84 <plug_holes+0x13c>)
 800ad7a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ad7e:	4945      	ldr	r1, [pc, #276]	@ (800ae94 <plug_holes+0x14c>)
 800ad80:	4842      	ldr	r0, [pc, #264]	@ (800ae8c <plug_holes+0x144>)
 800ad82:	f010 fcd1 	bl	801b728 <iprintf>
 800ad86:	2000      	movs	r0, #0
 800ad88:	f010 fbf8 	bl	801b57c <fflush>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	791b      	ldrb	r3, [r3, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d009      	beq.n	800ada8 <plug_holes+0x60>
 800ad94:	4b3b      	ldr	r3, [pc, #236]	@ (800ae84 <plug_holes+0x13c>)
 800ad96:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800ad9a:	493f      	ldr	r1, [pc, #252]	@ (800ae98 <plug_holes+0x150>)
 800ad9c:	483b      	ldr	r0, [pc, #236]	@ (800ae8c <plug_holes+0x144>)
 800ad9e:	f010 fcc3 	bl	801b728 <iprintf>
 800ada2:	2000      	movs	r0, #0
 800ada4:	f010 fbea 	bl	801b57c <fflush>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	881b      	ldrh	r3, [r3, #0]
 800adac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800adb0:	d909      	bls.n	800adc6 <plug_holes+0x7e>
 800adb2:	4b34      	ldr	r3, [pc, #208]	@ (800ae84 <plug_holes+0x13c>)
 800adb4:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800adb8:	4938      	ldr	r1, [pc, #224]	@ (800ae9c <plug_holes+0x154>)
 800adba:	4834      	ldr	r0, [pc, #208]	@ (800ae8c <plug_holes+0x144>)
 800adbc:	f010 fcb4 	bl	801b728 <iprintf>
 800adc0:	2000      	movs	r0, #0
 800adc2:	f010 fbdb 	bl	801b57c <fflush>

  nmem = ptr_to_mem(mem->next);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	881b      	ldrh	r3, [r3, #0]
 800adca:	4618      	mov	r0, r3
 800adcc:	f7ff ff98 	bl	800ad00 <ptr_to_mem>
 800add0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	429a      	cmp	r2, r3
 800add8:	d024      	beq.n	800ae24 <plug_holes+0xdc>
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	791b      	ldrb	r3, [r3, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d120      	bne.n	800ae24 <plug_holes+0xdc>
 800ade2:	4b2b      	ldr	r3, [pc, #172]	@ (800ae90 <plug_holes+0x148>)
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	68fa      	ldr	r2, [r7, #12]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d01b      	beq.n	800ae24 <plug_holes+0xdc>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800adec:	4b2c      	ldr	r3, [pc, #176]	@ (800aea0 <plug_holes+0x158>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	68fa      	ldr	r2, [r7, #12]
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d102      	bne.n	800adfc <plug_holes+0xb4>
      lfree = mem;
 800adf6:	4a2a      	ldr	r2, [pc, #168]	@ (800aea0 <plug_holes+0x158>)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	881a      	ldrh	r2, [r3, #0]
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	881b      	ldrh	r3, [r3, #0]
 800ae08:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ae0c:	d00a      	beq.n	800ae24 <plug_holes+0xdc>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	881b      	ldrh	r3, [r3, #0]
 800ae12:	4618      	mov	r0, r3
 800ae14:	f7ff ff74 	bl	800ad00 <ptr_to_mem>
 800ae18:	4604      	mov	r4, r0
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7ff ff82 	bl	800ad24 <mem_to_ptr>
 800ae20:	4603      	mov	r3, r0
 800ae22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	885b      	ldrh	r3, [r3, #2]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff ff69 	bl	800ad00 <ptr_to_mem>
 800ae2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ae30:	68ba      	ldr	r2, [r7, #8]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d01f      	beq.n	800ae78 <plug_holes+0x130>
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	791b      	ldrb	r3, [r3, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d11b      	bne.n	800ae78 <plug_holes+0x130>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ae40:	4b17      	ldr	r3, [pc, #92]	@ (800aea0 <plug_holes+0x158>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d102      	bne.n	800ae50 <plug_holes+0x108>
      lfree = pmem;
 800ae4a:	4a15      	ldr	r2, [pc, #84]	@ (800aea0 <plug_holes+0x158>)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	881a      	ldrh	r2, [r3, #0]
 800ae54:	68bb      	ldr	r3, [r7, #8]
 800ae56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	881b      	ldrh	r3, [r3, #0]
 800ae5c:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800ae60:	d00a      	beq.n	800ae78 <plug_holes+0x130>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	881b      	ldrh	r3, [r3, #0]
 800ae66:	4618      	mov	r0, r3
 800ae68:	f7ff ff4a 	bl	800ad00 <ptr_to_mem>
 800ae6c:	4604      	mov	r4, r0
 800ae6e:	68b8      	ldr	r0, [r7, #8]
 800ae70:	f7ff ff58 	bl	800ad24 <mem_to_ptr>
 800ae74:	4603      	mov	r3, r0
 800ae76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ae78:	bf00      	nop
 800ae7a:	3714      	adds	r7, #20
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd90      	pop	{r4, r7, pc}
 800ae80:	2000e914 	.word	0x2000e914
 800ae84:	0801d3e0 	.word	0x0801d3e0
 800ae88:	0801d410 	.word	0x0801d410
 800ae8c:	0801d428 	.word	0x0801d428
 800ae90:	2000e918 	.word	0x2000e918
 800ae94:	0801d450 	.word	0x0801d450
 800ae98:	0801d46c 	.word	0x0801d46c
 800ae9c:	0801d488 	.word	0x0801d488
 800aea0:	2000e920 	.word	0x2000e920

0800aea4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800aeaa:	4b20      	ldr	r3, [pc, #128]	@ (800af2c <mem_init+0x88>)
 800aeac:	3303      	adds	r3, #3
 800aeae:	f023 0303 	bic.w	r3, r3, #3
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	4b1e      	ldr	r3, [pc, #120]	@ (800af30 <mem_init+0x8c>)
 800aeb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800aeb8:	4b1d      	ldr	r3, [pc, #116]	@ (800af30 <mem_init+0x8c>)
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800aec4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2200      	movs	r2, #0
 800aed0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800aed2:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800aed6:	f7ff ff13 	bl	800ad00 <ptr_to_mem>
 800aeda:	4603      	mov	r3, r0
 800aedc:	4a15      	ldr	r2, [pc, #84]	@ (800af34 <mem_init+0x90>)
 800aede:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800aee0:	4b14      	ldr	r3, [pc, #80]	@ (800af34 <mem_init+0x90>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2201      	movs	r2, #1
 800aee6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800aee8:	4b12      	ldr	r3, [pc, #72]	@ (800af34 <mem_init+0x90>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800aef0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800aef2:	4b10      	ldr	r3, [pc, #64]	@ (800af34 <mem_init+0x90>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800aefa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800aefc:	4b0c      	ldr	r3, [pc, #48]	@ (800af30 <mem_init+0x8c>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a0d      	ldr	r2, [pc, #52]	@ (800af38 <mem_init+0x94>)
 800af02:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800af04:	480d      	ldr	r0, [pc, #52]	@ (800af3c <mem_init+0x98>)
 800af06:	f010 f9df 	bl	801b2c8 <sys_mutex_new>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d009      	beq.n	800af24 <mem_init+0x80>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800af10:	4b0b      	ldr	r3, [pc, #44]	@ (800af40 <mem_init+0x9c>)
 800af12:	f240 221f 	movw	r2, #543	@ 0x21f
 800af16:	490b      	ldr	r1, [pc, #44]	@ (800af44 <mem_init+0xa0>)
 800af18:	480b      	ldr	r0, [pc, #44]	@ (800af48 <mem_init+0xa4>)
 800af1a:	f010 fc05 	bl	801b728 <iprintf>
 800af1e:	2000      	movs	r0, #0
 800af20:	f010 fb2c 	bl	801b57c <fflush>
  }
}
 800af24:	bf00      	nop
 800af26:	3708      	adds	r7, #8
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	2000c100 	.word	0x2000c100
 800af30:	2000e914 	.word	0x2000e914
 800af34:	2000e918 	.word	0x2000e918
 800af38:	2000e920 	.word	0x2000e920
 800af3c:	2000e91c 	.word	0x2000e91c
 800af40:	0801d3e0 	.word	0x0801d3e0
 800af44:	0801d4b4 	.word	0x0801d4b4
 800af48:	0801d428 	.word	0x0801d428

0800af4c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b086      	sub	sp, #24
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f7ff fee5 	bl	800ad24 <mem_to_ptr>
 800af5a:	4603      	mov	r3, r0
 800af5c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff fecc 	bl	800ad00 <ptr_to_mem>
 800af68:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	885b      	ldrh	r3, [r3, #2]
 800af6e:	4618      	mov	r0, r3
 800af70:	f7ff fec6 	bl	800ad00 <ptr_to_mem>
 800af74:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	881b      	ldrh	r3, [r3, #0]
 800af7a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800af7e:	d818      	bhi.n	800afb2 <mem_link_valid+0x66>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	885b      	ldrh	r3, [r3, #2]
 800af84:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800af88:	d813      	bhi.n	800afb2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800af8e:	8afa      	ldrh	r2, [r7, #22]
 800af90:	429a      	cmp	r2, r3
 800af92:	d004      	beq.n	800af9e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	881b      	ldrh	r3, [r3, #0]
 800af98:	8afa      	ldrh	r2, [r7, #22]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d109      	bne.n	800afb2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800af9e:	4b08      	ldr	r3, [pc, #32]	@ (800afc0 <mem_link_valid+0x74>)
 800afa0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	429a      	cmp	r2, r3
 800afa6:	d006      	beq.n	800afb6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	885b      	ldrh	r3, [r3, #2]
 800afac:	8afa      	ldrh	r2, [r7, #22]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d001      	beq.n	800afb6 <mem_link_valid+0x6a>
    return 0;
 800afb2:	2300      	movs	r3, #0
 800afb4:	e000      	b.n	800afb8 <mem_link_valid+0x6c>
  }
  return 1;
 800afb6:	2301      	movs	r3, #1
}
 800afb8:	4618      	mov	r0, r3
 800afba:	3718      	adds	r7, #24
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}
 800afc0:	2000e918 	.word	0x2000e918

0800afc4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d106      	bne.n	800afe0 <mem_free+0x1c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
 800afd2:	484f      	ldr	r0, [pc, #316]	@ (800b110 <mem_free+0x14c>)
 800afd4:	f010 fc18 	bl	801b808 <puts>
 800afd8:	2000      	movs	r0, #0
 800afda:	f010 facf 	bl	801b57c <fflush>
    return;
 800afde:	e093      	b.n	800b108 <mem_free+0x144>
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f003 0303 	and.w	r3, r3, #3
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d016      	beq.n	800b018 <mem_free+0x54>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800afea:	4b4a      	ldr	r3, [pc, #296]	@ (800b114 <mem_free+0x150>)
 800afec:	f240 2273 	movw	r2, #627	@ 0x273
 800aff0:	4949      	ldr	r1, [pc, #292]	@ (800b118 <mem_free+0x154>)
 800aff2:	484a      	ldr	r0, [pc, #296]	@ (800b11c <mem_free+0x158>)
 800aff4:	f010 fb98 	bl	801b728 <iprintf>
 800aff8:	2000      	movs	r0, #0
 800affa:	f010 fabf 	bl	801b57c <fflush>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
 800affe:	4846      	ldr	r0, [pc, #280]	@ (800b118 <mem_free+0x154>)
 800b000:	f010 fc02 	bl	801b808 <puts>
 800b004:	2000      	movs	r0, #0
 800b006:	f010 fab9 	bl	801b57c <fflush>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b00a:	f010 f9af 	bl	801b36c <sys_arch_protect>
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	68f8      	ldr	r0, [r7, #12]
 800b012:	f010 f9b9 	bl	801b388 <sys_arch_unprotect>
    return;
 800b016:	e077      	b.n	800b108 <mem_free+0x144>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3b08      	subs	r3, #8
 800b01c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800b01e:	4b40      	ldr	r3, [pc, #256]	@ (800b120 <mem_free+0x15c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	69fa      	ldr	r2, [r7, #28]
 800b024:	429a      	cmp	r2, r3
 800b026:	d306      	bcc.n	800b036 <mem_free+0x72>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f103 020c 	add.w	r2, r3, #12
 800b02e:	4b3d      	ldr	r3, [pc, #244]	@ (800b124 <mem_free+0x160>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	429a      	cmp	r2, r3
 800b034:	d916      	bls.n	800b064 <mem_free+0xa0>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800b036:	4b37      	ldr	r3, [pc, #220]	@ (800b114 <mem_free+0x150>)
 800b038:	f240 227f 	movw	r2, #639	@ 0x27f
 800b03c:	493a      	ldr	r1, [pc, #232]	@ (800b128 <mem_free+0x164>)
 800b03e:	4837      	ldr	r0, [pc, #220]	@ (800b11c <mem_free+0x158>)
 800b040:	f010 fb72 	bl	801b728 <iprintf>
 800b044:	2000      	movs	r0, #0
 800b046:	f010 fa99 	bl	801b57c <fflush>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
 800b04a:	4837      	ldr	r0, [pc, #220]	@ (800b128 <mem_free+0x164>)
 800b04c:	f010 fbdc 	bl	801b808 <puts>
 800b050:	2000      	movs	r0, #0
 800b052:	f010 fa93 	bl	801b57c <fflush>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b056:	f010 f989 	bl	801b36c <sys_arch_protect>
 800b05a:	6138      	str	r0, [r7, #16]
 800b05c:	6938      	ldr	r0, [r7, #16]
 800b05e:	f010 f993 	bl	801b388 <sys_arch_unprotect>
    return;
 800b062:	e051      	b.n	800b108 <mem_free+0x144>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b064:	4831      	ldr	r0, [pc, #196]	@ (800b12c <mem_free+0x168>)
 800b066:	f010 f945 	bl	801b2f4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	791b      	ldrb	r3, [r3, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d119      	bne.n	800b0a6 <mem_free+0xe2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800b072:	4b28      	ldr	r3, [pc, #160]	@ (800b114 <mem_free+0x150>)
 800b074:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800b078:	492d      	ldr	r1, [pc, #180]	@ (800b130 <mem_free+0x16c>)
 800b07a:	4828      	ldr	r0, [pc, #160]	@ (800b11c <mem_free+0x158>)
 800b07c:	f010 fb54 	bl	801b728 <iprintf>
 800b080:	2000      	movs	r0, #0
 800b082:	f010 fa7b 	bl	801b57c <fflush>
    LWIP_MEM_FREE_UNPROTECT();
 800b086:	4829      	ldr	r0, [pc, #164]	@ (800b12c <mem_free+0x168>)
 800b088:	f010 f943 	bl	801b312 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
 800b08c:	4829      	ldr	r0, [pc, #164]	@ (800b134 <mem_free+0x170>)
 800b08e:	f010 fbbb 	bl	801b808 <puts>
 800b092:	2000      	movs	r0, #0
 800b094:	f010 fa72 	bl	801b57c <fflush>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b098:	f010 f968 	bl	801b36c <sys_arch_protect>
 800b09c:	6178      	str	r0, [r7, #20]
 800b09e:	6978      	ldr	r0, [r7, #20]
 800b0a0:	f010 f972 	bl	801b388 <sys_arch_unprotect>
    return;
 800b0a4:	e030      	b.n	800b108 <mem_free+0x144>
  }

  if (!mem_link_valid(mem)) {
 800b0a6:	69f8      	ldr	r0, [r7, #28]
 800b0a8:	f7ff ff50 	bl	800af4c <mem_link_valid>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d119      	bne.n	800b0e6 <mem_free+0x122>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800b0b2:	4b18      	ldr	r3, [pc, #96]	@ (800b114 <mem_free+0x150>)
 800b0b4:	f240 2295 	movw	r2, #661	@ 0x295
 800b0b8:	491f      	ldr	r1, [pc, #124]	@ (800b138 <mem_free+0x174>)
 800b0ba:	4818      	ldr	r0, [pc, #96]	@ (800b11c <mem_free+0x158>)
 800b0bc:	f010 fb34 	bl	801b728 <iprintf>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	f010 fa5b 	bl	801b57c <fflush>
    LWIP_MEM_FREE_UNPROTECT();
 800b0c6:	4819      	ldr	r0, [pc, #100]	@ (800b12c <mem_free+0x168>)
 800b0c8:	f010 f923 	bl	801b312 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
 800b0cc:	481b      	ldr	r0, [pc, #108]	@ (800b13c <mem_free+0x178>)
 800b0ce:	f010 fb9b 	bl	801b808 <puts>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	f010 fa52 	bl	801b57c <fflush>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b0d8:	f010 f948 	bl	801b36c <sys_arch_protect>
 800b0dc:	61b8      	str	r0, [r7, #24]
 800b0de:	69b8      	ldr	r0, [r7, #24]
 800b0e0:	f010 f952 	bl	801b388 <sys_arch_unprotect>
    return;
 800b0e4:	e010      	b.n	800b108 <mem_free+0x144>
  }

  /* mem is now unused. */
  mem->used = 0;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b0ec:	4b14      	ldr	r3, [pc, #80]	@ (800b140 <mem_free+0x17c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	69fa      	ldr	r2, [r7, #28]
 800b0f2:	429a      	cmp	r2, r3
 800b0f4:	d202      	bcs.n	800b0fc <mem_free+0x138>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b0f6:	4a12      	ldr	r2, [pc, #72]	@ (800b140 <mem_free+0x17c>)
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b0fc:	69f8      	ldr	r0, [r7, #28]
 800b0fe:	f7ff fe23 	bl	800ad48 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b102:	480a      	ldr	r0, [pc, #40]	@ (800b12c <mem_free+0x168>)
 800b104:	f010 f905 	bl	801b312 <sys_mutex_unlock>
}
 800b108:	3720      	adds	r7, #32
 800b10a:	46bd      	mov	sp, r7
 800b10c:	bd80      	pop	{r7, pc}
 800b10e:	bf00      	nop
 800b110:	0801d4d0 	.word	0x0801d4d0
 800b114:	0801d3e0 	.word	0x0801d3e0
 800b118:	0801d4f0 	.word	0x0801d4f0
 800b11c:	0801d428 	.word	0x0801d428
 800b120:	2000e914 	.word	0x2000e914
 800b124:	2000e918 	.word	0x2000e918
 800b128:	0801d514 	.word	0x0801d514
 800b12c:	2000e91c 	.word	0x2000e91c
 800b130:	0801d530 	.word	0x0801d530
 800b134:	0801d558 	.word	0x0801d558
 800b138:	0801d580 	.word	0x0801d580
 800b13c:	0801d5b4 	.word	0x0801d5b4
 800b140:	2000e920 	.word	0x2000e920

0800b144 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	460b      	mov	r3, r1
 800b14e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800b150:	887b      	ldrh	r3, [r7, #2]
 800b152:	3303      	adds	r3, #3
 800b154:	b29b      	uxth	r3, r3
 800b156:	f023 0303 	bic.w	r3, r3, #3
 800b15a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800b15c:	8bfb      	ldrh	r3, [r7, #30]
 800b15e:	2b0b      	cmp	r3, #11
 800b160:	d801      	bhi.n	800b166 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b162:	230c      	movs	r3, #12
 800b164:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800b166:	8bfb      	ldrh	r3, [r7, #30]
 800b168:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b16c:	d803      	bhi.n	800b176 <mem_trim+0x32>
 800b16e:	8bfa      	ldrh	r2, [r7, #30]
 800b170:	887b      	ldrh	r3, [r7, #2]
 800b172:	429a      	cmp	r2, r3
 800b174:	d201      	bcs.n	800b17a <mem_trim+0x36>
    return NULL;
 800b176:	2300      	movs	r3, #0
 800b178:	e0ea      	b.n	800b350 <mem_trim+0x20c>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b17a:	4b77      	ldr	r3, [pc, #476]	@ (800b358 <mem_trim+0x214>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	429a      	cmp	r2, r3
 800b182:	d304      	bcc.n	800b18e <mem_trim+0x4a>
 800b184:	4b75      	ldr	r3, [pc, #468]	@ (800b35c <mem_trim+0x218>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	687a      	ldr	r2, [r7, #4]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d309      	bcc.n	800b1a2 <mem_trim+0x5e>
 800b18e:	4b74      	ldr	r3, [pc, #464]	@ (800b360 <mem_trim+0x21c>)
 800b190:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800b194:	4973      	ldr	r1, [pc, #460]	@ (800b364 <mem_trim+0x220>)
 800b196:	4874      	ldr	r0, [pc, #464]	@ (800b368 <mem_trim+0x224>)
 800b198:	f010 fac6 	bl	801b728 <iprintf>
 800b19c:	2000      	movs	r0, #0
 800b19e:	f010 f9ed 	bl	801b57c <fflush>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b1a2:	4b6d      	ldr	r3, [pc, #436]	@ (800b358 <mem_trim+0x214>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d304      	bcc.n	800b1b6 <mem_trim+0x72>
 800b1ac:	4b6b      	ldr	r3, [pc, #428]	@ (800b35c <mem_trim+0x218>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d30d      	bcc.n	800b1d2 <mem_trim+0x8e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
 800b1b6:	486d      	ldr	r0, [pc, #436]	@ (800b36c <mem_trim+0x228>)
 800b1b8:	f010 fb26 	bl	801b808 <puts>
 800b1bc:	2000      	movs	r0, #0
 800b1be:	f010 f9dd 	bl	801b57c <fflush>
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800b1c2:	f010 f8d3 	bl	801b36c <sys_arch_protect>
 800b1c6:	60b8      	str	r0, [r7, #8]
 800b1c8:	68b8      	ldr	r0, [r7, #8]
 800b1ca:	f010 f8dd 	bl	801b388 <sys_arch_unprotect>
    return rmem;
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	e0be      	b.n	800b350 <mem_trim+0x20c>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	3b08      	subs	r3, #8
 800b1d6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800b1d8:	69b8      	ldr	r0, [r7, #24]
 800b1da:	f7ff fda3 	bl	800ad24 <mem_to_ptr>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	881a      	ldrh	r2, [r3, #0]
 800b1e6:	8afb      	ldrh	r3, [r7, #22]
 800b1e8:	1ad3      	subs	r3, r2, r3
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	3b08      	subs	r3, #8
 800b1ee:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b1f0:	8bfa      	ldrh	r2, [r7, #30]
 800b1f2:	8abb      	ldrh	r3, [r7, #20]
 800b1f4:	429a      	cmp	r2, r3
 800b1f6:	d909      	bls.n	800b20c <mem_trim+0xc8>
 800b1f8:	4b59      	ldr	r3, [pc, #356]	@ (800b360 <mem_trim+0x21c>)
 800b1fa:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800b1fe:	495c      	ldr	r1, [pc, #368]	@ (800b370 <mem_trim+0x22c>)
 800b200:	4859      	ldr	r0, [pc, #356]	@ (800b368 <mem_trim+0x224>)
 800b202:	f010 fa91 	bl	801b728 <iprintf>
 800b206:	2000      	movs	r0, #0
 800b208:	f010 f9b8 	bl	801b57c <fflush>
  if (newsize > size) {
 800b20c:	8bfa      	ldrh	r2, [r7, #30]
 800b20e:	8abb      	ldrh	r3, [r7, #20]
 800b210:	429a      	cmp	r2, r3
 800b212:	d901      	bls.n	800b218 <mem_trim+0xd4>
    /* not supported */
    return NULL;
 800b214:	2300      	movs	r3, #0
 800b216:	e09b      	b.n	800b350 <mem_trim+0x20c>
  }
  if (newsize == size) {
 800b218:	8bfa      	ldrh	r2, [r7, #30]
 800b21a:	8abb      	ldrh	r3, [r7, #20]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d101      	bne.n	800b224 <mem_trim+0xe0>
    /* No change in size, simply return */
    return rmem;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	e095      	b.n	800b350 <mem_trim+0x20c>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b224:	4853      	ldr	r0, [pc, #332]	@ (800b374 <mem_trim+0x230>)
 800b226:	f010 f865 	bl	801b2f4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800b22a:	69bb      	ldr	r3, [r7, #24]
 800b22c:	881b      	ldrh	r3, [r3, #0]
 800b22e:	4618      	mov	r0, r3
 800b230:	f7ff fd66 	bl	800ad00 <ptr_to_mem>
 800b234:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800b236:	693b      	ldr	r3, [r7, #16]
 800b238:	791b      	ldrb	r3, [r3, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d142      	bne.n	800b2c4 <mem_trim+0x180>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b246:	d109      	bne.n	800b25c <mem_trim+0x118>
 800b248:	4b45      	ldr	r3, [pc, #276]	@ (800b360 <mem_trim+0x21c>)
 800b24a:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800b24e:	494a      	ldr	r1, [pc, #296]	@ (800b378 <mem_trim+0x234>)
 800b250:	4845      	ldr	r0, [pc, #276]	@ (800b368 <mem_trim+0x224>)
 800b252:	f010 fa69 	bl	801b728 <iprintf>
 800b256:	2000      	movs	r0, #0
 800b258:	f010 f990 	bl	801b57c <fflush>
    /* remember the old next pointer */
    next = mem2->next;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b262:	8afa      	ldrh	r2, [r7, #22]
 800b264:	8bfb      	ldrh	r3, [r7, #30]
 800b266:	4413      	add	r3, r2
 800b268:	b29b      	uxth	r3, r3
 800b26a:	3308      	adds	r3, #8
 800b26c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800b26e:	4b43      	ldr	r3, [pc, #268]	@ (800b37c <mem_trim+0x238>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	429a      	cmp	r2, r3
 800b276:	d106      	bne.n	800b286 <mem_trim+0x142>
      lfree = ptr_to_mem(ptr2);
 800b278:	89fb      	ldrh	r3, [r7, #14]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7ff fd40 	bl	800ad00 <ptr_to_mem>
 800b280:	4603      	mov	r3, r0
 800b282:	4a3e      	ldr	r2, [pc, #248]	@ (800b37c <mem_trim+0x238>)
 800b284:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800b286:	89fb      	ldrh	r3, [r7, #14]
 800b288:	4618      	mov	r0, r3
 800b28a:	f7ff fd39 	bl	800ad00 <ptr_to_mem>
 800b28e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800b290:	693b      	ldr	r3, [r7, #16]
 800b292:	2200      	movs	r2, #0
 800b294:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	89ba      	ldrh	r2, [r7, #12]
 800b29a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b29c:	693b      	ldr	r3, [r7, #16]
 800b29e:	8afa      	ldrh	r2, [r7, #22]
 800b2a0:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b2a2:	69bb      	ldr	r3, [r7, #24]
 800b2a4:	89fa      	ldrh	r2, [r7, #14]
 800b2a6:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b2b0:	d04a      	beq.n	800b348 <mem_trim+0x204>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	f7ff fd22 	bl	800ad00 <ptr_to_mem>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	89fb      	ldrh	r3, [r7, #14]
 800b2c0:	8053      	strh	r3, [r2, #2]
 800b2c2:	e041      	b.n	800b348 <mem_trim+0x204>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b2c4:	8bfb      	ldrh	r3, [r7, #30]
 800b2c6:	f103 0214 	add.w	r2, r3, #20
 800b2ca:	8abb      	ldrh	r3, [r7, #20]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d83b      	bhi.n	800b348 <mem_trim+0x204>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800b2d0:	8afa      	ldrh	r2, [r7, #22]
 800b2d2:	8bfb      	ldrh	r3, [r7, #30]
 800b2d4:	4413      	add	r3, r2
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	3308      	adds	r3, #8
 800b2da:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800b2dc:	69bb      	ldr	r3, [r7, #24]
 800b2de:	881b      	ldrh	r3, [r3, #0]
 800b2e0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b2e4:	d109      	bne.n	800b2fa <mem_trim+0x1b6>
 800b2e6:	4b1e      	ldr	r3, [pc, #120]	@ (800b360 <mem_trim+0x21c>)
 800b2e8:	f240 3216 	movw	r2, #790	@ 0x316
 800b2ec:	4922      	ldr	r1, [pc, #136]	@ (800b378 <mem_trim+0x234>)
 800b2ee:	481e      	ldr	r0, [pc, #120]	@ (800b368 <mem_trim+0x224>)
 800b2f0:	f010 fa1a 	bl	801b728 <iprintf>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	f010 f941 	bl	801b57c <fflush>
    mem2 = ptr_to_mem(ptr2);
 800b2fa:	89fb      	ldrh	r3, [r7, #14]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff fcff 	bl	800ad00 <ptr_to_mem>
 800b302:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800b304:	4b1d      	ldr	r3, [pc, #116]	@ (800b37c <mem_trim+0x238>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	693a      	ldr	r2, [r7, #16]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d202      	bcs.n	800b314 <mem_trim+0x1d0>
      lfree = mem2;
 800b30e:	4a1b      	ldr	r2, [pc, #108]	@ (800b37c <mem_trim+0x238>)
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	2200      	movs	r2, #0
 800b318:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	881a      	ldrh	r2, [r3, #0]
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	8afa      	ldrh	r2, [r7, #22]
 800b326:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b328:	69bb      	ldr	r3, [r7, #24]
 800b32a:	89fa      	ldrh	r2, [r7, #14]
 800b32c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	881b      	ldrh	r3, [r3, #0]
 800b332:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b336:	d007      	beq.n	800b348 <mem_trim+0x204>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	881b      	ldrh	r3, [r3, #0]
 800b33c:	4618      	mov	r0, r3
 800b33e:	f7ff fcdf 	bl	800ad00 <ptr_to_mem>
 800b342:	4602      	mov	r2, r0
 800b344:	89fb      	ldrh	r3, [r7, #14]
 800b346:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b348:	480a      	ldr	r0, [pc, #40]	@ (800b374 <mem_trim+0x230>)
 800b34a:	f00f ffe2 	bl	801b312 <sys_mutex_unlock>
  return rmem;
 800b34e:	687b      	ldr	r3, [r7, #4]
}
 800b350:	4618      	mov	r0, r3
 800b352:	3720      	adds	r7, #32
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	2000e914 	.word	0x2000e914
 800b35c:	2000e918 	.word	0x2000e918
 800b360:	0801d3e0 	.word	0x0801d3e0
 800b364:	0801d5e8 	.word	0x0801d5e8
 800b368:	0801d428 	.word	0x0801d428
 800b36c:	0801d600 	.word	0x0801d600
 800b370:	0801d61c 	.word	0x0801d61c
 800b374:	2000e91c 	.word	0x2000e91c
 800b378:	0801d63c 	.word	0x0801d63c
 800b37c:	2000e920 	.word	0x2000e920

0800b380 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b088      	sub	sp, #32
 800b384:	af00      	add	r7, sp, #0
 800b386:	4603      	mov	r3, r0
 800b388:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b38a:	88fb      	ldrh	r3, [r7, #6]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <mem_malloc+0x14>
    return NULL;
 800b390:	2300      	movs	r3, #0
 800b392:	e0fa      	b.n	800b58a <mem_malloc+0x20a>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b394:	88fb      	ldrh	r3, [r7, #6]
 800b396:	3303      	adds	r3, #3
 800b398:	b29b      	uxth	r3, r3
 800b39a:	f023 0303 	bic.w	r3, r3, #3
 800b39e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b3a0:	8bbb      	ldrh	r3, [r7, #28]
 800b3a2:	2b0b      	cmp	r3, #11
 800b3a4:	d801      	bhi.n	800b3aa <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b3aa:	8bbb      	ldrh	r3, [r7, #28]
 800b3ac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b3b0:	d803      	bhi.n	800b3ba <mem_malloc+0x3a>
 800b3b2:	8bba      	ldrh	r2, [r7, #28]
 800b3b4:	88fb      	ldrh	r3, [r7, #6]
 800b3b6:	429a      	cmp	r2, r3
 800b3b8:	d201      	bcs.n	800b3be <mem_malloc+0x3e>
    return NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	e0e5      	b.n	800b58a <mem_malloc+0x20a>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b3be:	4875      	ldr	r0, [pc, #468]	@ (800b594 <mem_malloc+0x214>)
 800b3c0:	f00f ff98 	bl	801b2f4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b3c4:	4b74      	ldr	r3, [pc, #464]	@ (800b598 <mem_malloc+0x218>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f7ff fcab 	bl	800ad24 <mem_to_ptr>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	83fb      	strh	r3, [r7, #30]
 800b3d2:	e0c6      	b.n	800b562 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b3d4:	8bfb      	ldrh	r3, [r7, #30]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff fc92 	bl	800ad00 <ptr_to_mem>
 800b3dc:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	791b      	ldrb	r3, [r3, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f040 80b6 	bne.w	800b554 <mem_malloc+0x1d4>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	8bfb      	ldrh	r3, [r7, #30]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	f1a3 0208 	sub.w	r2, r3, #8
 800b3f6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	f0c0 80ab 	bcc.w	800b554 <mem_malloc+0x1d4>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	881b      	ldrh	r3, [r3, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	8bfb      	ldrh	r3, [r7, #30]
 800b406:	1ad3      	subs	r3, r2, r3
 800b408:	f1a3 0208 	sub.w	r2, r3, #8
 800b40c:	8bbb      	ldrh	r3, [r7, #28]
 800b40e:	3314      	adds	r3, #20
 800b410:	429a      	cmp	r2, r3
 800b412:	d336      	bcc.n	800b482 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b414:	8bfa      	ldrh	r2, [r7, #30]
 800b416:	8bbb      	ldrh	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	3308      	adds	r3, #8
 800b41e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b420:	8a7b      	ldrh	r3, [r7, #18]
 800b422:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b426:	d109      	bne.n	800b43c <mem_malloc+0xbc>
 800b428:	4b5c      	ldr	r3, [pc, #368]	@ (800b59c <mem_malloc+0x21c>)
 800b42a:	f240 3287 	movw	r2, #903	@ 0x387
 800b42e:	495c      	ldr	r1, [pc, #368]	@ (800b5a0 <mem_malloc+0x220>)
 800b430:	485c      	ldr	r0, [pc, #368]	@ (800b5a4 <mem_malloc+0x224>)
 800b432:	f010 f979 	bl	801b728 <iprintf>
 800b436:	2000      	movs	r0, #0
 800b438:	f010 f8a0 	bl	801b57c <fflush>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b43c:	8a7b      	ldrh	r3, [r7, #18]
 800b43e:	4618      	mov	r0, r3
 800b440:	f7ff fc5e 	bl	800ad00 <ptr_to_mem>
 800b444:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	2200      	movs	r2, #0
 800b44a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b44c:	697b      	ldr	r3, [r7, #20]
 800b44e:	881a      	ldrh	r2, [r3, #0]
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	8bfa      	ldrh	r2, [r7, #30]
 800b458:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	8a7a      	ldrh	r2, [r7, #18]
 800b45e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	2201      	movs	r2, #1
 800b464:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800b46e:	d00b      	beq.n	800b488 <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	881b      	ldrh	r3, [r3, #0]
 800b474:	4618      	mov	r0, r3
 800b476:	f7ff fc43 	bl	800ad00 <ptr_to_mem>
 800b47a:	4602      	mov	r2, r0
 800b47c:	8a7b      	ldrh	r3, [r7, #18]
 800b47e:	8053      	strh	r3, [r2, #2]
 800b480:	e002      	b.n	800b488 <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2201      	movs	r2, #1
 800b486:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b488:	4b43      	ldr	r3, [pc, #268]	@ (800b598 <mem_malloc+0x218>)
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	429a      	cmp	r2, r3
 800b490:	d12a      	bne.n	800b4e8 <mem_malloc+0x168>
          struct mem *cur = lfree;
 800b492:	4b41      	ldr	r3, [pc, #260]	@ (800b598 <mem_malloc+0x218>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b498:	e005      	b.n	800b4a6 <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	881b      	ldrh	r3, [r3, #0]
 800b49e:	4618      	mov	r0, r3
 800b4a0:	f7ff fc2e 	bl	800ad00 <ptr_to_mem>
 800b4a4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	791b      	ldrb	r3, [r3, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d004      	beq.n	800b4b8 <mem_malloc+0x138>
 800b4ae:	4b3e      	ldr	r3, [pc, #248]	@ (800b5a8 <mem_malloc+0x228>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d1f0      	bne.n	800b49a <mem_malloc+0x11a>
          }
          lfree = cur;
 800b4b8:	4a37      	ldr	r2, [pc, #220]	@ (800b598 <mem_malloc+0x218>)
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b4be:	4b36      	ldr	r3, [pc, #216]	@ (800b598 <mem_malloc+0x218>)
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	4b39      	ldr	r3, [pc, #228]	@ (800b5a8 <mem_malloc+0x228>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d00e      	beq.n	800b4e8 <mem_malloc+0x168>
 800b4ca:	4b33      	ldr	r3, [pc, #204]	@ (800b598 <mem_malloc+0x218>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	791b      	ldrb	r3, [r3, #4]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d009      	beq.n	800b4e8 <mem_malloc+0x168>
 800b4d4:	4b31      	ldr	r3, [pc, #196]	@ (800b59c <mem_malloc+0x21c>)
 800b4d6:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800b4da:	4934      	ldr	r1, [pc, #208]	@ (800b5ac <mem_malloc+0x22c>)
 800b4dc:	4831      	ldr	r0, [pc, #196]	@ (800b5a4 <mem_malloc+0x224>)
 800b4de:	f010 f923 	bl	801b728 <iprintf>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f010 f84a 	bl	801b57c <fflush>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b4e8:	482a      	ldr	r0, [pc, #168]	@ (800b594 <mem_malloc+0x214>)
 800b4ea:	f00f ff12 	bl	801b312 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b4ee:	8bba      	ldrh	r2, [r7, #28]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	3308      	adds	r3, #8
 800b4f6:	4a2c      	ldr	r2, [pc, #176]	@ (800b5a8 <mem_malloc+0x228>)
 800b4f8:	6812      	ldr	r2, [r2, #0]
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d909      	bls.n	800b512 <mem_malloc+0x192>
 800b4fe:	4b27      	ldr	r3, [pc, #156]	@ (800b59c <mem_malloc+0x21c>)
 800b500:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800b504:	492a      	ldr	r1, [pc, #168]	@ (800b5b0 <mem_malloc+0x230>)
 800b506:	4827      	ldr	r0, [pc, #156]	@ (800b5a4 <mem_malloc+0x224>)
 800b508:	f010 f90e 	bl	801b728 <iprintf>
 800b50c:	2000      	movs	r0, #0
 800b50e:	f010 f835 	bl	801b57c <fflush>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	f003 0303 	and.w	r3, r3, #3
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d009      	beq.n	800b530 <mem_malloc+0x1b0>
 800b51c:	4b1f      	ldr	r3, [pc, #124]	@ (800b59c <mem_malloc+0x21c>)
 800b51e:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800b522:	4924      	ldr	r1, [pc, #144]	@ (800b5b4 <mem_malloc+0x234>)
 800b524:	481f      	ldr	r0, [pc, #124]	@ (800b5a4 <mem_malloc+0x224>)
 800b526:	f010 f8ff 	bl	801b728 <iprintf>
 800b52a:	2000      	movs	r0, #0
 800b52c:	f010 f826 	bl	801b57c <fflush>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	f003 0303 	and.w	r3, r3, #3
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <mem_malloc+0x1ce>
 800b53a:	4b18      	ldr	r3, [pc, #96]	@ (800b59c <mem_malloc+0x21c>)
 800b53c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800b540:	491d      	ldr	r1, [pc, #116]	@ (800b5b8 <mem_malloc+0x238>)
 800b542:	4818      	ldr	r0, [pc, #96]	@ (800b5a4 <mem_malloc+0x224>)
 800b544:	f010 f8f0 	bl	801b728 <iprintf>
 800b548:	2000      	movs	r0, #0
 800b54a:	f010 f817 	bl	801b57c <fflush>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	3308      	adds	r3, #8
 800b552:	e01a      	b.n	800b58a <mem_malloc+0x20a>
         ptr = ptr_to_mem(ptr)->next) {
 800b554:	8bfb      	ldrh	r3, [r7, #30]
 800b556:	4618      	mov	r0, r3
 800b558:	f7ff fbd2 	bl	800ad00 <ptr_to_mem>
 800b55c:	4603      	mov	r3, r0
 800b55e:	881b      	ldrh	r3, [r3, #0]
 800b560:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b562:	8bfa      	ldrh	r2, [r7, #30]
 800b564:	8bbb      	ldrh	r3, [r7, #28]
 800b566:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800b56a:	429a      	cmp	r2, r3
 800b56c:	f4ff af32 	bcc.w	800b3d4 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b570:	4808      	ldr	r0, [pc, #32]	@ (800b594 <mem_malloc+0x214>)
 800b572:	f00f fece 	bl	801b312 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
 800b576:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800b57a:	4619      	mov	r1, r3
 800b57c:	480f      	ldr	r0, [pc, #60]	@ (800b5bc <mem_malloc+0x23c>)
 800b57e:	f010 f8d3 	bl	801b728 <iprintf>
 800b582:	2000      	movs	r0, #0
 800b584:	f00f fffa 	bl	801b57c <fflush>
  return NULL;
 800b588:	2300      	movs	r3, #0
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3720      	adds	r7, #32
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	2000e91c 	.word	0x2000e91c
 800b598:	2000e920 	.word	0x2000e920
 800b59c:	0801d3e0 	.word	0x0801d3e0
 800b5a0:	0801d63c 	.word	0x0801d63c
 800b5a4:	0801d428 	.word	0x0801d428
 800b5a8:	2000e918 	.word	0x2000e918
 800b5ac:	0801d650 	.word	0x0801d650
 800b5b0:	0801d66c 	.word	0x0801d66c
 800b5b4:	0801d69c 	.word	0x0801d69c
 800b5b8:	0801d6cc 	.word	0x0801d6cc
 800b5bc:	0801d6f0 	.word	0x0801d6f0

0800b5c0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	68db      	ldr	r3, [r3, #12]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	3303      	adds	r3, #3
 800b5d6:	f023 0303 	bic.w	r3, r3, #3
 800b5da:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b5dc:	2300      	movs	r3, #0
 800b5de:	60fb      	str	r3, [r7, #12]
 800b5e0:	e011      	b.n	800b606 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	681a      	ldr	r2, [r3, #0]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	68ba      	ldr	r2, [r7, #8]
 800b5f2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	889b      	ldrh	r3, [r3, #4]
 800b5f8:	461a      	mov	r2, r3
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3301      	adds	r3, #1
 800b604:	60fb      	str	r3, [r7, #12]
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	88db      	ldrh	r3, [r3, #6]
 800b60a:	461a      	mov	r2, r3
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	4293      	cmp	r3, r2
 800b610:	dbe7      	blt.n	800b5e2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b612:	bf00      	nop
 800b614:	bf00      	nop
 800b616:	3714      	adds	r7, #20
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b626:	2300      	movs	r3, #0
 800b628:	80fb      	strh	r3, [r7, #6]
 800b62a:	e009      	b.n	800b640 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b62c:	88fb      	ldrh	r3, [r7, #6]
 800b62e:	4a08      	ldr	r2, [pc, #32]	@ (800b650 <memp_init+0x30>)
 800b630:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b634:	4618      	mov	r0, r3
 800b636:	f7ff ffc3 	bl	800b5c0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b63a:	88fb      	ldrh	r3, [r7, #6]
 800b63c:	3301      	adds	r3, #1
 800b63e:	80fb      	strh	r3, [r7, #6]
 800b640:	88fb      	ldrh	r3, [r7, #6]
 800b642:	2b0c      	cmp	r3, #12
 800b644:	d9f2      	bls.n	800b62c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b646:	bf00      	nop
 800b648:	bf00      	nop
 800b64a:	3708      	adds	r7, #8
 800b64c:	46bd      	mov	sp, r7
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	080251ac 	.word	0x080251ac

0800b654 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b084      	sub	sp, #16
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b65c:	f00f fe86 	bl	801b36c <sys_arch_protect>
 800b660:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	68db      	ldr	r3, [r3, #12]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d018      	beq.n	800b6a2 <do_memp_malloc_pool+0x4e>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	68db      	ldr	r3, [r3, #12]
 800b674:	68ba      	ldr	r2, [r7, #8]
 800b676:	6812      	ldr	r2, [r2, #0]
 800b678:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	f003 0303 	and.w	r3, r3, #3
 800b680:	2b00      	cmp	r3, #0
 800b682:	d009      	beq.n	800b698 <do_memp_malloc_pool+0x44>
 800b684:	4b0f      	ldr	r3, [pc, #60]	@ (800b6c4 <do_memp_malloc_pool+0x70>)
 800b686:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800b68a:	490f      	ldr	r1, [pc, #60]	@ (800b6c8 <do_memp_malloc_pool+0x74>)
 800b68c:	480f      	ldr	r0, [pc, #60]	@ (800b6cc <do_memp_malloc_pool+0x78>)
 800b68e:	f010 f84b 	bl	801b728 <iprintf>
 800b692:	2000      	movs	r0, #0
 800b694:	f00f ff72 	bl	801b57c <fflush>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f00f fe75 	bl	801b388 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	e00c      	b.n	800b6bc <do_memp_malloc_pool+0x68>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b6a2:	68f8      	ldr	r0, [r7, #12]
 800b6a4:	f00f fe70 	bl	801b388 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	4808      	ldr	r0, [pc, #32]	@ (800b6d0 <do_memp_malloc_pool+0x7c>)
 800b6b0:	f010 f83a 	bl	801b728 <iprintf>
 800b6b4:	2000      	movs	r0, #0
 800b6b6:	f00f ff61 	bl	801b57c <fflush>
  }

  return NULL;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3710      	adds	r7, #16
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}
 800b6c4:	0801d7e0 	.word	0x0801d7e0
 800b6c8:	0801d810 	.word	0x0801d810
 800b6cc:	0801d834 	.word	0x0801d834
 800b6d0:	0801d85c 	.word	0x0801d85c

0800b6d4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b082      	sub	sp, #8
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d109      	bne.n	800b6f6 <memp_malloc_pool+0x22>
 800b6e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b710 <memp_malloc_pool+0x3c>)
 800b6e4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800b6e8:	490a      	ldr	r1, [pc, #40]	@ (800b714 <memp_malloc_pool+0x40>)
 800b6ea:	480b      	ldr	r0, [pc, #44]	@ (800b718 <memp_malloc_pool+0x44>)
 800b6ec:	f010 f81c 	bl	801b728 <iprintf>
 800b6f0:	2000      	movs	r0, #0
 800b6f2:	f00f ff43 	bl	801b57c <fflush>
  if (desc == NULL) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d101      	bne.n	800b700 <memp_malloc_pool+0x2c>
    return NULL;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	e003      	b.n	800b708 <memp_malloc_pool+0x34>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f7ff ffa7 	bl	800b654 <do_memp_malloc_pool>
 800b706:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b708:	4618      	mov	r0, r3
 800b70a:	3708      	adds	r7, #8
 800b70c:	46bd      	mov	sp, r7
 800b70e:	bd80      	pop	{r7, pc}
 800b710:	0801d7e0 	.word	0x0801d7e0
 800b714:	0801d884 	.word	0x0801d884
 800b718:	0801d834 	.word	0x0801d834

0800b71c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	4603      	mov	r3, r0
 800b724:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b726:	79fb      	ldrb	r3, [r7, #7]
 800b728:	2b0c      	cmp	r3, #12
 800b72a:	d90b      	bls.n	800b744 <memp_malloc+0x28>
 800b72c:	4b0c      	ldr	r3, [pc, #48]	@ (800b760 <memp_malloc+0x44>)
 800b72e:	f240 1257 	movw	r2, #343	@ 0x157
 800b732:	490c      	ldr	r1, [pc, #48]	@ (800b764 <memp_malloc+0x48>)
 800b734:	480c      	ldr	r0, [pc, #48]	@ (800b768 <memp_malloc+0x4c>)
 800b736:	f00f fff7 	bl	801b728 <iprintf>
 800b73a:	2000      	movs	r0, #0
 800b73c:	f00f ff1e 	bl	801b57c <fflush>
 800b740:	2300      	movs	r3, #0
 800b742:	e008      	b.n	800b756 <memp_malloc+0x3a>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b744:	79fb      	ldrb	r3, [r7, #7]
 800b746:	4a09      	ldr	r2, [pc, #36]	@ (800b76c <memp_malloc+0x50>)
 800b748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b74c:	4618      	mov	r0, r3
 800b74e:	f7ff ff81 	bl	800b654 <do_memp_malloc_pool>
 800b752:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b754:	68fb      	ldr	r3, [r7, #12]
}
 800b756:	4618      	mov	r0, r3
 800b758:	3710      	adds	r7, #16
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}
 800b75e:	bf00      	nop
 800b760:	0801d7e0 	.word	0x0801d7e0
 800b764:	0801d898 	.word	0x0801d898
 800b768:	0801d834 	.word	0x0801d834
 800b76c:	080251ac 	.word	0x080251ac

0800b770 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b084      	sub	sp, #16
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
 800b778:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b77a:	683b      	ldr	r3, [r7, #0]
 800b77c:	f003 0303 	and.w	r3, r3, #3
 800b780:	2b00      	cmp	r3, #0
 800b782:	d009      	beq.n	800b798 <do_memp_free_pool+0x28>
 800b784:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c4 <do_memp_free_pool+0x54>)
 800b786:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800b78a:	490f      	ldr	r1, [pc, #60]	@ (800b7c8 <do_memp_free_pool+0x58>)
 800b78c:	480f      	ldr	r0, [pc, #60]	@ (800b7cc <do_memp_free_pool+0x5c>)
 800b78e:	f00f ffcb 	bl	801b728 <iprintf>
 800b792:	2000      	movs	r0, #0
 800b794:	f00f fef2 	bl	801b57c <fflush>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b79c:	f00f fde6 	bl	801b36c <sys_arch_protect>
 800b7a0:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	68db      	ldr	r3, [r3, #12]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	68db      	ldr	r3, [r3, #12]
 800b7b0:	68fa      	ldr	r2, [r7, #12]
 800b7b2:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b7b4:	68b8      	ldr	r0, [r7, #8]
 800b7b6:	f00f fde7 	bl	801b388 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b7ba:	bf00      	nop
 800b7bc:	3710      	adds	r7, #16
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	0801d7e0 	.word	0x0801d7e0
 800b7c8:	0801d8b8 	.word	0x0801d8b8
 800b7cc:	0801d834 	.word	0x0801d834

0800b7d0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b082      	sub	sp, #8
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
 800b7d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d109      	bne.n	800b7f4 <memp_free_pool+0x24>
 800b7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800b814 <memp_free_pool+0x44>)
 800b7e2:	f240 1295 	movw	r2, #405	@ 0x195
 800b7e6:	490c      	ldr	r1, [pc, #48]	@ (800b818 <memp_free_pool+0x48>)
 800b7e8:	480c      	ldr	r0, [pc, #48]	@ (800b81c <memp_free_pool+0x4c>)
 800b7ea:	f00f ff9d 	bl	801b728 <iprintf>
 800b7ee:	2000      	movs	r0, #0
 800b7f0:	f00f fec4 	bl	801b57c <fflush>
  if ((desc == NULL) || (mem == NULL)) {
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d007      	beq.n	800b80a <memp_free_pool+0x3a>
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d004      	beq.n	800b80a <memp_free_pool+0x3a>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b800:	6839      	ldr	r1, [r7, #0]
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f7ff ffb4 	bl	800b770 <do_memp_free_pool>
 800b808:	e000      	b.n	800b80c <memp_free_pool+0x3c>
    return;
 800b80a:	bf00      	nop
}
 800b80c:	3708      	adds	r7, #8
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	0801d7e0 	.word	0x0801d7e0
 800b818:	0801d884 	.word	0x0801d884
 800b81c:	0801d834 	.word	0x0801d834

0800b820 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af00      	add	r7, sp, #0
 800b826:	4603      	mov	r3, r0
 800b828:	6039      	str	r1, [r7, #0]
 800b82a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	2b0c      	cmp	r3, #12
 800b830:	d90a      	bls.n	800b848 <memp_free+0x28>
 800b832:	4b0d      	ldr	r3, [pc, #52]	@ (800b868 <memp_free+0x48>)
 800b834:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800b838:	490c      	ldr	r1, [pc, #48]	@ (800b86c <memp_free+0x4c>)
 800b83a:	480d      	ldr	r0, [pc, #52]	@ (800b870 <memp_free+0x50>)
 800b83c:	f00f ff74 	bl	801b728 <iprintf>
 800b840:	2000      	movs	r0, #0
 800b842:	f00f fe9b 	bl	801b57c <fflush>
 800b846:	e00c      	b.n	800b862 <memp_free+0x42>

  if (mem == NULL) {
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d008      	beq.n	800b860 <memp_free+0x40>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	4a08      	ldr	r2, [pc, #32]	@ (800b874 <memp_free+0x54>)
 800b852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	4618      	mov	r0, r3
 800b85a:	f7ff ff89 	bl	800b770 <do_memp_free_pool>
 800b85e:	e000      	b.n	800b862 <memp_free+0x42>
    return;
 800b860:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b862:	3708      	adds	r7, #8
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}
 800b868:	0801d7e0 	.word	0x0801d7e0
 800b86c:	0801d8d8 	.word	0x0801d8d8
 800b870:	0801d834 	.word	0x0801d834
 800b874:	080251ac 	.word	0x080251ac

0800b878 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b878:	b480      	push	{r7}
 800b87a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b87c:	bf00      	nop
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr
	...

0800b888 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b088      	sub	sp, #32
 800b88c:	af02      	add	r7, sp, #8
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d10b      	bne.n	800b8b4 <netif_add+0x2c>
 800b89c:	4ba0      	ldr	r3, [pc, #640]	@ (800bb20 <netif_add+0x298>)
 800b89e:	f240 1227 	movw	r2, #295	@ 0x127
 800b8a2:	49a0      	ldr	r1, [pc, #640]	@ (800bb24 <netif_add+0x29c>)
 800b8a4:	48a0      	ldr	r0, [pc, #640]	@ (800bb28 <netif_add+0x2a0>)
 800b8a6:	f00f ff3f 	bl	801b728 <iprintf>
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f00f fe66 	bl	801b57c <fflush>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e174      	b.n	800bb9e <netif_add+0x316>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b8b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d10b      	bne.n	800b8d2 <netif_add+0x4a>
 800b8ba:	4b99      	ldr	r3, [pc, #612]	@ (800bb20 <netif_add+0x298>)
 800b8bc:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800b8c0:	499a      	ldr	r1, [pc, #616]	@ (800bb2c <netif_add+0x2a4>)
 800b8c2:	4899      	ldr	r0, [pc, #612]	@ (800bb28 <netif_add+0x2a0>)
 800b8c4:	f00f ff30 	bl	801b728 <iprintf>
 800b8c8:	2000      	movs	r0, #0
 800b8ca:	f00f fe57 	bl	801b57c <fflush>
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	e165      	b.n	800bb9e <netif_add+0x316>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d101      	bne.n	800b8dc <netif_add+0x54>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b8d8:	4b95      	ldr	r3, [pc, #596]	@ (800bb30 <netif_add+0x2a8>)
 800b8da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d101      	bne.n	800b8e6 <netif_add+0x5e>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b8e2:	4b93      	ldr	r3, [pc, #588]	@ (800bb30 <netif_add+0x2a8>)
 800b8e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d101      	bne.n	800b8f0 <netif_add+0x68>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b8ec:	4b90      	ldr	r3, [pc, #576]	@ (800bb30 <netif_add+0x2a8>)
 800b8ee:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	2200      	movs	r2, #0
 800b900:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	4a8b      	ldr	r2, [pc, #556]	@ (800bb34 <netif_add+0x2ac>)
 800b906:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2200      	movs	r2, #0
 800b912:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	3324      	adds	r3, #36	@ 0x24
 800b91a:	2204      	movs	r2, #4
 800b91c:	2100      	movs	r1, #0
 800b91e:	4618      	mov	r0, r3
 800b920:	f010 f862 	bl	801b9e8 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	2200      	movs	r2, #0
 800b928:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	6a3a      	ldr	r2, [r7, #32]
 800b92e:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b930:	4b81      	ldr	r3, [pc, #516]	@ (800bb38 <netif_add+0x2b0>)
 800b932:	781a      	ldrb	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b93e:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	68b9      	ldr	r1, [r7, #8]
 800b946:	68f8      	ldr	r0, [r7, #12]
 800b948:	f000 fa26 	bl	800bd98 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b94c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	4798      	blx	r3
 800b952:	4603      	mov	r3, r0
 800b954:	2b00      	cmp	r3, #0
 800b956:	d001      	beq.n	800b95c <netif_add+0xd4>
    return NULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	e120      	b.n	800bb9e <netif_add+0x316>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b962:	2bff      	cmp	r3, #255	@ 0xff
 800b964:	d103      	bne.n	800b96e <netif_add+0xe6>
        netif->num = 0;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	2200      	movs	r2, #0
 800b96a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 800b96e:	2300      	movs	r3, #0
 800b970:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b972:	4b72      	ldr	r3, [pc, #456]	@ (800bb3c <netif_add+0x2b4>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	617b      	str	r3, [r7, #20]
 800b978:	e031      	b.n	800b9de <netif_add+0x156>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d109      	bne.n	800b996 <netif_add+0x10e>
 800b982:	4b67      	ldr	r3, [pc, #412]	@ (800bb20 <netif_add+0x298>)
 800b984:	f240 128b 	movw	r2, #395	@ 0x18b
 800b988:	496d      	ldr	r1, [pc, #436]	@ (800bb40 <netif_add+0x2b8>)
 800b98a:	4867      	ldr	r0, [pc, #412]	@ (800bb28 <netif_add+0x2a0>)
 800b98c:	f00f fecc 	bl	801b728 <iprintf>
 800b990:	2000      	movs	r0, #0
 800b992:	f00f fdf3 	bl	801b57c <fflush>
        num_netifs++;
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	3301      	adds	r3, #1
 800b99a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b99c:	693b      	ldr	r3, [r7, #16]
 800b99e:	2bff      	cmp	r3, #255	@ 0xff
 800b9a0:	dd09      	ble.n	800b9b6 <netif_add+0x12e>
 800b9a2:	4b5f      	ldr	r3, [pc, #380]	@ (800bb20 <netif_add+0x298>)
 800b9a4:	f240 128d 	movw	r2, #397	@ 0x18d
 800b9a8:	4966      	ldr	r1, [pc, #408]	@ (800bb44 <netif_add+0x2bc>)
 800b9aa:	485f      	ldr	r0, [pc, #380]	@ (800bb28 <netif_add+0x2a0>)
 800b9ac:	f00f febc 	bl	801b728 <iprintf>
 800b9b0:	2000      	movs	r0, #0
 800b9b2:	f00f fde3 	bl	801b57c <fflush>
        if (netif2->num == netif->num) {
 800b9b6:	697b      	ldr	r3, [r7, #20]
 800b9b8:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d108      	bne.n	800b9d8 <netif_add+0x150>
          netif->num++;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	b2da      	uxtb	r2, r3
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 800b9d6:	e005      	b.n	800b9e4 <netif_add+0x15c>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	617b      	str	r3, [r7, #20]
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1ca      	bne.n	800b97a <netif_add+0xf2>
        }
      }
    } while (netif2 != NULL);
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1b8      	bne.n	800b95c <netif_add+0xd4>
  }
  if (netif->num == 254) {
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b9f0:	2bfe      	cmp	r3, #254	@ 0xfe
 800b9f2:	d103      	bne.n	800b9fc <netif_add+0x174>
    netif_num = 0;
 800b9f4:	4b50      	ldr	r3, [pc, #320]	@ (800bb38 <netif_add+0x2b0>)
 800b9f6:	2200      	movs	r2, #0
 800b9f8:	701a      	strb	r2, [r3, #0]
 800b9fa:	e006      	b.n	800ba0a <netif_add+0x182>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ba02:	3301      	adds	r3, #1
 800ba04:	b2da      	uxtb	r2, r3
 800ba06:	4b4c      	ldr	r3, [pc, #304]	@ (800bb38 <netif_add+0x2b0>)
 800ba08:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800ba0a:	4b4c      	ldr	r3, [pc, #304]	@ (800bb3c <netif_add+0x2b4>)
 800ba0c:	681a      	ldr	r2, [r3, #0]
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800ba12:	4a4a      	ldr	r2, [pc, #296]	@ (800bb3c <netif_add+0x2b4>)
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	6013      	str	r3, [r2, #0]
  if (netif->flags & NETIF_FLAG_IGMP) {
    igmp_start(netif);
  }
#endif /* LWIP_IGMP */

  LWIP_DEBUGF(NETIF_DEBUG, ("netif: added interface %c%c IP",
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800ba1e:	4619      	mov	r1, r3
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800ba26:	461a      	mov	r2, r3
 800ba28:	4847      	ldr	r0, [pc, #284]	@ (800bb48 <netif_add+0x2c0>)
 800ba2a:	f00f fe7d 	bl	801b728 <iprintf>
 800ba2e:	2000      	movs	r0, #0
 800ba30:	f00f fda4 	bl	801b57c <fflush>
                            netif->name[0], netif->name[1]));
#if LWIP_IPV4
  LWIP_DEBUGF(NETIF_DEBUG, (" addr "));
 800ba34:	4845      	ldr	r0, [pc, #276]	@ (800bb4c <netif_add+0x2c4>)
 800ba36:	f00f fe77 	bl	801b728 <iprintf>
 800ba3a:	2000      	movs	r0, #0
 800ba3c:	f00f fd9e 	bl	801b57c <fflush>
  ip4_addr_debug_print(NETIF_DEBUG, ipaddr);
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <netif_add+0x1c6>
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	e000      	b.n	800ba50 <netif_add+0x1c8>
 800ba4e:	2100      	movs	r1, #0
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d004      	beq.n	800ba60 <netif_add+0x1d8>
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	781b      	ldrb	r3, [r3, #0]
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	e000      	b.n	800ba62 <netif_add+0x1da>
 800ba60:	2200      	movs	r2, #0
 800ba62:	68bb      	ldr	r3, [r7, #8]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d004      	beq.n	800ba72 <netif_add+0x1ea>
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	3302      	adds	r3, #2
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	e000      	b.n	800ba74 <netif_add+0x1ec>
 800ba72:	2000      	movs	r0, #0
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d003      	beq.n	800ba82 <netif_add+0x1fa>
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	3303      	adds	r3, #3
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	e000      	b.n	800ba84 <netif_add+0x1fc>
 800ba82:	2300      	movs	r3, #0
 800ba84:	9300      	str	r3, [sp, #0]
 800ba86:	4603      	mov	r3, r0
 800ba88:	4831      	ldr	r0, [pc, #196]	@ (800bb50 <netif_add+0x2c8>)
 800ba8a:	f00f fe4d 	bl	801b728 <iprintf>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	f00f fd74 	bl	801b57c <fflush>
  LWIP_DEBUGF(NETIF_DEBUG, (" netmask "));
 800ba94:	482f      	ldr	r0, [pc, #188]	@ (800bb54 <netif_add+0x2cc>)
 800ba96:	f00f fe47 	bl	801b728 <iprintf>
 800ba9a:	2000      	movs	r0, #0
 800ba9c:	f00f fd6e 	bl	801b57c <fflush>
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <netif_add+0x226>
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	4619      	mov	r1, r3
 800baac:	e000      	b.n	800bab0 <netif_add+0x228>
 800baae:	2100      	movs	r1, #0
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d004      	beq.n	800bac0 <netif_add+0x238>
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3301      	adds	r3, #1
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	461a      	mov	r2, r3
 800babe:	e000      	b.n	800bac2 <netif_add+0x23a>
 800bac0:	2200      	movs	r2, #0
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d004      	beq.n	800bad2 <netif_add+0x24a>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	3302      	adds	r3, #2
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	4618      	mov	r0, r3
 800bad0:	e000      	b.n	800bad4 <netif_add+0x24c>
 800bad2:	2000      	movs	r0, #0
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <netif_add+0x25a>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	3303      	adds	r3, #3
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	e000      	b.n	800bae4 <netif_add+0x25c>
 800bae2:	2300      	movs	r3, #0
 800bae4:	9300      	str	r3, [sp, #0]
 800bae6:	4603      	mov	r3, r0
 800bae8:	4819      	ldr	r0, [pc, #100]	@ (800bb50 <netif_add+0x2c8>)
 800baea:	f00f fe1d 	bl	801b728 <iprintf>
 800baee:	2000      	movs	r0, #0
 800baf0:	f00f fd44 	bl	801b57c <fflush>
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
 800baf4:	4818      	ldr	r0, [pc, #96]	@ (800bb58 <netif_add+0x2d0>)
 800baf6:	f00f fe17 	bl	801b728 <iprintf>
 800bafa:	2000      	movs	r0, #0
 800bafc:	f00f fd3e 	bl	801b57c <fflush>
  ip4_addr_debug_print(NETIF_DEBUG, gw);
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <netif_add+0x286>
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	e000      	b.n	800bb10 <netif_add+0x288>
 800bb0e:	2100      	movs	r1, #0
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d022      	beq.n	800bb5c <netif_add+0x2d4>
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	3301      	adds	r3, #1
 800bb1a:	781b      	ldrb	r3, [r3, #0]
 800bb1c:	461a      	mov	r2, r3
 800bb1e:	e01e      	b.n	800bb5e <netif_add+0x2d6>
 800bb20:	0801d8f4 	.word	0x0801d8f4
 800bb24:	0801d988 	.word	0x0801d988
 800bb28:	0801d944 	.word	0x0801d944
 800bb2c:	0801d9a4 	.word	0x0801d9a4
 800bb30:	08025270 	.word	0x08025270
 800bb34:	0800c0cf 	.word	0x0800c0cf
 800bb38:	20011d78 	.word	0x20011d78
 800bb3c:	20011d70 	.word	0x20011d70
 800bb40:	0801d9c8 	.word	0x0801d9c8
 800bb44:	0801d9dc 	.word	0x0801d9dc
 800bb48:	0801da0c 	.word	0x0801da0c
 800bb4c:	0801da2c 	.word	0x0801da2c
 800bb50:	0801da34 	.word	0x0801da34
 800bb54:	0801da44 	.word	0x0801da44
 800bb58:	0801da50 	.word	0x0801da50
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d004      	beq.n	800bb6e <netif_add+0x2e6>
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	3302      	adds	r3, #2
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	e000      	b.n	800bb70 <netif_add+0x2e8>
 800bb6e:	2000      	movs	r0, #0
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d003      	beq.n	800bb7e <netif_add+0x2f6>
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	3303      	adds	r3, #3
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	e000      	b.n	800bb80 <netif_add+0x2f8>
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9300      	str	r3, [sp, #0]
 800bb82:	4603      	mov	r3, r0
 800bb84:	4808      	ldr	r0, [pc, #32]	@ (800bba8 <netif_add+0x320>)
 800bb86:	f00f fdcf 	bl	801b728 <iprintf>
 800bb8a:	2000      	movs	r0, #0
 800bb8c:	f00f fcf6 	bl	801b57c <fflush>
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
 800bb90:	200a      	movs	r0, #10
 800bb92:	f00f fddb 	bl	801b74c <putchar>
 800bb96:	2000      	movs	r0, #0
 800bb98:	f00f fcf0 	bl	801b57c <fflush>

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3718      	adds	r7, #24
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	0801da34 	.word	0x0801da34

0800bbac <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b082      	sub	sp, #8
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f003 fa09 	bl	800efd0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800bbbe:	6839      	ldr	r1, [r7, #0]
 800bbc0:	6878      	ldr	r0, [r7, #4]
 800bbc2:	f009 fe4d 	bl	8015860 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800bbc6:	bf00      	nop
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
	...

0800bbd0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b086      	sub	sp, #24
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d109      	bne.n	800bbf6 <netif_do_set_ipaddr+0x26>
 800bbe2:	4b23      	ldr	r3, [pc, #140]	@ (800bc70 <netif_do_set_ipaddr+0xa0>)
 800bbe4:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800bbe8:	4922      	ldr	r1, [pc, #136]	@ (800bc74 <netif_do_set_ipaddr+0xa4>)
 800bbea:	4823      	ldr	r0, [pc, #140]	@ (800bc78 <netif_do_set_ipaddr+0xa8>)
 800bbec:	f00f fd9c 	bl	801b728 <iprintf>
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	f00f fcc3 	bl	801b57c <fflush>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d109      	bne.n	800bc10 <netif_do_set_ipaddr+0x40>
 800bbfc:	4b1c      	ldr	r3, [pc, #112]	@ (800bc70 <netif_do_set_ipaddr+0xa0>)
 800bbfe:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800bc02:	491c      	ldr	r1, [pc, #112]	@ (800bc74 <netif_do_set_ipaddr+0xa4>)
 800bc04:	481c      	ldr	r0, [pc, #112]	@ (800bc78 <netif_do_set_ipaddr+0xa8>)
 800bc06:	f00f fd8f 	bl	801b728 <iprintf>
 800bc0a:	2000      	movs	r0, #0
 800bc0c:	f00f fcb6 	bl	801b57c <fflush>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	681a      	ldr	r2, [r3, #0]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3304      	adds	r3, #4
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d022      	beq.n	800bc64 <netif_do_set_ipaddr+0x94>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	3304      	adds	r3, #4
 800bc28:	681a      	ldr	r2, [r3, #0]
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
 800bc2e:	4813      	ldr	r0, [pc, #76]	@ (800bc7c <netif_do_set_ipaddr+0xac>)
 800bc30:	f00f fdea 	bl	801b808 <puts>
 800bc34:	2000      	movs	r0, #0
 800bc36:	f00f fca1 	bl	801b57c <fflush>
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800bc3a:	f107 0314 	add.w	r3, r7, #20
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7ff ffb3 	bl	800bbac <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bc46:	68bb      	ldr	r3, [r7, #8]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <netif_do_set_ipaddr+0x82>
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	e000      	b.n	800bc54 <netif_do_set_ipaddr+0x84>
 800bc52:	2300      	movs	r3, #0
 800bc54:	68fa      	ldr	r2, [r7, #12]
 800bc56:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bc58:	2101      	movs	r1, #1
 800bc5a:	68f8      	ldr	r0, [r7, #12]
 800bc5c:	f000 f93e 	bl	800bedc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800bc60:	2301      	movs	r3, #1
 800bc62:	e000      	b.n	800bc66 <netif_do_set_ipaddr+0x96>
  }
  return 0; /* address unchanged */
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3718      	adds	r7, #24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd80      	pop	{r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	0801d8f4 	.word	0x0801d8f4
 800bc74:	0801da58 	.word	0x0801da58
 800bc78:	0801d944 	.word	0x0801d944
 800bc7c:	0801da68 	.word	0x0801da68

0800bc80 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800bc80:	b5b0      	push	{r4, r5, r7, lr}
 800bc82:	b088      	sub	sp, #32
 800bc84:	af04      	add	r7, sp, #16
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	3308      	adds	r3, #8
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d030      	beq.n	800bcfc <netif_do_set_netmask+0x7c>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d002      	beq.n	800bca6 <netif_do_set_netmask+0x26>
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	e000      	b.n	800bca8 <netif_do_set_netmask+0x28>
 800bca6:	2300      	movs	r3, #0
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	6093      	str	r3, [r2, #8]
    IP_SET_TYPE_VAL(netif->netmask, IPADDR_TYPE_V4);
    mib2_add_route_ip4(0, netif);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: netmask of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bcba:	461c      	mov	r4, r3
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	781b      	ldrb	r3, [r3, #0]
 800bcc2:	461d      	mov	r5, r3
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	3301      	adds	r3, #1
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	461a      	mov	r2, r3
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	3308      	adds	r3, #8
 800bcd2:	3302      	adds	r3, #2
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3308      	adds	r3, #8
 800bcdc:	3303      	adds	r3, #3
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	9302      	str	r3, [sp, #8]
 800bce2:	9101      	str	r1, [sp, #4]
 800bce4:	9200      	str	r2, [sp, #0]
 800bce6:	462b      	mov	r3, r5
 800bce8:	4622      	mov	r2, r4
 800bcea:	4601      	mov	r1, r0
 800bcec:	4806      	ldr	r0, [pc, #24]	@ (800bd08 <netif_do_set_netmask+0x88>)
 800bcee:	f00f fd1b 	bl	801b728 <iprintf>
 800bcf2:	2000      	movs	r0, #0
 800bcf4:	f00f fc42 	bl	801b57c <fflush>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	e000      	b.n	800bcfe <netif_do_set_netmask+0x7e>
  }
  return 0; /* netmask unchanged */
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bdb0      	pop	{r4, r5, r7, pc}
 800bd06:	bf00      	nop
 800bd08:	0801dab8 	.word	0x0801dab8

0800bd0c <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800bd0c:	b5b0      	push	{r4, r5, r7, lr}
 800bd0e:	b088      	sub	sp, #32
 800bd10:	af04      	add	r7, sp, #16
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	330c      	adds	r3, #12
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d030      	beq.n	800bd88 <netif_do_set_gw+0x7c>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <netif_do_set_gw+0x26>
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	e000      	b.n	800bd34 <netif_do_set_gw+0x28>
 800bd32:	2300      	movs	r3, #0
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	60d3      	str	r3, [r2, #12]
    IP_SET_TYPE_VAL(netif->gw, IPADDR_TYPE_V4);
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("netif: GW address of interface %c%c set to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800bd3e:	4618      	mov	r0, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800bd46:	461c      	mov	r4, r3
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	330c      	adds	r3, #12
 800bd4c:	781b      	ldrb	r3, [r3, #0]
 800bd4e:	461d      	mov	r5, r3
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	330c      	adds	r3, #12
 800bd54:	3301      	adds	r3, #1
 800bd56:	781b      	ldrb	r3, [r3, #0]
 800bd58:	461a      	mov	r2, r3
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	330c      	adds	r3, #12
 800bd5e:	3302      	adds	r3, #2
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	4619      	mov	r1, r3
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	330c      	adds	r3, #12
 800bd68:	3303      	adds	r3, #3
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	9302      	str	r3, [sp, #8]
 800bd6e:	9101      	str	r1, [sp, #4]
 800bd70:	9200      	str	r2, [sp, #0]
 800bd72:	462b      	mov	r3, r5
 800bd74:	4622      	mov	r2, r4
 800bd76:	4601      	mov	r1, r0
 800bd78:	4806      	ldr	r0, [pc, #24]	@ (800bd94 <netif_do_set_gw+0x88>)
 800bd7a:	f00f fcd5 	bl	801b728 <iprintf>
 800bd7e:	2000      	movs	r0, #0
 800bd80:	f00f fbfc 	bl	801b57c <fflush>
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800bd84:	2301      	movs	r3, #1
 800bd86:	e000      	b.n	800bd8a <netif_do_set_gw+0x7e>
  }
  return 0; /* gateway unchanged */
 800bd88:	2300      	movs	r3, #0
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3710      	adds	r7, #16
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bdb0      	pop	{r4, r5, r7, pc}
 800bd92:	bf00      	nop
 800bd94:	0801db18 	.word	0x0801db18

0800bd98 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b088      	sub	sp, #32
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	60f8      	str	r0, [r7, #12]
 800bda0:	60b9      	str	r1, [r7, #8]
 800bda2:	607a      	str	r2, [r7, #4]
 800bda4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800bda6:	2300      	movs	r3, #0
 800bda8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800bdb4:	4b1c      	ldr	r3, [pc, #112]	@ (800be28 <netif_set_addr+0x90>)
 800bdb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800bdbe:	4b1a      	ldr	r3, [pc, #104]	@ (800be28 <netif_set_addr+0x90>)
 800bdc0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d101      	bne.n	800bdcc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800bdc8:	4b17      	ldr	r3, [pc, #92]	@ (800be28 <netif_set_addr+0x90>)
 800bdca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <netif_set_addr+0x42>
 800bdd2:	68bb      	ldr	r3, [r7, #8]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d101      	bne.n	800bdde <netif_set_addr+0x46>
 800bdda:	2301      	movs	r3, #1
 800bddc:	e000      	b.n	800bde0 <netif_set_addr+0x48>
 800bdde:	2300      	movs	r3, #0
 800bde0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800bde2:	697b      	ldr	r3, [r7, #20]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d006      	beq.n	800bdf6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800bde8:	f107 0310 	add.w	r3, r7, #16
 800bdec:	461a      	mov	r2, r3
 800bdee:	68b9      	ldr	r1, [r7, #8]
 800bdf0:	68f8      	ldr	r0, [r7, #12]
 800bdf2:	f7ff feed 	bl	800bbd0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800bdf6:	69fa      	ldr	r2, [r7, #28]
 800bdf8:	6879      	ldr	r1, [r7, #4]
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f7ff ff40 	bl	800bc80 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7ff ff81 	bl	800bd0c <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d106      	bne.n	800be1e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800be10:	f107 0310 	add.w	r3, r7, #16
 800be14:	461a      	mov	r2, r3
 800be16:	68b9      	ldr	r1, [r7, #8]
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f7ff fed9 	bl	800bbd0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800be1e:	bf00      	nop
 800be20:	3720      	adds	r7, #32
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	08025270 	.word	0x08025270

0800be2c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800be34:	4a0f      	ldr	r2, [pc, #60]	@ (800be74 <netif_set_default+0x48>)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d004      	beq.n	800be4a <netif_set_default+0x1e>
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800be46:	4619      	mov	r1, r3
 800be48:	e000      	b.n	800be4c <netif_set_default+0x20>
 800be4a:	2127      	movs	r1, #39	@ 0x27
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d003      	beq.n	800be5a <netif_set_default+0x2e>
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 800be58:	e000      	b.n	800be5c <netif_set_default+0x30>
 800be5a:	2327      	movs	r3, #39	@ 0x27
 800be5c:	461a      	mov	r2, r3
 800be5e:	4806      	ldr	r0, [pc, #24]	@ (800be78 <netif_set_default+0x4c>)
 800be60:	f00f fc62 	bl	801b728 <iprintf>
 800be64:	2000      	movs	r0, #0
 800be66:	f00f fb89 	bl	801b57c <fflush>
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800be6a:	bf00      	nop
 800be6c:	3708      	adds	r7, #8
 800be6e:	46bd      	mov	sp, r7
 800be70:	bd80      	pop	{r7, pc}
 800be72:	bf00      	nop
 800be74:	20011d74 	.word	0x20011d74
 800be78:	0801db8c 	.word	0x0801db8c

0800be7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d10a      	bne.n	800bea0 <netif_set_up+0x24>
 800be8a:	4b11      	ldr	r3, [pc, #68]	@ (800bed0 <netif_set_up+0x54>)
 800be8c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800be90:	4910      	ldr	r1, [pc, #64]	@ (800bed4 <netif_set_up+0x58>)
 800be92:	4811      	ldr	r0, [pc, #68]	@ (800bed8 <netif_set_up+0x5c>)
 800be94:	f00f fc48 	bl	801b728 <iprintf>
 800be98:	2000      	movs	r0, #0
 800be9a:	f00f fb6f 	bl	801b57c <fflush>
 800be9e:	e013      	b.n	800bec8 <netif_set_up+0x4c>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10c      	bne.n	800bec8 <netif_set_up+0x4c>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800beb4:	f043 0301 	orr.w	r3, r3, #1
 800beb8:	b2da      	uxtb	r2, r3
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800bec0:	2103      	movs	r1, #3
 800bec2:	6878      	ldr	r0, [r7, #4]
 800bec4:	f000 f80a 	bl	800bedc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	0801d8f4 	.word	0x0801d8f4
 800bed4:	0801dbb4 	.word	0x0801dbb4
 800bed8:	0801d944 	.word	0x0801d944

0800bedc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d109      	bne.n	800bf02 <netif_issue_reports+0x26>
 800beee:	4b1a      	ldr	r3, [pc, #104]	@ (800bf58 <netif_issue_reports+0x7c>)
 800bef0:	f240 326d 	movw	r2, #877	@ 0x36d
 800bef4:	4919      	ldr	r1, [pc, #100]	@ (800bf5c <netif_issue_reports+0x80>)
 800bef6:	481a      	ldr	r0, [pc, #104]	@ (800bf60 <netif_issue_reports+0x84>)
 800bef8:	f00f fc16 	bl	801b728 <iprintf>
 800befc:	2000      	movs	r0, #0
 800befe:	f00f fb3d 	bl	801b57c <fflush>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bf08:	f003 0304 	and.w	r3, r3, #4
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01e      	beq.n	800bf4e <netif_issue_reports+0x72>
      !(netif->flags & NETIF_FLAG_UP)) {
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bf16:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d017      	beq.n	800bf4e <netif_issue_reports+0x72>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf1e:	78fb      	ldrb	r3, [r7, #3]
 800bf20:	f003 0301 	and.w	r3, r3, #1
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d013      	beq.n	800bf50 <netif_issue_reports+0x74>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	3304      	adds	r3, #4
 800bf2c:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00e      	beq.n	800bf50 <netif_issue_reports+0x74>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d007      	beq.n	800bf50 <netif_issue_reports+0x74>
      etharp_gratuitous(netif);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3304      	adds	r3, #4
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f00d f8ae 	bl	80190a8 <etharp_request>
 800bf4c:	e000      	b.n	800bf50 <netif_issue_reports+0x74>
    return;
 800bf4e:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800bf50:	3708      	adds	r7, #8
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	0801d8f4 	.word	0x0801d8f4
 800bf5c:	0801dbd0 	.word	0x0801dbd0
 800bf60:	0801d944 	.word	0x0801d944

0800bf64 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10a      	bne.n	800bf88 <netif_set_down+0x24>
 800bf72:	4b14      	ldr	r3, [pc, #80]	@ (800bfc4 <netif_set_down+0x60>)
 800bf74:	f240 329b 	movw	r2, #923	@ 0x39b
 800bf78:	4913      	ldr	r1, [pc, #76]	@ (800bfc8 <netif_set_down+0x64>)
 800bf7a:	4814      	ldr	r0, [pc, #80]	@ (800bfcc <netif_set_down+0x68>)
 800bf7c:	f00f fbd4 	bl	801b728 <iprintf>
 800bf80:	2000      	movs	r0, #0
 800bf82:	f00f fafb 	bl	801b57c <fflush>
 800bf86:	e019      	b.n	800bfbc <netif_set_down+0x58>

  if (netif->flags & NETIF_FLAG_UP) {
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d012      	beq.n	800bfbc <netif_set_down+0x58>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bf9c:	f023 0301 	bic.w	r3, r3, #1
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bfae:	f003 0308 	and.w	r3, r3, #8
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d002      	beq.n	800bfbc <netif_set_down+0x58>
      etharp_cleanup_netif(netif);
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f00c fb72 	bl	80186a0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bfbc:	3708      	adds	r7, #8
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	0801d8f4 	.word	0x0801d8f4
 800bfc8:	0801dbf4 	.word	0x0801dbf4
 800bfcc:	0801d944 	.word	0x0801d944

0800bfd0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d10a      	bne.n	800bff4 <netif_set_link_up+0x24>
 800bfde:	4b16      	ldr	r3, [pc, #88]	@ (800c038 <netif_set_link_up+0x68>)
 800bfe0:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800bfe4:	4915      	ldr	r1, [pc, #84]	@ (800c03c <netif_set_link_up+0x6c>)
 800bfe6:	4816      	ldr	r0, [pc, #88]	@ (800c040 <netif_set_link_up+0x70>)
 800bfe8:	f00f fb9e 	bl	801b728 <iprintf>
 800bfec:	2000      	movs	r0, #0
 800bfee:	f00f fac5 	bl	801b57c <fflush>
 800bff2:	e01e      	b.n	800c032 <netif_set_link_up+0x62>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800bffa:	f003 0304 	and.w	r3, r3, #4
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d117      	bne.n	800c032 <netif_set_link_up+0x62>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c008:	f043 0304 	orr.w	r3, r3, #4
 800c00c:	b2da      	uxtb	r2, r3
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f00a fa0d 	bl	8016434 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c01a:	2103      	movs	r1, #3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f7ff ff5d 	bl	800bedc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	69db      	ldr	r3, [r3, #28]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <netif_set_link_up+0x62>
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	69db      	ldr	r3, [r3, #28]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c032:	3708      	adds	r7, #8
 800c034:	46bd      	mov	sp, r7
 800c036:	bd80      	pop	{r7, pc}
 800c038:	0801d8f4 	.word	0x0801d8f4
 800c03c:	0801dc14 	.word	0x0801dc14
 800c040:	0801d944 	.word	0x0801d944

0800c044 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d10a      	bne.n	800c068 <netif_set_link_down+0x24>
 800c052:	4b13      	ldr	r3, [pc, #76]	@ (800c0a0 <netif_set_link_down+0x5c>)
 800c054:	f240 4206 	movw	r2, #1030	@ 0x406
 800c058:	4912      	ldr	r1, [pc, #72]	@ (800c0a4 <netif_set_link_down+0x60>)
 800c05a:	4813      	ldr	r0, [pc, #76]	@ (800c0a8 <netif_set_link_down+0x64>)
 800c05c:	f00f fb64 	bl	801b728 <iprintf>
 800c060:	2000      	movs	r0, #0
 800c062:	f00f fa8b 	bl	801b57c <fflush>
 800c066:	e017      	b.n	800c098 <netif_set_link_down+0x54>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c06e:	f003 0304 	and.w	r3, r3, #4
 800c072:	2b00      	cmp	r3, #0
 800c074:	d010      	beq.n	800c098 <netif_set_link_down+0x54>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c07c:	f023 0304 	bic.w	r3, r3, #4
 800c080:	b2da      	uxtb	r2, r3
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	69db      	ldr	r3, [r3, #28]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <netif_set_link_down+0x54>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	69db      	ldr	r3, [r3, #28]
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	0801d8f4 	.word	0x0801d8f4
 800c0a4:	0801dc38 	.word	0x0801dc38
 800c0a8:	0801d944 	.word	0x0801d944

0800c0ac <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d002      	beq.n	800c0c2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	683a      	ldr	r2, [r7, #0]
 800c0c0:	61da      	str	r2, [r3, #28]
  }
}
 800c0c2:	bf00      	nop
 800c0c4:	370c      	adds	r7, #12
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr

0800c0ce <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800c0ce:	b480      	push	{r7}
 800c0d0:	b085      	sub	sp, #20
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800c0da:	f06f 030b 	mvn.w	r3, #11
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr
	...

0800c0ec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800c0ec:	b480      	push	{r7}
 800c0ee:	b085      	sub	sp, #20
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800c0f6:	79fb      	ldrb	r3, [r7, #7]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d013      	beq.n	800c124 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <netif_get_by_index+0x48>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	60fb      	str	r3, [r7, #12]
 800c102:	e00c      	b.n	800c11e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800c10a:	3301      	adds	r3, #1
 800c10c:	b2db      	uxtb	r3, r3
 800c10e:	79fa      	ldrb	r2, [r7, #7]
 800c110:	429a      	cmp	r2, r3
 800c112:	d101      	bne.n	800c118 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	e006      	b.n	800c126 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	60fb      	str	r3, [r7, #12]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d1ef      	bne.n	800c104 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800c124:	2300      	movs	r3, #0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3714      	adds	r7, #20
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	20011d70 	.word	0x20011d70

0800c138 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800c13e:	f00f f915 	bl	801b36c <sys_arch_protect>
 800c142:	6038      	str	r0, [r7, #0]
 800c144:	4b10      	ldr	r3, [pc, #64]	@ (800c188 <pbuf_free_ooseq+0x50>)
 800c146:	2200      	movs	r2, #0
 800c148:	701a      	strb	r2, [r3, #0]
 800c14a:	6838      	ldr	r0, [r7, #0]
 800c14c:	f00f f91c 	bl	801b388 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c150:	4b0e      	ldr	r3, [pc, #56]	@ (800c18c <pbuf_free_ooseq+0x54>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	607b      	str	r3, [r7, #4]
 800c156:	e010      	b.n	800c17a <pbuf_free_ooseq+0x42>
    if (pcb->ooseq != NULL) {
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d009      	beq.n	800c174 <pbuf_free_ooseq+0x3c>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
 800c160:	480b      	ldr	r0, [pc, #44]	@ (800c190 <pbuf_free_ooseq+0x58>)
 800c162:	f00f fb51 	bl	801b808 <puts>
 800c166:	2000      	movs	r0, #0
 800c168:	f00f fa08 	bl	801b57c <fflush>
      tcp_free_ooseq(pcb);
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f002 ff7f 	bl	800f070 <tcp_free_ooseq>
      return;
 800c172:	e005      	b.n	800c180 <pbuf_free_ooseq+0x48>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	607b      	str	r3, [r7, #4]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1eb      	bne.n	800c158 <pbuf_free_ooseq+0x20>
    }
  }
}
 800c180:	3708      	adds	r7, #8
 800c182:	46bd      	mov	sp, r7
 800c184:	bd80      	pop	{r7, pc}
 800c186:	bf00      	nop
 800c188:	20011d79 	.word	0x20011d79
 800c18c:	20011d88 	.word	0x20011d88
 800c190:	0801dc94 	.word	0x0801dc94

0800c194 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b082      	sub	sp, #8
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800c19c:	f7ff ffcc 	bl	800c138 <pbuf_free_ooseq>
}
 800c1a0:	bf00      	nop
 800c1a2:	3708      	adds	r7, #8
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	bd80      	pop	{r7, pc}

0800c1a8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800c1ae:	f00f f8dd 	bl	801b36c <sys_arch_protect>
 800c1b2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800c1b4:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f4 <pbuf_pool_is_empty+0x4c>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800c1ba:	4b0e      	ldr	r3, [pc, #56]	@ (800c1f4 <pbuf_pool_is_empty+0x4c>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f00f f8e1 	bl	801b388 <sys_arch_unprotect>

  if (!queued) {
 800c1c6:	78fb      	ldrb	r3, [r7, #3]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d10f      	bne.n	800c1ec <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	480a      	ldr	r0, [pc, #40]	@ (800c1f8 <pbuf_pool_is_empty+0x50>)
 800c1d0:	f7fe fc5e 	bl	800aa90 <tcpip_try_callback>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d008      	beq.n	800c1ec <pbuf_pool_is_empty+0x44>
 800c1da:	f00f f8c7 	bl	801b36c <sys_arch_protect>
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	4b04      	ldr	r3, [pc, #16]	@ (800c1f4 <pbuf_pool_is_empty+0x4c>)
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	701a      	strb	r2, [r3, #0]
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f00f f8ce 	bl	801b388 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800c1ec:	bf00      	nop
 800c1ee:	3708      	adds	r7, #8
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	20011d79 	.word	0x20011d79
 800c1f8:	0800c195 	.word	0x0800c195

0800c1fc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	60f8      	str	r0, [r7, #12]
 800c204:	60b9      	str	r1, [r7, #8]
 800c206:	4611      	mov	r1, r2
 800c208:	461a      	mov	r2, r3
 800c20a:	460b      	mov	r3, r1
 800c20c:	80fb      	strh	r3, [r7, #6]
 800c20e:	4613      	mov	r3, r2
 800c210:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	68ba      	ldr	r2, [r7, #8]
 800c21c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	88fa      	ldrh	r2, [r7, #6]
 800c222:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	88ba      	ldrh	r2, [r7, #4]
 800c228:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800c22a:	8b3b      	ldrh	r3, [r7, #24]
 800c22c:	b2da      	uxtb	r2, r3
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	7f3a      	ldrb	r2, [r7, #28]
 800c236:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	2201      	movs	r2, #1
 800c23c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	2200      	movs	r2, #0
 800c242:	73da      	strb	r2, [r3, #15]
}
 800c244:	bf00      	nop
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr

0800c250 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b08c      	sub	sp, #48	@ 0x30
 800c254:	af02      	add	r7, sp, #8
 800c256:	4603      	mov	r3, r0
 800c258:	71fb      	strb	r3, [r7, #7]
 800c25a:	460b      	mov	r3, r1
 800c25c:	80bb      	strh	r3, [r7, #4]
 800c25e:	4613      	mov	r3, r2
 800c260:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800c262:	79fb      	ldrb	r3, [r7, #7]
 800c264:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));
 800c266:	88bb      	ldrh	r3, [r7, #4]
 800c268:	4619      	mov	r1, r3
 800c26a:	487d      	ldr	r0, [pc, #500]	@ (800c460 <pbuf_alloc+0x210>)
 800c26c:	f00f fa5c 	bl	801b728 <iprintf>
 800c270:	2000      	movs	r0, #0
 800c272:	f00f f983 	bl	801b57c <fflush>

  switch (type) {
 800c276:	887b      	ldrh	r3, [r7, #2]
 800c278:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c27c:	f000 8086 	beq.w	800c38c <pbuf_alloc+0x13c>
 800c280:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800c284:	f300 80d1 	bgt.w	800c42a <pbuf_alloc+0x1da>
 800c288:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c28c:	d010      	beq.n	800c2b0 <pbuf_alloc+0x60>
 800c28e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800c292:	f300 80ca 	bgt.w	800c42a <pbuf_alloc+0x1da>
 800c296:	2b01      	cmp	r3, #1
 800c298:	d002      	beq.n	800c2a0 <pbuf_alloc+0x50>
 800c29a:	2b41      	cmp	r3, #65	@ 0x41
 800c29c:	f040 80c5 	bne.w	800c42a <pbuf_alloc+0x1da>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800c2a0:	887a      	ldrh	r2, [r7, #2]
 800c2a2:	88bb      	ldrh	r3, [r7, #4]
 800c2a4:	4619      	mov	r1, r3
 800c2a6:	2000      	movs	r0, #0
 800c2a8:	f000 f8ea 	bl	800c480 <pbuf_alloc_reference>
 800c2ac:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800c2ae:	e0c9      	b.n	800c444 <pbuf_alloc+0x1f4>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800c2b8:	88bb      	ldrh	r3, [r7, #4]
 800c2ba:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800c2bc:	200c      	movs	r0, #12
 800c2be:	f7ff fa2d 	bl	800b71c <memp_malloc>
 800c2c2:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d109      	bne.n	800c2de <pbuf_alloc+0x8e>
          PBUF_POOL_IS_EMPTY();
 800c2ca:	f7ff ff6d 	bl	800c1a8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d002      	beq.n	800c2da <pbuf_alloc+0x8a>
            pbuf_free(p);
 800c2d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c2d6:	f000 fb21 	bl	800c91c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	e0bc      	b.n	800c458 <pbuf_alloc+0x208>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800c2de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2e0:	3303      	adds	r3, #3
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	f023 0303 	bic.w	r3, r3, #3
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800c2ee:	b29b      	uxth	r3, r3
 800c2f0:	8b7a      	ldrh	r2, [r7, #26]
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	bf28      	it	cs
 800c2f6:	4613      	movcs	r3, r2
 800c2f8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800c2fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c2fc:	3310      	adds	r3, #16
 800c2fe:	693a      	ldr	r2, [r7, #16]
 800c300:	4413      	add	r3, r2
 800c302:	3303      	adds	r3, #3
 800c304:	f023 0303 	bic.w	r3, r3, #3
 800c308:	4618      	mov	r0, r3
 800c30a:	89f9      	ldrh	r1, [r7, #14]
 800c30c:	8b7a      	ldrh	r2, [r7, #26]
 800c30e:	2300      	movs	r3, #0
 800c310:	9301      	str	r3, [sp, #4]
 800c312:	887b      	ldrh	r3, [r7, #2]
 800c314:	9300      	str	r3, [sp, #0]
 800c316:	460b      	mov	r3, r1
 800c318:	4601      	mov	r1, r0
 800c31a:	6938      	ldr	r0, [r7, #16]
 800c31c:	f7ff ff6e 	bl	800c1fc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	f003 0303 	and.w	r3, r3, #3
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d009      	beq.n	800c340 <pbuf_alloc+0xf0>
 800c32c:	4b4d      	ldr	r3, [pc, #308]	@ (800c464 <pbuf_alloc+0x214>)
 800c32e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c332:	494d      	ldr	r1, [pc, #308]	@ (800c468 <pbuf_alloc+0x218>)
 800c334:	484d      	ldr	r0, [pc, #308]	@ (800c46c <pbuf_alloc+0x21c>)
 800c336:	f00f f9f7 	bl	801b728 <iprintf>
 800c33a:	2000      	movs	r0, #0
 800c33c:	f00f f91e 	bl	801b57c <fflush>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800c340:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c342:	3303      	adds	r3, #3
 800c344:	f023 0303 	bic.w	r3, r3, #3
 800c348:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800c34c:	d109      	bne.n	800c362 <pbuf_alloc+0x112>
 800c34e:	4b45      	ldr	r3, [pc, #276]	@ (800c464 <pbuf_alloc+0x214>)
 800c350:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800c354:	4946      	ldr	r1, [pc, #280]	@ (800c470 <pbuf_alloc+0x220>)
 800c356:	4845      	ldr	r0, [pc, #276]	@ (800c46c <pbuf_alloc+0x21c>)
 800c358:	f00f f9e6 	bl	801b728 <iprintf>
 800c35c:	2000      	movs	r0, #0
 800c35e:	f00f f90d 	bl	801b57c <fflush>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800c362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c364:	2b00      	cmp	r3, #0
 800c366:	d102      	bne.n	800c36e <pbuf_alloc+0x11e>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c36c:	e002      	b.n	800c374 <pbuf_alloc+0x124>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	693a      	ldr	r2, [r7, #16]
 800c372:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800c378:	8b7a      	ldrh	r2, [r7, #26]
 800c37a:	89fb      	ldrh	r3, [r7, #14]
 800c37c:	1ad3      	subs	r3, r2, r3
 800c37e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800c384:	8b7b      	ldrh	r3, [r7, #26]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d198      	bne.n	800c2bc <pbuf_alloc+0x6c>
      break;
 800c38a:	e05b      	b.n	800c444 <pbuf_alloc+0x1f4>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800c38c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c38e:	3303      	adds	r3, #3
 800c390:	b29b      	uxth	r3, r3
 800c392:	f023 0303 	bic.w	r3, r3, #3
 800c396:	b29a      	uxth	r2, r3
 800c398:	88bb      	ldrh	r3, [r7, #4]
 800c39a:	3303      	adds	r3, #3
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	f023 0303 	bic.w	r3, r3, #3
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	4413      	add	r3, r2
 800c3a6:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800c3a8:	8b3b      	ldrh	r3, [r7, #24]
 800c3aa:	3310      	adds	r3, #16
 800c3ac:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c3ae:	8b3a      	ldrh	r2, [r7, #24]
 800c3b0:	88bb      	ldrh	r3, [r7, #4]
 800c3b2:	3303      	adds	r3, #3
 800c3b4:	f023 0303 	bic.w	r3, r3, #3
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d306      	bcc.n	800c3ca <pbuf_alloc+0x17a>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800c3bc:	8afa      	ldrh	r2, [r7, #22]
 800c3be:	88bb      	ldrh	r3, [r7, #4]
 800c3c0:	3303      	adds	r3, #3
 800c3c2:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d201      	bcs.n	800c3ce <pbuf_alloc+0x17e>
        return NULL;
 800c3ca:	2300      	movs	r3, #0
 800c3cc:	e044      	b.n	800c458 <pbuf_alloc+0x208>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800c3ce:	8afb      	ldrh	r3, [r7, #22]
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7fe ffd5 	bl	800b380 <mem_malloc>
 800c3d6:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800c3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d101      	bne.n	800c3e2 <pbuf_alloc+0x192>
        return NULL;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e03a      	b.n	800c458 <pbuf_alloc+0x208>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800c3e2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c3e4:	3310      	adds	r3, #16
 800c3e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c3e8:	4413      	add	r3, r2
 800c3ea:	3303      	adds	r3, #3
 800c3ec:	f023 0303 	bic.w	r3, r3, #3
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	88b9      	ldrh	r1, [r7, #4]
 800c3f4:	88ba      	ldrh	r2, [r7, #4]
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	9301      	str	r3, [sp, #4]
 800c3fa:	887b      	ldrh	r3, [r7, #2]
 800c3fc:	9300      	str	r3, [sp, #0]
 800c3fe:	460b      	mov	r3, r1
 800c400:	4601      	mov	r1, r0
 800c402:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c404:	f7ff fefa 	bl	800c1fc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40a:	685b      	ldr	r3, [r3, #4]
 800c40c:	f003 0303 	and.w	r3, r3, #3
 800c410:	2b00      	cmp	r3, #0
 800c412:	d016      	beq.n	800c442 <pbuf_alloc+0x1f2>
 800c414:	4b13      	ldr	r3, [pc, #76]	@ (800c464 <pbuf_alloc+0x214>)
 800c416:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800c41a:	4916      	ldr	r1, [pc, #88]	@ (800c474 <pbuf_alloc+0x224>)
 800c41c:	4813      	ldr	r0, [pc, #76]	@ (800c46c <pbuf_alloc+0x21c>)
 800c41e:	f00f f983 	bl	801b728 <iprintf>
 800c422:	2000      	movs	r0, #0
 800c424:	f00f f8aa 	bl	801b57c <fflush>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800c428:	e00b      	b.n	800c442 <pbuf_alloc+0x1f2>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c42a:	4b0e      	ldr	r3, [pc, #56]	@ (800c464 <pbuf_alloc+0x214>)
 800c42c:	f240 1227 	movw	r2, #295	@ 0x127
 800c430:	4911      	ldr	r1, [pc, #68]	@ (800c478 <pbuf_alloc+0x228>)
 800c432:	480e      	ldr	r0, [pc, #56]	@ (800c46c <pbuf_alloc+0x21c>)
 800c434:	f00f f978 	bl	801b728 <iprintf>
 800c438:	2000      	movs	r0, #0
 800c43a:	f00f f89f 	bl	801b57c <fflush>
      return NULL;
 800c43e:	2300      	movs	r3, #0
 800c440:	e00a      	b.n	800c458 <pbuf_alloc+0x208>
      break;
 800c442:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
 800c444:	88bb      	ldrh	r3, [r7, #4]
 800c446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c448:	4619      	mov	r1, r3
 800c44a:	480c      	ldr	r0, [pc, #48]	@ (800c47c <pbuf_alloc+0x22c>)
 800c44c:	f00f f96c 	bl	801b728 <iprintf>
 800c450:	2000      	movs	r0, #0
 800c452:	f00f f893 	bl	801b57c <fflush>
  return p;
 800c456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3728      	adds	r7, #40	@ 0x28
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}
 800c460:	0801dcc4 	.word	0x0801dcc4
 800c464:	0801dcdc 	.word	0x0801dcdc
 800c468:	0801dd0c 	.word	0x0801dd0c
 800c46c:	0801dd3c 	.word	0x0801dd3c
 800c470:	0801dd64 	.word	0x0801dd64
 800c474:	0801dd98 	.word	0x0801dd98
 800c478:	0801ddc4 	.word	0x0801ddc4
 800c47c:	0801dde0 	.word	0x0801dde0

0800c480 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800c480:	b580      	push	{r7, lr}
 800c482:	b086      	sub	sp, #24
 800c484:	af02      	add	r7, sp, #8
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	460b      	mov	r3, r1
 800c48a:	807b      	strh	r3, [r7, #2]
 800c48c:	4613      	mov	r3, r2
 800c48e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800c490:	883b      	ldrh	r3, [r7, #0]
 800c492:	2b41      	cmp	r3, #65	@ 0x41
 800c494:	d00c      	beq.n	800c4b0 <pbuf_alloc_reference+0x30>
 800c496:	883b      	ldrh	r3, [r7, #0]
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d009      	beq.n	800c4b0 <pbuf_alloc_reference+0x30>
 800c49c:	4b17      	ldr	r3, [pc, #92]	@ (800c4fc <pbuf_alloc_reference+0x7c>)
 800c49e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800c4a2:	4917      	ldr	r1, [pc, #92]	@ (800c500 <pbuf_alloc_reference+0x80>)
 800c4a4:	4817      	ldr	r0, [pc, #92]	@ (800c504 <pbuf_alloc_reference+0x84>)
 800c4a6:	f00f f93f 	bl	801b728 <iprintf>
 800c4aa:	2000      	movs	r0, #0
 800c4ac:	f00f f866 	bl	801b57c <fflush>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c4b0:	200b      	movs	r0, #11
 800c4b2:	f7ff f933 	bl	800b71c <memp_malloc>
 800c4b6:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10e      	bne.n	800c4dc <pbuf_alloc_reference+0x5c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800c4be:	883b      	ldrh	r3, [r7, #0]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d101      	bne.n	800c4c8 <pbuf_alloc_reference+0x48>
 800c4c4:	4b10      	ldr	r3, [pc, #64]	@ (800c508 <pbuf_alloc_reference+0x88>)
 800c4c6:	e000      	b.n	800c4ca <pbuf_alloc_reference+0x4a>
 800c4c8:	4b10      	ldr	r3, [pc, #64]	@ (800c50c <pbuf_alloc_reference+0x8c>)
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	4810      	ldr	r0, [pc, #64]	@ (800c510 <pbuf_alloc_reference+0x90>)
 800c4ce:	f00f f92b 	bl	801b728 <iprintf>
 800c4d2:	2000      	movs	r0, #0
 800c4d4:	f00f f852 	bl	801b57c <fflush>
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	e00b      	b.n	800c4f4 <pbuf_alloc_reference+0x74>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c4dc:	8879      	ldrh	r1, [r7, #2]
 800c4de:	887a      	ldrh	r2, [r7, #2]
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	883b      	ldrh	r3, [r7, #0]
 800c4e6:	9300      	str	r3, [sp, #0]
 800c4e8:	460b      	mov	r3, r1
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f7ff fe85 	bl	800c1fc <pbuf_init_alloced_pbuf>
  return p;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	0801dcdc 	.word	0x0801dcdc
 800c500:	0801de00 	.word	0x0801de00
 800c504:	0801dd3c 	.word	0x0801dd3c
 800c508:	0801de14 	.word	0x0801de14
 800c50c:	0801de18 	.word	0x0801de18
 800c510:	0801de1c 	.word	0x0801de1c

0800c514 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b088      	sub	sp, #32
 800c518:	af02      	add	r7, sp, #8
 800c51a:	607b      	str	r3, [r7, #4]
 800c51c:	4603      	mov	r3, r0
 800c51e:	73fb      	strb	r3, [r7, #15]
 800c520:	460b      	mov	r3, r1
 800c522:	81bb      	strh	r3, [r7, #12]
 800c524:	4613      	mov	r3, r2
 800c526:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c528:	7bfb      	ldrb	r3, [r7, #15]
 800c52a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));
 800c52c:	89bb      	ldrh	r3, [r7, #12]
 800c52e:	4619      	mov	r1, r3
 800c530:	481a      	ldr	r0, [pc, #104]	@ (800c59c <pbuf_alloced_custom+0x88>)
 800c532:	f00f f8f9 	bl	801b728 <iprintf>
 800c536:	2000      	movs	r0, #0
 800c538:	f00f f820 	bl	801b57c <fflush>

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c53c:	8a7b      	ldrh	r3, [r7, #18]
 800c53e:	3303      	adds	r3, #3
 800c540:	f023 0203 	bic.w	r2, r3, #3
 800c544:	89bb      	ldrh	r3, [r7, #12]
 800c546:	441a      	add	r2, r3
 800c548:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c54a:	429a      	cmp	r2, r3
 800c54c:	d909      	bls.n	800c562 <pbuf_alloced_custom+0x4e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
 800c54e:	89bb      	ldrh	r3, [r7, #12]
 800c550:	4619      	mov	r1, r3
 800c552:	4813      	ldr	r0, [pc, #76]	@ (800c5a0 <pbuf_alloced_custom+0x8c>)
 800c554:	f00f f8e8 	bl	801b728 <iprintf>
 800c558:	2000      	movs	r0, #0
 800c55a:	f00f f80f 	bl	801b57c <fflush>
    return NULL;
 800c55e:	2300      	movs	r3, #0
 800c560:	e018      	b.n	800c594 <pbuf_alloced_custom+0x80>
  }

  if (payload_mem != NULL) {
 800c562:	6a3b      	ldr	r3, [r7, #32]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d007      	beq.n	800c578 <pbuf_alloced_custom+0x64>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c568:	8a7b      	ldrh	r3, [r7, #18]
 800c56a:	3303      	adds	r3, #3
 800c56c:	f023 0303 	bic.w	r3, r3, #3
 800c570:	6a3a      	ldr	r2, [r7, #32]
 800c572:	4413      	add	r3, r2
 800c574:	617b      	str	r3, [r7, #20]
 800c576:	e001      	b.n	800c57c <pbuf_alloced_custom+0x68>
  } else {
    payload = NULL;
 800c578:	2300      	movs	r3, #0
 800c57a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	89b9      	ldrh	r1, [r7, #12]
 800c580:	89ba      	ldrh	r2, [r7, #12]
 800c582:	2302      	movs	r3, #2
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	897b      	ldrh	r3, [r7, #10]
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	460b      	mov	r3, r1
 800c58c:	6979      	ldr	r1, [r7, #20]
 800c58e:	f7ff fe35 	bl	800c1fc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c592:	687b      	ldr	r3, [r7, #4]
}
 800c594:	4618      	mov	r0, r3
 800c596:	3718      	adds	r7, #24
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	0801de60 	.word	0x0801de60
 800c5a0:	0801de84 	.word	0x0801de84

0800c5a4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	460b      	mov	r3, r1
 800c5ae:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d109      	bne.n	800c5ca <pbuf_realloc+0x26>
 800c5b6:	4b3e      	ldr	r3, [pc, #248]	@ (800c6b0 <pbuf_realloc+0x10c>)
 800c5b8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800c5bc:	493d      	ldr	r1, [pc, #244]	@ (800c6b4 <pbuf_realloc+0x110>)
 800c5be:	483e      	ldr	r0, [pc, #248]	@ (800c6b8 <pbuf_realloc+0x114>)
 800c5c0:	f00f f8b2 	bl	801b728 <iprintf>
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f00e ffd9 	bl	801b57c <fflush>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	891b      	ldrh	r3, [r3, #8]
 800c5ce:	887a      	ldrh	r2, [r7, #2]
 800c5d0:	429a      	cmp	r2, r3
 800c5d2:	d269      	bcs.n	800c6a8 <pbuf_realloc+0x104>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	891a      	ldrh	r2, [r3, #8]
 800c5d8:	887b      	ldrh	r3, [r7, #2]
 800c5da:	1ad3      	subs	r3, r2, r3
 800c5dc:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c5de:	887b      	ldrh	r3, [r7, #2]
 800c5e0:	817b      	strh	r3, [r7, #10]
  q = p;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c5e6:	e01b      	b.n	800c620 <pbuf_realloc+0x7c>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	895b      	ldrh	r3, [r3, #10]
 800c5ec:	897a      	ldrh	r2, [r7, #10]
 800c5ee:	1ad3      	subs	r3, r2, r3
 800c5f0:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	891a      	ldrh	r2, [r3, #8]
 800c5f6:	893b      	ldrh	r3, [r7, #8]
 800c5f8:	1ad3      	subs	r3, r2, r3
 800c5fa:	b29a      	uxth	r2, r3
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d109      	bne.n	800c620 <pbuf_realloc+0x7c>
 800c60c:	4b28      	ldr	r3, [pc, #160]	@ (800c6b0 <pbuf_realloc+0x10c>)
 800c60e:	f240 12af 	movw	r2, #431	@ 0x1af
 800c612:	492a      	ldr	r1, [pc, #168]	@ (800c6bc <pbuf_realloc+0x118>)
 800c614:	4828      	ldr	r0, [pc, #160]	@ (800c6b8 <pbuf_realloc+0x114>)
 800c616:	f00f f887 	bl	801b728 <iprintf>
 800c61a:	2000      	movs	r0, #0
 800c61c:	f00e ffae 	bl	801b57c <fflush>
  while (rem_len > q->len) {
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	895b      	ldrh	r3, [r3, #10]
 800c624:	897a      	ldrh	r2, [r7, #10]
 800c626:	429a      	cmp	r2, r3
 800c628:	d8de      	bhi.n	800c5e8 <pbuf_realloc+0x44>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	7b1b      	ldrb	r3, [r3, #12]
 800c62e:	f003 030f 	and.w	r3, r3, #15
 800c632:	2b00      	cmp	r3, #0
 800c634:	d124      	bne.n	800c680 <pbuf_realloc+0xdc>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	895b      	ldrh	r3, [r3, #10]
 800c63a:	897a      	ldrh	r2, [r7, #10]
 800c63c:	429a      	cmp	r2, r3
 800c63e:	d01f      	beq.n	800c680 <pbuf_realloc+0xdc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	7b5b      	ldrb	r3, [r3, #13]
 800c644:	f003 0302 	and.w	r3, r3, #2
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d119      	bne.n	800c680 <pbuf_realloc+0xdc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	685a      	ldr	r2, [r3, #4]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	1ad3      	subs	r3, r2, r3
 800c654:	b29a      	uxth	r2, r3
 800c656:	897b      	ldrh	r3, [r7, #10]
 800c658:	4413      	add	r3, r2
 800c65a:	b29b      	uxth	r3, r3
 800c65c:	4619      	mov	r1, r3
 800c65e:	68f8      	ldr	r0, [r7, #12]
 800c660:	f7fe fd70 	bl	800b144 <mem_trim>
 800c664:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d109      	bne.n	800c680 <pbuf_realloc+0xdc>
 800c66c:	4b10      	ldr	r3, [pc, #64]	@ (800c6b0 <pbuf_realloc+0x10c>)
 800c66e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800c672:	4913      	ldr	r1, [pc, #76]	@ (800c6c0 <pbuf_realloc+0x11c>)
 800c674:	4810      	ldr	r0, [pc, #64]	@ (800c6b8 <pbuf_realloc+0x114>)
 800c676:	f00f f857 	bl	801b728 <iprintf>
 800c67a:	2000      	movs	r0, #0
 800c67c:	f00e ff7e 	bl	801b57c <fflush>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	897a      	ldrh	r2, [r7, #10]
 800c684:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	895a      	ldrh	r2, [r3, #10]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d004      	beq.n	800c6a0 <pbuf_realloc+0xfc>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 f93e 	bl	800c91c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	601a      	str	r2, [r3, #0]
 800c6a6:	e000      	b.n	800c6aa <pbuf_realloc+0x106>
    return;
 800c6a8:	bf00      	nop

}
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	0801dcdc 	.word	0x0801dcdc
 800c6b4:	0801deb8 	.word	0x0801deb8
 800c6b8:	0801dd3c 	.word	0x0801dd3c
 800c6bc:	0801ded0 	.word	0x0801ded0
 800c6c0:	0801dee8 	.word	0x0801dee8

0800c6c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b086      	sub	sp, #24
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	60f8      	str	r0, [r7, #12]
 800c6cc:	60b9      	str	r1, [r7, #8]
 800c6ce:	4613      	mov	r3, r2
 800c6d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d109      	bne.n	800c6ec <pbuf_add_header_impl+0x28>
 800c6d8:	4b37      	ldr	r3, [pc, #220]	@ (800c7b8 <pbuf_add_header_impl+0xf4>)
 800c6da:	f240 12df 	movw	r2, #479	@ 0x1df
 800c6de:	4937      	ldr	r1, [pc, #220]	@ (800c7bc <pbuf_add_header_impl+0xf8>)
 800c6e0:	4837      	ldr	r0, [pc, #220]	@ (800c7c0 <pbuf_add_header_impl+0xfc>)
 800c6e2:	f00f f821 	bl	801b728 <iprintf>
 800c6e6:	2000      	movs	r0, #0
 800c6e8:	f00e ff48 	bl	801b57c <fflush>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d003      	beq.n	800c6fa <pbuf_add_header_impl+0x36>
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c6f8:	d301      	bcc.n	800c6fe <pbuf_add_header_impl+0x3a>
    return 1;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	e057      	b.n	800c7ae <pbuf_add_header_impl+0xea>
  }
  if (header_size_increment == 0) {
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d101      	bne.n	800c708 <pbuf_add_header_impl+0x44>
    return 0;
 800c704:	2300      	movs	r3, #0
 800c706:	e052      	b.n	800c7ae <pbuf_add_header_impl+0xea>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	891a      	ldrh	r2, [r3, #8]
 800c710:	8a7b      	ldrh	r3, [r7, #18]
 800c712:	4413      	add	r3, r2
 800c714:	b29b      	uxth	r3, r3
 800c716:	8a7a      	ldrh	r2, [r7, #18]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d901      	bls.n	800c720 <pbuf_add_header_impl+0x5c>
    return 1;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e046      	b.n	800c7ae <pbuf_add_header_impl+0xea>
  }

  type_internal = p->type_internal;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	7b1b      	ldrb	r3, [r3, #12]
 800c724:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c726:	8a3b      	ldrh	r3, [r7, #16]
 800c728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d016      	beq.n	800c75e <pbuf_add_header_impl+0x9a>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	685a      	ldr	r2, [r3, #4]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	425b      	negs	r3, r3
 800c738:	4413      	add	r3, r2
 800c73a:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	3310      	adds	r3, #16
 800c740:	697a      	ldr	r2, [r7, #20]
 800c742:	429a      	cmp	r2, r3
 800c744:	d217      	bcs.n	800c776 <pbuf_add_header_impl+0xb2>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	3310      	adds	r3, #16
 800c74a:	461a      	mov	r2, r3
 800c74c:	6979      	ldr	r1, [r7, #20]
 800c74e:	481d      	ldr	r0, [pc, #116]	@ (800c7c4 <pbuf_add_header_impl+0x100>)
 800c750:	f00e ffea 	bl	801b728 <iprintf>
 800c754:	2000      	movs	r0, #0
 800c756:	f00e ff11 	bl	801b57c <fflush>
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c75a:	2301      	movs	r3, #1
 800c75c:	e027      	b.n	800c7ae <pbuf_add_header_impl+0xea>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c75e:	79fb      	ldrb	r3, [r7, #7]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d006      	beq.n	800c772 <pbuf_add_header_impl+0xae>
      payload = (u8_t *)p->payload - header_size_increment;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	685a      	ldr	r2, [r3, #4]
 800c768:	68bb      	ldr	r3, [r7, #8]
 800c76a:	425b      	negs	r3, r3
 800c76c:	4413      	add	r3, r2
 800c76e:	617b      	str	r3, [r7, #20]
 800c770:	e001      	b.n	800c776 <pbuf_add_header_impl+0xb2>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c772:	2301      	movs	r3, #1
 800c774:	e01b      	b.n	800c7ae <pbuf_add_header_impl+0xea>
    }
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	6859      	ldr	r1, [r3, #4]
 800c77a:	8a7b      	ldrh	r3, [r7, #18]
 800c77c:	697a      	ldr	r2, [r7, #20]
 800c77e:	4812      	ldr	r0, [pc, #72]	@ (800c7c8 <pbuf_add_header_impl+0x104>)
 800c780:	f00e ffd2 	bl	801b728 <iprintf>
 800c784:	2000      	movs	r0, #0
 800c786:	f00e fef9 	bl	801b57c <fflush>
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	697a      	ldr	r2, [r7, #20]
 800c78e:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	895a      	ldrh	r2, [r3, #10]
 800c794:	8a7b      	ldrh	r3, [r7, #18]
 800c796:	4413      	add	r3, r2
 800c798:	b29a      	uxth	r2, r3
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	891a      	ldrh	r2, [r3, #8]
 800c7a2:	8a7b      	ldrh	r3, [r7, #18]
 800c7a4:	4413      	add	r3, r2
 800c7a6:	b29a      	uxth	r2, r3
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	811a      	strh	r2, [r3, #8]


  return 0;
 800c7ac:	2300      	movs	r3, #0
}
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	3718      	adds	r7, #24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	0801dcdc 	.word	0x0801dcdc
 800c7bc:	0801df04 	.word	0x0801df04
 800c7c0:	0801dd3c 	.word	0x0801dd3c
 800c7c4:	0801df10 	.word	0x0801df10
 800c7c8:	0801df5c 	.word	0x0801df5c

0800c7cc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b082      	sub	sp, #8
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	6839      	ldr	r1, [r7, #0]
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f7ff ff72 	bl	800c6c4 <pbuf_add_header_impl>
 800c7e0:	4603      	mov	r3, r0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	3708      	adds	r7, #8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
	...

0800c7ec <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d109      	bne.n	800c810 <pbuf_remove_header+0x24>
 800c7fc:	4b28      	ldr	r3, [pc, #160]	@ (800c8a0 <pbuf_remove_header+0xb4>)
 800c7fe:	f240 224b 	movw	r2, #587	@ 0x24b
 800c802:	4928      	ldr	r1, [pc, #160]	@ (800c8a4 <pbuf_remove_header+0xb8>)
 800c804:	4828      	ldr	r0, [pc, #160]	@ (800c8a8 <pbuf_remove_header+0xbc>)
 800c806:	f00e ff8f 	bl	801b728 <iprintf>
 800c80a:	2000      	movs	r0, #0
 800c80c:	f00e feb6 	bl	801b57c <fflush>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d003      	beq.n	800c81e <pbuf_remove_header+0x32>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c81c:	d301      	bcc.n	800c822 <pbuf_remove_header+0x36>
    return 1;
 800c81e:	2301      	movs	r3, #1
 800c820:	e039      	b.n	800c896 <pbuf_remove_header+0xaa>
  }
  if (header_size_decrement == 0) {
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d101      	bne.n	800c82c <pbuf_remove_header+0x40>
    return 0;
 800c828:	2300      	movs	r3, #0
 800c82a:	e034      	b.n	800c896 <pbuf_remove_header+0xaa>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	895b      	ldrh	r3, [r3, #10]
 800c834:	89fa      	ldrh	r2, [r7, #14]
 800c836:	429a      	cmp	r2, r3
 800c838:	d90b      	bls.n	800c852 <pbuf_remove_header+0x66>
 800c83a:	4b19      	ldr	r3, [pc, #100]	@ (800c8a0 <pbuf_remove_header+0xb4>)
 800c83c:	f240 2255 	movw	r2, #597	@ 0x255
 800c840:	491a      	ldr	r1, [pc, #104]	@ (800c8ac <pbuf_remove_header+0xc0>)
 800c842:	4819      	ldr	r0, [pc, #100]	@ (800c8a8 <pbuf_remove_header+0xbc>)
 800c844:	f00e ff70 	bl	801b728 <iprintf>
 800c848:	2000      	movs	r0, #0
 800c84a:	f00e fe97 	bl	801b57c <fflush>
 800c84e:	2301      	movs	r3, #1
 800c850:	e021      	b.n	800c896 <pbuf_remove_header+0xaa>

  /* remember current payload pointer */
  payload = p->payload;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	441a      	add	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	895a      	ldrh	r2, [r3, #10]
 800c868:	89fb      	ldrh	r3, [r7, #14]
 800c86a:	1ad3      	subs	r3, r2, r3
 800c86c:	b29a      	uxth	r2, r3
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	891a      	ldrh	r2, [r3, #8]
 800c876:	89fb      	ldrh	r3, [r7, #14]
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	b29a      	uxth	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	685a      	ldr	r2, [r3, #4]
 800c884:	89fb      	ldrh	r3, [r7, #14]
 800c886:	68b9      	ldr	r1, [r7, #8]
 800c888:	4809      	ldr	r0, [pc, #36]	@ (800c8b0 <pbuf_remove_header+0xc4>)
 800c88a:	f00e ff4d 	bl	801b728 <iprintf>
 800c88e:	2000      	movs	r0, #0
 800c890:	f00e fe74 	bl	801b57c <fflush>
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c894:	2300      	movs	r3, #0
}
 800c896:	4618      	mov	r0, r3
 800c898:	3710      	adds	r7, #16
 800c89a:	46bd      	mov	sp, r7
 800c89c:	bd80      	pop	{r7, pc}
 800c89e:	bf00      	nop
 800c8a0:	0801dcdc 	.word	0x0801dcdc
 800c8a4:	0801df04 	.word	0x0801df04
 800c8a8:	0801dd3c 	.word	0x0801dd3c
 800c8ac:	0801df84 	.word	0x0801df84
 800c8b0:	0801dfa4 	.word	0x0801dfa4

0800c8b4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b082      	sub	sp, #8
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	6078      	str	r0, [r7, #4]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	807b      	strh	r3, [r7, #2]
 800c8c0:	4613      	mov	r3, r2
 800c8c2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c8c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	da08      	bge.n	800c8de <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c8cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8d0:	425b      	negs	r3, r3
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	6878      	ldr	r0, [r7, #4]
 800c8d6:	f7ff ff89 	bl	800c7ec <pbuf_remove_header>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	e007      	b.n	800c8ee <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c8de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c8e2:	787a      	ldrb	r2, [r7, #1]
 800c8e4:	4619      	mov	r1, r3
 800c8e6:	6878      	ldr	r0, [r7, #4]
 800c8e8:	f7ff feec 	bl	800c6c4 <pbuf_add_header_impl>
 800c8ec:	4603      	mov	r3, r0
  }
}
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	3708      	adds	r7, #8
 800c8f2:	46bd      	mov	sp, r7
 800c8f4:	bd80      	pop	{r7, pc}

0800c8f6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c8f6:	b580      	push	{r7, lr}
 800c8f8:	b082      	sub	sp, #8
 800c8fa:	af00      	add	r7, sp, #0
 800c8fc:	6078      	str	r0, [r7, #4]
 800c8fe:	460b      	mov	r3, r1
 800c900:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c902:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c906:	2201      	movs	r2, #1
 800c908:	4619      	mov	r1, r3
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f7ff ffd2 	bl	800c8b4 <pbuf_header_impl>
 800c910:	4603      	mov	r3, r0
}
 800c912:	4618      	mov	r0, r3
 800c914:	3708      	adds	r7, #8
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
	...

0800c91c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c91c:	b580      	push	{r7, lr}
 800c91e:	b088      	sub	sp, #32
 800c920:	af00      	add	r7, sp, #0
 800c922:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d114      	bne.n	800c954 <pbuf_free+0x38>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d109      	bne.n	800c944 <pbuf_free+0x28>
 800c930:	4b4f      	ldr	r3, [pc, #316]	@ (800ca70 <pbuf_free+0x154>)
 800c932:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800c936:	494f      	ldr	r1, [pc, #316]	@ (800ca74 <pbuf_free+0x158>)
 800c938:	484f      	ldr	r0, [pc, #316]	@ (800ca78 <pbuf_free+0x15c>)
 800c93a:	f00e fef5 	bl	801b728 <iprintf>
 800c93e:	2000      	movs	r0, #0
 800c940:	f00e fe1c 	bl	801b57c <fflush>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 800c944:	484d      	ldr	r0, [pc, #308]	@ (800ca7c <pbuf_free+0x160>)
 800c946:	f00e ff5f 	bl	801b808 <puts>
 800c94a:	2000      	movs	r0, #0
 800c94c:	f00e fe16 	bl	801b57c <fflush>
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c950:	2300      	movs	r3, #0
 800c952:	e089      	b.n	800ca68 <pbuf_free+0x14c>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	484a      	ldr	r0, [pc, #296]	@ (800ca80 <pbuf_free+0x164>)
 800c958:	f00e fee6 	bl	801b728 <iprintf>
 800c95c:	2000      	movs	r0, #0
 800c95e:	f00e fe0d 	bl	801b57c <fflush>

  PERF_START;

  count = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c966:	e07b      	b.n	800ca60 <pbuf_free+0x144>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c968:	f00e fd00 	bl	801b36c <sys_arch_protect>
 800c96c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	7b9b      	ldrb	r3, [r3, #14]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d109      	bne.n	800c98a <pbuf_free+0x6e>
 800c976:	4b3e      	ldr	r3, [pc, #248]	@ (800ca70 <pbuf_free+0x154>)
 800c978:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800c97c:	4941      	ldr	r1, [pc, #260]	@ (800ca84 <pbuf_free+0x168>)
 800c97e:	483e      	ldr	r0, [pc, #248]	@ (800ca78 <pbuf_free+0x15c>)
 800c980:	f00e fed2 	bl	801b728 <iprintf>
 800c984:	2000      	movs	r0, #0
 800c986:	f00e fdf9 	bl	801b57c <fflush>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	7b9b      	ldrb	r3, [r3, #14]
 800c98e:	3b01      	subs	r3, #1
 800c990:	b2da      	uxtb	r2, r3
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	739a      	strb	r2, [r3, #14]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	7b9b      	ldrb	r3, [r3, #14]
 800c99a:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c99c:	69b8      	ldr	r0, [r7, #24]
 800c99e:	f00e fcf3 	bl	801b388 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c9a2:	7dfb      	ldrb	r3, [r7, #23]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d150      	bne.n	800ca4a <pbuf_free+0x12e>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
 800c9ae:	6879      	ldr	r1, [r7, #4]
 800c9b0:	4835      	ldr	r0, [pc, #212]	@ (800ca88 <pbuf_free+0x16c>)
 800c9b2:	f00e feb9 	bl	801b728 <iprintf>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	f00e fde0 	bl	801b57c <fflush>
      alloc_src = pbuf_get_allocsrc(p);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	7b1b      	ldrb	r3, [r3, #12]
 800c9c0:	f003 030f 	and.w	r3, r3, #15
 800c9c4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	7b5b      	ldrb	r3, [r3, #13]
 800c9ca:	f003 0302 	and.w	r3, r3, #2
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d014      	beq.n	800c9fc <pbuf_free+0xe0>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	691b      	ldr	r3, [r3, #16]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d109      	bne.n	800c9f2 <pbuf_free+0xd6>
 800c9de:	4b24      	ldr	r3, [pc, #144]	@ (800ca70 <pbuf_free+0x154>)
 800c9e0:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800c9e4:	4929      	ldr	r1, [pc, #164]	@ (800ca8c <pbuf_free+0x170>)
 800c9e6:	4824      	ldr	r0, [pc, #144]	@ (800ca78 <pbuf_free+0x15c>)
 800c9e8:	f00e fe9e 	bl	801b728 <iprintf>
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	f00e fdc5 	bl	801b57c <fflush>
        pc->custom_free_function(p);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	4798      	blx	r3
 800c9fa:	e020      	b.n	800ca3e <pbuf_free+0x122>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c9fc:	7bfb      	ldrb	r3, [r7, #15]
 800c9fe:	2b02      	cmp	r3, #2
 800ca00:	d104      	bne.n	800ca0c <pbuf_free+0xf0>
          memp_free(MEMP_PBUF_POOL, p);
 800ca02:	6879      	ldr	r1, [r7, #4]
 800ca04:	200c      	movs	r0, #12
 800ca06:	f7fe ff0b 	bl	800b820 <memp_free>
 800ca0a:	e018      	b.n	800ca3e <pbuf_free+0x122>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800ca0c:	7bfb      	ldrb	r3, [r7, #15]
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d104      	bne.n	800ca1c <pbuf_free+0x100>
          memp_free(MEMP_PBUF, p);
 800ca12:	6879      	ldr	r1, [r7, #4]
 800ca14:	200b      	movs	r0, #11
 800ca16:	f7fe ff03 	bl	800b820 <memp_free>
 800ca1a:	e010      	b.n	800ca3e <pbuf_free+0x122>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800ca1c:	7bfb      	ldrb	r3, [r7, #15]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d103      	bne.n	800ca2a <pbuf_free+0x10e>
          mem_free(p);
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f7fe face 	bl	800afc4 <mem_free>
 800ca28:	e009      	b.n	800ca3e <pbuf_free+0x122>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800ca2a:	4b11      	ldr	r3, [pc, #68]	@ (800ca70 <pbuf_free+0x154>)
 800ca2c:	f240 320f 	movw	r2, #783	@ 0x30f
 800ca30:	4917      	ldr	r1, [pc, #92]	@ (800ca90 <pbuf_free+0x174>)
 800ca32:	4811      	ldr	r0, [pc, #68]	@ (800ca78 <pbuf_free+0x15c>)
 800ca34:	f00e fe78 	bl	801b728 <iprintf>
 800ca38:	2000      	movs	r0, #0
 800ca3a:	f00e fd9f 	bl	801b57c <fflush>
        }
      }
      count++;
 800ca3e:	7ffb      	ldrb	r3, [r7, #31]
 800ca40:	3301      	adds	r3, #1
 800ca42:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	607b      	str	r3, [r7, #4]
 800ca48:	e00a      	b.n	800ca60 <pbuf_free+0x144>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	6879      	ldr	r1, [r7, #4]
 800ca50:	4810      	ldr	r0, [pc, #64]	@ (800ca94 <pbuf_free+0x178>)
 800ca52:	f00e fe69 	bl	801b728 <iprintf>
 800ca56:	2000      	movs	r0, #0
 800ca58:	f00e fd90 	bl	801b57c <fflush>
      /* stop walking through the chain */
      p = NULL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d180      	bne.n	800c968 <pbuf_free+0x4c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800ca66:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca68:	4618      	mov	r0, r3
 800ca6a:	3720      	adds	r7, #32
 800ca6c:	46bd      	mov	sp, r7
 800ca6e:	bd80      	pop	{r7, pc}
 800ca70:	0801dcdc 	.word	0x0801dcdc
 800ca74:	0801df04 	.word	0x0801df04
 800ca78:	0801dd3c 	.word	0x0801dd3c
 800ca7c:	0801dfd0 	.word	0x0801dfd0
 800ca80:	0801dff4 	.word	0x0801dff4
 800ca84:	0801e004 	.word	0x0801e004
 800ca88:	0801e01c 	.word	0x0801e01c
 800ca8c:	0801e038 	.word	0x0801e038
 800ca90:	0801e05c 	.word	0x0801e05c
 800ca94:	0801e070 	.word	0x0801e070

0800ca98 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b085      	sub	sp, #20
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800caa0:	2300      	movs	r3, #0
 800caa2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800caa4:	e005      	b.n	800cab2 <pbuf_clen+0x1a>
    ++len;
 800caa6:	89fb      	ldrh	r3, [r7, #14]
 800caa8:	3301      	adds	r3, #1
 800caaa:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d1f6      	bne.n	800caa6 <pbuf_clen+0xe>
  }
  return len;
 800cab8:	89fb      	ldrh	r3, [r7, #14]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
	...

0800cac8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800cac8:	b580      	push	{r7, lr}
 800caca:	b084      	sub	sp, #16
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d019      	beq.n	800cb0a <pbuf_ref+0x42>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800cad6:	f00e fc49 	bl	801b36c <sys_arch_protect>
 800cada:	60f8      	str	r0, [r7, #12]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	7b9b      	ldrb	r3, [r3, #14]
 800cae0:	3301      	adds	r3, #1
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	739a      	strb	r2, [r3, #14]
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f00e fc4d 	bl	801b388 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	7b9b      	ldrb	r3, [r3, #14]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d109      	bne.n	800cb0a <pbuf_ref+0x42>
 800caf6:	4b07      	ldr	r3, [pc, #28]	@ (800cb14 <pbuf_ref+0x4c>)
 800caf8:	f240 3242 	movw	r2, #834	@ 0x342
 800cafc:	4906      	ldr	r1, [pc, #24]	@ (800cb18 <pbuf_ref+0x50>)
 800cafe:	4807      	ldr	r0, [pc, #28]	@ (800cb1c <pbuf_ref+0x54>)
 800cb00:	f00e fe12 	bl	801b728 <iprintf>
 800cb04:	2000      	movs	r0, #0
 800cb06:	f00e fd39 	bl	801b57c <fflush>
  }
}
 800cb0a:	bf00      	nop
 800cb0c:	3710      	adds	r7, #16
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	bd80      	pop	{r7, pc}
 800cb12:	bf00      	nop
 800cb14:	0801dcdc 	.word	0x0801dcdc
 800cb18:	0801e09c 	.word	0x0801e09c
 800cb1c:	0801dd3c 	.word	0x0801dd3c

0800cb20 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
 800cb28:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d002      	beq.n	800cb36 <pbuf_cat+0x16>
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10a      	bne.n	800cb4c <pbuf_cat+0x2c>
 800cb36:	4b24      	ldr	r3, [pc, #144]	@ (800cbc8 <pbuf_cat+0xa8>)
 800cb38:	f240 3259 	movw	r2, #857	@ 0x359
 800cb3c:	4923      	ldr	r1, [pc, #140]	@ (800cbcc <pbuf_cat+0xac>)
 800cb3e:	4824      	ldr	r0, [pc, #144]	@ (800cbd0 <pbuf_cat+0xb0>)
 800cb40:	f00e fdf2 	bl	801b728 <iprintf>
 800cb44:	2000      	movs	r0, #0
 800cb46:	f00e fd19 	bl	801b57c <fflush>
 800cb4a:	e03a      	b.n	800cbc2 <pbuf_cat+0xa2>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	60fb      	str	r3, [r7, #12]
 800cb50:	e00a      	b.n	800cb68 <pbuf_cat+0x48>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	891a      	ldrh	r2, [r3, #8]
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	891b      	ldrh	r3, [r3, #8]
 800cb5a:	4413      	add	r3, r2
 800cb5c:	b29a      	uxth	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1f0      	bne.n	800cb52 <pbuf_cat+0x32>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	891a      	ldrh	r2, [r3, #8]
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	895b      	ldrh	r3, [r3, #10]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d009      	beq.n	800cb90 <pbuf_cat+0x70>
 800cb7c:	4b12      	ldr	r3, [pc, #72]	@ (800cbc8 <pbuf_cat+0xa8>)
 800cb7e:	f240 3262 	movw	r2, #866	@ 0x362
 800cb82:	4914      	ldr	r1, [pc, #80]	@ (800cbd4 <pbuf_cat+0xb4>)
 800cb84:	4812      	ldr	r0, [pc, #72]	@ (800cbd0 <pbuf_cat+0xb0>)
 800cb86:	f00e fdcf 	bl	801b728 <iprintf>
 800cb8a:	2000      	movs	r0, #0
 800cb8c:	f00e fcf6 	bl	801b57c <fflush>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d009      	beq.n	800cbac <pbuf_cat+0x8c>
 800cb98:	4b0b      	ldr	r3, [pc, #44]	@ (800cbc8 <pbuf_cat+0xa8>)
 800cb9a:	f240 3263 	movw	r2, #867	@ 0x363
 800cb9e:	490e      	ldr	r1, [pc, #56]	@ (800cbd8 <pbuf_cat+0xb8>)
 800cba0:	480b      	ldr	r0, [pc, #44]	@ (800cbd0 <pbuf_cat+0xb0>)
 800cba2:	f00e fdc1 	bl	801b728 <iprintf>
 800cba6:	2000      	movs	r0, #0
 800cba8:	f00e fce8 	bl	801b57c <fflush>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	891a      	ldrh	r2, [r3, #8]
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	891b      	ldrh	r3, [r3, #8]
 800cbb4:	4413      	add	r3, r2
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	683a      	ldr	r2, [r7, #0]
 800cbc0:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800cbc2:	3710      	adds	r7, #16
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	0801dcdc 	.word	0x0801dcdc
 800cbcc:	0801e0b0 	.word	0x0801e0b0
 800cbd0:	0801dd3c 	.word	0x0801dd3c
 800cbd4:	0801e0e8 	.word	0x0801e0e8
 800cbd8:	0801e118 	.word	0x0801e118

0800cbdc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b082      	sub	sp, #8
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800cbe6:	6839      	ldr	r1, [r7, #0]
 800cbe8:	6878      	ldr	r0, [r7, #4]
 800cbea:	f7ff ff99 	bl	800cb20 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800cbee:	6838      	ldr	r0, [r7, #0]
 800cbf0:	f7ff ff6a 	bl	800cac8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	6879      	ldr	r1, [r7, #4]
 800cbf8:	4804      	ldr	r0, [pc, #16]	@ (800cc0c <pbuf_chain+0x30>)
 800cbfa:	f00e fd95 	bl	801b728 <iprintf>
 800cbfe:	2000      	movs	r0, #0
 800cc00:	f00e fcbc 	bl	801b57c <fflush>
}
 800cc04:	bf00      	nop
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	0801e128 	.word	0x0801e128

0800cc10 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b086      	sub	sp, #24
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	617b      	str	r3, [r7, #20]
 800cc1e:	2300      	movs	r3, #0
 800cc20:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
 800cc22:	683a      	ldr	r2, [r7, #0]
 800cc24:	6879      	ldr	r1, [r7, #4]
 800cc26:	486c      	ldr	r0, [pc, #432]	@ (800cdd8 <pbuf_copy+0x1c8>)
 800cc28:	f00e fd7e 	bl	801b728 <iprintf>
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	f00e fca5 	bl	801b57c <fflush>
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d008      	beq.n	800cc4a <pbuf_copy+0x3a>
 800cc38:	683b      	ldr	r3, [r7, #0]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d005      	beq.n	800cc4a <pbuf_copy+0x3a>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	891a      	ldrh	r2, [r3, #8]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	891b      	ldrh	r3, [r3, #8]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d20c      	bcs.n	800cc64 <pbuf_copy+0x54>
 800cc4a:	4b64      	ldr	r3, [pc, #400]	@ (800cddc <pbuf_copy+0x1cc>)
 800cc4c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800cc50:	4963      	ldr	r1, [pc, #396]	@ (800cde0 <pbuf_copy+0x1d0>)
 800cc52:	4864      	ldr	r0, [pc, #400]	@ (800cde4 <pbuf_copy+0x1d4>)
 800cc54:	f00e fd68 	bl	801b728 <iprintf>
 800cc58:	2000      	movs	r0, #0
 800cc5a:	f00e fc8f 	bl	801b57c <fflush>
 800cc5e:	f06f 030f 	mvn.w	r3, #15
 800cc62:	e0b4      	b.n	800cdce <pbuf_copy+0x1be>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	895b      	ldrh	r3, [r3, #10]
 800cc68:	461a      	mov	r2, r3
 800cc6a:	697b      	ldr	r3, [r7, #20]
 800cc6c:	1ad2      	subs	r2, r2, r3
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	895b      	ldrh	r3, [r3, #10]
 800cc72:	4619      	mov	r1, r3
 800cc74:	693b      	ldr	r3, [r7, #16]
 800cc76:	1acb      	subs	r3, r1, r3
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d306      	bcc.n	800cc8a <pbuf_copy+0x7a>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	895b      	ldrh	r3, [r3, #10]
 800cc80:	461a      	mov	r2, r3
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	1ad3      	subs	r3, r2, r3
 800cc86:	60fb      	str	r3, [r7, #12]
 800cc88:	e005      	b.n	800cc96 <pbuf_copy+0x86>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	895b      	ldrh	r3, [r3, #10]
 800cc8e:	461a      	mov	r2, r3
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	1ad3      	subs	r3, r2, r3
 800cc94:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	685a      	ldr	r2, [r3, #4]
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	18d0      	adds	r0, r2, r3
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	685a      	ldr	r2, [r3, #4]
 800cca2:	693b      	ldr	r3, [r7, #16]
 800cca4:	4413      	add	r3, r2
 800cca6:	68fa      	ldr	r2, [r7, #12]
 800cca8:	4619      	mov	r1, r3
 800ccaa:	f00e ff24 	bl	801baf6 <memcpy>
    offset_to += len;
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ccb6:	693a      	ldr	r2, [r7, #16]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4413      	add	r3, r2
 800ccbc:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	895b      	ldrh	r3, [r3, #10]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d909      	bls.n	800ccde <pbuf_copy+0xce>
 800ccca:	4b44      	ldr	r3, [pc, #272]	@ (800cddc <pbuf_copy+0x1cc>)
 800cccc:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800ccd0:	4945      	ldr	r1, [pc, #276]	@ (800cde8 <pbuf_copy+0x1d8>)
 800ccd2:	4844      	ldr	r0, [pc, #272]	@ (800cde4 <pbuf_copy+0x1d4>)
 800ccd4:	f00e fd28 	bl	801b728 <iprintf>
 800ccd8:	2000      	movs	r0, #0
 800ccda:	f00e fc4f 	bl	801b57c <fflush>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	895b      	ldrh	r3, [r3, #10]
 800cce2:	461a      	mov	r2, r3
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d909      	bls.n	800ccfe <pbuf_copy+0xee>
 800ccea:	4b3c      	ldr	r3, [pc, #240]	@ (800cddc <pbuf_copy+0x1cc>)
 800ccec:	f240 32da 	movw	r2, #986	@ 0x3da
 800ccf0:	493e      	ldr	r1, [pc, #248]	@ (800cdec <pbuf_copy+0x1dc>)
 800ccf2:	483c      	ldr	r0, [pc, #240]	@ (800cde4 <pbuf_copy+0x1d4>)
 800ccf4:	f00e fd18 	bl	801b728 <iprintf>
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	f00e fc3f 	bl	801b57c <fflush>
    if (offset_from >= p_from->len) {
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	895b      	ldrh	r3, [r3, #10]
 800cd02:	461a      	mov	r2, r3
 800cd04:	693b      	ldr	r3, [r7, #16]
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d304      	bcc.n	800cd14 <pbuf_copy+0x104>
      /* on to next p_from (if any) */
      offset_from = 0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	895b      	ldrh	r3, [r3, #10]
 800cd18:	461a      	mov	r2, r3
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d117      	bne.n	800cd50 <pbuf_copy+0x140>
      /* on to next p_to (if any) */
      offset_to = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d10f      	bne.n	800cd50 <pbuf_copy+0x140>
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d00c      	beq.n	800cd50 <pbuf_copy+0x140>
 800cd36:	4b29      	ldr	r3, [pc, #164]	@ (800cddc <pbuf_copy+0x1cc>)
 800cd38:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800cd3c:	492c      	ldr	r1, [pc, #176]	@ (800cdf0 <pbuf_copy+0x1e0>)
 800cd3e:	4829      	ldr	r0, [pc, #164]	@ (800cde4 <pbuf_copy+0x1d4>)
 800cd40:	f00e fcf2 	bl	801b728 <iprintf>
 800cd44:	2000      	movs	r0, #0
 800cd46:	f00e fc19 	bl	801b57c <fflush>
 800cd4a:	f06f 030f 	mvn.w	r3, #15
 800cd4e:	e03e      	b.n	800cdce <pbuf_copy+0x1be>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d016      	beq.n	800cd84 <pbuf_copy+0x174>
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	895a      	ldrh	r2, [r3, #10]
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	891b      	ldrh	r3, [r3, #8]
 800cd5e:	429a      	cmp	r2, r3
 800cd60:	d110      	bne.n	800cd84 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00c      	beq.n	800cd84 <pbuf_copy+0x174>
 800cd6a:	4b1c      	ldr	r3, [pc, #112]	@ (800cddc <pbuf_copy+0x1cc>)
 800cd6c:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800cd70:	4920      	ldr	r1, [pc, #128]	@ (800cdf4 <pbuf_copy+0x1e4>)
 800cd72:	481c      	ldr	r0, [pc, #112]	@ (800cde4 <pbuf_copy+0x1d4>)
 800cd74:	f00e fcd8 	bl	801b728 <iprintf>
 800cd78:	2000      	movs	r0, #0
 800cd7a:	f00e fbff 	bl	801b57c <fflush>
 800cd7e:	f06f 0305 	mvn.w	r3, #5
 800cd82:	e024      	b.n	800cdce <pbuf_copy+0x1be>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d016      	beq.n	800cdb8 <pbuf_copy+0x1a8>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	895a      	ldrh	r2, [r3, #10]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	891b      	ldrh	r3, [r3, #8]
 800cd92:	429a      	cmp	r2, r3
 800cd94:	d110      	bne.n	800cdb8 <pbuf_copy+0x1a8>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d00c      	beq.n	800cdb8 <pbuf_copy+0x1a8>
 800cd9e:	4b0f      	ldr	r3, [pc, #60]	@ (800cddc <pbuf_copy+0x1cc>)
 800cda0:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800cda4:	4913      	ldr	r1, [pc, #76]	@ (800cdf4 <pbuf_copy+0x1e4>)
 800cda6:	480f      	ldr	r0, [pc, #60]	@ (800cde4 <pbuf_copy+0x1d4>)
 800cda8:	f00e fcbe 	bl	801b728 <iprintf>
 800cdac:	2000      	movs	r0, #0
 800cdae:	f00e fbe5 	bl	801b57c <fflush>
 800cdb2:	f06f 0305 	mvn.w	r3, #5
 800cdb6:	e00a      	b.n	800cdce <pbuf_copy+0x1be>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800cdb8:	683b      	ldr	r3, [r7, #0]
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	f47f af52 	bne.w	800cc64 <pbuf_copy+0x54>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
 800cdc0:	480d      	ldr	r0, [pc, #52]	@ (800cdf8 <pbuf_copy+0x1e8>)
 800cdc2:	f00e fd21 	bl	801b808 <puts>
 800cdc6:	2000      	movs	r0, #0
 800cdc8:	f00e fbd8 	bl	801b57c <fflush>
  return ERR_OK;
 800cdcc:	2300      	movs	r3, #0
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3718      	adds	r7, #24
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}
 800cdd6:	bf00      	nop
 800cdd8:	0801e1e4 	.word	0x0801e1e4
 800cddc:	0801dcdc 	.word	0x0801dcdc
 800cde0:	0801e1f8 	.word	0x0801e1f8
 800cde4:	0801dd3c 	.word	0x0801dd3c
 800cde8:	0801e228 	.word	0x0801e228
 800cdec:	0801e240 	.word	0x0801e240
 800cdf0:	0801e25c 	.word	0x0801e25c
 800cdf4:	0801e26c 	.word	0x0801e26c
 800cdf8:	0801e298 	.word	0x0801e298

0800cdfc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b088      	sub	sp, #32
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	4611      	mov	r1, r2
 800ce08:	461a      	mov	r2, r3
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	80fb      	strh	r3, [r7, #6]
 800ce0e:	4613      	mov	r3, r2
 800ce10:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800ce12:	2300      	movs	r3, #0
 800ce14:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d10b      	bne.n	800ce38 <pbuf_copy_partial+0x3c>
 800ce20:	4b2e      	ldr	r3, [pc, #184]	@ (800cedc <pbuf_copy_partial+0xe0>)
 800ce22:	f240 420a 	movw	r2, #1034	@ 0x40a
 800ce26:	492e      	ldr	r1, [pc, #184]	@ (800cee0 <pbuf_copy_partial+0xe4>)
 800ce28:	482e      	ldr	r0, [pc, #184]	@ (800cee4 <pbuf_copy_partial+0xe8>)
 800ce2a:	f00e fc7d 	bl	801b728 <iprintf>
 800ce2e:	2000      	movs	r0, #0
 800ce30:	f00e fba4 	bl	801b57c <fflush>
 800ce34:	2300      	movs	r3, #0
 800ce36:	e04d      	b.n	800ced4 <pbuf_copy_partial+0xd8>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d10b      	bne.n	800ce56 <pbuf_copy_partial+0x5a>
 800ce3e:	4b27      	ldr	r3, [pc, #156]	@ (800cedc <pbuf_copy_partial+0xe0>)
 800ce40:	f240 420b 	movw	r2, #1035	@ 0x40b
 800ce44:	4928      	ldr	r1, [pc, #160]	@ (800cee8 <pbuf_copy_partial+0xec>)
 800ce46:	4827      	ldr	r0, [pc, #156]	@ (800cee4 <pbuf_copy_partial+0xe8>)
 800ce48:	f00e fc6e 	bl	801b728 <iprintf>
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	f00e fb95 	bl	801b57c <fflush>
 800ce52:	2300      	movs	r3, #0
 800ce54:	e03e      	b.n	800ced4 <pbuf_copy_partial+0xd8>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	61fb      	str	r3, [r7, #28]
 800ce5a:	e034      	b.n	800cec6 <pbuf_copy_partial+0xca>
    if ((offset != 0) && (offset >= p->len)) {
 800ce5c:	88bb      	ldrh	r3, [r7, #4]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00a      	beq.n	800ce78 <pbuf_copy_partial+0x7c>
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	895b      	ldrh	r3, [r3, #10]
 800ce66:	88ba      	ldrh	r2, [r7, #4]
 800ce68:	429a      	cmp	r2, r3
 800ce6a:	d305      	bcc.n	800ce78 <pbuf_copy_partial+0x7c>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800ce6c:	69fb      	ldr	r3, [r7, #28]
 800ce6e:	895b      	ldrh	r3, [r3, #10]
 800ce70:	88ba      	ldrh	r2, [r7, #4]
 800ce72:	1ad3      	subs	r3, r2, r3
 800ce74:	80bb      	strh	r3, [r7, #4]
 800ce76:	e023      	b.n	800cec0 <pbuf_copy_partial+0xc4>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	895a      	ldrh	r2, [r3, #10]
 800ce7c:	88bb      	ldrh	r3, [r7, #4]
 800ce7e:	1ad3      	subs	r3, r2, r3
 800ce80:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800ce82:	8b3a      	ldrh	r2, [r7, #24]
 800ce84:	88fb      	ldrh	r3, [r7, #6]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d901      	bls.n	800ce8e <pbuf_copy_partial+0x92>
        buf_copy_len = len;
 800ce8a:	88fb      	ldrh	r3, [r7, #6]
 800ce8c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800ce8e:	8b7b      	ldrh	r3, [r7, #26]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	18d0      	adds	r0, r2, r3
 800ce94:	69fb      	ldr	r3, [r7, #28]
 800ce96:	685a      	ldr	r2, [r3, #4]
 800ce98:	88bb      	ldrh	r3, [r7, #4]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	8b3a      	ldrh	r2, [r7, #24]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	f00e fe29 	bl	801baf6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800cea4:	8afa      	ldrh	r2, [r7, #22]
 800cea6:	8b3b      	ldrh	r3, [r7, #24]
 800cea8:	4413      	add	r3, r2
 800ceaa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800ceac:	8b7a      	ldrh	r2, [r7, #26]
 800ceae:	8b3b      	ldrh	r3, [r7, #24]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800ceb4:	88fa      	ldrh	r2, [r7, #6]
 800ceb6:	8b3b      	ldrh	r3, [r7, #24]
 800ceb8:	1ad3      	subs	r3, r2, r3
 800ceba:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800cebc:	2300      	movs	r3, #0
 800cebe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800cec0:	69fb      	ldr	r3, [r7, #28]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	61fb      	str	r3, [r7, #28]
 800cec6:	88fb      	ldrh	r3, [r7, #6]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <pbuf_copy_partial+0xd6>
 800cecc:	69fb      	ldr	r3, [r7, #28]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d1c4      	bne.n	800ce5c <pbuf_copy_partial+0x60>
    }
  }
  return copied_total;
 800ced2:	8afb      	ldrh	r3, [r7, #22]
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	3720      	adds	r7, #32
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	0801dcdc 	.word	0x0801dcdc
 800cee0:	0801e2bc 	.word	0x0801e2bc
 800cee4:	0801dd3c 	.word	0x0801dd3c
 800cee8:	0801e2dc 	.word	0x0801e2dc

0800ceec <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	603a      	str	r2, [r7, #0]
 800cef6:	71fb      	strb	r3, [r7, #7]
 800cef8:	460b      	mov	r3, r1
 800cefa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	8919      	ldrh	r1, [r3, #8]
 800cf00:	88ba      	ldrh	r2, [r7, #4]
 800cf02:	79fb      	ldrb	r3, [r7, #7]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f7ff f9a3 	bl	800c250 <pbuf_alloc>
 800cf0a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d101      	bne.n	800cf16 <pbuf_clone+0x2a>
    return NULL;
 800cf12:	2300      	movs	r3, #0
 800cf14:	e014      	b.n	800cf40 <pbuf_clone+0x54>
  }
  err = pbuf_copy(q, p);
 800cf16:	6839      	ldr	r1, [r7, #0]
 800cf18:	68f8      	ldr	r0, [r7, #12]
 800cf1a:	f7ff fe79 	bl	800cc10 <pbuf_copy>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800cf22:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d009      	beq.n	800cf3e <pbuf_clone+0x52>
 800cf2a:	4b07      	ldr	r3, [pc, #28]	@ (800cf48 <pbuf_clone+0x5c>)
 800cf2c:	f240 5224 	movw	r2, #1316	@ 0x524
 800cf30:	4906      	ldr	r1, [pc, #24]	@ (800cf4c <pbuf_clone+0x60>)
 800cf32:	4807      	ldr	r0, [pc, #28]	@ (800cf50 <pbuf_clone+0x64>)
 800cf34:	f00e fbf8 	bl	801b728 <iprintf>
 800cf38:	2000      	movs	r0, #0
 800cf3a:	f00e fb1f 	bl	801b57c <fflush>
  return q;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	0801dcdc 	.word	0x0801dcdc
 800cf4c:	0801e3e8 	.word	0x0801e3e8
 800cf50:	0801dd3c 	.word	0x0801dd3c

0800cf54 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800cf58:	f00e fa26 	bl	801b3a8 <rand>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	b29b      	uxth	r3, r3
 800cf60:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	4b01      	ldr	r3, [pc, #4]	@ (800cf74 <tcp_init+0x20>)
 800cf6e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800cf70:	bf00      	nop
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	20000068 	.word	0x20000068

0800cf78 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	7d1b      	ldrb	r3, [r3, #20]
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d108      	bne.n	800cf9a <tcp_free+0x22>
 800cf88:	4b08      	ldr	r3, [pc, #32]	@ (800cfac <tcp_free+0x34>)
 800cf8a:	22d4      	movs	r2, #212	@ 0xd4
 800cf8c:	4908      	ldr	r1, [pc, #32]	@ (800cfb0 <tcp_free+0x38>)
 800cf8e:	4809      	ldr	r0, [pc, #36]	@ (800cfb4 <tcp_free+0x3c>)
 800cf90:	f00e fbca 	bl	801b728 <iprintf>
 800cf94:	2000      	movs	r0, #0
 800cf96:	f00e faf1 	bl	801b57c <fflush>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cf9a:	6879      	ldr	r1, [r7, #4]
 800cf9c:	2001      	movs	r0, #1
 800cf9e:	f7fe fc3f 	bl	800b820 <memp_free>
}
 800cfa2:	bf00      	nop
 800cfa4:	3708      	adds	r7, #8
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	0801e474 	.word	0x0801e474
 800cfb0:	0801e4a4 	.word	0x0801e4a4
 800cfb4:	0801e4b8 	.word	0x0801e4b8

0800cfb8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7d1b      	ldrb	r3, [r3, #20]
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d108      	bne.n	800cfda <tcp_free_listen+0x22>
 800cfc8:	4b08      	ldr	r3, [pc, #32]	@ (800cfec <tcp_free_listen+0x34>)
 800cfca:	22df      	movs	r2, #223	@ 0xdf
 800cfcc:	4908      	ldr	r1, [pc, #32]	@ (800cff0 <tcp_free_listen+0x38>)
 800cfce:	4809      	ldr	r0, [pc, #36]	@ (800cff4 <tcp_free_listen+0x3c>)
 800cfd0:	f00e fbaa 	bl	801b728 <iprintf>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	f00e fad1 	bl	801b57c <fflush>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cfda:	6879      	ldr	r1, [r7, #4]
 800cfdc:	2002      	movs	r0, #2
 800cfde:	f7fe fc1f 	bl	800b820 <memp_free>
}
 800cfe2:	bf00      	nop
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	0801e474 	.word	0x0801e474
 800cff0:	0801e4e0 	.word	0x0801e4e0
 800cff4:	0801e4b8 	.word	0x0801e4b8

0800cff8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cffc:	f001 f9d2 	bl	800e3a4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d000:	4b07      	ldr	r3, [pc, #28]	@ (800d020 <tcp_tmr+0x28>)
 800d002:	781b      	ldrb	r3, [r3, #0]
 800d004:	3301      	adds	r3, #1
 800d006:	b2da      	uxtb	r2, r3
 800d008:	4b05      	ldr	r3, [pc, #20]	@ (800d020 <tcp_tmr+0x28>)
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	4b04      	ldr	r3, [pc, #16]	@ (800d020 <tcp_tmr+0x28>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	f003 0301 	and.w	r3, r3, #1
 800d014:	2b00      	cmp	r3, #0
 800d016:	d001      	beq.n	800d01c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d018:	f000 fdc8 	bl	800dbac <tcp_slowtmr>
  }
}
 800d01c:	bf00      	nop
 800d01e:	bd80      	pop	{r7, pc}
 800d020:	20011d91 	.word	0x20011d91

0800d024 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d024:	b580      	push	{r7, lr}
 800d026:	b084      	sub	sp, #16
 800d028:	af00      	add	r7, sp, #0
 800d02a:	6078      	str	r0, [r7, #4]
 800d02c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d108      	bne.n	800d046 <tcp_remove_listener+0x22>
 800d034:	4b0f      	ldr	r3, [pc, #60]	@ (800d074 <tcp_remove_listener+0x50>)
 800d036:	22ff      	movs	r2, #255	@ 0xff
 800d038:	490f      	ldr	r1, [pc, #60]	@ (800d078 <tcp_remove_listener+0x54>)
 800d03a:	4810      	ldr	r0, [pc, #64]	@ (800d07c <tcp_remove_listener+0x58>)
 800d03c:	f00e fb74 	bl	801b728 <iprintf>
 800d040:	2000      	movs	r0, #0
 800d042:	f00e fa9b 	bl	801b57c <fflush>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	60fb      	str	r3, [r7, #12]
 800d04a:	e00a      	b.n	800d062 <tcp_remove_listener+0x3e>
    if (pcb->listener == lpcb) {
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	429a      	cmp	r2, r3
 800d054:	d102      	bne.n	800d05c <tcp_remove_listener+0x38>
      pcb->listener = NULL;
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	68db      	ldr	r3, [r3, #12]
 800d060:	60fb      	str	r3, [r7, #12]
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d1f1      	bne.n	800d04c <tcp_remove_listener+0x28>
    }
  }
}
 800d068:	bf00      	nop
 800d06a:	bf00      	nop
 800d06c:	3710      	adds	r7, #16
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}
 800d072:	bf00      	nop
 800d074:	0801e474 	.word	0x0801e474
 800d078:	0801e4fc 	.word	0x0801e4fc
 800d07c:	0801e4b8 	.word	0x0801e4b8

0800d080 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d109      	bne.n	800d0a2 <tcp_listen_closed+0x22>
 800d08e:	4b17      	ldr	r3, [pc, #92]	@ (800d0ec <tcp_listen_closed+0x6c>)
 800d090:	f240 1211 	movw	r2, #273	@ 0x111
 800d094:	4916      	ldr	r1, [pc, #88]	@ (800d0f0 <tcp_listen_closed+0x70>)
 800d096:	4817      	ldr	r0, [pc, #92]	@ (800d0f4 <tcp_listen_closed+0x74>)
 800d098:	f00e fb46 	bl	801b728 <iprintf>
 800d09c:	2000      	movs	r0, #0
 800d09e:	f00e fa6d 	bl	801b57c <fflush>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	7d1b      	ldrb	r3, [r3, #20]
 800d0a6:	2b01      	cmp	r3, #1
 800d0a8:	d009      	beq.n	800d0be <tcp_listen_closed+0x3e>
 800d0aa:	4b10      	ldr	r3, [pc, #64]	@ (800d0ec <tcp_listen_closed+0x6c>)
 800d0ac:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800d0b0:	4911      	ldr	r1, [pc, #68]	@ (800d0f8 <tcp_listen_closed+0x78>)
 800d0b2:	4810      	ldr	r0, [pc, #64]	@ (800d0f4 <tcp_listen_closed+0x74>)
 800d0b4:	f00e fb38 	bl	801b728 <iprintf>
 800d0b8:	2000      	movs	r0, #0
 800d0ba:	f00e fa5f 	bl	801b57c <fflush>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d0be:	2301      	movs	r3, #1
 800d0c0:	60fb      	str	r3, [r7, #12]
 800d0c2:	e00b      	b.n	800d0dc <tcp_listen_closed+0x5c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d0c4:	4a0d      	ldr	r2, [pc, #52]	@ (800d0fc <tcp_listen_closed+0x7c>)
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	6879      	ldr	r1, [r7, #4]
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7ff ffa7 	bl	800d024 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	3301      	adds	r3, #1
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	d9f0      	bls.n	800d0c4 <tcp_listen_closed+0x44>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d0e2:	bf00      	nop
 800d0e4:	bf00      	nop
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}
 800d0ec:	0801e474 	.word	0x0801e474
 800d0f0:	0801e524 	.word	0x0801e524
 800d0f4:	0801e4b8 	.word	0x0801e4b8
 800d0f8:	0801e530 	.word	0x0801e530
 800d0fc:	08025224 	.word	0x08025224

0800d100 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d100:	b5b0      	push	{r4, r5, r7, lr}
 800d102:	b088      	sub	sp, #32
 800d104:	af04      	add	r7, sp, #16
 800d106:	6078      	str	r0, [r7, #4]
 800d108:	460b      	mov	r3, r1
 800d10a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d109      	bne.n	800d126 <tcp_close_shutdown+0x26>
 800d112:	4b66      	ldr	r3, [pc, #408]	@ (800d2ac <tcp_close_shutdown+0x1ac>)
 800d114:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800d118:	4965      	ldr	r1, [pc, #404]	@ (800d2b0 <tcp_close_shutdown+0x1b0>)
 800d11a:	4866      	ldr	r0, [pc, #408]	@ (800d2b4 <tcp_close_shutdown+0x1b4>)
 800d11c:	f00e fb04 	bl	801b728 <iprintf>
 800d120:	2000      	movs	r0, #0
 800d122:	f00e fa2b 	bl	801b57c <fflush>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d126:	78fb      	ldrb	r3, [r7, #3]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d069      	beq.n	800d200 <tcp_close_shutdown+0x100>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	7d1b      	ldrb	r3, [r3, #20]
 800d130:	2b04      	cmp	r3, #4
 800d132:	d003      	beq.n	800d13c <tcp_close_shutdown+0x3c>
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	7d1b      	ldrb	r3, [r3, #20]
 800d138:	2b07      	cmp	r3, #7
 800d13a:	d161      	bne.n	800d200 <tcp_close_shutdown+0x100>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d140:	2b00      	cmp	r3, #0
 800d142:	d104      	bne.n	800d14e <tcp_close_shutdown+0x4e>
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d148:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d14c:	d058      	beq.n	800d200 <tcp_close_shutdown+0x100>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	8b5b      	ldrh	r3, [r3, #26]
 800d152:	f003 0310 	and.w	r3, r3, #16
 800d156:	2b00      	cmp	r3, #0
 800d158:	d109      	bne.n	800d16e <tcp_close_shutdown+0x6e>
 800d15a:	4b54      	ldr	r3, [pc, #336]	@ (800d2ac <tcp_close_shutdown+0x1ac>)
 800d15c:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800d160:	4955      	ldr	r1, [pc, #340]	@ (800d2b8 <tcp_close_shutdown+0x1b8>)
 800d162:	4854      	ldr	r0, [pc, #336]	@ (800d2b4 <tcp_close_shutdown+0x1b4>)
 800d164:	f00e fae0 	bl	801b728 <iprintf>
 800d168:	2000      	movs	r0, #0
 800d16a:	f00e fa07 	bl	801b57c <fflush>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d176:	687d      	ldr	r5, [r7, #4]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	3304      	adds	r3, #4
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	8ad2      	ldrh	r2, [r2, #22]
 800d180:	6879      	ldr	r1, [r7, #4]
 800d182:	8b09      	ldrh	r1, [r1, #24]
 800d184:	9102      	str	r1, [sp, #8]
 800d186:	9201      	str	r2, [sp, #4]
 800d188:	9300      	str	r3, [sp, #0]
 800d18a:	462b      	mov	r3, r5
 800d18c:	4622      	mov	r2, r4
 800d18e:	4601      	mov	r1, r0
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f007 f84d 	bl	8014230 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f001 fd3e 	bl	800ec18 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d19c:	4b47      	ldr	r3, [pc, #284]	@ (800d2bc <tcp_close_shutdown+0x1bc>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d105      	bne.n	800d1b2 <tcp_close_shutdown+0xb2>
 800d1a6:	4b45      	ldr	r3, [pc, #276]	@ (800d2bc <tcp_close_shutdown+0x1bc>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	68db      	ldr	r3, [r3, #12]
 800d1ac:	4a43      	ldr	r2, [pc, #268]	@ (800d2bc <tcp_close_shutdown+0x1bc>)
 800d1ae:	6013      	str	r3, [r2, #0]
 800d1b0:	e013      	b.n	800d1da <tcp_close_shutdown+0xda>
 800d1b2:	4b42      	ldr	r3, [pc, #264]	@ (800d2bc <tcp_close_shutdown+0x1bc>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	60fb      	str	r3, [r7, #12]
 800d1b8:	e00c      	b.n	800d1d4 <tcp_close_shutdown+0xd4>
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	68db      	ldr	r3, [r3, #12]
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d104      	bne.n	800d1ce <tcp_close_shutdown+0xce>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68da      	ldr	r2, [r3, #12]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	60da      	str	r2, [r3, #12]
 800d1cc:	e005      	b.n	800d1da <tcp_close_shutdown+0xda>
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	68db      	ldr	r3, [r3, #12]
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1ef      	bne.n	800d1ba <tcp_close_shutdown+0xba>
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	60da      	str	r2, [r3, #12]
 800d1e0:	4b37      	ldr	r3, [pc, #220]	@ (800d2c0 <tcp_close_shutdown+0x1c0>)
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800d1e6:	4b37      	ldr	r3, [pc, #220]	@ (800d2c4 <tcp_close_shutdown+0x1c4>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	687a      	ldr	r2, [r7, #4]
 800d1ec:	429a      	cmp	r2, r3
 800d1ee:	d102      	bne.n	800d1f6 <tcp_close_shutdown+0xf6>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800d1f0:	f004 ffb2 	bl	8012158 <tcp_trigger_input_pcb_close>
 800d1f4:	e002      	b.n	800d1fc <tcp_close_shutdown+0xfc>
      } else {
        tcp_free(pcb);
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7ff febe 	bl	800cf78 <tcp_free>
      }
      return ERR_OK;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	e050      	b.n	800d2a2 <tcp_close_shutdown+0x1a2>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	7d1b      	ldrb	r3, [r3, #20]
 800d204:	2b02      	cmp	r3, #2
 800d206:	d03b      	beq.n	800d280 <tcp_close_shutdown+0x180>
 800d208:	2b02      	cmp	r3, #2
 800d20a:	dc44      	bgt.n	800d296 <tcp_close_shutdown+0x196>
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <tcp_close_shutdown+0x116>
 800d210:	2b01      	cmp	r3, #1
 800d212:	d02a      	beq.n	800d26a <tcp_close_shutdown+0x16a>
 800d214:	e03f      	b.n	800d296 <tcp_close_shutdown+0x196>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	8adb      	ldrh	r3, [r3, #22]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d021      	beq.n	800d262 <tcp_close_shutdown+0x162>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d21e:	4b2a      	ldr	r3, [pc, #168]	@ (800d2c8 <tcp_close_shutdown+0x1c8>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	429a      	cmp	r2, r3
 800d226:	d105      	bne.n	800d234 <tcp_close_shutdown+0x134>
 800d228:	4b27      	ldr	r3, [pc, #156]	@ (800d2c8 <tcp_close_shutdown+0x1c8>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	68db      	ldr	r3, [r3, #12]
 800d22e:	4a26      	ldr	r2, [pc, #152]	@ (800d2c8 <tcp_close_shutdown+0x1c8>)
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	e013      	b.n	800d25c <tcp_close_shutdown+0x15c>
 800d234:	4b24      	ldr	r3, [pc, #144]	@ (800d2c8 <tcp_close_shutdown+0x1c8>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	60bb      	str	r3, [r7, #8]
 800d23a:	e00c      	b.n	800d256 <tcp_close_shutdown+0x156>
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	68db      	ldr	r3, [r3, #12]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	429a      	cmp	r2, r3
 800d244:	d104      	bne.n	800d250 <tcp_close_shutdown+0x150>
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	68da      	ldr	r2, [r3, #12]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	60da      	str	r2, [r3, #12]
 800d24e:	e005      	b.n	800d25c <tcp_close_shutdown+0x15c>
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	60bb      	str	r3, [r7, #8]
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d1ef      	bne.n	800d23c <tcp_close_shutdown+0x13c>
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2200      	movs	r2, #0
 800d260:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff fe88 	bl	800cf78 <tcp_free>
      break;
 800d268:	e01a      	b.n	800d2a0 <tcp_close_shutdown+0x1a0>
    case LISTEN:
      tcp_listen_closed(pcb);
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff ff08 	bl	800d080 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800d270:	6879      	ldr	r1, [r7, #4]
 800d272:	4816      	ldr	r0, [pc, #88]	@ (800d2cc <tcp_close_shutdown+0x1cc>)
 800d274:	f001 fd54 	bl	800ed20 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7ff fe9d 	bl	800cfb8 <tcp_free_listen>
      break;
 800d27e:	e00f      	b.n	800d2a0 <tcp_close_shutdown+0x1a0>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d280:	6879      	ldr	r1, [r7, #4]
 800d282:	480e      	ldr	r0, [pc, #56]	@ (800d2bc <tcp_close_shutdown+0x1bc>)
 800d284:	f001 fd4c 	bl	800ed20 <tcp_pcb_remove>
 800d288:	4b0d      	ldr	r3, [pc, #52]	@ (800d2c0 <tcp_close_shutdown+0x1c0>)
 800d28a:	2201      	movs	r2, #1
 800d28c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff fe72 	bl	800cf78 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800d294:	e004      	b.n	800d2a0 <tcp_close_shutdown+0x1a0>
    default:
      return tcp_close_shutdown_fin(pcb);
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f81a 	bl	800d2d0 <tcp_close_shutdown_fin>
 800d29c:	4603      	mov	r3, r0
 800d29e:	e000      	b.n	800d2a2 <tcp_close_shutdown+0x1a2>
  }
  return ERR_OK;
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bdb0      	pop	{r4, r5, r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	0801e474 	.word	0x0801e474
 800d2b0:	0801e548 	.word	0x0801e548
 800d2b4:	0801e4b8 	.word	0x0801e4b8
 800d2b8:	0801e568 	.word	0x0801e568
 800d2bc:	20011d88 	.word	0x20011d88
 800d2c0:	20011d90 	.word	0x20011d90
 800d2c4:	20011dcc 	.word	0x20011dcc
 800d2c8:	20011d80 	.word	0x20011d80
 800d2cc:	20011d84 	.word	0x20011d84

0800d2d0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d109      	bne.n	800d2f2 <tcp_close_shutdown_fin+0x22>
 800d2de:	4b2f      	ldr	r3, [pc, #188]	@ (800d39c <tcp_close_shutdown_fin+0xcc>)
 800d2e0:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800d2e4:	492e      	ldr	r1, [pc, #184]	@ (800d3a0 <tcp_close_shutdown_fin+0xd0>)
 800d2e6:	482f      	ldr	r0, [pc, #188]	@ (800d3a4 <tcp_close_shutdown_fin+0xd4>)
 800d2e8:	f00e fa1e 	bl	801b728 <iprintf>
 800d2ec:	2000      	movs	r0, #0
 800d2ee:	f00e f945 	bl	801b57c <fflush>

  switch (pcb->state) {
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	7d1b      	ldrb	r3, [r3, #20]
 800d2f6:	2b07      	cmp	r3, #7
 800d2f8:	d020      	beq.n	800d33c <tcp_close_shutdown_fin+0x6c>
 800d2fa:	2b07      	cmp	r3, #7
 800d2fc:	dc2b      	bgt.n	800d356 <tcp_close_shutdown_fin+0x86>
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d002      	beq.n	800d308 <tcp_close_shutdown_fin+0x38>
 800d302:	2b04      	cmp	r3, #4
 800d304:	d00d      	beq.n	800d322 <tcp_close_shutdown_fin+0x52>
 800d306:	e026      	b.n	800d356 <tcp_close_shutdown_fin+0x86>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f005 ff17 	bl	801313c <tcp_send_fin>
 800d30e:	4603      	mov	r3, r0
 800d310:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d11f      	bne.n	800d35a <tcp_close_shutdown_fin+0x8a>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	2205      	movs	r2, #5
 800d31e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d320:	e01b      	b.n	800d35a <tcp_close_shutdown_fin+0x8a>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f005 ff0a 	bl	801313c <tcp_send_fin>
 800d328:	4603      	mov	r3, r0
 800d32a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d32c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d114      	bne.n	800d35e <tcp_close_shutdown_fin+0x8e>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2205      	movs	r2, #5
 800d338:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d33a:	e010      	b.n	800d35e <tcp_close_shutdown_fin+0x8e>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f005 fefd 	bl	801313c <tcp_send_fin>
 800d342:	4603      	mov	r3, r0
 800d344:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800d346:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d109      	bne.n	800d362 <tcp_close_shutdown_fin+0x92>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2209      	movs	r2, #9
 800d352:	751a      	strb	r2, [r3, #20]
      }
      break;
 800d354:	e005      	b.n	800d362 <tcp_close_shutdown_fin+0x92>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800d356:	2300      	movs	r3, #0
 800d358:	e01c      	b.n	800d394 <tcp_close_shutdown_fin+0xc4>
      break;
 800d35a:	bf00      	nop
 800d35c:	e002      	b.n	800d364 <tcp_close_shutdown_fin+0x94>
      break;
 800d35e:	bf00      	nop
 800d360:	e000      	b.n	800d364 <tcp_close_shutdown_fin+0x94>
      break;
 800d362:	bf00      	nop
  }

  if (err == ERR_OK) {
 800d364:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d103      	bne.n	800d374 <tcp_close_shutdown_fin+0xa4>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f006 f87d 	bl	801346c <tcp_output>
 800d372:	e00d      	b.n	800d390 <tcp_close_shutdown_fin+0xc0>
  } else if (err == ERR_MEM) {
 800d374:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d37c:	d108      	bne.n	800d390 <tcp_close_shutdown_fin+0xc0>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	8b5b      	ldrh	r3, [r3, #26]
 800d382:	f043 0308 	orr.w	r3, r3, #8
 800d386:	b29a      	uxth	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800d38c:	2300      	movs	r3, #0
 800d38e:	e001      	b.n	800d394 <tcp_close_shutdown_fin+0xc4>
  }
  return err;
 800d390:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d394:	4618      	mov	r0, r3
 800d396:	3710      	adds	r7, #16
 800d398:	46bd      	mov	sp, r7
 800d39a:	bd80      	pop	{r7, pc}
 800d39c:	0801e474 	.word	0x0801e474
 800d3a0:	0801e524 	.word	0x0801e524
 800d3a4:	0801e4b8 	.word	0x0801e4b8

0800d3a8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d10c      	bne.n	800d3d0 <tcp_close+0x28>
 800d3b6:	4b16      	ldr	r3, [pc, #88]	@ (800d410 <tcp_close+0x68>)
 800d3b8:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800d3bc:	4915      	ldr	r1, [pc, #84]	@ (800d414 <tcp_close+0x6c>)
 800d3be:	4816      	ldr	r0, [pc, #88]	@ (800d418 <tcp_close+0x70>)
 800d3c0:	f00e f9b2 	bl	801b728 <iprintf>
 800d3c4:	2000      	movs	r0, #0
 800d3c6:	f00e f8d9 	bl	801b57c <fflush>
 800d3ca:	f06f 030f 	mvn.w	r3, #15
 800d3ce:	e01a      	b.n	800d406 <tcp_close+0x5e>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
 800d3d0:	4812      	ldr	r0, [pc, #72]	@ (800d41c <tcp_close+0x74>)
 800d3d2:	f00e f9a9 	bl	801b728 <iprintf>
 800d3d6:	2000      	movs	r0, #0
 800d3d8:	f00e f8d0 	bl	801b57c <fflush>

  tcp_debug_print_state(pcb->state);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	7d1b      	ldrb	r3, [r3, #20]
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f001 ff61 	bl	800f2a8 <tcp_debug_print_state>

  if (pcb->state != LISTEN) {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	7d1b      	ldrb	r3, [r3, #20]
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d006      	beq.n	800d3fc <tcp_close+0x54>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	8b5b      	ldrh	r3, [r3, #26]
 800d3f2:	f043 0310 	orr.w	r3, r3, #16
 800d3f6:	b29a      	uxth	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800d3fc:	2101      	movs	r1, #1
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f7ff fe7e 	bl	800d100 <tcp_close_shutdown>
 800d404:	4603      	mov	r3, r0
}
 800d406:	4618      	mov	r0, r3
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	0801e474 	.word	0x0801e474
 800d414:	0801e584 	.word	0x0801e584
 800d418:	0801e4b8 	.word	0x0801e4b8
 800d41c:	0801e59c 	.word	0x0801e59c

0800d420 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	60f8      	str	r0, [r7, #12]
 800d428:	60b9      	str	r1, [r7, #8]
 800d42a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d10c      	bne.n	800d44c <tcp_shutdown+0x2c>
 800d432:	4b27      	ldr	r3, [pc, #156]	@ (800d4d0 <tcp_shutdown+0xb0>)
 800d434:	f240 2207 	movw	r2, #519	@ 0x207
 800d438:	4926      	ldr	r1, [pc, #152]	@ (800d4d4 <tcp_shutdown+0xb4>)
 800d43a:	4827      	ldr	r0, [pc, #156]	@ (800d4d8 <tcp_shutdown+0xb8>)
 800d43c:	f00e f974 	bl	801b728 <iprintf>
 800d440:	2000      	movs	r0, #0
 800d442:	f00e f89b 	bl	801b57c <fflush>
 800d446:	f06f 030f 	mvn.w	r3, #15
 800d44a:	e03d      	b.n	800d4c8 <tcp_shutdown+0xa8>

  if (pcb->state == LISTEN) {
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	7d1b      	ldrb	r3, [r3, #20]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d102      	bne.n	800d45a <tcp_shutdown+0x3a>
    return ERR_CONN;
 800d454:	f06f 030a 	mvn.w	r3, #10
 800d458:	e036      	b.n	800d4c8 <tcp_shutdown+0xa8>
  }
  if (shut_rx) {
 800d45a:	68bb      	ldr	r3, [r7, #8]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d01b      	beq.n	800d498 <tcp_shutdown+0x78>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	8b5b      	ldrh	r3, [r3, #26]
 800d464:	f043 0310 	orr.w	r3, r3, #16
 800d468:	b29a      	uxth	r2, r3
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d005      	beq.n	800d480 <tcp_shutdown+0x60>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800d474:	2101      	movs	r1, #1
 800d476:	68f8      	ldr	r0, [r7, #12]
 800d478:	f7ff fe42 	bl	800d100 <tcp_close_shutdown>
 800d47c:	4603      	mov	r3, r0
 800d47e:	e023      	b.n	800d4c8 <tcp_shutdown+0xa8>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d484:	2b00      	cmp	r3, #0
 800d486:	d007      	beq.n	800d498 <tcp_shutdown+0x78>
      pbuf_free(pcb->refused_data);
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff fa45 	bl	800c91c <pbuf_free>
      pcb->refused_data = NULL;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2200      	movs	r2, #0
 800d496:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d013      	beq.n	800d4c6 <tcp_shutdown+0xa6>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	7d1b      	ldrb	r3, [r3, #20]
 800d4a2:	2b04      	cmp	r3, #4
 800d4a4:	dc02      	bgt.n	800d4ac <tcp_shutdown+0x8c>
 800d4a6:	2b03      	cmp	r3, #3
 800d4a8:	da02      	bge.n	800d4b0 <tcp_shutdown+0x90>
 800d4aa:	e009      	b.n	800d4c0 <tcp_shutdown+0xa0>
 800d4ac:	2b07      	cmp	r3, #7
 800d4ae:	d107      	bne.n	800d4c0 <tcp_shutdown+0xa0>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	b2db      	uxtb	r3, r3
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f7ff fe22 	bl	800d100 <tcp_close_shutdown>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	e003      	b.n	800d4c8 <tcp_shutdown+0xa8>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800d4c0:	f06f 030a 	mvn.w	r3, #10
 800d4c4:	e000      	b.n	800d4c8 <tcp_shutdown+0xa8>
    }
  }
  return ERR_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	0801e474 	.word	0x0801e474
 800d4d4:	0801e5b4 	.word	0x0801e5b4
 800d4d8:	0801e4b8 	.word	0x0801e4b8

0800d4dc <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b08e      	sub	sp, #56	@ 0x38
 800d4e0:	af04      	add	r7, sp, #16
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10a      	bne.n	800d502 <tcp_abandon+0x26>
 800d4ec:	4b58      	ldr	r3, [pc, #352]	@ (800d650 <tcp_abandon+0x174>)
 800d4ee:	f240 223d 	movw	r2, #573	@ 0x23d
 800d4f2:	4958      	ldr	r1, [pc, #352]	@ (800d654 <tcp_abandon+0x178>)
 800d4f4:	4858      	ldr	r0, [pc, #352]	@ (800d658 <tcp_abandon+0x17c>)
 800d4f6:	f00e f917 	bl	801b728 <iprintf>
 800d4fa:	2000      	movs	r0, #0
 800d4fc:	f00e f83e 	bl	801b57c <fflush>
 800d500:	e0a2      	b.n	800d648 <tcp_abandon+0x16c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	7d1b      	ldrb	r3, [r3, #20]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d109      	bne.n	800d51e <tcp_abandon+0x42>
 800d50a:	4b51      	ldr	r3, [pc, #324]	@ (800d650 <tcp_abandon+0x174>)
 800d50c:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800d510:	4952      	ldr	r1, [pc, #328]	@ (800d65c <tcp_abandon+0x180>)
 800d512:	4851      	ldr	r0, [pc, #324]	@ (800d658 <tcp_abandon+0x17c>)
 800d514:	f00e f908 	bl	801b728 <iprintf>
 800d518:	2000      	movs	r0, #0
 800d51a:	f00e f82f 	bl	801b57c <fflush>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	7d1b      	ldrb	r3, [r3, #20]
 800d522:	2b0a      	cmp	r3, #10
 800d524:	d107      	bne.n	800d536 <tcp_abandon+0x5a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800d526:	6879      	ldr	r1, [r7, #4]
 800d528:	484d      	ldr	r0, [pc, #308]	@ (800d660 <tcp_abandon+0x184>)
 800d52a:	f001 fbf9 	bl	800ed20 <tcp_pcb_remove>
    tcp_free(pcb);
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	f7ff fd22 	bl	800cf78 <tcp_free>
 800d534:	e088      	b.n	800d648 <tcp_abandon+0x16c>
  } else {
    int send_rst = 0;
 800d536:	2300      	movs	r3, #0
 800d538:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800d53a:	2300      	movs	r3, #0
 800d53c:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d542:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d548:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d550:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	691b      	ldr	r3, [r3, #16]
 800d556:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	7d1b      	ldrb	r3, [r3, #20]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d126      	bne.n	800d5ae <tcp_abandon+0xd2>
      if (pcb->local_port != 0) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	8adb      	ldrh	r3, [r3, #22]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d02e      	beq.n	800d5c6 <tcp_abandon+0xea>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800d568:	4b3e      	ldr	r3, [pc, #248]	@ (800d664 <tcp_abandon+0x188>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	687a      	ldr	r2, [r7, #4]
 800d56e:	429a      	cmp	r2, r3
 800d570:	d105      	bne.n	800d57e <tcp_abandon+0xa2>
 800d572:	4b3c      	ldr	r3, [pc, #240]	@ (800d664 <tcp_abandon+0x188>)
 800d574:	681b      	ldr	r3, [r3, #0]
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	4a3a      	ldr	r2, [pc, #232]	@ (800d664 <tcp_abandon+0x188>)
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	e013      	b.n	800d5a6 <tcp_abandon+0xca>
 800d57e:	4b39      	ldr	r3, [pc, #228]	@ (800d664 <tcp_abandon+0x188>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	61fb      	str	r3, [r7, #28]
 800d584:	e00c      	b.n	800d5a0 <tcp_abandon+0xc4>
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	68db      	ldr	r3, [r3, #12]
 800d58a:	687a      	ldr	r2, [r7, #4]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d104      	bne.n	800d59a <tcp_abandon+0xbe>
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	68da      	ldr	r2, [r3, #12]
 800d594:	69fb      	ldr	r3, [r7, #28]
 800d596:	60da      	str	r2, [r3, #12]
 800d598:	e005      	b.n	800d5a6 <tcp_abandon+0xca>
 800d59a:	69fb      	ldr	r3, [r7, #28]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	61fb      	str	r3, [r7, #28]
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d1ef      	bne.n	800d586 <tcp_abandon+0xaa>
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	60da      	str	r2, [r3, #12]
 800d5ac:	e00b      	b.n	800d5c6 <tcp_abandon+0xea>
      }
    } else {
      send_rst = reset;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	8adb      	ldrh	r3, [r3, #22]
 800d5b6:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800d5b8:	6879      	ldr	r1, [r7, #4]
 800d5ba:	482b      	ldr	r0, [pc, #172]	@ (800d668 <tcp_abandon+0x18c>)
 800d5bc:	f001 fbb0 	bl	800ed20 <tcp_pcb_remove>
 800d5c0:	4b2a      	ldr	r3, [pc, #168]	@ (800d66c <tcp_abandon+0x190>)
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d004      	beq.n	800d5d8 <tcp_abandon+0xfc>
      tcp_segs_free(pcb->unacked);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 ffea 	bl	800e5ac <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d004      	beq.n	800d5ea <tcp_abandon+0x10e>
      tcp_segs_free(pcb->unsent);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f000 ffe1 	bl	800e5ac <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d004      	beq.n	800d5fc <tcp_abandon+0x120>
      tcp_segs_free(pcb->ooseq);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 ffd8 	bl	800e5ac <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d014      	beq.n	800d62c <tcp_abandon+0x150>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
 800d602:	481b      	ldr	r0, [pc, #108]	@ (800d670 <tcp_abandon+0x194>)
 800d604:	f00e f900 	bl	801b808 <puts>
 800d608:	2000      	movs	r0, #0
 800d60a:	f00d ffb7 	bl	801b57c <fflush>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d60e:	6879      	ldr	r1, [r7, #4]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	3304      	adds	r3, #4
 800d614:	687a      	ldr	r2, [r7, #4]
 800d616:	8b12      	ldrh	r2, [r2, #24]
 800d618:	9202      	str	r2, [sp, #8]
 800d61a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800d61c:	9201      	str	r2, [sp, #4]
 800d61e:	9300      	str	r3, [sp, #0]
 800d620:	460b      	mov	r3, r1
 800d622:	697a      	ldr	r2, [r7, #20]
 800d624:	69b9      	ldr	r1, [r7, #24]
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f006 fe02 	bl	8014230 <tcp_rst>
    }
    last_state = pcb->state;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	7d1b      	ldrb	r3, [r3, #20]
 800d630:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f7ff fca0 	bl	800cf78 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d638:	693b      	ldr	r3, [r7, #16]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d004      	beq.n	800d648 <tcp_abandon+0x16c>
 800d63e:	693b      	ldr	r3, [r7, #16]
 800d640:	f06f 010c 	mvn.w	r1, #12
 800d644:	68f8      	ldr	r0, [r7, #12]
 800d646:	4798      	blx	r3
  }
}
 800d648:	3728      	adds	r7, #40	@ 0x28
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}
 800d64e:	bf00      	nop
 800d650:	0801e474 	.word	0x0801e474
 800d654:	0801e5d0 	.word	0x0801e5d0
 800d658:	0801e4b8 	.word	0x0801e4b8
 800d65c:	0801e5ec 	.word	0x0801e5ec
 800d660:	20011d8c 	.word	0x20011d8c
 800d664:	20011d80 	.word	0x20011d80
 800d668:	20011d88 	.word	0x20011d88
 800d66c:	20011d90 	.word	0x20011d90
 800d670:	0801e620 	.word	0x0801e620

0800d674 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d67c:	2101      	movs	r1, #1
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f7ff ff2c 	bl	800d4dc <tcp_abandon>
}
 800d684:	bf00      	nop
 800d686:	3708      	adds	r7, #8
 800d688:	46bd      	mov	sp, r7
 800d68a:	bd80      	pop	{r7, pc}

0800d68c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b088      	sub	sp, #32
 800d690:	af00      	add	r7, sp, #0
 800d692:	60f8      	str	r0, [r7, #12]
 800d694:	60b9      	str	r1, [r7, #8]
 800d696:	4613      	mov	r3, r2
 800d698:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d69a:	2304      	movs	r3, #4
 800d69c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d101      	bne.n	800d6a8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d6a4:	4b45      	ldr	r3, [pc, #276]	@ (800d7bc <tcp_bind+0x130>)
 800d6a6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10c      	bne.n	800d6c8 <tcp_bind+0x3c>
 800d6ae:	4b44      	ldr	r3, [pc, #272]	@ (800d7c0 <tcp_bind+0x134>)
 800d6b0:	f240 22a9 	movw	r2, #681	@ 0x2a9
 800d6b4:	4943      	ldr	r1, [pc, #268]	@ (800d7c4 <tcp_bind+0x138>)
 800d6b6:	4844      	ldr	r0, [pc, #272]	@ (800d7c8 <tcp_bind+0x13c>)
 800d6b8:	f00e f836 	bl	801b728 <iprintf>
 800d6bc:	2000      	movs	r0, #0
 800d6be:	f00d ff5d 	bl	801b57c <fflush>
 800d6c2:	f06f 030f 	mvn.w	r3, #15
 800d6c6:	e075      	b.n	800d7b4 <tcp_bind+0x128>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	7d1b      	ldrb	r3, [r3, #20]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d00c      	beq.n	800d6ea <tcp_bind+0x5e>
 800d6d0:	4b3b      	ldr	r3, [pc, #236]	@ (800d7c0 <tcp_bind+0x134>)
 800d6d2:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d6d6:	493d      	ldr	r1, [pc, #244]	@ (800d7cc <tcp_bind+0x140>)
 800d6d8:	483b      	ldr	r0, [pc, #236]	@ (800d7c8 <tcp_bind+0x13c>)
 800d6da:	f00e f825 	bl	801b728 <iprintf>
 800d6de:	2000      	movs	r0, #0
 800d6e0:	f00d ff4c 	bl	801b57c <fflush>
 800d6e4:	f06f 0305 	mvn.w	r3, #5
 800d6e8:	e064      	b.n	800d7b4 <tcp_bind+0x128>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d6ea:	88fb      	ldrh	r3, [r7, #6]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d109      	bne.n	800d704 <tcp_bind+0x78>
    port = tcp_new_port();
 800d6f0:	f000 fa16 	bl	800db20 <tcp_new_port>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d6f8:	88fb      	ldrh	r3, [r7, #6]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d135      	bne.n	800d76a <tcp_bind+0xde>
      return ERR_BUF;
 800d6fe:	f06f 0301 	mvn.w	r3, #1
 800d702:	e057      	b.n	800d7b4 <tcp_bind+0x128>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d704:	2300      	movs	r3, #0
 800d706:	61fb      	str	r3, [r7, #28]
 800d708:	e02b      	b.n	800d762 <tcp_bind+0xd6>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d70a:	4a31      	ldr	r2, [pc, #196]	@ (800d7d0 <tcp_bind+0x144>)
 800d70c:	69fb      	ldr	r3, [r7, #28]
 800d70e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	61bb      	str	r3, [r7, #24]
 800d716:	e01e      	b.n	800d756 <tcp_bind+0xca>
        if (cpcb->local_port == port) {
 800d718:	69bb      	ldr	r3, [r7, #24]
 800d71a:	8adb      	ldrh	r3, [r3, #22]
 800d71c:	88fa      	ldrh	r2, [r7, #6]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d116      	bne.n	800d750 <tcp_bind+0xc4>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d722:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d724:	2b00      	cmp	r3, #0
 800d726:	d010      	beq.n	800d74a <tcp_bind+0xbe>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d728:	69bb      	ldr	r3, [r7, #24]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d00c      	beq.n	800d74a <tcp_bind+0xbe>
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d009      	beq.n	800d74a <tcp_bind+0xbe>
                 ip_addr_isany(ipaddr) ||
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d005      	beq.n	800d74a <tcp_bind+0xbe>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	681a      	ldr	r2, [r3, #0]
 800d742:	68bb      	ldr	r3, [r7, #8]
 800d744:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d746:	429a      	cmp	r2, r3
 800d748:	d102      	bne.n	800d750 <tcp_bind+0xc4>
              return ERR_USE;
 800d74a:	f06f 0307 	mvn.w	r3, #7
 800d74e:	e031      	b.n	800d7b4 <tcp_bind+0x128>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d750:	69bb      	ldr	r3, [r7, #24]
 800d752:	68db      	ldr	r3, [r3, #12]
 800d754:	61bb      	str	r3, [r7, #24]
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d1dd      	bne.n	800d718 <tcp_bind+0x8c>
    for (i = 0; i < max_pcb_list; i++) {
 800d75c:	69fb      	ldr	r3, [r7, #28]
 800d75e:	3301      	adds	r3, #1
 800d760:	61fb      	str	r3, [r7, #28]
 800d762:	69fa      	ldr	r2, [r7, #28]
 800d764:	697b      	ldr	r3, [r7, #20]
 800d766:	429a      	cmp	r2, r3
 800d768:	dbcf      	blt.n	800d70a <tcp_bind+0x7e>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00c      	beq.n	800d78a <tcp_bind+0xfe>
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d008      	beq.n	800d78a <tcp_bind+0xfe>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d778:	68bb      	ldr	r3, [r7, #8]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d002      	beq.n	800d784 <tcp_bind+0xf8>
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	e000      	b.n	800d786 <tcp_bind+0xfa>
 800d784:	2300      	movs	r3, #0
 800d786:	68fa      	ldr	r2, [r7, #12]
 800d788:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	88fa      	ldrh	r2, [r7, #6]
 800d78e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d790:	4b10      	ldr	r3, [pc, #64]	@ (800d7d4 <tcp_bind+0x148>)
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	60da      	str	r2, [r3, #12]
 800d798:	4a0e      	ldr	r2, [pc, #56]	@ (800d7d4 <tcp_bind+0x148>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	6013      	str	r3, [r2, #0]
 800d79e:	f006 ffe5 	bl	801476c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
 800d7a2:	88fb      	ldrh	r3, [r7, #6]
 800d7a4:	4619      	mov	r1, r3
 800d7a6:	480c      	ldr	r0, [pc, #48]	@ (800d7d8 <tcp_bind+0x14c>)
 800d7a8:	f00d ffbe 	bl	801b728 <iprintf>
 800d7ac:	2000      	movs	r0, #0
 800d7ae:	f00d fee5 	bl	801b57c <fflush>
  return ERR_OK;
 800d7b2:	2300      	movs	r3, #0
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3720      	adds	r7, #32
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	08025270 	.word	0x08025270
 800d7c0:	0801e474 	.word	0x0801e474
 800d7c4:	0801e63c 	.word	0x0801e63c
 800d7c8:	0801e4b8 	.word	0x0801e4b8
 800d7cc:	0801e654 	.word	0x0801e654
 800d7d0:	08025224 	.word	0x08025224
 800d7d4:	20011d80 	.word	0x20011d80
 800d7d8:	0801e67c 	.word	0x0801e67c

0800d7dc <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b084      	sub	sp, #16
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d109      	bne.n	800d804 <tcp_accept_null+0x28>
 800d7f0:	4b09      	ldr	r3, [pc, #36]	@ (800d818 <tcp_accept_null+0x3c>)
 800d7f2:	f240 320f 	movw	r2, #783	@ 0x30f
 800d7f6:	4909      	ldr	r1, [pc, #36]	@ (800d81c <tcp_accept_null+0x40>)
 800d7f8:	4809      	ldr	r0, [pc, #36]	@ (800d820 <tcp_accept_null+0x44>)
 800d7fa:	f00d ff95 	bl	801b728 <iprintf>
 800d7fe:	2000      	movs	r0, #0
 800d800:	f00d febc 	bl	801b57c <fflush>

  tcp_abort(pcb);
 800d804:	68b8      	ldr	r0, [r7, #8]
 800d806:	f7ff ff35 	bl	800d674 <tcp_abort>

  return ERR_ABRT;
 800d80a:	f06f 030c 	mvn.w	r3, #12
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
 800d816:	bf00      	nop
 800d818:	0801e474 	.word	0x0801e474
 800d81c:	0801e698 	.word	0x0801e698
 800d820:	0801e4b8 	.word	0x0801e4b8

0800d824 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b088      	sub	sp, #32
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	460b      	mov	r3, r1
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d832:	2300      	movs	r3, #0
 800d834:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10c      	bne.n	800d856 <tcp_listen_with_backlog_and_err+0x32>
 800d83c:	4b4a      	ldr	r3, [pc, #296]	@ (800d968 <tcp_listen_with_backlog_and_err+0x144>)
 800d83e:	f240 3259 	movw	r2, #857	@ 0x359
 800d842:	494a      	ldr	r1, [pc, #296]	@ (800d96c <tcp_listen_with_backlog_and_err+0x148>)
 800d844:	484a      	ldr	r0, [pc, #296]	@ (800d970 <tcp_listen_with_backlog_and_err+0x14c>)
 800d846:	f00d ff6f 	bl	801b728 <iprintf>
 800d84a:	2000      	movs	r0, #0
 800d84c:	f00d fe96 	bl	801b57c <fflush>
 800d850:	23f0      	movs	r3, #240	@ 0xf0
 800d852:	76fb      	strb	r3, [r7, #27]
 800d854:	e07c      	b.n	800d950 <tcp_listen_with_backlog_and_err+0x12c>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	7d1b      	ldrb	r3, [r3, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d00c      	beq.n	800d878 <tcp_listen_with_backlog_and_err+0x54>
 800d85e:	4b42      	ldr	r3, [pc, #264]	@ (800d968 <tcp_listen_with_backlog_and_err+0x144>)
 800d860:	f240 325a 	movw	r2, #858	@ 0x35a
 800d864:	4943      	ldr	r1, [pc, #268]	@ (800d974 <tcp_listen_with_backlog_and_err+0x150>)
 800d866:	4842      	ldr	r0, [pc, #264]	@ (800d970 <tcp_listen_with_backlog_and_err+0x14c>)
 800d868:	f00d ff5e 	bl	801b728 <iprintf>
 800d86c:	2000      	movs	r0, #0
 800d86e:	f00d fe85 	bl	801b57c <fflush>
 800d872:	23f1      	movs	r3, #241	@ 0xf1
 800d874:	76fb      	strb	r3, [r7, #27]
 800d876:	e06b      	b.n	800d950 <tcp_listen_with_backlog_and_err+0x12c>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	7d1b      	ldrb	r3, [r3, #20]
 800d87c:	2b01      	cmp	r3, #1
 800d87e:	d104      	bne.n	800d88a <tcp_listen_with_backlog_and_err+0x66>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d884:	23f7      	movs	r3, #247	@ 0xf7
 800d886:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d888:	e062      	b.n	800d950 <tcp_listen_with_backlog_and_err+0x12c>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d88a:	2002      	movs	r0, #2
 800d88c:	f7fd ff46 	bl	800b71c <memp_malloc>
 800d890:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d102      	bne.n	800d89e <tcp_listen_with_backlog_and_err+0x7a>
    res = ERR_MEM;
 800d898:	23ff      	movs	r3, #255	@ 0xff
 800d89a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d89c:	e058      	b.n	800d950 <tcp_listen_with_backlog_and_err+0x12c>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	691a      	ldr	r2, [r3, #16]
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	8ada      	ldrh	r2, [r3, #22]
 800d8aa:	69fb      	ldr	r3, [r7, #28]
 800d8ac:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d8ae:	69fb      	ldr	r3, [r7, #28]
 800d8b0:	2201      	movs	r2, #1
 800d8b2:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	7d5a      	ldrb	r2, [r3, #21]
 800d8b8:	69fb      	ldr	r3, [r7, #28]
 800d8ba:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	7a5a      	ldrb	r2, [r3, #9]
 800d8c0:	69fb      	ldr	r3, [r7, #28]
 800d8c2:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	7ada      	ldrb	r2, [r3, #11]
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	7a9a      	ldrb	r2, [r3, #10]
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	8adb      	ldrh	r3, [r3, #22]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d021      	beq.n	800d92e <tcp_listen_with_backlog_and_err+0x10a>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d8ea:	4b23      	ldr	r3, [pc, #140]	@ (800d978 <tcp_listen_with_backlog_and_err+0x154>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	68fa      	ldr	r2, [r7, #12]
 800d8f0:	429a      	cmp	r2, r3
 800d8f2:	d105      	bne.n	800d900 <tcp_listen_with_backlog_and_err+0xdc>
 800d8f4:	4b20      	ldr	r3, [pc, #128]	@ (800d978 <tcp_listen_with_backlog_and_err+0x154>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	4a1f      	ldr	r2, [pc, #124]	@ (800d978 <tcp_listen_with_backlog_and_err+0x154>)
 800d8fc:	6013      	str	r3, [r2, #0]
 800d8fe:	e013      	b.n	800d928 <tcp_listen_with_backlog_and_err+0x104>
 800d900:	4b1d      	ldr	r3, [pc, #116]	@ (800d978 <tcp_listen_with_backlog_and_err+0x154>)
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	617b      	str	r3, [r7, #20]
 800d906:	e00c      	b.n	800d922 <tcp_listen_with_backlog_and_err+0xfe>
 800d908:	697b      	ldr	r3, [r7, #20]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	429a      	cmp	r2, r3
 800d910:	d104      	bne.n	800d91c <tcp_listen_with_backlog_and_err+0xf8>
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	68da      	ldr	r2, [r3, #12]
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	60da      	str	r2, [r3, #12]
 800d91a:	e005      	b.n	800d928 <tcp_listen_with_backlog_and_err+0x104>
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	68db      	ldr	r3, [r3, #12]
 800d920:	617b      	str	r3, [r7, #20]
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1ef      	bne.n	800d908 <tcp_listen_with_backlog_and_err+0xe4>
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f7ff fb22 	bl	800cf78 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	4a11      	ldr	r2, [pc, #68]	@ (800d97c <tcp_listen_with_backlog_and_err+0x158>)
 800d938:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d93a:	4b11      	ldr	r3, [pc, #68]	@ (800d980 <tcp_listen_with_backlog_and_err+0x15c>)
 800d93c:	681a      	ldr	r2, [r3, #0]
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	60da      	str	r2, [r3, #12]
 800d942:	4a0f      	ldr	r2, [pc, #60]	@ (800d980 <tcp_listen_with_backlog_and_err+0x15c>)
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	f006 ff10 	bl	801476c <tcp_timer_needed>
  res = ERR_OK;
 800d94c:	2300      	movs	r3, #0
 800d94e:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d002      	beq.n	800d95c <tcp_listen_with_backlog_and_err+0x138>
    *err = res;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	7efa      	ldrb	r2, [r7, #27]
 800d95a:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d95c:	69fb      	ldr	r3, [r7, #28]
}
 800d95e:	4618      	mov	r0, r3
 800d960:	3720      	adds	r7, #32
 800d962:	46bd      	mov	sp, r7
 800d964:	bd80      	pop	{r7, pc}
 800d966:	bf00      	nop
 800d968:	0801e474 	.word	0x0801e474
 800d96c:	0801e6b8 	.word	0x0801e6b8
 800d970:	0801e4b8 	.word	0x0801e4b8
 800d974:	0801e6e8 	.word	0x0801e6e8
 800d978:	20011d80 	.word	0x20011d80
 800d97c:	0800d7dd 	.word	0x0800d7dd
 800d980:	20011d84 	.word	0x20011d84

0800d984 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d109      	bne.n	800d9a6 <tcp_update_rcv_ann_wnd+0x22>
 800d992:	4b28      	ldr	r3, [pc, #160]	@ (800da34 <tcp_update_rcv_ann_wnd+0xb0>)
 800d994:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800d998:	4927      	ldr	r1, [pc, #156]	@ (800da38 <tcp_update_rcv_ann_wnd+0xb4>)
 800d99a:	4828      	ldr	r0, [pc, #160]	@ (800da3c <tcp_update_rcv_ann_wnd+0xb8>)
 800d99c:	f00d fec4 	bl	801b728 <iprintf>
 800d9a0:	2000      	movs	r0, #0
 800d9a2:	f00d fdeb 	bl	801b57c <fflush>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800d9ae:	4413      	add	r3, r2
 800d9b0:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800d9ba:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800d9be:	bf28      	it	cs
 800d9c0:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800d9c4:	b292      	uxth	r2, r2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	1ad3      	subs	r3, r2, r3
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	db08      	blt.n	800d9e2 <tcp_update_rcv_ann_wnd+0x5e>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9dc:	68fa      	ldr	r2, [r7, #12]
 800d9de:	1ad3      	subs	r3, r2, r3
 800d9e0:	e023      	b.n	800da2a <tcp_update_rcv_ann_wnd+0xa6>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9ea:	1ad3      	subs	r3, r2, r3
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	dd03      	ble.n	800d9f8 <tcp_update_rcv_ann_wnd+0x74>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800d9f6:	e017      	b.n	800da28 <tcp_update_rcv_ann_wnd+0xa4>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800da0a:	d309      	bcc.n	800da20 <tcp_update_rcv_ann_wnd+0x9c>
 800da0c:	4b09      	ldr	r3, [pc, #36]	@ (800da34 <tcp_update_rcv_ann_wnd+0xb0>)
 800da0e:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800da12:	490b      	ldr	r1, [pc, #44]	@ (800da40 <tcp_update_rcv_ann_wnd+0xbc>)
 800da14:	4809      	ldr	r0, [pc, #36]	@ (800da3c <tcp_update_rcv_ann_wnd+0xb8>)
 800da16:	f00d fe87 	bl	801b728 <iprintf>
 800da1a:	2000      	movs	r0, #0
 800da1c:	f00d fdae 	bl	801b57c <fflush>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	b29a      	uxth	r2, r3
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800da28:	2300      	movs	r3, #0
  }
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	0801e474 	.word	0x0801e474
 800da38:	0801e720 	.word	0x0801e720
 800da3c:	0801e4b8 	.word	0x0801e4b8
 800da40:	0801e744 	.word	0x0801e744

0800da44 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b084      	sub	sp, #16
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	460b      	mov	r3, r1
 800da4e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d10a      	bne.n	800da6c <tcp_recved+0x28>
 800da56:	4b2c      	ldr	r3, [pc, #176]	@ (800db08 <tcp_recved+0xc4>)
 800da58:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800da5c:	492b      	ldr	r1, [pc, #172]	@ (800db0c <tcp_recved+0xc8>)
 800da5e:	482c      	ldr	r0, [pc, #176]	@ (800db10 <tcp_recved+0xcc>)
 800da60:	f00d fe62 	bl	801b728 <iprintf>
 800da64:	2000      	movs	r0, #0
 800da66:	f00d fd89 	bl	801b57c <fflush>
 800da6a:	e04a      	b.n	800db02 <tcp_recved+0xbe>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	7d1b      	ldrb	r3, [r3, #20]
 800da70:	2b01      	cmp	r3, #1
 800da72:	d109      	bne.n	800da88 <tcp_recved+0x44>
 800da74:	4b24      	ldr	r3, [pc, #144]	@ (800db08 <tcp_recved+0xc4>)
 800da76:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800da7a:	4926      	ldr	r1, [pc, #152]	@ (800db14 <tcp_recved+0xd0>)
 800da7c:	4824      	ldr	r0, [pc, #144]	@ (800db10 <tcp_recved+0xcc>)
 800da7e:	f00d fe53 	bl	801b728 <iprintf>
 800da82:	2000      	movs	r0, #0
 800da84:	f00d fd7a 	bl	801b57c <fflush>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800da8c:	887b      	ldrh	r3, [r7, #2]
 800da8e:	4413      	add	r3, r2
 800da90:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800da92:	89fb      	ldrh	r3, [r7, #14]
 800da94:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800da98:	d804      	bhi.n	800daa4 <tcp_recved+0x60>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800da9e:	89fa      	ldrh	r2, [r7, #14]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d20a      	bcs.n	800daba <tcp_recved+0x76>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
 800daa4:	481c      	ldr	r0, [pc, #112]	@ (800db18 <tcp_recved+0xd4>)
 800daa6:	f00d feaf 	bl	801b808 <puts>
 800daaa:	2000      	movs	r0, #0
 800daac:	f00d fd66 	bl	801b57c <fflush>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800dab6:	851a      	strh	r2, [r3, #40]	@ 0x28
 800dab8:	e002      	b.n	800dac0 <tcp_recved+0x7c>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	89fa      	ldrh	r2, [r7, #14]
 800dabe:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f7ff ff5f 	bl	800d984 <tcp_update_rcv_ann_wnd>
 800dac6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800dace:	d309      	bcc.n	800dae4 <tcp_recved+0xa0>
    tcp_ack_now(pcb);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	8b5b      	ldrh	r3, [r3, #26]
 800dad4:	f043 0302 	orr.w	r3, r3, #2
 800dad8:	b29a      	uxth	r2, r3
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f005 fcc4 	bl	801346c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
 800dae4:	8879      	ldrh	r1, [r7, #2]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daea:	461a      	mov	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daf0:	f5c3 6306 	rsb	r3, r3, #2144	@ 0x860
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	4809      	ldr	r0, [pc, #36]	@ (800db1c <tcp_recved+0xd8>)
 800daf8:	f00d fe16 	bl	801b728 <iprintf>
 800dafc:	2000      	movs	r0, #0
 800dafe:	f00d fd3d 	bl	801b57c <fflush>
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	0801e474 	.word	0x0801e474
 800db0c:	0801e760 	.word	0x0801e760
 800db10:	0801e4b8 	.word	0x0801e4b8
 800db14:	0801e778 	.word	0x0801e778
 800db18:	0801e7a0 	.word	0x0801e7a0
 800db1c:	0801e7dc 	.word	0x0801e7dc

0800db20 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800db26:	2300      	movs	r3, #0
 800db28:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800db2a:	4b1e      	ldr	r3, [pc, #120]	@ (800dba4 <tcp_new_port+0x84>)
 800db2c:	881b      	ldrh	r3, [r3, #0]
 800db2e:	3301      	adds	r3, #1
 800db30:	b29a      	uxth	r2, r3
 800db32:	4b1c      	ldr	r3, [pc, #112]	@ (800dba4 <tcp_new_port+0x84>)
 800db34:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800db36:	4b1b      	ldr	r3, [pc, #108]	@ (800dba4 <tcp_new_port+0x84>)
 800db38:	881b      	ldrh	r3, [r3, #0]
 800db3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800db3e:	4293      	cmp	r3, r2
 800db40:	d103      	bne.n	800db4a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800db42:	4b18      	ldr	r3, [pc, #96]	@ (800dba4 <tcp_new_port+0x84>)
 800db44:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800db48:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800db4a:	2300      	movs	r3, #0
 800db4c:	71fb      	strb	r3, [r7, #7]
 800db4e:	e01e      	b.n	800db8e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	4a15      	ldr	r2, [pc, #84]	@ (800dba8 <tcp_new_port+0x88>)
 800db54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	603b      	str	r3, [r7, #0]
 800db5c:	e011      	b.n	800db82 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	8ada      	ldrh	r2, [r3, #22]
 800db62:	4b10      	ldr	r3, [pc, #64]	@ (800dba4 <tcp_new_port+0x84>)
 800db64:	881b      	ldrh	r3, [r3, #0]
 800db66:	429a      	cmp	r2, r3
 800db68:	d108      	bne.n	800db7c <tcp_new_port+0x5c>
        n++;
 800db6a:	88bb      	ldrh	r3, [r7, #4]
 800db6c:	3301      	adds	r3, #1
 800db6e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800db70:	88bb      	ldrh	r3, [r7, #4]
 800db72:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800db76:	d3d8      	bcc.n	800db2a <tcp_new_port+0xa>
          return 0;
 800db78:	2300      	movs	r3, #0
 800db7a:	e00d      	b.n	800db98 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	68db      	ldr	r3, [r3, #12]
 800db80:	603b      	str	r3, [r7, #0]
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d1ea      	bne.n	800db5e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800db88:	79fb      	ldrb	r3, [r7, #7]
 800db8a:	3301      	adds	r3, #1
 800db8c:	71fb      	strb	r3, [r7, #7]
 800db8e:	79fb      	ldrb	r3, [r7, #7]
 800db90:	2b03      	cmp	r3, #3
 800db92:	d9dd      	bls.n	800db50 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800db94:	4b03      	ldr	r3, [pc, #12]	@ (800dba4 <tcp_new_port+0x84>)
 800db96:	881b      	ldrh	r3, [r3, #0]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr
 800dba4:	20000068 	.word	0x20000068
 800dba8:	08025224 	.word	0x08025224

0800dbac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800dbac:	b5b0      	push	{r4, r5, r7, lr}
 800dbae:	b090      	sub	sp, #64	@ 0x40
 800dbb0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800dbb2:	2300      	movs	r3, #0
 800dbb4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800dbb8:	4b85      	ldr	r3, [pc, #532]	@ (800ddd0 <tcp_slowtmr+0x224>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	4a84      	ldr	r2, [pc, #528]	@ (800ddd0 <tcp_slowtmr+0x224>)
 800dbc0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800dbc2:	4b84      	ldr	r3, [pc, #528]	@ (800ddd4 <tcp_slowtmr+0x228>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	4b82      	ldr	r3, [pc, #520]	@ (800ddd4 <tcp_slowtmr+0x228>)
 800dbcc:	701a      	strb	r2, [r3, #0]
 800dbce:	e000      	b.n	800dbd2 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800dbd0:	bf00      	nop
  prev = NULL;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800dbd6:	4b80      	ldr	r3, [pc, #512]	@ (800ddd8 <tcp_slowtmr+0x22c>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (pcb == NULL) {
 800dbdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f040 8348 	bne.w	800e274 <tcp_slowtmr+0x6c8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
 800dbe4:	487d      	ldr	r0, [pc, #500]	@ (800dddc <tcp_slowtmr+0x230>)
 800dbe6:	f00d fe0f 	bl	801b808 <puts>
 800dbea:	2000      	movs	r0, #0
 800dbec:	f00d fcc6 	bl	801b57c <fflush>
  while (pcb != NULL) {
 800dbf0:	e340      	b.n	800e274 <tcp_slowtmr+0x6c8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
 800dbf2:	487b      	ldr	r0, [pc, #492]	@ (800dde0 <tcp_slowtmr+0x234>)
 800dbf4:	f00d fe08 	bl	801b808 <puts>
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	f00d fcbf 	bl	801b57c <fflush>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800dbfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc00:	7d1b      	ldrb	r3, [r3, #20]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d109      	bne.n	800dc1a <tcp_slowtmr+0x6e>
 800dc06:	4b77      	ldr	r3, [pc, #476]	@ (800dde4 <tcp_slowtmr+0x238>)
 800dc08:	f240 42be 	movw	r2, #1214	@ 0x4be
 800dc0c:	4976      	ldr	r1, [pc, #472]	@ (800dde8 <tcp_slowtmr+0x23c>)
 800dc0e:	4877      	ldr	r0, [pc, #476]	@ (800ddec <tcp_slowtmr+0x240>)
 800dc10:	f00d fd8a 	bl	801b728 <iprintf>
 800dc14:	2000      	movs	r0, #0
 800dc16:	f00d fcb1 	bl	801b57c <fflush>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800dc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1c:	7d1b      	ldrb	r3, [r3, #20]
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d109      	bne.n	800dc36 <tcp_slowtmr+0x8a>
 800dc22:	4b70      	ldr	r3, [pc, #448]	@ (800dde4 <tcp_slowtmr+0x238>)
 800dc24:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800dc28:	4971      	ldr	r1, [pc, #452]	@ (800ddf0 <tcp_slowtmr+0x244>)
 800dc2a:	4870      	ldr	r0, [pc, #448]	@ (800ddec <tcp_slowtmr+0x240>)
 800dc2c:	f00d fd7c 	bl	801b728 <iprintf>
 800dc30:	2000      	movs	r0, #0
 800dc32:	f00d fca3 	bl	801b57c <fflush>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800dc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc38:	7d1b      	ldrb	r3, [r3, #20]
 800dc3a:	2b0a      	cmp	r3, #10
 800dc3c:	d109      	bne.n	800dc52 <tcp_slowtmr+0xa6>
 800dc3e:	4b69      	ldr	r3, [pc, #420]	@ (800dde4 <tcp_slowtmr+0x238>)
 800dc40:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800dc44:	496b      	ldr	r1, [pc, #428]	@ (800ddf4 <tcp_slowtmr+0x248>)
 800dc46:	4869      	ldr	r0, [pc, #420]	@ (800ddec <tcp_slowtmr+0x240>)
 800dc48:	f00d fd6e 	bl	801b728 <iprintf>
 800dc4c:	2000      	movs	r0, #0
 800dc4e:	f00d fc95 	bl	801b57c <fflush>
    if (pcb->last_timer == tcp_timer_ctr) {
 800dc52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc54:	7f9a      	ldrb	r2, [r3, #30]
 800dc56:	4b5f      	ldr	r3, [pc, #380]	@ (800ddd4 <tcp_slowtmr+0x228>)
 800dc58:	781b      	ldrb	r3, [r3, #0]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d105      	bne.n	800dc6a <tcp_slowtmr+0xbe>
      prev = pcb;
 800dc5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc60:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800dc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc64:	68db      	ldr	r3, [r3, #12]
 800dc66:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800dc68:	e304      	b.n	800e274 <tcp_slowtmr+0x6c8>
    pcb->last_timer = tcp_timer_ctr;
 800dc6a:	4b5a      	ldr	r3, [pc, #360]	@ (800ddd4 <tcp_slowtmr+0x228>)
 800dc6c:	781a      	ldrb	r2, [r3, #0]
 800dc6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc70:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800dc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc80:	7d1b      	ldrb	r3, [r3, #20]
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d110      	bne.n	800dca8 <tcp_slowtmr+0xfc>
 800dc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dc8c:	2b05      	cmp	r3, #5
 800dc8e:	d90b      	bls.n	800dca8 <tcp_slowtmr+0xfc>
      ++pcb_remove;
 800dc90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dc94:	3301      	adds	r3, #1
 800dc96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
 800dc9a:	4857      	ldr	r0, [pc, #348]	@ (800ddf8 <tcp_slowtmr+0x24c>)
 800dc9c:	f00d fdb4 	bl	801b808 <puts>
 800dca0:	2000      	movs	r0, #0
 800dca2:	f00d fc6b 	bl	801b57c <fflush>
 800dca6:	e14e      	b.n	800df46 <tcp_slowtmr+0x39a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800dca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800dcae:	2b0b      	cmp	r3, #11
 800dcb0:	d90b      	bls.n	800dcca <tcp_slowtmr+0x11e>
      ++pcb_remove;
 800dcb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dcb6:	3301      	adds	r3, #1
 800dcb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
 800dcbc:	484f      	ldr	r0, [pc, #316]	@ (800ddfc <tcp_slowtmr+0x250>)
 800dcbe:	f00d fda3 	bl	801b808 <puts>
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	f00d fc5a 	bl	801b57c <fflush>
 800dcc8:	e13d      	b.n	800df46 <tcp_slowtmr+0x39a>
      if (pcb->persist_backoff > 0) {
 800dcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dccc:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	f000 809b 	beq.w	800de0c <tcp_slowtmr+0x260>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800dcd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d009      	beq.n	800dcf2 <tcp_slowtmr+0x146>
 800dcde:	4b41      	ldr	r3, [pc, #260]	@ (800dde4 <tcp_slowtmr+0x238>)
 800dce0:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800dce4:	4946      	ldr	r1, [pc, #280]	@ (800de00 <tcp_slowtmr+0x254>)
 800dce6:	4841      	ldr	r0, [pc, #260]	@ (800ddec <tcp_slowtmr+0x240>)
 800dce8:	f00d fd1e 	bl	801b728 <iprintf>
 800dcec:	2000      	movs	r0, #0
 800dcee:	f00d fc45 	bl	801b57c <fflush>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800dcf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d109      	bne.n	800dd0e <tcp_slowtmr+0x162>
 800dcfa:	4b3a      	ldr	r3, [pc, #232]	@ (800dde4 <tcp_slowtmr+0x238>)
 800dcfc:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800dd00:	4940      	ldr	r1, [pc, #256]	@ (800de04 <tcp_slowtmr+0x258>)
 800dd02:	483a      	ldr	r0, [pc, #232]	@ (800ddec <tcp_slowtmr+0x240>)
 800dd04:	f00d fd10 	bl	801b728 <iprintf>
 800dd08:	2000      	movs	r0, #0
 800dd0a:	f00d fc37 	bl	801b57c <fflush>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800dd0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd10:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800dd14:	2b0b      	cmp	r3, #11
 800dd16:	d905      	bls.n	800dd24 <tcp_slowtmr+0x178>
          ++pcb_remove; /* max probes reached */
 800dd18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800dd22:	e110      	b.n	800df46 <tcp_slowtmr+0x39a>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800dd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd26:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800dd2a:	3b01      	subs	r3, #1
 800dd2c:	4a36      	ldr	r2, [pc, #216]	@ (800de08 <tcp_slowtmr+0x25c>)
 800dd2e:	5cd3      	ldrb	r3, [r2, r3]
 800dd30:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800dd32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd34:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dd38:	7c7a      	ldrb	r2, [r7, #17]
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d907      	bls.n	800dd4e <tcp_slowtmr+0x1a2>
            pcb->persist_cnt++;
 800dd3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd40:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dd44:	3301      	adds	r3, #1
 800dd46:	b2da      	uxtb	r2, r3
 800dd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd4a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800dd4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd50:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800dd54:	7c7a      	ldrb	r2, [r7, #17]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	f200 80f5 	bhi.w	800df46 <tcp_slowtmr+0x39a>
            int next_slot = 1; /* increment timer to next slot */
 800dd5c:	2301      	movs	r3, #1
 800dd5e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800dd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d108      	bne.n	800dd7c <tcp_slowtmr+0x1d0>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800dd6a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd6c:	f006 fbd6 	bl	801451c <tcp_zero_window_probe>
 800dd70:	4603      	mov	r3, r0
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d014      	beq.n	800dda0 <tcp_slowtmr+0x1f4>
                next_slot = 0; /* try probe again with current slot */
 800dd76:	2300      	movs	r3, #0
 800dd78:	623b      	str	r3, [r7, #32]
 800dd7a:	e011      	b.n	800dda0 <tcp_slowtmr+0x1f4>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800dd7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800dd82:	4619      	mov	r1, r3
 800dd84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd86:	f005 f855 	bl	8012e34 <tcp_split_unsent_seg>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d107      	bne.n	800dda0 <tcp_slowtmr+0x1f4>
                if (tcp_output(pcb) == ERR_OK) {
 800dd90:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dd92:	f005 fb6b 	bl	801346c <tcp_output>
 800dd96:	4603      	mov	r3, r0
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <tcp_slowtmr+0x1f4>
                  next_slot = 0;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800dda0:	6a3b      	ldr	r3, [r7, #32]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f000 80cf 	beq.w	800df46 <tcp_slowtmr+0x39a>
              pcb->persist_cnt = 0;
 800dda8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800ddb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddb2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ddb6:	2b06      	cmp	r3, #6
 800ddb8:	f200 80c5 	bhi.w	800df46 <tcp_slowtmr+0x39a>
                pcb->persist_backoff++;
 800ddbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddbe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800ddc2:	3301      	adds	r3, #1
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800ddcc:	e0bb      	b.n	800df46 <tcp_slowtmr+0x39a>
 800ddce:	bf00      	nop
 800ddd0:	20011d7c 	.word	0x20011d7c
 800ddd4:	20011d92 	.word	0x20011d92
 800ddd8:	20011d88 	.word	0x20011d88
 800dddc:	0801e890 	.word	0x0801e890
 800dde0:	0801e8ac 	.word	0x0801e8ac
 800dde4:	0801e474 	.word	0x0801e474
 800dde8:	0801e8d0 	.word	0x0801e8d0
 800ddec:	0801e4b8 	.word	0x0801e4b8
 800ddf0:	0801e8fc 	.word	0x0801e8fc
 800ddf4:	0801e928 	.word	0x0801e928
 800ddf8:	0801e958 	.word	0x0801e958
 800ddfc:	0801e980 	.word	0x0801e980
 800de00:	0801e9a8 	.word	0x0801e9a8
 800de04:	0801e9dc 	.word	0x0801e9dc
 800de08:	0802521c 	.word	0x0802521c
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800de0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de12:	2b00      	cmp	r3, #0
 800de14:	db0f      	blt.n	800de36 <tcp_slowtmr+0x28a>
 800de16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de18:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de1c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800de20:	4293      	cmp	r3, r2
 800de22:	d008      	beq.n	800de36 <tcp_slowtmr+0x28a>
          ++pcb->rtime;
 800de24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de26:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	3301      	adds	r3, #1
 800de2e:	b29b      	uxth	r3, r3
 800de30:	b21a      	sxth	r2, r3
 800de32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de34:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800de36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de38:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800de3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de3e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800de42:	429a      	cmp	r2, r3
 800de44:	db7f      	blt.n	800df46 <tcp_slowtmr+0x39a>
          LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_slowtmr: rtime %"S16_F
 800de46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de48:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800de4c:	4619      	mov	r1, r3
 800de4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de50:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800de54:	461a      	mov	r2, r3
 800de56:	4873      	ldr	r0, [pc, #460]	@ (800e024 <tcp_slowtmr+0x478>)
 800de58:	f00d fc66 	bl	801b728 <iprintf>
 800de5c:	2000      	movs	r0, #0
 800de5e:	f00d fb8d 	bl	801b57c <fflush>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800de62:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de64:	f005 febe 	bl	8013be4 <tcp_rexmit_rto_prepare>
 800de68:	4603      	mov	r3, r0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d007      	beq.n	800de7e <tcp_slowtmr+0x2d2>
 800de6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de72:	2b00      	cmp	r3, #0
 800de74:	d167      	bne.n	800df46 <tcp_slowtmr+0x39a>
 800de76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d063      	beq.n	800df46 <tcp_slowtmr+0x39a>
            if (pcb->state != SYN_SENT) {
 800de7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de80:	7d1b      	ldrb	r3, [r3, #20]
 800de82:	2b02      	cmp	r3, #2
 800de84:	d022      	beq.n	800decc <tcp_slowtmr+0x320>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800de86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800de8c:	2b0c      	cmp	r3, #12
 800de8e:	bf28      	it	cs
 800de90:	230c      	movcs	r3, #12
 800de92:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800de94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de96:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800de9a:	10db      	asrs	r3, r3, #3
 800de9c:	b21b      	sxth	r3, r3
 800de9e:	461a      	mov	r2, r3
 800dea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800dea6:	4413      	add	r3, r2
 800dea8:	7efa      	ldrb	r2, [r7, #27]
 800deaa:	495f      	ldr	r1, [pc, #380]	@ (800e028 <tcp_slowtmr+0x47c>)
 800deac:	5c8a      	ldrb	r2, [r1, r2]
 800deae:	4093      	lsls	r3, r2
 800deb0:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800deb8:	4293      	cmp	r3, r2
 800deba:	dc02      	bgt.n	800dec2 <tcp_slowtmr+0x316>
 800debc:	697b      	ldr	r3, [r7, #20]
 800debe:	b21a      	sxth	r2, r3
 800dec0:	e001      	b.n	800dec6 <tcp_slowtmr+0x31a>
 800dec2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800dec6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dec8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800decc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dece:	2200      	movs	r2, #0
 800ded0:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ded2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ded4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800ded8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800dede:	4293      	cmp	r3, r2
 800dee0:	bf28      	it	cs
 800dee2:	4613      	movcs	r3, r2
 800dee4:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800dee6:	8a7b      	ldrh	r3, [r7, #18]
 800dee8:	085b      	lsrs	r3, r3, #1
 800deea:	b29a      	uxth	r2, r3
 800deec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800deee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800def2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800def4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800def8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800defa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	b29b      	uxth	r3, r3
 800df00:	429a      	cmp	r2, r3
 800df02:	d206      	bcs.n	800df12 <tcp_slowtmr+0x366>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800df04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800df08:	005b      	lsls	r3, r3, #1
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df0e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800df12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df14:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800df16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df18:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
 800df1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df1e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800df22:	4619      	mov	r1, r3
 800df24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800df2a:	461a      	mov	r2, r3
 800df2c:	483f      	ldr	r0, [pc, #252]	@ (800e02c <tcp_slowtmr+0x480>)
 800df2e:	f00d fbfb 	bl	801b728 <iprintf>
 800df32:	2000      	movs	r0, #0
 800df34:	f00d fb22 	bl	801b57c <fflush>
            pcb->bytes_acked = 0;
 800df38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df3a:	2200      	movs	r2, #0
 800df3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800df40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800df42:	f005 fed9 	bl	8013cf8 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	7d1b      	ldrb	r3, [r3, #20]
 800df4a:	2b06      	cmp	r3, #6
 800df4c:	d117      	bne.n	800df7e <tcp_slowtmr+0x3d2>
      if (pcb->flags & TF_RXCLOSED) {
 800df4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df50:	8b5b      	ldrh	r3, [r3, #26]
 800df52:	f003 0310 	and.w	r3, r3, #16
 800df56:	2b00      	cmp	r3, #0
 800df58:	d011      	beq.n	800df7e <tcp_slowtmr+0x3d2>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df5a:	4b35      	ldr	r3, [pc, #212]	@ (800e030 <tcp_slowtmr+0x484>)
 800df5c:	681a      	ldr	r2, [r3, #0]
 800df5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df60:	6a1b      	ldr	r3, [r3, #32]
 800df62:	1ad3      	subs	r3, r2, r3
 800df64:	2b28      	cmp	r3, #40	@ 0x28
 800df66:	d90a      	bls.n	800df7e <tcp_slowtmr+0x3d2>
          ++pcb_remove;
 800df68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df6c:	3301      	adds	r3, #1
 800df6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in FIN-WAIT-2\n"));
 800df72:	4830      	ldr	r0, [pc, #192]	@ (800e034 <tcp_slowtmr+0x488>)
 800df74:	f00d fc48 	bl	801b808 <puts>
 800df78:	2000      	movs	r0, #0
 800df7a:	f00d faff 	bl	801b57c <fflush>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df80:	7a5b      	ldrb	r3, [r3, #9]
 800df82:	f003 0308 	and.w	r3, r3, #8
 800df86:	2b00      	cmp	r3, #0
 800df88:	f000 8084 	beq.w	800e094 <tcp_slowtmr+0x4e8>
        ((pcb->state == ESTABLISHED) ||
 800df8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df8e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800df90:	2b04      	cmp	r3, #4
 800df92:	d003      	beq.n	800df9c <tcp_slowtmr+0x3f0>
         (pcb->state == CLOSE_WAIT))) {
 800df94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df96:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800df98:	2b07      	cmp	r3, #7
 800df9a:	d17b      	bne.n	800e094 <tcp_slowtmr+0x4e8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800df9c:	4b24      	ldr	r3, [pc, #144]	@ (800e030 <tcp_slowtmr+0x484>)
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa2:	6a1b      	ldr	r3, [r3, #32]
 800dfa4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800dfa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800dfac:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800dfb0:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800dfb4:	4920      	ldr	r1, [pc, #128]	@ (800e038 <tcp_slowtmr+0x48c>)
 800dfb6:	fba1 1303 	umull	r1, r3, r1, r3
 800dfba:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800dfbc:	429a      	cmp	r2, r3
 800dfbe:	d941      	bls.n	800e044 <tcp_slowtmr+0x498>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
 800dfc0:	481e      	ldr	r0, [pc, #120]	@ (800e03c <tcp_slowtmr+0x490>)
 800dfc2:	f00d fbb1 	bl	801b728 <iprintf>
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	f00d fad8 	bl	801b57c <fflush>
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 800dfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfce:	685b      	ldr	r3, [r3, #4]
 800dfd0:	b2db      	uxtb	r3, r3
 800dfd2:	4619      	mov	r1, r3
 800dfd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	0a1b      	lsrs	r3, r3, #8
 800dfda:	b2db      	uxtb	r3, r3
 800dfdc:	461a      	mov	r2, r3
 800dfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfe0:	685b      	ldr	r3, [r3, #4]
 800dfe2:	0c1b      	lsrs	r3, r3, #16
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	0e1b      	lsrs	r3, r3, #24
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	4603      	mov	r3, r0
 800dff4:	4812      	ldr	r0, [pc, #72]	@ (800e040 <tcp_slowtmr+0x494>)
 800dff6:	f00d fb97 	bl	801b728 <iprintf>
 800dffa:	2000      	movs	r0, #0
 800dffc:	f00d fabe 	bl	801b57c <fflush>
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800e000:	200a      	movs	r0, #10
 800e002:	f00d fba3 	bl	801b74c <putchar>
 800e006:	2000      	movs	r0, #0
 800e008:	f00d fab8 	bl	801b57c <fflush>
        ++pcb_remove;
 800e00c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e010:	3301      	adds	r3, #1
 800e012:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800e016:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e01a:	3301      	adds	r3, #1
 800e01c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800e020:	e038      	b.n	800e094 <tcp_slowtmr+0x4e8>
 800e022:	bf00      	nop
 800e024:	0801ea14 	.word	0x0801ea14
 800e028:	0802520c 	.word	0x0802520c
 800e02c:	0801ea3c 	.word	0x0801ea3c
 800e030:	20011d7c 	.word	0x20011d7c
 800e034:	0801ea60 	.word	0x0801ea60
 800e038:	10624dd3 	.word	0x10624dd3
 800e03c:	0801ea90 	.word	0x0801ea90
 800e040:	0801eac8 	.word	0x0801eac8
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e044:	4b90      	ldr	r3, [pc, #576]	@ (800e288 <tcp_slowtmr+0x6dc>)
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e04a:	6a1b      	ldr	r3, [r3, #32]
 800e04c:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e04e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e050:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800e054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e056:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e05a:	4618      	mov	r0, r3
 800e05c:	4b8b      	ldr	r3, [pc, #556]	@ (800e28c <tcp_slowtmr+0x6e0>)
 800e05e:	fb00 f303 	mul.w	r3, r0, r3
 800e062:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e064:	498a      	ldr	r1, [pc, #552]	@ (800e290 <tcp_slowtmr+0x6e4>)
 800e066:	fba1 1303 	umull	r1, r3, r1, r3
 800e06a:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d911      	bls.n	800e094 <tcp_slowtmr+0x4e8>
        err = tcp_keepalive(pcb);
 800e070:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e072:	f006 f9bd 	bl	80143f0 <tcp_keepalive>
 800e076:	4603      	mov	r3, r0
 800e078:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800e07c:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e080:	2b00      	cmp	r3, #0
 800e082:	d107      	bne.n	800e094 <tcp_slowtmr+0x4e8>
          pcb->keep_cnt_sent++;
 800e084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e086:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800e08a:	3301      	adds	r3, #1
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e090:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800e094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d017      	beq.n	800e0cc <tcp_slowtmr+0x520>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e09c:	4b7a      	ldr	r3, [pc, #488]	@ (800e288 <tcp_slowtmr+0x6dc>)
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a2:	6a1b      	ldr	r3, [r3, #32]
 800e0a4:	1ad2      	subs	r2, r2, r3
 800e0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0a8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	005b      	lsls	r3, r3, #1
 800e0b2:	440b      	add	r3, r1
 800e0b4:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e0b6:	429a      	cmp	r2, r3
 800e0b8:	d308      	bcc.n	800e0cc <tcp_slowtmr+0x520>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
 800e0ba:	4876      	ldr	r0, [pc, #472]	@ (800e294 <tcp_slowtmr+0x6e8>)
 800e0bc:	f00d fba4 	bl	801b808 <puts>
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	f00d fa5b 	bl	801b57c <fflush>
      tcp_free_ooseq(pcb);
 800e0c6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e0c8:	f000 ffd2 	bl	800f070 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800e0cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ce:	7d1b      	ldrb	r3, [r3, #20]
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d111      	bne.n	800e0f8 <tcp_slowtmr+0x54c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e0d4:	4b6c      	ldr	r3, [pc, #432]	@ (800e288 <tcp_slowtmr+0x6dc>)
 800e0d6:	681a      	ldr	r2, [r3, #0]
 800e0d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0da:	6a1b      	ldr	r3, [r3, #32]
 800e0dc:	1ad3      	subs	r3, r2, r3
 800e0de:	2b28      	cmp	r3, #40	@ 0x28
 800e0e0:	d90a      	bls.n	800e0f8 <tcp_slowtmr+0x54c>
        ++pcb_remove;
 800e0e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
 800e0ec:	486a      	ldr	r0, [pc, #424]	@ (800e298 <tcp_slowtmr+0x6ec>)
 800e0ee:	f00d fb8b 	bl	801b808 <puts>
 800e0f2:	2000      	movs	r0, #0
 800e0f4:	f00d fa42 	bl	801b57c <fflush>
    if (pcb->state == LAST_ACK) {
 800e0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fa:	7d1b      	ldrb	r3, [r3, #20]
 800e0fc:	2b09      	cmp	r3, #9
 800e0fe:	d111      	bne.n	800e124 <tcp_slowtmr+0x578>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e100:	4b61      	ldr	r3, [pc, #388]	@ (800e288 <tcp_slowtmr+0x6dc>)
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e106:	6a1b      	ldr	r3, [r3, #32]
 800e108:	1ad3      	subs	r3, r2, r3
 800e10a:	2bf0      	cmp	r3, #240	@ 0xf0
 800e10c:	d90a      	bls.n	800e124 <tcp_slowtmr+0x578>
        ++pcb_remove;
 800e10e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e112:	3301      	adds	r3, #1
 800e114:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
 800e118:	4860      	ldr	r0, [pc, #384]	@ (800e29c <tcp_slowtmr+0x6f0>)
 800e11a:	f00d fb75 	bl	801b808 <puts>
 800e11e:	2000      	movs	r0, #0
 800e120:	f00d fa2c 	bl	801b57c <fflush>
    if (pcb_remove) {
 800e124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d066      	beq.n	800e1fa <tcp_slowtmr+0x64e>
      tcp_err_fn err_fn = pcb->errf;
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e132:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800e134:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e136:	f000 fd6f 	bl	800ec18 <tcp_pcb_purge>
      if (prev != NULL) {
 800e13a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d013      	beq.n	800e168 <tcp_slowtmr+0x5bc>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e140:	4b57      	ldr	r3, [pc, #348]	@ (800e2a0 <tcp_slowtmr+0x6f4>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e146:	429a      	cmp	r2, r3
 800e148:	d109      	bne.n	800e15e <tcp_slowtmr+0x5b2>
 800e14a:	4b56      	ldr	r3, [pc, #344]	@ (800e2a4 <tcp_slowtmr+0x6f8>)
 800e14c:	f240 526d 	movw	r2, #1389	@ 0x56d
 800e150:	4955      	ldr	r1, [pc, #340]	@ (800e2a8 <tcp_slowtmr+0x6fc>)
 800e152:	4856      	ldr	r0, [pc, #344]	@ (800e2ac <tcp_slowtmr+0x700>)
 800e154:	f00d fae8 	bl	801b728 <iprintf>
 800e158:	2000      	movs	r0, #0
 800e15a:	f00d fa0f 	bl	801b57c <fflush>
        prev->next = pcb->next;
 800e15e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e160:	68da      	ldr	r2, [r3, #12]
 800e162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e164:	60da      	str	r2, [r3, #12]
 800e166:	e012      	b.n	800e18e <tcp_slowtmr+0x5e2>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e168:	4b4d      	ldr	r3, [pc, #308]	@ (800e2a0 <tcp_slowtmr+0x6f4>)
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e16e:	429a      	cmp	r2, r3
 800e170:	d009      	beq.n	800e186 <tcp_slowtmr+0x5da>
 800e172:	4b4c      	ldr	r3, [pc, #304]	@ (800e2a4 <tcp_slowtmr+0x6f8>)
 800e174:	f240 5271 	movw	r2, #1393	@ 0x571
 800e178:	494d      	ldr	r1, [pc, #308]	@ (800e2b0 <tcp_slowtmr+0x704>)
 800e17a:	484c      	ldr	r0, [pc, #304]	@ (800e2ac <tcp_slowtmr+0x700>)
 800e17c:	f00d fad4 	bl	801b728 <iprintf>
 800e180:	2000      	movs	r0, #0
 800e182:	f00d f9fb 	bl	801b57c <fflush>
        tcp_active_pcbs = pcb->next;
 800e186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	4a45      	ldr	r2, [pc, #276]	@ (800e2a0 <tcp_slowtmr+0x6f4>)
 800e18c:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800e18e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e192:	2b00      	cmp	r3, #0
 800e194:	d013      	beq.n	800e1be <tcp_slowtmr+0x612>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e198:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800e19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800e19e:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800e1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a2:	3304      	adds	r3, #4
 800e1a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1a6:	8ad2      	ldrh	r2, [r2, #22]
 800e1a8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1aa:	8b09      	ldrh	r1, [r1, #24]
 800e1ac:	9102      	str	r1, [sp, #8]
 800e1ae:	9201      	str	r2, [sp, #4]
 800e1b0:	9300      	str	r3, [sp, #0]
 800e1b2:	462b      	mov	r3, r5
 800e1b4:	4622      	mov	r2, r4
 800e1b6:	4601      	mov	r1, r0
 800e1b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e1ba:	f006 f839 	bl	8014230 <tcp_rst>
      err_arg = pcb->callback_arg;
 800e1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c0:	691b      	ldr	r3, [r3, #16]
 800e1c2:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c6:	7d1b      	ldrb	r3, [r3, #20]
 800e1c8:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1cc:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e1d4:	6838      	ldr	r0, [r7, #0]
 800e1d6:	f7fe fecf 	bl	800cf78 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800e1da:	4b36      	ldr	r3, [pc, #216]	@ (800e2b4 <tcp_slowtmr+0x708>)
 800e1dc:	2200      	movs	r2, #0
 800e1de:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d004      	beq.n	800e1f0 <tcp_slowtmr+0x644>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f06f 010c 	mvn.w	r1, #12
 800e1ec:	68b8      	ldr	r0, [r7, #8]
 800e1ee:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e1f0:	4b30      	ldr	r3, [pc, #192]	@ (800e2b4 <tcp_slowtmr+0x708>)
 800e1f2:	781b      	ldrb	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d03d      	beq.n	800e274 <tcp_slowtmr+0x6c8>
        goto tcp_slowtmr_start;
 800e1f8:	e4eb      	b.n	800dbd2 <tcp_slowtmr+0x26>
      prev = pcb;
 800e1fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fc:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800e204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e206:	7f1b      	ldrb	r3, [r3, #28]
 800e208:	3301      	adds	r3, #1
 800e20a:	b2da      	uxtb	r2, r3
 800e20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e20e:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e212:	7f1a      	ldrb	r2, [r3, #28]
 800e214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e216:	7f5b      	ldrb	r3, [r3, #29]
 800e218:	429a      	cmp	r2, r3
 800e21a:	d32b      	bcc.n	800e274 <tcp_slowtmr+0x6c8>
        prev->polltmr = 0;
 800e21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e21e:	2200      	movs	r2, #0
 800e220:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
 800e222:	4825      	ldr	r0, [pc, #148]	@ (800e2b8 <tcp_slowtmr+0x70c>)
 800e224:	f00d faf0 	bl	801b808 <puts>
 800e228:	2000      	movs	r0, #0
 800e22a:	f00d f9a7 	bl	801b57c <fflush>
        tcp_active_pcbs_changed = 0;
 800e22e:	4b21      	ldr	r3, [pc, #132]	@ (800e2b4 <tcp_slowtmr+0x708>)
 800e230:	2200      	movs	r2, #0
 800e232:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d00b      	beq.n	800e256 <tcp_slowtmr+0x6aa>
 800e23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800e244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e246:	6912      	ldr	r2, [r2, #16]
 800e248:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e24a:	4610      	mov	r0, r2
 800e24c:	4798      	blx	r3
 800e24e:	4603      	mov	r3, r0
 800e250:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800e254:	e002      	b.n	800e25c <tcp_slowtmr+0x6b0>
 800e256:	2300      	movs	r3, #0
 800e258:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800e25c:	4b15      	ldr	r3, [pc, #84]	@ (800e2b4 <tcp_slowtmr+0x708>)
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	2b00      	cmp	r3, #0
 800e262:	f47f acb5 	bne.w	800dbd0 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e266:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d102      	bne.n	800e274 <tcp_slowtmr+0x6c8>
          tcp_output(prev);
 800e26e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e270:	f005 f8fc 	bl	801346c <tcp_output>
  while (pcb != NULL) {
 800e274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e276:	2b00      	cmp	r3, #0
 800e278:	f47f acbb 	bne.w	800dbf2 <tcp_slowtmr+0x46>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e27c:	2300      	movs	r3, #0
 800e27e:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800e280:	4b0e      	ldr	r3, [pc, #56]	@ (800e2bc <tcp_slowtmr+0x710>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e286:	e077      	b.n	800e378 <tcp_slowtmr+0x7cc>
 800e288:	20011d7c 	.word	0x20011d7c
 800e28c:	000124f8 	.word	0x000124f8
 800e290:	10624dd3 	.word	0x10624dd3
 800e294:	0801ead8 	.word	0x0801ead8
 800e298:	0801eb00 	.word	0x0801eb00
 800e29c:	0801eb2c 	.word	0x0801eb2c
 800e2a0:	20011d88 	.word	0x20011d88
 800e2a4:	0801e474 	.word	0x0801e474
 800e2a8:	0801eb58 	.word	0x0801eb58
 800e2ac:	0801e4b8 	.word	0x0801e4b8
 800e2b0:	0801eb84 	.word	0x0801eb84
 800e2b4:	20011d90 	.word	0x20011d90
 800e2b8:	0801ebb0 	.word	0x0801ebb0
 800e2bc:	20011d8c 	.word	0x20011d8c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e2c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2c2:	7d1b      	ldrb	r3, [r3, #20]
 800e2c4:	2b0a      	cmp	r3, #10
 800e2c6:	d009      	beq.n	800e2dc <tcp_slowtmr+0x730>
 800e2c8:	4b2f      	ldr	r3, [pc, #188]	@ (800e388 <tcp_slowtmr+0x7dc>)
 800e2ca:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800e2ce:	492f      	ldr	r1, [pc, #188]	@ (800e38c <tcp_slowtmr+0x7e0>)
 800e2d0:	482f      	ldr	r0, [pc, #188]	@ (800e390 <tcp_slowtmr+0x7e4>)
 800e2d2:	f00d fa29 	bl	801b728 <iprintf>
 800e2d6:	2000      	movs	r0, #0
 800e2d8:	f00d f950 	bl	801b57c <fflush>
    pcb_remove = 0;
 800e2dc:	2300      	movs	r3, #0
 800e2de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800e394 <tcp_slowtmr+0x7e8>)
 800e2e4:	681a      	ldr	r2, [r3, #0]
 800e2e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e8:	6a1b      	ldr	r3, [r3, #32]
 800e2ea:	1ad3      	subs	r3, r2, r3
 800e2ec:	2bf0      	cmp	r3, #240	@ 0xf0
 800e2ee:	d904      	bls.n	800e2fa <tcp_slowtmr+0x74e>
      ++pcb_remove;
 800e2f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e2fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d035      	beq.n	800e36e <tcp_slowtmr+0x7c2>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e302:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e304:	f000 fc88 	bl	800ec18 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d013      	beq.n	800e336 <tcp_slowtmr+0x78a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e30e:	4b22      	ldr	r3, [pc, #136]	@ (800e398 <tcp_slowtmr+0x7ec>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e314:	429a      	cmp	r2, r3
 800e316:	d109      	bne.n	800e32c <tcp_slowtmr+0x780>
 800e318:	4b1b      	ldr	r3, [pc, #108]	@ (800e388 <tcp_slowtmr+0x7dc>)
 800e31a:	f240 52af 	movw	r2, #1455	@ 0x5af
 800e31e:	491f      	ldr	r1, [pc, #124]	@ (800e39c <tcp_slowtmr+0x7f0>)
 800e320:	481b      	ldr	r0, [pc, #108]	@ (800e390 <tcp_slowtmr+0x7e4>)
 800e322:	f00d fa01 	bl	801b728 <iprintf>
 800e326:	2000      	movs	r0, #0
 800e328:	f00d f928 	bl	801b57c <fflush>
        prev->next = pcb->next;
 800e32c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32e:	68da      	ldr	r2, [r3, #12]
 800e330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e332:	60da      	str	r2, [r3, #12]
 800e334:	e012      	b.n	800e35c <tcp_slowtmr+0x7b0>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e336:	4b18      	ldr	r3, [pc, #96]	@ (800e398 <tcp_slowtmr+0x7ec>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d009      	beq.n	800e354 <tcp_slowtmr+0x7a8>
 800e340:	4b11      	ldr	r3, [pc, #68]	@ (800e388 <tcp_slowtmr+0x7dc>)
 800e342:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800e346:	4916      	ldr	r1, [pc, #88]	@ (800e3a0 <tcp_slowtmr+0x7f4>)
 800e348:	4811      	ldr	r0, [pc, #68]	@ (800e390 <tcp_slowtmr+0x7e4>)
 800e34a:	f00d f9ed 	bl	801b728 <iprintf>
 800e34e:	2000      	movs	r0, #0
 800e350:	f00d f914 	bl	801b57c <fflush>
        tcp_tw_pcbs = pcb->next;
 800e354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	4a0f      	ldr	r2, [pc, #60]	@ (800e398 <tcp_slowtmr+0x7ec>)
 800e35a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e35e:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800e366:	69f8      	ldr	r0, [r7, #28]
 800e368:	f7fe fe06 	bl	800cf78 <tcp_free>
 800e36c:	e004      	b.n	800e378 <tcp_slowtmr+0x7cc>
    } else {
      prev = pcb;
 800e36e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e370:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800e372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800e378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d1a0      	bne.n	800e2c0 <tcp_slowtmr+0x714>
    }
  }
}
 800e37e:	bf00      	nop
 800e380:	bf00      	nop
 800e382:	3730      	adds	r7, #48	@ 0x30
 800e384:	46bd      	mov	sp, r7
 800e386:	bdb0      	pop	{r4, r5, r7, pc}
 800e388:	0801e474 	.word	0x0801e474
 800e38c:	0801ebd4 	.word	0x0801ebd4
 800e390:	0801e4b8 	.word	0x0801e4b8
 800e394:	20011d7c 	.word	0x20011d7c
 800e398:	20011d8c 	.word	0x20011d8c
 800e39c:	0801ec04 	.word	0x0801ec04
 800e3a0:	0801ec2c 	.word	0x0801ec2c

0800e3a4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e3aa:	4b33      	ldr	r3, [pc, #204]	@ (800e478 <tcp_fasttmr+0xd4>)
 800e3ac:	781b      	ldrb	r3, [r3, #0]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	b2da      	uxtb	r2, r3
 800e3b2:	4b31      	ldr	r3, [pc, #196]	@ (800e478 <tcp_fasttmr+0xd4>)
 800e3b4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e3b6:	4b31      	ldr	r3, [pc, #196]	@ (800e47c <tcp_fasttmr+0xd8>)
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e3bc:	e054      	b.n	800e468 <tcp_fasttmr+0xc4>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	7f9a      	ldrb	r2, [r3, #30]
 800e3c2:	4b2d      	ldr	r3, [pc, #180]	@ (800e478 <tcp_fasttmr+0xd4>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	429a      	cmp	r2, r3
 800e3c8:	d04b      	beq.n	800e462 <tcp_fasttmr+0xbe>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e3ca:	4b2b      	ldr	r3, [pc, #172]	@ (800e478 <tcp_fasttmr+0xd4>)
 800e3cc:	781a      	ldrb	r2, [r3, #0]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	8b5b      	ldrh	r3, [r3, #26]
 800e3d6:	f003 0301 	and.w	r3, r3, #1
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d016      	beq.n	800e40c <tcp_fasttmr+0x68>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
 800e3de:	4828      	ldr	r0, [pc, #160]	@ (800e480 <tcp_fasttmr+0xdc>)
 800e3e0:	f00d fa12 	bl	801b808 <puts>
 800e3e4:	2000      	movs	r0, #0
 800e3e6:	f00d f8c9 	bl	801b57c <fflush>
        tcp_ack_now(pcb);
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	8b5b      	ldrh	r3, [r3, #26]
 800e3ee:	f043 0302 	orr.w	r3, r3, #2
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f005 f837 	bl	801346c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	8b5b      	ldrh	r3, [r3, #26]
 800e402:	f023 0303 	bic.w	r3, r3, #3
 800e406:	b29a      	uxth	r2, r3
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	8b5b      	ldrh	r3, [r3, #26]
 800e410:	f003 0308 	and.w	r3, r3, #8
 800e414:	2b00      	cmp	r3, #0
 800e416:	d00f      	beq.n	800e438 <tcp_fasttmr+0x94>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
 800e418:	481a      	ldr	r0, [pc, #104]	@ (800e484 <tcp_fasttmr+0xe0>)
 800e41a:	f00d f9f5 	bl	801b808 <puts>
 800e41e:	2000      	movs	r0, #0
 800e420:	f00d f8ac 	bl	801b57c <fflush>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	8b5b      	ldrh	r3, [r3, #26]
 800e428:	f023 0308 	bic.w	r3, r3, #8
 800e42c:	b29a      	uxth	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7fe ff4c 	bl	800d2d0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e442:	2b00      	cmp	r3, #0
 800e444:	d00a      	beq.n	800e45c <tcp_fasttmr+0xb8>
        tcp_active_pcbs_changed = 0;
 800e446:	4b10      	ldr	r3, [pc, #64]	@ (800e488 <tcp_fasttmr+0xe4>)
 800e448:	2200      	movs	r2, #0
 800e44a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 f81d 	bl	800e48c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e452:	4b0d      	ldr	r3, [pc, #52]	@ (800e488 <tcp_fasttmr+0xe4>)
 800e454:	781b      	ldrb	r3, [r3, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d000      	beq.n	800e45c <tcp_fasttmr+0xb8>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e45a:	e7ac      	b.n	800e3b6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	607b      	str	r3, [r7, #4]
 800e460:	e002      	b.n	800e468 <tcp_fasttmr+0xc4>
    } else {
      pcb = pcb->next;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1a7      	bne.n	800e3be <tcp_fasttmr+0x1a>
    }
  }
}
 800e46e:	bf00      	nop
 800e470:	bf00      	nop
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}
 800e478:	20011d92 	.word	0x20011d92
 800e47c:	20011d88 	.word	0x20011d88
 800e480:	0801ec54 	.word	0x0801ec54
 800e484:	0801ec70 	.word	0x0801ec70
 800e488:	20011d90 	.word	0x20011d90

0800e48c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e48c:	b590      	push	{r4, r7, lr}
 800e48e:	b085      	sub	sp, #20
 800e490:	af00      	add	r7, sp, #0
 800e492:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10c      	bne.n	800e4b4 <tcp_process_refused_data+0x28>
 800e49a:	4b3f      	ldr	r3, [pc, #252]	@ (800e598 <tcp_process_refused_data+0x10c>)
 800e49c:	f240 6209 	movw	r2, #1545	@ 0x609
 800e4a0:	493e      	ldr	r1, [pc, #248]	@ (800e59c <tcp_process_refused_data+0x110>)
 800e4a2:	483f      	ldr	r0, [pc, #252]	@ (800e5a0 <tcp_process_refused_data+0x114>)
 800e4a4:	f00d f940 	bl	801b728 <iprintf>
 800e4a8:	2000      	movs	r0, #0
 800e4aa:	f00d f867 	bl	801b57c <fflush>
 800e4ae:	f06f 030f 	mvn.w	r3, #15
 800e4b2:	e06c      	b.n	800e58e <tcp_process_refused_data+0x102>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4b8:	7b5b      	ldrb	r3, [r3, #13]
 800e4ba:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e4c0:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
 800e4c8:	4836      	ldr	r0, [pc, #216]	@ (800e5a4 <tcp_process_refused_data+0x118>)
 800e4ca:	f00d f99d 	bl	801b808 <puts>
 800e4ce:	2000      	movs	r0, #0
 800e4d0:	f00d f854 	bl	801b57c <fflush>
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00b      	beq.n	800e4f6 <tcp_process_refused_data+0x6a>
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6918      	ldr	r0, [r3, #16]
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	68ba      	ldr	r2, [r7, #8]
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	47a0      	blx	r4
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73fb      	strb	r3, [r7, #15]
 800e4f4:	e007      	b.n	800e506 <tcp_process_refused_data+0x7a>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	68ba      	ldr	r2, [r7, #8]
 800e4fa:	6879      	ldr	r1, [r7, #4]
 800e4fc:	2000      	movs	r0, #0
 800e4fe:	f000 f8b5 	bl	800e66c <tcp_recv_null>
 800e502:	4603      	mov	r3, r0
 800e504:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d12a      	bne.n	800e564 <tcp_process_refused_data+0xd8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800e50e:	7bbb      	ldrb	r3, [r7, #14]
 800e510:	f003 0320 	and.w	r3, r3, #32
 800e514:	2b00      	cmp	r3, #0
 800e516:	d039      	beq.n	800e58c <tcp_process_refused_data+0x100>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e51c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800e520:	d005      	beq.n	800e52e <tcp_process_refused_data+0xa2>
          pcb->rcv_wnd++;
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e526:	3301      	adds	r3, #1
 800e528:	b29a      	uxth	r2, r3
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00b      	beq.n	800e550 <tcp_process_refused_data+0xc4>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6918      	ldr	r0, [r3, #16]
 800e542:	2300      	movs	r3, #0
 800e544:	2200      	movs	r2, #0
 800e546:	6879      	ldr	r1, [r7, #4]
 800e548:	47a0      	blx	r4
 800e54a:	4603      	mov	r3, r0
 800e54c:	73fb      	strb	r3, [r7, #15]
 800e54e:	e001      	b.n	800e554 <tcp_process_refused_data+0xc8>
 800e550:	2300      	movs	r3, #0
 800e552:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e554:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e558:	f113 0f0d 	cmn.w	r3, #13
 800e55c:	d116      	bne.n	800e58c <tcp_process_refused_data+0x100>
          return ERR_ABRT;
 800e55e:	f06f 030c 	mvn.w	r3, #12
 800e562:	e014      	b.n	800e58e <tcp_process_refused_data+0x102>
        }
      }
    } else if (err == ERR_ABRT) {
 800e564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e568:	f113 0f0d 	cmn.w	r3, #13
 800e56c:	d108      	bne.n	800e580 <tcp_process_refused_data+0xf4>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
 800e56e:	480e      	ldr	r0, [pc, #56]	@ (800e5a8 <tcp_process_refused_data+0x11c>)
 800e570:	f00d f94a 	bl	801b808 <puts>
 800e574:	2000      	movs	r0, #0
 800e576:	f00d f801 	bl	801b57c <fflush>
      return ERR_ABRT;
 800e57a:	f06f 030c 	mvn.w	r3, #12
 800e57e:	e006      	b.n	800e58e <tcp_process_refused_data+0x102>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	68ba      	ldr	r2, [r7, #8]
 800e584:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800e586:	f06f 0304 	mvn.w	r3, #4
 800e58a:	e000      	b.n	800e58e <tcp_process_refused_data+0x102>
    }
  }
  return ERR_OK;
 800e58c:	2300      	movs	r3, #0
}
 800e58e:	4618      	mov	r0, r3
 800e590:	3714      	adds	r7, #20
 800e592:	46bd      	mov	sp, r7
 800e594:	bd90      	pop	{r4, r7, pc}
 800e596:	bf00      	nop
 800e598:	0801e474 	.word	0x0801e474
 800e59c:	0801ec8c 	.word	0x0801ec8c
 800e5a0:	0801e4b8 	.word	0x0801e4b8
 800e5a4:	0801ecb4 	.word	0x0801ecb4
 800e5a8:	0801ecd4 	.word	0x0801ecd4

0800e5ac <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e5b4:	e007      	b.n	800e5c6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f000 f80a 	bl	800e5d6 <tcp_seg_free>
    seg = next;
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d1f4      	bne.n	800e5b6 <tcp_segs_free+0xa>
  }
}
 800e5cc:	bf00      	nop
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}

0800e5d6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e5d6:	b580      	push	{r7, lr}
 800e5d8:	b082      	sub	sp, #8
 800e5da:	af00      	add	r7, sp, #0
 800e5dc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d00f      	beq.n	800e604 <tcp_seg_free+0x2e>
    if (seg->p != NULL) {
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	685b      	ldr	r3, [r3, #4]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d007      	beq.n	800e5fc <tcp_seg_free+0x26>
      pbuf_free(seg->p);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f7fe f993 	bl	800c91c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	605a      	str	r2, [r3, #4]
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e5fc:	6879      	ldr	r1, [r7, #4]
 800e5fe:	2003      	movs	r0, #3
 800e600:	f7fd f90e 	bl	800b820 <memp_free>
  }
}
 800e604:	bf00      	nop
 800e606:	3708      	adds	r7, #8
 800e608:	46bd      	mov	sp, r7
 800e60a:	bd80      	pop	{r7, pc}

0800e60c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d109      	bne.n	800e62e <tcp_seg_copy+0x22>
 800e61a:	4b11      	ldr	r3, [pc, #68]	@ (800e660 <tcp_seg_copy+0x54>)
 800e61c:	f240 6282 	movw	r2, #1666	@ 0x682
 800e620:	4910      	ldr	r1, [pc, #64]	@ (800e664 <tcp_seg_copy+0x58>)
 800e622:	4811      	ldr	r0, [pc, #68]	@ (800e668 <tcp_seg_copy+0x5c>)
 800e624:	f00d f880 	bl	801b728 <iprintf>
 800e628:	2000      	movs	r0, #0
 800e62a:	f00c ffa7 	bl	801b57c <fflush>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e62e:	2003      	movs	r0, #3
 800e630:	f7fd f874 	bl	800b71c <memp_malloc>
 800e634:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d101      	bne.n	800e640 <tcp_seg_copy+0x34>
    return NULL;
 800e63c:	2300      	movs	r3, #0
 800e63e:	e00a      	b.n	800e656 <tcp_seg_copy+0x4a>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e640:	2214      	movs	r2, #20
 800e642:	6879      	ldr	r1, [r7, #4]
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f00d fa56 	bl	801baf6 <memcpy>
  pbuf_ref(cseg->p);
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	685b      	ldr	r3, [r3, #4]
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fe fa3a 	bl	800cac8 <pbuf_ref>
  return cseg;
 800e654:	68fb      	ldr	r3, [r7, #12]
}
 800e656:	4618      	mov	r0, r3
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}
 800e65e:	bf00      	nop
 800e660:	0801e474 	.word	0x0801e474
 800e664:	0801ed28 	.word	0x0801ed28
 800e668:	0801e4b8 	.word	0x0801e4b8

0800e66c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b084      	sub	sp, #16
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	607a      	str	r2, [r7, #4]
 800e678:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10c      	bne.n	800e69a <tcp_recv_null+0x2e>
 800e680:	4b13      	ldr	r3, [pc, #76]	@ (800e6d0 <tcp_recv_null+0x64>)
 800e682:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800e686:	4913      	ldr	r1, [pc, #76]	@ (800e6d4 <tcp_recv_null+0x68>)
 800e688:	4813      	ldr	r0, [pc, #76]	@ (800e6d8 <tcp_recv_null+0x6c>)
 800e68a:	f00d f84d 	bl	801b728 <iprintf>
 800e68e:	2000      	movs	r0, #0
 800e690:	f00c ff74 	bl	801b57c <fflush>
 800e694:	f06f 030f 	mvn.w	r3, #15
 800e698:	e016      	b.n	800e6c8 <tcp_recv_null+0x5c>

  if (p != NULL) {
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d009      	beq.n	800e6b4 <tcp_recv_null+0x48>
    tcp_recved(pcb, p->tot_len);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	891b      	ldrh	r3, [r3, #8]
 800e6a4:	4619      	mov	r1, r3
 800e6a6:	68b8      	ldr	r0, [r7, #8]
 800e6a8:	f7ff f9cc 	bl	800da44 <tcp_recved>
    pbuf_free(p);
 800e6ac:	6878      	ldr	r0, [r7, #4]
 800e6ae:	f7fe f935 	bl	800c91c <pbuf_free>
 800e6b2:	e008      	b.n	800e6c6 <tcp_recv_null+0x5a>
  } else if (err == ERR_OK) {
 800e6b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d104      	bne.n	800e6c6 <tcp_recv_null+0x5a>
    return tcp_close(pcb);
 800e6bc:	68b8      	ldr	r0, [r7, #8]
 800e6be:	f7fe fe73 	bl	800d3a8 <tcp_close>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	e000      	b.n	800e6c8 <tcp_recv_null+0x5c>
  }
  return ERR_OK;
 800e6c6:	2300      	movs	r3, #0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	0801e474 	.word	0x0801e474
 800e6d4:	0801ed44 	.word	0x0801ed44
 800e6d8:	0801e4b8 	.word	0x0801e4b8

0800e6dc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800e6e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	db01      	blt.n	800e6f2 <tcp_kill_prio+0x16>
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	e000      	b.n	800e6f4 <tcp_kill_prio+0x18>
 800e6f2:	237f      	movs	r3, #127	@ 0x7f
 800e6f4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800e6f6:	7afb      	ldrb	r3, [r7, #11]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d03c      	beq.n	800e776 <tcp_kill_prio+0x9a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800e6fc:	7afb      	ldrb	r3, [r7, #11]
 800e6fe:	3b01      	subs	r3, #1
 800e700:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800e702:	2300      	movs	r3, #0
 800e704:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e706:	2300      	movs	r3, #0
 800e708:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e70a:	4b1d      	ldr	r3, [pc, #116]	@ (800e780 <tcp_kill_prio+0xa4>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	617b      	str	r3, [r7, #20]
 800e710:	e01f      	b.n	800e752 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	7d5b      	ldrb	r3, [r3, #21]
 800e716:	7afa      	ldrb	r2, [r7, #11]
 800e718:	429a      	cmp	r2, r3
 800e71a:	d80c      	bhi.n	800e736 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800e720:	7afa      	ldrb	r2, [r7, #11]
 800e722:	429a      	cmp	r2, r3
 800e724:	d112      	bne.n	800e74c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800e726:	4b17      	ldr	r3, [pc, #92]	@ (800e784 <tcp_kill_prio+0xa8>)
 800e728:	681a      	ldr	r2, [r3, #0]
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	6a1b      	ldr	r3, [r3, #32]
 800e72e:	1ad3      	subs	r3, r2, r3
 800e730:	68fa      	ldr	r2, [r7, #12]
 800e732:	429a      	cmp	r2, r3
 800e734:	d80a      	bhi.n	800e74c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800e736:	4b13      	ldr	r3, [pc, #76]	@ (800e784 <tcp_kill_prio+0xa8>)
 800e738:	681a      	ldr	r2, [r3, #0]
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	6a1b      	ldr	r3, [r3, #32]
 800e73e:	1ad3      	subs	r3, r2, r3
 800e740:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800e742:	697b      	ldr	r3, [r7, #20]
 800e744:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800e746:	697b      	ldr	r3, [r7, #20]
 800e748:	7d5b      	ldrb	r3, [r3, #21]
 800e74a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e74c:	697b      	ldr	r3, [r7, #20]
 800e74e:	68db      	ldr	r3, [r3, #12]
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d1dc      	bne.n	800e712 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800e758:	693b      	ldr	r3, [r7, #16]
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d00c      	beq.n	800e778 <tcp_kill_prio+0x9c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
 800e75e:	68fa      	ldr	r2, [r7, #12]
 800e760:	6939      	ldr	r1, [r7, #16]
 800e762:	4809      	ldr	r0, [pc, #36]	@ (800e788 <tcp_kill_prio+0xac>)
 800e764:	f00c ffe0 	bl	801b728 <iprintf>
 800e768:	2000      	movs	r0, #0
 800e76a:	f00c ff07 	bl	801b57c <fflush>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e76e:	6938      	ldr	r0, [r7, #16]
 800e770:	f7fe ff80 	bl	800d674 <tcp_abort>
 800e774:	e000      	b.n	800e778 <tcp_kill_prio+0x9c>
    return;
 800e776:	bf00      	nop
  }
}
 800e778:	3718      	adds	r7, #24
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}
 800e77e:	bf00      	nop
 800e780:	20011d88 	.word	0x20011d88
 800e784:	20011d7c 	.word	0x20011d7c
 800e788:	0801ed60 	.word	0x0801ed60

0800e78c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b086      	sub	sp, #24
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800e796:	79fb      	ldrb	r3, [r7, #7]
 800e798:	2b08      	cmp	r3, #8
 800e79a:	d00c      	beq.n	800e7b6 <tcp_kill_state+0x2a>
 800e79c:	79fb      	ldrb	r3, [r7, #7]
 800e79e:	2b09      	cmp	r3, #9
 800e7a0:	d009      	beq.n	800e7b6 <tcp_kill_state+0x2a>
 800e7a2:	4b22      	ldr	r3, [pc, #136]	@ (800e82c <tcp_kill_state+0xa0>)
 800e7a4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800e7a8:	4921      	ldr	r1, [pc, #132]	@ (800e830 <tcp_kill_state+0xa4>)
 800e7aa:	4822      	ldr	r0, [pc, #136]	@ (800e834 <tcp_kill_state+0xa8>)
 800e7ac:	f00c ffbc 	bl	801b728 <iprintf>
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	f00c fee3 	bl	801b57c <fflush>

  inactivity = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7be:	4b1e      	ldr	r3, [pc, #120]	@ (800e838 <tcp_kill_state+0xac>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	617b      	str	r3, [r7, #20]
 800e7c4:	e017      	b.n	800e7f6 <tcp_kill_state+0x6a>
    if (pcb->state == state) {
 800e7c6:	697b      	ldr	r3, [r7, #20]
 800e7c8:	7d1b      	ldrb	r3, [r3, #20]
 800e7ca:	79fa      	ldrb	r2, [r7, #7]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d10f      	bne.n	800e7f0 <tcp_kill_state+0x64>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e7d0:	4b1a      	ldr	r3, [pc, #104]	@ (800e83c <tcp_kill_state+0xb0>)
 800e7d2:	681a      	ldr	r2, [r3, #0]
 800e7d4:	697b      	ldr	r3, [r7, #20]
 800e7d6:	6a1b      	ldr	r3, [r3, #32]
 800e7d8:	1ad3      	subs	r3, r2, r3
 800e7da:	68fa      	ldr	r2, [r7, #12]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d807      	bhi.n	800e7f0 <tcp_kill_state+0x64>
        inactivity = tcp_ticks - pcb->tmr;
 800e7e0:	4b16      	ldr	r3, [pc, #88]	@ (800e83c <tcp_kill_state+0xb0>)
 800e7e2:	681a      	ldr	r2, [r3, #0]
 800e7e4:	697b      	ldr	r3, [r7, #20]
 800e7e6:	6a1b      	ldr	r3, [r3, #32]
 800e7e8:	1ad3      	subs	r3, r2, r3
 800e7ea:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e7ec:	697b      	ldr	r3, [r7, #20]
 800e7ee:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	617b      	str	r3, [r7, #20]
 800e7f6:	697b      	ldr	r3, [r7, #20]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d1e4      	bne.n	800e7c6 <tcp_kill_state+0x3a>
      }
    }
  }
  if (inactive != NULL) {
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00f      	beq.n	800e822 <tcp_kill_state+0x96>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
 800e802:	79fb      	ldrb	r3, [r7, #7]
 800e804:	4a0e      	ldr	r2, [pc, #56]	@ (800e840 <tcp_kill_state+0xb4>)
 800e806:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	693a      	ldr	r2, [r7, #16]
 800e80e:	480d      	ldr	r0, [pc, #52]	@ (800e844 <tcp_kill_state+0xb8>)
 800e810:	f00c ff8a 	bl	801b728 <iprintf>
 800e814:	2000      	movs	r0, #0
 800e816:	f00c feb1 	bl	801b57c <fflush>
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e81a:	2100      	movs	r1, #0
 800e81c:	6938      	ldr	r0, [r7, #16]
 800e81e:	f7fe fe5d 	bl	800d4dc <tcp_abandon>
  }
}
 800e822:	bf00      	nop
 800e824:	3718      	adds	r7, #24
 800e826:	46bd      	mov	sp, r7
 800e828:	bd80      	pop	{r7, pc}
 800e82a:	bf00      	nop
 800e82c:	0801e474 	.word	0x0801e474
 800e830:	0801ed8c 	.word	0x0801ed8c
 800e834:	0801e4b8 	.word	0x0801e4b8
 800e838:	20011d88 	.word	0x20011d88
 800e83c:	20011d7c 	.word	0x20011d7c
 800e840:	080251e0 	.word	0x080251e0
 800e844:	0801ed9c 	.word	0x0801ed9c

0800e848 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e84e:	2300      	movs	r3, #0
 800e850:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e852:	2300      	movs	r3, #0
 800e854:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e856:	4b16      	ldr	r3, [pc, #88]	@ (800e8b0 <tcp_kill_timewait+0x68>)
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	60fb      	str	r3, [r7, #12]
 800e85c:	e012      	b.n	800e884 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e85e:	4b15      	ldr	r3, [pc, #84]	@ (800e8b4 <tcp_kill_timewait+0x6c>)
 800e860:	681a      	ldr	r2, [r3, #0]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	6a1b      	ldr	r3, [r3, #32]
 800e866:	1ad3      	subs	r3, r2, r3
 800e868:	687a      	ldr	r2, [r7, #4]
 800e86a:	429a      	cmp	r2, r3
 800e86c:	d807      	bhi.n	800e87e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e86e:	4b11      	ldr	r3, [pc, #68]	@ (800e8b4 <tcp_kill_timewait+0x6c>)
 800e870:	681a      	ldr	r2, [r3, #0]
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	1ad3      	subs	r3, r2, r3
 800e878:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	68db      	ldr	r3, [r3, #12]
 800e882:	60fb      	str	r3, [r7, #12]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1e9      	bne.n	800e85e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d00a      	beq.n	800e8a6 <tcp_kill_timewait+0x5e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
 800e890:	687a      	ldr	r2, [r7, #4]
 800e892:	68b9      	ldr	r1, [r7, #8]
 800e894:	4808      	ldr	r0, [pc, #32]	@ (800e8b8 <tcp_kill_timewait+0x70>)
 800e896:	f00c ff47 	bl	801b728 <iprintf>
 800e89a:	2000      	movs	r0, #0
 800e89c:	f00c fe6e 	bl	801b57c <fflush>
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e8a0:	68b8      	ldr	r0, [r7, #8]
 800e8a2:	f7fe fee7 	bl	800d674 <tcp_abort>
  }
}
 800e8a6:	bf00      	nop
 800e8a8:	3710      	adds	r7, #16
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	20011d8c 	.word	0x20011d8c
 800e8b4:	20011d7c 	.word	0x20011d7c
 800e8b8:	0801edd0 	.word	0x0801edd0

0800e8bc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b082      	sub	sp, #8
 800e8c0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e8c2:	4b13      	ldr	r3, [pc, #76]	@ (800e910 <tcp_handle_closepend+0x54>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e8c8:	e01a      	b.n	800e900 <tcp_handle_closepend+0x44>
    struct tcp_pcb *next = pcb->next;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	8b5b      	ldrh	r3, [r3, #26]
 800e8d4:	f003 0308 	and.w	r3, r3, #8
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d00f      	beq.n	800e8fc <tcp_handle_closepend+0x40>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
 800e8dc:	480d      	ldr	r0, [pc, #52]	@ (800e914 <tcp_handle_closepend+0x58>)
 800e8de:	f00c ff93 	bl	801b808 <puts>
 800e8e2:	2000      	movs	r0, #0
 800e8e4:	f00c fe4a 	bl	801b57c <fflush>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	8b5b      	ldrh	r3, [r3, #26]
 800e8ec:	f023 0308 	bic.w	r3, r3, #8
 800e8f0:	b29a      	uxth	r2, r3
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7fe fcea 	bl	800d2d0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d1e1      	bne.n	800e8ca <tcp_handle_closepend+0xe>
  }
}
 800e906:	bf00      	nop
 800e908:	bf00      	nop
 800e90a:	3708      	adds	r7, #8
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	20011d88 	.word	0x20011d88
 800e914:	0801ee0c 	.word	0x0801ee0c

0800e918 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	4603      	mov	r3, r0
 800e920:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e922:	2001      	movs	r0, #1
 800e924:	f7fc fefa 	bl	800b71c <memp_malloc>
 800e928:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d140      	bne.n	800e9b2 <tcp_alloc+0x9a>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e930:	f7ff ffc4 	bl	800e8bc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
 800e934:	4843      	ldr	r0, [pc, #268]	@ (800ea44 <tcp_alloc+0x12c>)
 800e936:	f00c ff67 	bl	801b808 <puts>
 800e93a:	2000      	movs	r0, #0
 800e93c:	f00c fe1e 	bl	801b57c <fflush>
    tcp_kill_timewait();
 800e940:	f7ff ff82 	bl	800e848 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e944:	2001      	movs	r0, #1
 800e946:	f7fc fee9 	bl	800b71c <memp_malloc>
 800e94a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d12f      	bne.n	800e9b2 <tcp_alloc+0x9a>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
 800e952:	483d      	ldr	r0, [pc, #244]	@ (800ea48 <tcp_alloc+0x130>)
 800e954:	f00c ff58 	bl	801b808 <puts>
 800e958:	2000      	movs	r0, #0
 800e95a:	f00c fe0f 	bl	801b57c <fflush>
      tcp_kill_state(LAST_ACK);
 800e95e:	2009      	movs	r0, #9
 800e960:	f7ff ff14 	bl	800e78c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e964:	2001      	movs	r0, #1
 800e966:	f7fc fed9 	bl	800b71c <memp_malloc>
 800e96a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d11f      	bne.n	800e9b2 <tcp_alloc+0x9a>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
 800e972:	4836      	ldr	r0, [pc, #216]	@ (800ea4c <tcp_alloc+0x134>)
 800e974:	f00c ff48 	bl	801b808 <puts>
 800e978:	2000      	movs	r0, #0
 800e97a:	f00c fdff 	bl	801b57c <fflush>
        tcp_kill_state(CLOSING);
 800e97e:	2008      	movs	r0, #8
 800e980:	f7ff ff04 	bl	800e78c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e984:	2001      	movs	r0, #1
 800e986:	f7fc fec9 	bl	800b71c <memp_malloc>
 800e98a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d10f      	bne.n	800e9b2 <tcp_alloc+0x9a>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
 800e992:	79fb      	ldrb	r3, [r7, #7]
 800e994:	4619      	mov	r1, r3
 800e996:	482e      	ldr	r0, [pc, #184]	@ (800ea50 <tcp_alloc+0x138>)
 800e998:	f00c fec6 	bl	801b728 <iprintf>
 800e99c:	2000      	movs	r0, #0
 800e99e:	f00c fded 	bl	801b57c <fflush>
          tcp_kill_prio(prio);
 800e9a2:	79fb      	ldrb	r3, [r7, #7]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7ff fe99 	bl	800e6dc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e9aa:	2001      	movs	r0, #1
 800e9ac:	f7fc feb6 	bl	800b71c <memp_malloc>
 800e9b0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d03f      	beq.n	800ea38 <tcp_alloc+0x120>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e9b8:	229c      	movs	r2, #156	@ 0x9c
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f00d f813 	bl	801b9e8 <memset>
    pcb->prio = prio;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	79fa      	ldrb	r2, [r7, #7]
 800e9c6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800e9ce:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800e9d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	22ff      	movs	r2, #255	@ 0xff
 800e9e6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800e9ee:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	2206      	movs	r2, #6
 800e9f4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	2206      	movs	r2, #6
 800e9fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea04:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800ea0e:	4b11      	ldr	r3, [pc, #68]	@ (800ea54 <tcp_alloc+0x13c>)
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ea16:	4b10      	ldr	r3, [pc, #64]	@ (800ea58 <tcp_alloc+0x140>)
 800ea18:	781a      	ldrb	r2, [r3, #0]
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800ea24:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	4a0c      	ldr	r2, [pc, #48]	@ (800ea5c <tcp_alloc+0x144>)
 800ea2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	4a0b      	ldr	r2, [pc, #44]	@ (800ea60 <tcp_alloc+0x148>)
 800ea34:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ea38:	68fb      	ldr	r3, [r7, #12]
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3710      	adds	r7, #16
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	0801ee30 	.word	0x0801ee30
 800ea48:	0801ee64 	.word	0x0801ee64
 800ea4c:	0801ee98 	.word	0x0801ee98
 800ea50:	0801eecc 	.word	0x0801eecc
 800ea54:	20011d7c 	.word	0x20011d7c
 800ea58:	20011d92 	.word	0x20011d92
 800ea5c:	0800e66d 	.word	0x0800e66d
 800ea60:	006ddd00 	.word	0x006ddd00

0800ea64 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b084      	sub	sp, #16
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800ea6e:	2040      	movs	r0, #64	@ 0x40
 800ea70:	f7ff ff52 	bl	800e918 <tcp_alloc>
 800ea74:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800ea76:	68fb      	ldr	r3, [r7, #12]
}
 800ea78:	4618      	mov	r0, r3
 800ea7a:	3710      	adds	r7, #16
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	bd80      	pop	{r7, pc}

0800ea80 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d002      	beq.n	800ea96 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	611a      	str	r2, [r3, #16]
  }
}
 800ea96:	bf00      	nop
 800ea98:	370c      	adds	r7, #12
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
	...

0800eaa4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d011      	beq.n	800ead8 <tcp_recv+0x34>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	7d1b      	ldrb	r3, [r3, #20]
 800eab8:	2b01      	cmp	r3, #1
 800eaba:	d109      	bne.n	800ead0 <tcp_recv+0x2c>
 800eabc:	4b08      	ldr	r3, [pc, #32]	@ (800eae0 <tcp_recv+0x3c>)
 800eabe:	f240 72df 	movw	r2, #2015	@ 0x7df
 800eac2:	4908      	ldr	r1, [pc, #32]	@ (800eae4 <tcp_recv+0x40>)
 800eac4:	4808      	ldr	r0, [pc, #32]	@ (800eae8 <tcp_recv+0x44>)
 800eac6:	f00c fe2f 	bl	801b728 <iprintf>
 800eaca:	2000      	movs	r0, #0
 800eacc:	f00c fd56 	bl	801b57c <fflush>
    pcb->recv = recv;
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	683a      	ldr	r2, [r7, #0]
 800ead4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 800ead8:	bf00      	nop
 800eada:	3708      	adds	r7, #8
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	0801e474 	.word	0x0801e474
 800eae4:	0801ef0c 	.word	0x0801ef0c
 800eae8:	0801e4b8 	.word	0x0801e4b8

0800eaec <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d011      	beq.n	800eb20 <tcp_sent+0x34>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	7d1b      	ldrb	r3, [r3, #20]
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d109      	bne.n	800eb18 <tcp_sent+0x2c>
 800eb04:	4b08      	ldr	r3, [pc, #32]	@ (800eb28 <tcp_sent+0x3c>)
 800eb06:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 800eb0a:	4908      	ldr	r1, [pc, #32]	@ (800eb2c <tcp_sent+0x40>)
 800eb0c:	4808      	ldr	r0, [pc, #32]	@ (800eb30 <tcp_sent+0x44>)
 800eb0e:	f00c fe0b 	bl	801b728 <iprintf>
 800eb12:	2000      	movs	r0, #0
 800eb14:	f00c fd32 	bl	801b57c <fflush>
    pcb->sent = sent;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	683a      	ldr	r2, [r7, #0]
 800eb1c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}
 800eb28:	0801e474 	.word	0x0801e474
 800eb2c:	0801ef34 	.word	0x0801ef34
 800eb30:	0801e4b8 	.word	0x0801e4b8

0800eb34 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b082      	sub	sp, #8
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d011      	beq.n	800eb68 <tcp_err+0x34>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	7d1b      	ldrb	r3, [r3, #20]
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d109      	bne.n	800eb60 <tcp_err+0x2c>
 800eb4c:	4b08      	ldr	r3, [pc, #32]	@ (800eb70 <tcp_err+0x3c>)
 800eb4e:	f640 020d 	movw	r2, #2061	@ 0x80d
 800eb52:	4908      	ldr	r1, [pc, #32]	@ (800eb74 <tcp_err+0x40>)
 800eb54:	4808      	ldr	r0, [pc, #32]	@ (800eb78 <tcp_err+0x44>)
 800eb56:	f00c fde7 	bl	801b728 <iprintf>
 800eb5a:	2000      	movs	r0, #0
 800eb5c:	f00c fd0e 	bl	801b57c <fflush>
    pcb->errf = err;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 800eb68:	bf00      	nop
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	0801e474 	.word	0x0801e474
 800eb74:	0801ef5c 	.word	0x0801ef5c
 800eb78:	0801e4b8 	.word	0x0801e4b8

0800eb7c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800eb7c:	b480      	push	{r7}
 800eb7e:	b085      	sub	sp, #20
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
 800eb84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d008      	beq.n	800eb9e <tcp_accept+0x22>
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	7d1b      	ldrb	r3, [r3, #20]
 800eb90:	2b01      	cmp	r3, #1
 800eb92:	d104      	bne.n	800eb9e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	683a      	ldr	r2, [r7, #0]
 800eb9c:	619a      	str	r2, [r3, #24]
  }
}
 800eb9e:	bf00      	nop
 800eba0:	3714      	adds	r7, #20
 800eba2:	46bd      	mov	sp, r7
 800eba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba8:	4770      	bx	lr
	...

0800ebac <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b084      	sub	sp, #16
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	60f8      	str	r0, [r7, #12]
 800ebb4:	60b9      	str	r1, [r7, #8]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d10a      	bne.n	800ebd6 <tcp_poll+0x2a>
 800ebc0:	4b11      	ldr	r3, [pc, #68]	@ (800ec08 <tcp_poll+0x5c>)
 800ebc2:	f640 023d 	movw	r2, #2109	@ 0x83d
 800ebc6:	4911      	ldr	r1, [pc, #68]	@ (800ec0c <tcp_poll+0x60>)
 800ebc8:	4811      	ldr	r0, [pc, #68]	@ (800ec10 <tcp_poll+0x64>)
 800ebca:	f00c fdad 	bl	801b728 <iprintf>
 800ebce:	2000      	movs	r0, #0
 800ebd0:	f00c fcd4 	bl	801b57c <fflush>
 800ebd4:	e014      	b.n	800ec00 <tcp_poll+0x54>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	7d1b      	ldrb	r3, [r3, #20]
 800ebda:	2b01      	cmp	r3, #1
 800ebdc:	d109      	bne.n	800ebf2 <tcp_poll+0x46>
 800ebde:	4b0a      	ldr	r3, [pc, #40]	@ (800ec08 <tcp_poll+0x5c>)
 800ebe0:	f640 023e 	movw	r2, #2110	@ 0x83e
 800ebe4:	490b      	ldr	r1, [pc, #44]	@ (800ec14 <tcp_poll+0x68>)
 800ebe6:	480a      	ldr	r0, [pc, #40]	@ (800ec10 <tcp_poll+0x64>)
 800ebe8:	f00c fd9e 	bl	801b728 <iprintf>
 800ebec:	2000      	movs	r0, #0
 800ebee:	f00c fcc5 	bl	801b57c <fflush>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	68ba      	ldr	r2, [r7, #8]
 800ebf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	79fa      	ldrb	r2, [r7, #7]
 800ebfe:	775a      	strb	r2, [r3, #29]
}
 800ec00:	3710      	adds	r7, #16
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	0801e474 	.word	0x0801e474
 800ec0c:	0801ef84 	.word	0x0801ef84
 800ec10:	0801e4b8 	.word	0x0801e4b8
 800ec14:	0801ef9c 	.word	0x0801ef9c

0800ec18 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b082      	sub	sp, #8
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d10a      	bne.n	800ec3c <tcp_pcb_purge+0x24>
 800ec26:	4b36      	ldr	r3, [pc, #216]	@ (800ed00 <tcp_pcb_purge+0xe8>)
 800ec28:	f640 0251 	movw	r2, #2129	@ 0x851
 800ec2c:	4935      	ldr	r1, [pc, #212]	@ (800ed04 <tcp_pcb_purge+0xec>)
 800ec2e:	4836      	ldr	r0, [pc, #216]	@ (800ed08 <tcp_pcb_purge+0xf0>)
 800ec30:	f00c fd7a 	bl	801b728 <iprintf>
 800ec34:	2000      	movs	r0, #0
 800ec36:	f00c fca1 	bl	801b57c <fflush>
 800ec3a:	e05d      	b.n	800ecf8 <tcp_pcb_purge+0xe0>

  if (pcb->state != CLOSED &&
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	7d1b      	ldrb	r3, [r3, #20]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d059      	beq.n	800ecf8 <tcp_pcb_purge+0xe0>
      pcb->state != TIME_WAIT &&
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ec48:	2b0a      	cmp	r3, #10
 800ec4a:	d055      	beq.n	800ecf8 <tcp_pcb_purge+0xe0>
      pcb->state != LISTEN) {
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ec50:	2b01      	cmp	r3, #1
 800ec52:	d051      	beq.n	800ecf8 <tcp_pcb_purge+0xe0>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));
 800ec54:	482d      	ldr	r0, [pc, #180]	@ (800ed0c <tcp_pcb_purge+0xf4>)
 800ec56:	f00c fdd7 	bl	801b808 <puts>
 800ec5a:	2000      	movs	r0, #0
 800ec5c:	f00c fc8e 	bl	801b57c <fflush>

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d00d      	beq.n	800ec84 <tcp_pcb_purge+0x6c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
 800ec68:	4829      	ldr	r0, [pc, #164]	@ (800ed10 <tcp_pcb_purge+0xf8>)
 800ec6a:	f00c fdcd 	bl	801b808 <puts>
 800ec6e:	2000      	movs	r0, #0
 800ec70:	f00c fc84 	bl	801b57c <fflush>
      pbuf_free(pcb->refused_data);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ec78:	4618      	mov	r0, r3
 800ec7a:	f7fd fe4f 	bl	800c91c <pbuf_free>
      pcb->refused_data = NULL;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2200      	movs	r2, #0
 800ec82:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unsent != NULL) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d005      	beq.n	800ec98 <tcp_pcb_purge+0x80>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: not all data sent\n"));
 800ec8c:	4821      	ldr	r0, [pc, #132]	@ (800ed14 <tcp_pcb_purge+0xfc>)
 800ec8e:	f00c fdbb 	bl	801b808 <puts>
 800ec92:	2000      	movs	r0, #0
 800ec94:	f00c fc72 	bl	801b57c <fflush>
    }
    if (pcb->unacked != NULL) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d005      	beq.n	800ecac <tcp_pcb_purge+0x94>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
 800eca0:	481d      	ldr	r0, [pc, #116]	@ (800ed18 <tcp_pcb_purge+0x100>)
 800eca2:	f00c fdb1 	bl	801b808 <puts>
 800eca6:	2000      	movs	r0, #0
 800eca8:	f00c fc68 	bl	801b57c <fflush>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d008      	beq.n	800ecc6 <tcp_pcb_purge+0xae>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
 800ecb4:	4819      	ldr	r0, [pc, #100]	@ (800ed1c <tcp_pcb_purge+0x104>)
 800ecb6:	f00c fda7 	bl	801b808 <puts>
 800ecba:	2000      	movs	r0, #0
 800ecbc:	f00c fc5e 	bl	801b57c <fflush>
      tcp_free_ooseq(pcb);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f000 f9d5 	bl	800f070 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800eccc:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ecd2:	4618      	mov	r0, r3
 800ecd4:	f7ff fc6a 	bl	800e5ac <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ecdc:	4618      	mov	r0, r3
 800ecde:	f7ff fc65 	bl	800e5ac <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
 800ecfe:	bf00      	nop
 800ed00:	0801e474 	.word	0x0801e474
 800ed04:	0801efbc 	.word	0x0801efbc
 800ed08:	0801e4b8 	.word	0x0801e4b8
 800ed0c:	0801efd8 	.word	0x0801efd8
 800ed10:	0801efe8 	.word	0x0801efe8
 800ed14:	0801f014 	.word	0x0801f014
 800ed18:	0801f038 	.word	0x0801f038
 800ed1c:	0801f060 	.word	0x0801f060

0800ed20 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
 800ed28:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d109      	bne.n	800ed44 <tcp_pcb_remove+0x24>
 800ed30:	4b4d      	ldr	r3, [pc, #308]	@ (800ee68 <tcp_pcb_remove+0x148>)
 800ed32:	f640 0283 	movw	r2, #2179	@ 0x883
 800ed36:	494d      	ldr	r1, [pc, #308]	@ (800ee6c <tcp_pcb_remove+0x14c>)
 800ed38:	484d      	ldr	r0, [pc, #308]	@ (800ee70 <tcp_pcb_remove+0x150>)
 800ed3a:	f00c fcf5 	bl	801b728 <iprintf>
 800ed3e:	2000      	movs	r0, #0
 800ed40:	f00c fc1c 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d109      	bne.n	800ed5e <tcp_pcb_remove+0x3e>
 800ed4a:	4b47      	ldr	r3, [pc, #284]	@ (800ee68 <tcp_pcb_remove+0x148>)
 800ed4c:	f640 0284 	movw	r2, #2180	@ 0x884
 800ed50:	4948      	ldr	r1, [pc, #288]	@ (800ee74 <tcp_pcb_remove+0x154>)
 800ed52:	4847      	ldr	r0, [pc, #284]	@ (800ee70 <tcp_pcb_remove+0x150>)
 800ed54:	f00c fce8 	bl	801b728 <iprintf>
 800ed58:	2000      	movs	r0, #0
 800ed5a:	f00c fc0f 	bl	801b57c <fflush>

  TCP_RMV(pcblist, pcb);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d105      	bne.n	800ed74 <tcp_pcb_remove+0x54>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	681b      	ldr	r3, [r3, #0]
 800ed6c:	68da      	ldr	r2, [r3, #12]
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	601a      	str	r2, [r3, #0]
 800ed72:	e013      	b.n	800ed9c <tcp_pcb_remove+0x7c>
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	60fb      	str	r3, [r7, #12]
 800ed7a:	e00c      	b.n	800ed96 <tcp_pcb_remove+0x76>
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	683a      	ldr	r2, [r7, #0]
 800ed82:	429a      	cmp	r2, r3
 800ed84:	d104      	bne.n	800ed90 <tcp_pcb_remove+0x70>
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	68da      	ldr	r2, [r3, #12]
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	60da      	str	r2, [r3, #12]
 800ed8e:	e005      	b.n	800ed9c <tcp_pcb_remove+0x7c>
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	68db      	ldr	r3, [r3, #12]
 800ed94:	60fb      	str	r3, [r7, #12]
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d1ef      	bne.n	800ed7c <tcp_pcb_remove+0x5c>
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eda2:	6838      	ldr	r0, [r7, #0]
 800eda4:	f7ff ff38 	bl	800ec18 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	7d1b      	ldrb	r3, [r3, #20]
 800edac:	2b0a      	cmp	r3, #10
 800edae:	d013      	beq.n	800edd8 <tcp_pcb_remove+0xb8>
      (pcb->state != LISTEN) &&
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800edb4:	2b01      	cmp	r3, #1
 800edb6:	d00f      	beq.n	800edd8 <tcp_pcb_remove+0xb8>
      (pcb->flags & TF_ACK_DELAY)) {
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	8b5b      	ldrh	r3, [r3, #26]
 800edbc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d009      	beq.n	800edd8 <tcp_pcb_remove+0xb8>
    tcp_ack_now(pcb);
 800edc4:	683b      	ldr	r3, [r7, #0]
 800edc6:	8b5b      	ldrh	r3, [r3, #26]
 800edc8:	f043 0302 	orr.w	r3, r3, #2
 800edcc:	b29a      	uxth	r2, r3
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800edd2:	6838      	ldr	r0, [r7, #0]
 800edd4:	f004 fb4a 	bl	801346c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d029      	beq.n	800ee34 <tcp_pcb_remove+0x114>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ede0:	683b      	ldr	r3, [r7, #0]
 800ede2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d009      	beq.n	800edfc <tcp_pcb_remove+0xdc>
 800ede8:	4b1f      	ldr	r3, [pc, #124]	@ (800ee68 <tcp_pcb_remove+0x148>)
 800edea:	f640 0293 	movw	r2, #2195	@ 0x893
 800edee:	4922      	ldr	r1, [pc, #136]	@ (800ee78 <tcp_pcb_remove+0x158>)
 800edf0:	481f      	ldr	r0, [pc, #124]	@ (800ee70 <tcp_pcb_remove+0x150>)
 800edf2:	f00c fc99 	bl	801b728 <iprintf>
 800edf6:	2000      	movs	r0, #0
 800edf8:	f00c fbc0 	bl	801b57c <fflush>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d009      	beq.n	800ee18 <tcp_pcb_remove+0xf8>
 800ee04:	4b18      	ldr	r3, [pc, #96]	@ (800ee68 <tcp_pcb_remove+0x148>)
 800ee06:	f640 0294 	movw	r2, #2196	@ 0x894
 800ee0a:	491c      	ldr	r1, [pc, #112]	@ (800ee7c <tcp_pcb_remove+0x15c>)
 800ee0c:	4818      	ldr	r0, [pc, #96]	@ (800ee70 <tcp_pcb_remove+0x150>)
 800ee0e:	f00c fc8b 	bl	801b728 <iprintf>
 800ee12:	2000      	movs	r0, #0
 800ee14:	f00c fbb2 	bl	801b57c <fflush>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d009      	beq.n	800ee34 <tcp_pcb_remove+0x114>
 800ee20:	4b11      	ldr	r3, [pc, #68]	@ (800ee68 <tcp_pcb_remove+0x148>)
 800ee22:	f640 0296 	movw	r2, #2198	@ 0x896
 800ee26:	4916      	ldr	r1, [pc, #88]	@ (800ee80 <tcp_pcb_remove+0x160>)
 800ee28:	4811      	ldr	r0, [pc, #68]	@ (800ee70 <tcp_pcb_remove+0x150>)
 800ee2a:	f00c fc7d 	bl	801b728 <iprintf>
 800ee2e:	2000      	movs	r0, #0
 800ee30:	f00c fba4 	bl	801b57c <fflush>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ee34:	683b      	ldr	r3, [r7, #0]
 800ee36:	2200      	movs	r2, #0
 800ee38:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
 800ee40:	f000 fac0 	bl	800f3c4 <tcp_pcbs_sane>
 800ee44:	4603      	mov	r3, r0
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d109      	bne.n	800ee5e <tcp_pcb_remove+0x13e>
 800ee4a:	4b07      	ldr	r3, [pc, #28]	@ (800ee68 <tcp_pcb_remove+0x148>)
 800ee4c:	f640 029e 	movw	r2, #2206	@ 0x89e
 800ee50:	490c      	ldr	r1, [pc, #48]	@ (800ee84 <tcp_pcb_remove+0x164>)
 800ee52:	4807      	ldr	r0, [pc, #28]	@ (800ee70 <tcp_pcb_remove+0x150>)
 800ee54:	f00c fc68 	bl	801b728 <iprintf>
 800ee58:	2000      	movs	r0, #0
 800ee5a:	f00c fb8f 	bl	801b57c <fflush>
}
 800ee5e:	bf00      	nop
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	0801e474 	.word	0x0801e474
 800ee6c:	0801f084 	.word	0x0801f084
 800ee70:	0801e4b8 	.word	0x0801e4b8
 800ee74:	0801f0a0 	.word	0x0801f0a0
 800ee78:	0801f0c0 	.word	0x0801f0c0
 800ee7c:	0801f0d8 	.word	0x0801f0d8
 800ee80:	0801f0f4 	.word	0x0801f0f4
 800ee84:	0801f10c 	.word	0x0801f10c

0800ee88 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ee88:	b580      	push	{r7, lr}
 800ee8a:	b082      	sub	sp, #8
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d109      	bne.n	800eeaa <tcp_next_iss+0x22>
 800ee96:	4b0b      	ldr	r3, [pc, #44]	@ (800eec4 <tcp_next_iss+0x3c>)
 800ee98:	f640 02af 	movw	r2, #2223	@ 0x8af
 800ee9c:	490a      	ldr	r1, [pc, #40]	@ (800eec8 <tcp_next_iss+0x40>)
 800ee9e:	480b      	ldr	r0, [pc, #44]	@ (800eecc <tcp_next_iss+0x44>)
 800eea0:	f00c fc42 	bl	801b728 <iprintf>
 800eea4:	2000      	movs	r0, #0
 800eea6:	f00c fb69 	bl	801b57c <fflush>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eeaa:	4b09      	ldr	r3, [pc, #36]	@ (800eed0 <tcp_next_iss+0x48>)
 800eeac:	681a      	ldr	r2, [r3, #0]
 800eeae:	4b09      	ldr	r3, [pc, #36]	@ (800eed4 <tcp_next_iss+0x4c>)
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	4413      	add	r3, r2
 800eeb4:	4a06      	ldr	r2, [pc, #24]	@ (800eed0 <tcp_next_iss+0x48>)
 800eeb6:	6013      	str	r3, [r2, #0]
  return iss;
 800eeb8:	4b05      	ldr	r3, [pc, #20]	@ (800eed0 <tcp_next_iss+0x48>)
 800eeba:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3708      	adds	r7, #8
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bd80      	pop	{r7, pc}
 800eec4:	0801e474 	.word	0x0801e474
 800eec8:	0801f12c 	.word	0x0801f12c
 800eecc:	0801e4b8 	.word	0x0801e4b8
 800eed0:	2000006c 	.word	0x2000006c
 800eed4:	20011d7c 	.word	0x20011d7c

0800eed8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b086      	sub	sp, #24
 800eedc:	af00      	add	r7, sp, #0
 800eede:	4603      	mov	r3, r0
 800eee0:	60b9      	str	r1, [r7, #8]
 800eee2:	607a      	str	r2, [r7, #4]
 800eee4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d109      	bne.n	800ef00 <tcp_eff_send_mss_netif+0x28>
 800eeec:	4b16      	ldr	r3, [pc, #88]	@ (800ef48 <tcp_eff_send_mss_netif+0x70>)
 800eeee:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800eef2:	4916      	ldr	r1, [pc, #88]	@ (800ef4c <tcp_eff_send_mss_netif+0x74>)
 800eef4:	4816      	ldr	r0, [pc, #88]	@ (800ef50 <tcp_eff_send_mss_netif+0x78>)
 800eef6:	f00c fc17 	bl	801b728 <iprintf>
 800eefa:	2000      	movs	r0, #0
 800eefc:	f00c fb3e 	bl	801b57c <fflush>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d101      	bne.n	800ef0a <tcp_eff_send_mss_netif+0x32>
      return sendmss;
 800ef06:	89fb      	ldrh	r3, [r7, #14]
 800ef08:	e019      	b.n	800ef3e <tcp_eff_send_mss_netif+0x66>
    }
    mtu = outif->mtu;
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ef0e:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ef10:	8afb      	ldrh	r3, [r7, #22]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d012      	beq.n	800ef3c <tcp_eff_send_mss_netif+0x64>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ef16:	2328      	movs	r3, #40	@ 0x28
 800ef18:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ef1a:	8afa      	ldrh	r2, [r7, #22]
 800ef1c:	8abb      	ldrh	r3, [r7, #20]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d904      	bls.n	800ef2c <tcp_eff_send_mss_netif+0x54>
 800ef22:	8afa      	ldrh	r2, [r7, #22]
 800ef24:	8abb      	ldrh	r3, [r7, #20]
 800ef26:	1ad3      	subs	r3, r2, r3
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	e000      	b.n	800ef2e <tcp_eff_send_mss_netif+0x56>
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ef30:	8a7a      	ldrh	r2, [r7, #18]
 800ef32:	89fb      	ldrh	r3, [r7, #14]
 800ef34:	4293      	cmp	r3, r2
 800ef36:	bf28      	it	cs
 800ef38:	4613      	movcs	r3, r2
 800ef3a:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ef3c:	89fb      	ldrh	r3, [r7, #14]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3718      	adds	r7, #24
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	0801e474 	.word	0x0801e474
 800ef4c:	0801f148 	.word	0x0801f148
 800ef50:	0801e4b8 	.word	0x0801e4b8

0800ef54 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d123      	bne.n	800efb0 <tcp_netif_ip_addr_changed_pcblist+0x5c>
 800ef68:	4b15      	ldr	r3, [pc, #84]	@ (800efc0 <tcp_netif_ip_addr_changed_pcblist+0x6c>)
 800ef6a:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800ef6e:	4915      	ldr	r1, [pc, #84]	@ (800efc4 <tcp_netif_ip_addr_changed_pcblist+0x70>)
 800ef70:	4815      	ldr	r0, [pc, #84]	@ (800efc8 <tcp_netif_ip_addr_changed_pcblist+0x74>)
 800ef72:	f00c fbd9 	bl	801b728 <iprintf>
 800ef76:	2000      	movs	r0, #0
 800ef78:	f00c fb00 	bl	801b57c <fflush>

  while (pcb != NULL) {
 800ef7c:	e018      	b.n	800efb0 <tcp_netif_ip_addr_changed_pcblist+0x5c>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681a      	ldr	r2, [r3, #0]
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d10f      	bne.n	800efaa <tcp_netif_ip_addr_changed_pcblist+0x56>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
 800ef90:	68f9      	ldr	r1, [r7, #12]
 800ef92:	480e      	ldr	r0, [pc, #56]	@ (800efcc <tcp_netif_ip_addr_changed_pcblist+0x78>)
 800ef94:	f00c fbc8 	bl	801b728 <iprintf>
 800ef98:	2000      	movs	r0, #0
 800ef9a:	f00c faef 	bl	801b57c <fflush>
      tcp_abort(pcb);
 800ef9e:	68f8      	ldr	r0, [r7, #12]
 800efa0:	f7fe fb68 	bl	800d674 <tcp_abort>
      pcb = next;
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	60fb      	str	r3, [r7, #12]
 800efa8:	e002      	b.n	800efb0 <tcp_netif_ip_addr_changed_pcblist+0x5c>
    } else {
      pcb = pcb->next;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	68db      	ldr	r3, [r3, #12]
 800efae:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d1e3      	bne.n	800ef7e <tcp_netif_ip_addr_changed_pcblist+0x2a>
    }
  }
}
 800efb6:	bf00      	nop
 800efb8:	bf00      	nop
 800efba:	3710      	adds	r7, #16
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}
 800efc0:	0801e474 	.word	0x0801e474
 800efc4:	0801f170 	.word	0x0801f170
 800efc8:	0801e4b8 	.word	0x0801e4b8
 800efcc:	0801f1a4 	.word	0x0801f1a4

0800efd0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d02a      	beq.n	800f036 <tcp_netif_ip_addr_changed+0x66>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d026      	beq.n	800f036 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800efe8:	4b15      	ldr	r3, [pc, #84]	@ (800f040 <tcp_netif_ip_addr_changed+0x70>)
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	4619      	mov	r1, r3
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f7ff ffb0 	bl	800ef54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800eff4:	4b13      	ldr	r3, [pc, #76]	@ (800f044 <tcp_netif_ip_addr_changed+0x74>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4619      	mov	r1, r3
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7ff ffaa 	bl	800ef54 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d017      	beq.n	800f036 <tcp_netif_ip_addr_changed+0x66>
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d013      	beq.n	800f036 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f00e:	4b0e      	ldr	r3, [pc, #56]	@ (800f048 <tcp_netif_ip_addr_changed+0x78>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	60fb      	str	r3, [r7, #12]
 800f014:	e00c      	b.n	800f030 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	681a      	ldr	r2, [r3, #0]
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d103      	bne.n	800f02a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f022:	683b      	ldr	r3, [r7, #0]
 800f024:	681a      	ldr	r2, [r3, #0]
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	60fb      	str	r3, [r7, #12]
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d1ef      	bne.n	800f016 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f036:	bf00      	nop
 800f038:	3710      	adds	r7, #16
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bd80      	pop	{r7, pc}
 800f03e:	bf00      	nop
 800f040:	20011d88 	.word	0x20011d88
 800f044:	20011d80 	.word	0x20011d80
 800f048:	20011d84 	.word	0x20011d84

0800f04c <tcp_debug_state_str>:

const char *
tcp_debug_state_str(enum tcp_state s)
{
 800f04c:	b480      	push	{r7}
 800f04e:	b083      	sub	sp, #12
 800f050:	af00      	add	r7, sp, #0
 800f052:	4603      	mov	r3, r0
 800f054:	71fb      	strb	r3, [r7, #7]
  return tcp_state_str[s];
 800f056:	79fb      	ldrb	r3, [r7, #7]
 800f058:	4a04      	ldr	r2, [pc, #16]	@ (800f06c <tcp_debug_state_str+0x20>)
 800f05a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	370c      	adds	r7, #12
 800f062:	46bd      	mov	sp, r7
 800f064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f068:	4770      	bx	lr
 800f06a:	bf00      	nop
 800f06c:	080251e0 	.word	0x080251e0

0800f070 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d007      	beq.n	800f090 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f084:	4618      	mov	r0, r3
 800f086:	f7ff fa91 	bl	800e5ac <tcp_segs_free>
    pcb->ooseq = NULL;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f090:	bf00      	nop
 800f092:	3708      	adds	r7, #8
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <tcp_debug_print>:
 *
 * @param tcphdr pointer to a struct tcp_hdr
 */
void
tcp_debug_print(struct tcp_hdr *tcphdr)
{
 800f098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f09c:	b088      	sub	sp, #32
 800f09e:	af06      	add	r7, sp, #24
 800f0a0:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("TCP header:\n"));
 800f0a2:	4879      	ldr	r0, [pc, #484]	@ (800f288 <tcp_debug_print+0x1f0>)
 800f0a4:	f00c fbb0 	bl	801b808 <puts>
 800f0a8:	2000      	movs	r0, #0
 800f0aa:	f00c fa67 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 800f0ae:	4877      	ldr	r0, [pc, #476]	@ (800f28c <tcp_debug_print+0x1f4>)
 800f0b0:	f00c fbaa 	bl	801b808 <puts>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	f00c fa61 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("|    %5"U16_F"      |    %5"U16_F"      | (src port, dest port)\n",
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7fb fdd7 	bl	800ac74 <lwip_htons>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	461c      	mov	r4, r3
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	885b      	ldrh	r3, [r3, #2]
 800f0ce:	b29b      	uxth	r3, r3
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fb fdcf 	bl	800ac74 <lwip_htons>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	461a      	mov	r2, r3
 800f0da:	4621      	mov	r1, r4
 800f0dc:	486c      	ldr	r0, [pc, #432]	@ (800f290 <tcp_debug_print+0x1f8>)
 800f0de:	f00c fb23 	bl	801b728 <iprintf>
 800f0e2:	2000      	movs	r0, #0
 800f0e4:	f00c fa4a 	bl	801b57c <fflush>
                          lwip_ntohs(tcphdr->src), lwip_ntohs(tcphdr->dest)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 800f0e8:	4868      	ldr	r0, [pc, #416]	@ (800f28c <tcp_debug_print+0x1f4>)
 800f0ea:	f00c fb8d 	bl	801b808 <puts>
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	f00c fa44 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (seq no)\n",
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	685b      	ldr	r3, [r3, #4]
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7fb fdd0 	bl	800ac9e <lwip_htonl>
 800f0fe:	4603      	mov	r3, r0
 800f100:	4619      	mov	r1, r3
 800f102:	4864      	ldr	r0, [pc, #400]	@ (800f294 <tcp_debug_print+0x1fc>)
 800f104:	f00c fb10 	bl	801b728 <iprintf>
 800f108:	2000      	movs	r0, #0
 800f10a:	f00c fa37 	bl	801b57c <fflush>
                          lwip_ntohl(tcphdr->seqno)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 800f10e:	485f      	ldr	r0, [pc, #380]	@ (800f28c <tcp_debug_print+0x1f4>)
 800f110:	f00c fb7a 	bl	801b808 <puts>
 800f114:	2000      	movs	r0, #0
 800f116:	f00c fa31 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("|           %010"U32_F"          | (ack no)\n",
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	689b      	ldr	r3, [r3, #8]
 800f11e:	4618      	mov	r0, r3
 800f120:	f7fb fdbd 	bl	800ac9e <lwip_htonl>
 800f124:	4603      	mov	r3, r0
 800f126:	4619      	mov	r1, r3
 800f128:	485b      	ldr	r0, [pc, #364]	@ (800f298 <tcp_debug_print+0x200>)
 800f12a:	f00c fafd 	bl	801b728 <iprintf>
 800f12e:	2000      	movs	r0, #0
 800f130:	f00c fa24 	bl	801b57c <fflush>
                          lwip_ntohl(tcphdr->ackno)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 800f134:	4855      	ldr	r0, [pc, #340]	@ (800f28c <tcp_debug_print+0x1f4>)
 800f136:	f00c fb67 	bl	801b808 <puts>
 800f13a:	2000      	movs	r0, #0
 800f13c:	f00c fa1e 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("| %2"U16_F" |   |%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"%"U16_F"|     %5"U16_F"     | (hdrlen, flags (",
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	899b      	ldrh	r3, [r3, #12]
 800f144:	b29b      	uxth	r3, r3
 800f146:	4618      	mov	r0, r3
 800f148:	f7fb fd94 	bl	800ac74 <lwip_htons>
 800f14c:	4603      	mov	r3, r0
 800f14e:	0b1b      	lsrs	r3, r3, #12
 800f150:	b29b      	uxth	r3, r3
 800f152:	469a      	mov	sl, r3
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	899b      	ldrh	r3, [r3, #12]
 800f158:	b29b      	uxth	r3, r3
 800f15a:	4618      	mov	r0, r3
 800f15c:	f7fb fd8a 	bl	800ac74 <lwip_htons>
 800f160:	4603      	mov	r3, r0
 800f162:	b2db      	uxtb	r3, r3
 800f164:	115b      	asrs	r3, r3, #5
 800f166:	b29b      	uxth	r3, r3
 800f168:	f003 0801 	and.w	r8, r3, #1
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	899b      	ldrh	r3, [r3, #12]
 800f170:	b29b      	uxth	r3, r3
 800f172:	4618      	mov	r0, r3
 800f174:	f7fb fd7e 	bl	800ac74 <lwip_htons>
 800f178:	4603      	mov	r3, r0
 800f17a:	b2db      	uxtb	r3, r3
 800f17c:	111b      	asrs	r3, r3, #4
 800f17e:	b29b      	uxth	r3, r3
 800f180:	f003 0901 	and.w	r9, r3, #1
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	899b      	ldrh	r3, [r3, #12]
 800f188:	b29b      	uxth	r3, r3
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7fb fd72 	bl	800ac74 <lwip_htons>
 800f190:	4603      	mov	r3, r0
 800f192:	b2db      	uxtb	r3, r3
 800f194:	10db      	asrs	r3, r3, #3
 800f196:	b29b      	uxth	r3, r3
 800f198:	f003 0401 	and.w	r4, r3, #1
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	899b      	ldrh	r3, [r3, #12]
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fb fd66 	bl	800ac74 <lwip_htons>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	109b      	asrs	r3, r3, #2
 800f1ae:	b29b      	uxth	r3, r3
 800f1b0:	f003 0501 	and.w	r5, r3, #1
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	899b      	ldrh	r3, [r3, #12]
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7fb fd5a 	bl	800ac74 <lwip_htons>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	105b      	asrs	r3, r3, #1
 800f1c6:	b29b      	uxth	r3, r3
 800f1c8:	f003 0601 	and.w	r6, r3, #1
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	899b      	ldrh	r3, [r3, #12]
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	f7fb fd4e 	bl	800ac74 <lwip_htons>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	b2db      	uxtb	r3, r3
 800f1dc:	f003 0301 	and.w	r3, r3, #1
 800f1e0:	603b      	str	r3, [r7, #0]
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	89db      	ldrh	r3, [r3, #14]
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f7fb fd43 	bl	800ac74 <lwip_htons>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	9304      	str	r3, [sp, #16]
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	9303      	str	r3, [sp, #12]
 800f1f6:	9602      	str	r6, [sp, #8]
 800f1f8:	9501      	str	r5, [sp, #4]
 800f1fa:	9400      	str	r4, [sp, #0]
 800f1fc:	464b      	mov	r3, r9
 800f1fe:	4642      	mov	r2, r8
 800f200:	4651      	mov	r1, sl
 800f202:	4826      	ldr	r0, [pc, #152]	@ (800f29c <tcp_debug_print+0x204>)
 800f204:	f00c fa90 	bl	801b728 <iprintf>
 800f208:	2000      	movs	r0, #0
 800f20a:	f00c f9b7 	bl	801b57c <fflush>
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 3 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 2 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr) >> 1 & 1),
                          (u16_t)(TCPH_FLAGS(tcphdr)      & 1),
                          lwip_ntohs(tcphdr->wnd)));
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	899b      	ldrh	r3, [r3, #12]
 800f212:	b29b      	uxth	r3, r3
 800f214:	4618      	mov	r0, r3
 800f216:	f7fb fd2d 	bl	800ac74 <lwip_htons>
 800f21a:	4603      	mov	r3, r0
 800f21c:	b2db      	uxtb	r3, r3
 800f21e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f222:	b2db      	uxtb	r3, r3
 800f224:	4618      	mov	r0, r3
 800f226:	f000 f857 	bl	800f2d8 <tcp_debug_print_flags>
  LWIP_DEBUGF(TCP_DEBUG, ("), win)\n"));
 800f22a:	481d      	ldr	r0, [pc, #116]	@ (800f2a0 <tcp_debug_print+0x208>)
 800f22c:	f00c faec 	bl	801b808 <puts>
 800f230:	2000      	movs	r0, #0
 800f232:	f00c f9a3 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 800f236:	4815      	ldr	r0, [pc, #84]	@ (800f28c <tcp_debug_print+0x1f4>)
 800f238:	f00c fae6 	bl	801b808 <puts>
 800f23c:	2000      	movs	r0, #0
 800f23e:	f00c f99d 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("|    0x%04"X16_F"     |     %5"U16_F"     | (chksum, urgp)\n",
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	8a1b      	ldrh	r3, [r3, #16]
 800f246:	b29b      	uxth	r3, r3
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fb fd13 	bl	800ac74 <lwip_htons>
 800f24e:	4603      	mov	r3, r0
 800f250:	461c      	mov	r4, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	8a5b      	ldrh	r3, [r3, #18]
 800f256:	b29b      	uxth	r3, r3
 800f258:	4618      	mov	r0, r3
 800f25a:	f7fb fd0b 	bl	800ac74 <lwip_htons>
 800f25e:	4603      	mov	r3, r0
 800f260:	461a      	mov	r2, r3
 800f262:	4621      	mov	r1, r4
 800f264:	480f      	ldr	r0, [pc, #60]	@ (800f2a4 <tcp_debug_print+0x20c>)
 800f266:	f00c fa5f 	bl	801b728 <iprintf>
 800f26a:	2000      	movs	r0, #0
 800f26c:	f00c f986 	bl	801b57c <fflush>
                          lwip_ntohs(tcphdr->chksum), lwip_ntohs(tcphdr->urgp)));
  LWIP_DEBUGF(TCP_DEBUG, ("+-------------------------------+\n"));
 800f270:	4806      	ldr	r0, [pc, #24]	@ (800f28c <tcp_debug_print+0x1f4>)
 800f272:	f00c fac9 	bl	801b808 <puts>
 800f276:	2000      	movs	r0, #0
 800f278:	f00c f980 	bl	801b57c <fflush>
}
 800f27c:	bf00      	nop
 800f27e:	3708      	adds	r7, #8
 800f280:	46bd      	mov	sp, r7
 800f282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f286:	bf00      	nop
 800f288:	0801f1cc 	.word	0x0801f1cc
 800f28c:	0801f1d8 	.word	0x0801f1d8
 800f290:	0801f1fc 	.word	0x0801f1fc
 800f294:	0801f234 	.word	0x0801f234
 800f298:	0801f25c 	.word	0x0801f25c
 800f29c:	0801f284 	.word	0x0801f284
 800f2a0:	0801f2c4 	.word	0x0801f2c4
 800f2a4:	0801f2cc 	.word	0x0801f2cc

0800f2a8 <tcp_debug_print_state>:
 *
 * @param s enum tcp_state to print
 */
void
tcp_debug_print_state(enum tcp_state s)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	71fb      	strb	r3, [r7, #7]
  LWIP_DEBUGF(TCP_DEBUG, ("State: %s\n", tcp_state_str[s]));
 800f2b2:	79fb      	ldrb	r3, [r7, #7]
 800f2b4:	4a06      	ldr	r2, [pc, #24]	@ (800f2d0 <tcp_debug_print_state+0x28>)
 800f2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	4805      	ldr	r0, [pc, #20]	@ (800f2d4 <tcp_debug_print_state+0x2c>)
 800f2be:	f00c fa33 	bl	801b728 <iprintf>
 800f2c2:	2000      	movs	r0, #0
 800f2c4:	f00c f95a 	bl	801b57c <fflush>
}
 800f2c8:	bf00      	nop
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}
 800f2d0:	080251e0 	.word	0x080251e0
 800f2d4:	0801f300 	.word	0x0801f300

0800f2d8 <tcp_debug_print_flags>:
 *
 * @param flags tcp flags, all active flags are printed
 */
void
tcp_debug_print_flags(u8_t flags)
{
 800f2d8:	b580      	push	{r7, lr}
 800f2da:	b082      	sub	sp, #8
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	4603      	mov	r3, r0
 800f2e0:	71fb      	strb	r3, [r7, #7]
  if (flags & TCP_FIN) {
 800f2e2:	79fb      	ldrb	r3, [r7, #7]
 800f2e4:	f003 0301 	and.w	r3, r3, #1
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d005      	beq.n	800f2f8 <tcp_debug_print_flags+0x20>
    LWIP_DEBUGF(TCP_DEBUG, ("FIN "));
 800f2ec:	482d      	ldr	r0, [pc, #180]	@ (800f3a4 <tcp_debug_print_flags+0xcc>)
 800f2ee:	f00c fa1b 	bl	801b728 <iprintf>
 800f2f2:	2000      	movs	r0, #0
 800f2f4:	f00c f942 	bl	801b57c <fflush>
  }
  if (flags & TCP_SYN) {
 800f2f8:	79fb      	ldrb	r3, [r7, #7]
 800f2fa:	f003 0302 	and.w	r3, r3, #2
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d005      	beq.n	800f30e <tcp_debug_print_flags+0x36>
    LWIP_DEBUGF(TCP_DEBUG, ("SYN "));
 800f302:	4829      	ldr	r0, [pc, #164]	@ (800f3a8 <tcp_debug_print_flags+0xd0>)
 800f304:	f00c fa10 	bl	801b728 <iprintf>
 800f308:	2000      	movs	r0, #0
 800f30a:	f00c f937 	bl	801b57c <fflush>
  }
  if (flags & TCP_RST) {
 800f30e:	79fb      	ldrb	r3, [r7, #7]
 800f310:	f003 0304 	and.w	r3, r3, #4
 800f314:	2b00      	cmp	r3, #0
 800f316:	d005      	beq.n	800f324 <tcp_debug_print_flags+0x4c>
    LWIP_DEBUGF(TCP_DEBUG, ("RST "));
 800f318:	4824      	ldr	r0, [pc, #144]	@ (800f3ac <tcp_debug_print_flags+0xd4>)
 800f31a:	f00c fa05 	bl	801b728 <iprintf>
 800f31e:	2000      	movs	r0, #0
 800f320:	f00c f92c 	bl	801b57c <fflush>
  }
  if (flags & TCP_PSH) {
 800f324:	79fb      	ldrb	r3, [r7, #7]
 800f326:	f003 0308 	and.w	r3, r3, #8
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d005      	beq.n	800f33a <tcp_debug_print_flags+0x62>
    LWIP_DEBUGF(TCP_DEBUG, ("PSH "));
 800f32e:	4820      	ldr	r0, [pc, #128]	@ (800f3b0 <tcp_debug_print_flags+0xd8>)
 800f330:	f00c f9fa 	bl	801b728 <iprintf>
 800f334:	2000      	movs	r0, #0
 800f336:	f00c f921 	bl	801b57c <fflush>
  }
  if (flags & TCP_ACK) {
 800f33a:	79fb      	ldrb	r3, [r7, #7]
 800f33c:	f003 0310 	and.w	r3, r3, #16
 800f340:	2b00      	cmp	r3, #0
 800f342:	d005      	beq.n	800f350 <tcp_debug_print_flags+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("ACK "));
 800f344:	481b      	ldr	r0, [pc, #108]	@ (800f3b4 <tcp_debug_print_flags+0xdc>)
 800f346:	f00c f9ef 	bl	801b728 <iprintf>
 800f34a:	2000      	movs	r0, #0
 800f34c:	f00c f916 	bl	801b57c <fflush>
  }
  if (flags & TCP_URG) {
 800f350:	79fb      	ldrb	r3, [r7, #7]
 800f352:	f003 0320 	and.w	r3, r3, #32
 800f356:	2b00      	cmp	r3, #0
 800f358:	d005      	beq.n	800f366 <tcp_debug_print_flags+0x8e>
    LWIP_DEBUGF(TCP_DEBUG, ("URG "));
 800f35a:	4817      	ldr	r0, [pc, #92]	@ (800f3b8 <tcp_debug_print_flags+0xe0>)
 800f35c:	f00c f9e4 	bl	801b728 <iprintf>
 800f360:	2000      	movs	r0, #0
 800f362:	f00c f90b 	bl	801b57c <fflush>
  }
  if (flags & TCP_ECE) {
 800f366:	79fb      	ldrb	r3, [r7, #7]
 800f368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d005      	beq.n	800f37c <tcp_debug_print_flags+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("ECE "));
 800f370:	4812      	ldr	r0, [pc, #72]	@ (800f3bc <tcp_debug_print_flags+0xe4>)
 800f372:	f00c f9d9 	bl	801b728 <iprintf>
 800f376:	2000      	movs	r0, #0
 800f378:	f00c f900 	bl	801b57c <fflush>
  }
  if (flags & TCP_CWR) {
 800f37c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f380:	2b00      	cmp	r3, #0
 800f382:	da05      	bge.n	800f390 <tcp_debug_print_flags+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("CWR "));
 800f384:	480e      	ldr	r0, [pc, #56]	@ (800f3c0 <tcp_debug_print_flags+0xe8>)
 800f386:	f00c f9cf 	bl	801b728 <iprintf>
 800f38a:	2000      	movs	r0, #0
 800f38c:	f00c f8f6 	bl	801b57c <fflush>
  }
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 800f390:	200a      	movs	r0, #10
 800f392:	f00c f9db 	bl	801b74c <putchar>
 800f396:	2000      	movs	r0, #0
 800f398:	f00c f8f0 	bl	801b57c <fflush>
}
 800f39c:	bf00      	nop
 800f39e:	3708      	adds	r7, #8
 800f3a0:	46bd      	mov	sp, r7
 800f3a2:	bd80      	pop	{r7, pc}
 800f3a4:	0801f30c 	.word	0x0801f30c
 800f3a8:	0801f314 	.word	0x0801f314
 800f3ac:	0801f31c 	.word	0x0801f31c
 800f3b0:	0801f324 	.word	0x0801f324
 800f3b4:	0801f32c 	.word	0x0801f32c
 800f3b8:	0801f334 	.word	0x0801f334
 800f3bc:	0801f33c 	.word	0x0801f33c
 800f3c0:	0801f344 	.word	0x0801f344

0800f3c4 <tcp_pcbs_sane>:
/**
 * Check state consistency of the tcp_pcb lists.
 */
s16_t
tcp_pcbs_sane(void)
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3ca:	4b28      	ldr	r3, [pc, #160]	@ (800f46c <tcp_pcbs_sane+0xa8>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	607b      	str	r3, [r7, #4]
 800f3d0:	e02c      	b.n	800f42c <tcp_pcbs_sane+0x68>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	7d1b      	ldrb	r3, [r3, #20]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d109      	bne.n	800f3ee <tcp_pcbs_sane+0x2a>
 800f3da:	4b25      	ldr	r3, [pc, #148]	@ (800f470 <tcp_pcbs_sane+0xac>)
 800f3dc:	f640 12d9 	movw	r2, #2521	@ 0x9d9
 800f3e0:	4924      	ldr	r1, [pc, #144]	@ (800f474 <tcp_pcbs_sane+0xb0>)
 800f3e2:	4825      	ldr	r0, [pc, #148]	@ (800f478 <tcp_pcbs_sane+0xb4>)
 800f3e4:	f00c f9a0 	bl	801b728 <iprintf>
 800f3e8:	2000      	movs	r0, #0
 800f3ea:	f00c f8c7 	bl	801b57c <fflush>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	7d1b      	ldrb	r3, [r3, #20]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d109      	bne.n	800f40a <tcp_pcbs_sane+0x46>
 800f3f6:	4b1e      	ldr	r3, [pc, #120]	@ (800f470 <tcp_pcbs_sane+0xac>)
 800f3f8:	f640 12da 	movw	r2, #2522	@ 0x9da
 800f3fc:	491f      	ldr	r1, [pc, #124]	@ (800f47c <tcp_pcbs_sane+0xb8>)
 800f3fe:	481e      	ldr	r0, [pc, #120]	@ (800f478 <tcp_pcbs_sane+0xb4>)
 800f400:	f00c f992 	bl	801b728 <iprintf>
 800f404:	2000      	movs	r0, #0
 800f406:	f00c f8b9 	bl	801b57c <fflush>
    LWIP_ASSERT("tcp_pcbs_sane: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	7d1b      	ldrb	r3, [r3, #20]
 800f40e:	2b0a      	cmp	r3, #10
 800f410:	d109      	bne.n	800f426 <tcp_pcbs_sane+0x62>
 800f412:	4b17      	ldr	r3, [pc, #92]	@ (800f470 <tcp_pcbs_sane+0xac>)
 800f414:	f640 12db 	movw	r2, #2523	@ 0x9db
 800f418:	4919      	ldr	r1, [pc, #100]	@ (800f480 <tcp_pcbs_sane+0xbc>)
 800f41a:	4817      	ldr	r0, [pc, #92]	@ (800f478 <tcp_pcbs_sane+0xb4>)
 800f41c:	f00c f984 	bl	801b728 <iprintf>
 800f420:	2000      	movs	r0, #0
 800f422:	f00c f8ab 	bl	801b57c <fflush>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	607b      	str	r3, [r7, #4]
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d1cf      	bne.n	800f3d2 <tcp_pcbs_sane+0xe>
  }
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f432:	4b14      	ldr	r3, [pc, #80]	@ (800f484 <tcp_pcbs_sane+0xc0>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	607b      	str	r3, [r7, #4]
 800f438:	e010      	b.n	800f45c <tcp_pcbs_sane+0x98>
    LWIP_ASSERT("tcp_pcbs_sane: tw pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	7d1b      	ldrb	r3, [r3, #20]
 800f43e:	2b0a      	cmp	r3, #10
 800f440:	d009      	beq.n	800f456 <tcp_pcbs_sane+0x92>
 800f442:	4b0b      	ldr	r3, [pc, #44]	@ (800f470 <tcp_pcbs_sane+0xac>)
 800f444:	f640 12de 	movw	r2, #2526	@ 0x9de
 800f448:	490f      	ldr	r1, [pc, #60]	@ (800f488 <tcp_pcbs_sane+0xc4>)
 800f44a:	480b      	ldr	r0, [pc, #44]	@ (800f478 <tcp_pcbs_sane+0xb4>)
 800f44c:	f00c f96c 	bl	801b728 <iprintf>
 800f450:	2000      	movs	r0, #0
 800f452:	f00c f893 	bl	801b57c <fflush>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	68db      	ldr	r3, [r3, #12]
 800f45a:	607b      	str	r3, [r7, #4]
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d1eb      	bne.n	800f43a <tcp_pcbs_sane+0x76>
  }
  return 1;
 800f462:	2301      	movs	r3, #1
}
 800f464:	4618      	mov	r0, r3
 800f466:	3708      	adds	r7, #8
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}
 800f46c:	20011d88 	.word	0x20011d88
 800f470:	0801e474 	.word	0x0801e474
 800f474:	0801f3d8 	.word	0x0801f3d8
 800f478:	0801e4b8 	.word	0x0801e4b8
 800f47c:	0801f404 	.word	0x0801f404
 800f480:	0801f430 	.word	0x0801f430
 800f484:	20011d8c 	.word	0x20011d8c
 800f488:	0801f460 	.word	0x0801f460

0800f48c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f48c:	b590      	push	{r4, r7, lr}
 800f48e:	b08d      	sub	sp, #52	@ 0x34
 800f490:	af04      	add	r7, sp, #16
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d108      	bne.n	800f4ae <tcp_input+0x22>
 800f49c:	4b9d      	ldr	r3, [pc, #628]	@ (800f714 <tcp_input+0x288>)
 800f49e:	2283      	movs	r2, #131	@ 0x83
 800f4a0:	499d      	ldr	r1, [pc, #628]	@ (800f718 <tcp_input+0x28c>)
 800f4a2:	489e      	ldr	r0, [pc, #632]	@ (800f71c <tcp_input+0x290>)
 800f4a4:	f00c f940 	bl	801b728 <iprintf>
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	f00c f867 	bl	801b57c <fflush>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	685b      	ldr	r3, [r3, #4]
 800f4b2:	4a9b      	ldr	r2, [pc, #620]	@ (800f720 <tcp_input+0x294>)
 800f4b4:	6013      	str	r3, [r2, #0]

#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
 800f4b6:	4b9a      	ldr	r3, [pc, #616]	@ (800f720 <tcp_input+0x294>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7ff fdec 	bl	800f098 <tcp_debug_print>
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	895b      	ldrh	r3, [r3, #10]
 800f4c4:	2b13      	cmp	r3, #19
 800f4c6:	d80a      	bhi.n	800f4de <tcp_input+0x52>
    /* drop short packets */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: short packet (%"U16_F" bytes) discarded\n", p->tot_len));
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	891b      	ldrh	r3, [r3, #8]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	4895      	ldr	r0, [pc, #596]	@ (800f724 <tcp_input+0x298>)
 800f4d0:	f00c f92a 	bl	801b728 <iprintf>
 800f4d4:	2000      	movs	r0, #0
 800f4d6:	f00c f851 	bl	801b57c <fflush>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
 800f4da:	f000 bc68 	b.w	800fdae <tcp_input+0x922>
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f4de:	4b92      	ldr	r3, [pc, #584]	@ (800f728 <tcp_input+0x29c>)
 800f4e0:	695b      	ldr	r3, [r3, #20]
 800f4e2:	4a91      	ldr	r2, [pc, #580]	@ (800f728 <tcp_input+0x29c>)
 800f4e4:	6812      	ldr	r2, [r2, #0]
 800f4e6:	4611      	mov	r1, r2
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f00a fd3d 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	f040 845b 	bne.w	800fdac <tcp_input+0x920>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f4f6:	4b8c      	ldr	r3, [pc, #560]	@ (800f728 <tcp_input+0x29c>)
 800f4f8:	695b      	ldr	r3, [r3, #20]
 800f4fa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f4fe:	2be0      	cmp	r3, #224	@ 0xe0
 800f500:	f000 8454 	beq.w	800fdac <tcp_input+0x920>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f504:	4b86      	ldr	r3, [pc, #536]	@ (800f720 <tcp_input+0x294>)
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	899b      	ldrh	r3, [r3, #12]
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fb fbb1 	bl	800ac74 <lwip_htons>
 800f512:	4603      	mov	r3, r0
 800f514:	0b1b      	lsrs	r3, r3, #12
 800f516:	b29b      	uxth	r3, r3
 800f518:	b2db      	uxtb	r3, r3
 800f51a:	009b      	lsls	r3, r3, #2
 800f51c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f51e:	7cbb      	ldrb	r3, [r7, #18]
 800f520:	2b13      	cmp	r3, #19
 800f522:	d905      	bls.n	800f530 <tcp_input+0xa4>
 800f524:	7cbb      	ldrb	r3, [r7, #18]
 800f526:	b29a      	uxth	r2, r3
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	891b      	ldrh	r3, [r3, #8]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d909      	bls.n	800f544 <tcp_input+0xb8>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: invalid header length (%"U16_F")\n", (u16_t)hdrlen_bytes));
 800f530:	7cbb      	ldrb	r3, [r7, #18]
 800f532:	4619      	mov	r1, r3
 800f534:	487d      	ldr	r0, [pc, #500]	@ (800f72c <tcp_input+0x2a0>)
 800f536:	f00c f8f7 	bl	801b728 <iprintf>
 800f53a:	2000      	movs	r0, #0
 800f53c:	f00c f81e 	bl	801b57c <fflush>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
 800f540:	f000 bc35 	b.w	800fdae <tcp_input+0x922>
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f544:	7cbb      	ldrb	r3, [r7, #18]
 800f546:	b29b      	uxth	r3, r3
 800f548:	3b14      	subs	r3, #20
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	4b78      	ldr	r3, [pc, #480]	@ (800f730 <tcp_input+0x2a4>)
 800f54e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f550:	4b78      	ldr	r3, [pc, #480]	@ (800f734 <tcp_input+0x2a8>)
 800f552:	2200      	movs	r2, #0
 800f554:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	895a      	ldrh	r2, [r3, #10]
 800f55a:	7cbb      	ldrb	r3, [r7, #18]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	429a      	cmp	r2, r3
 800f560:	d309      	bcc.n	800f576 <tcp_input+0xea>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f562:	4b73      	ldr	r3, [pc, #460]	@ (800f730 <tcp_input+0x2a4>)
 800f564:	881a      	ldrh	r2, [r3, #0]
 800f566:	4b74      	ldr	r3, [pc, #464]	@ (800f738 <tcp_input+0x2ac>)
 800f568:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f56a:	7cbb      	ldrb	r3, [r7, #18]
 800f56c:	4619      	mov	r1, r3
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f7fd f93c 	bl	800c7ec <pbuf_remove_header>
 800f574:	e061      	b.n	800f63a <tcp_input+0x1ae>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d108      	bne.n	800f590 <tcp_input+0x104>
 800f57e:	4b65      	ldr	r3, [pc, #404]	@ (800f714 <tcp_input+0x288>)
 800f580:	22c2      	movs	r2, #194	@ 0xc2
 800f582:	496e      	ldr	r1, [pc, #440]	@ (800f73c <tcp_input+0x2b0>)
 800f584:	4865      	ldr	r0, [pc, #404]	@ (800f71c <tcp_input+0x290>)
 800f586:	f00c f8cf 	bl	801b728 <iprintf>
 800f58a:	2000      	movs	r0, #0
 800f58c:	f00b fff6 	bl	801b57c <fflush>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f590:	2114      	movs	r1, #20
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7fd f92a 	bl	800c7ec <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	895a      	ldrh	r2, [r3, #10]
 800f59c:	4b66      	ldr	r3, [pc, #408]	@ (800f738 <tcp_input+0x2ac>)
 800f59e:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f5a0:	4b63      	ldr	r3, [pc, #396]	@ (800f730 <tcp_input+0x2a4>)
 800f5a2:	881a      	ldrh	r2, [r3, #0]
 800f5a4:	4b64      	ldr	r3, [pc, #400]	@ (800f738 <tcp_input+0x2ac>)
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	1ad3      	subs	r3, r2, r3
 800f5aa:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f5ac:	4b62      	ldr	r3, [pc, #392]	@ (800f738 <tcp_input+0x2ac>)
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	4619      	mov	r1, r3
 800f5b2:	6878      	ldr	r0, [r7, #4]
 800f5b4:	f7fd f91a 	bl	800c7ec <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	895b      	ldrh	r3, [r3, #10]
 800f5be:	8a3a      	ldrh	r2, [r7, #16]
 800f5c0:	429a      	cmp	r2, r3
 800f5c2:	d90a      	bls.n	800f5da <tcp_input+0x14e>
      /* drop short packets */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: options overflow second pbuf (%"U16_F" bytes)\n", p->next->len));
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	895b      	ldrh	r3, [r3, #10]
 800f5ca:	4619      	mov	r1, r3
 800f5cc:	485c      	ldr	r0, [pc, #368]	@ (800f740 <tcp_input+0x2b4>)
 800f5ce:	f00c f8ab 	bl	801b728 <iprintf>
 800f5d2:	2000      	movs	r0, #0
 800f5d4:	f00b ffd2 	bl	801b57c <fflush>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
 800f5d8:	e3e9      	b.n	800fdae <tcp_input+0x922>
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	4a54      	ldr	r2, [pc, #336]	@ (800f734 <tcp_input+0x2a8>)
 800f5e2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	8a3a      	ldrh	r2, [r7, #16]
 800f5ea:	4611      	mov	r1, r2
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fd f8fd 	bl	800c7ec <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	891a      	ldrh	r2, [r3, #8]
 800f5f6:	8a3b      	ldrh	r3, [r7, #16]
 800f5f8:	1ad3      	subs	r3, r2, r3
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	895b      	ldrh	r3, [r3, #10]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d008      	beq.n	800f61a <tcp_input+0x18e>
 800f608:	4b42      	ldr	r3, [pc, #264]	@ (800f714 <tcp_input+0x288>)
 800f60a:	22df      	movs	r2, #223	@ 0xdf
 800f60c:	494d      	ldr	r1, [pc, #308]	@ (800f744 <tcp_input+0x2b8>)
 800f60e:	4843      	ldr	r0, [pc, #268]	@ (800f71c <tcp_input+0x290>)
 800f610:	f00c f88a 	bl	801b728 <iprintf>
 800f614:	2000      	movs	r0, #0
 800f616:	f00b ffb1 	bl	801b57c <fflush>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	891a      	ldrh	r2, [r3, #8]
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	891b      	ldrh	r3, [r3, #8]
 800f624:	429a      	cmp	r2, r3
 800f626:	d008      	beq.n	800f63a <tcp_input+0x1ae>
 800f628:	4b3a      	ldr	r3, [pc, #232]	@ (800f714 <tcp_input+0x288>)
 800f62a:	22e0      	movs	r2, #224	@ 0xe0
 800f62c:	4946      	ldr	r1, [pc, #280]	@ (800f748 <tcp_input+0x2bc>)
 800f62e:	483b      	ldr	r0, [pc, #236]	@ (800f71c <tcp_input+0x290>)
 800f630:	f00c f87a 	bl	801b728 <iprintf>
 800f634:	2000      	movs	r0, #0
 800f636:	f00b ffa1 	bl	801b57c <fflush>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f63a:	4b39      	ldr	r3, [pc, #228]	@ (800f720 <tcp_input+0x294>)
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	881b      	ldrh	r3, [r3, #0]
 800f640:	b29b      	uxth	r3, r3
 800f642:	4a37      	ldr	r2, [pc, #220]	@ (800f720 <tcp_input+0x294>)
 800f644:	6814      	ldr	r4, [r2, #0]
 800f646:	4618      	mov	r0, r3
 800f648:	f7fb fb14 	bl	800ac74 <lwip_htons>
 800f64c:	4603      	mov	r3, r0
 800f64e:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f650:	4b33      	ldr	r3, [pc, #204]	@ (800f720 <tcp_input+0x294>)
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	885b      	ldrh	r3, [r3, #2]
 800f656:	b29b      	uxth	r3, r3
 800f658:	4a31      	ldr	r2, [pc, #196]	@ (800f720 <tcp_input+0x294>)
 800f65a:	6814      	ldr	r4, [r2, #0]
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fb fb09 	bl	800ac74 <lwip_htons>
 800f662:	4603      	mov	r3, r0
 800f664:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f666:	4b2e      	ldr	r3, [pc, #184]	@ (800f720 <tcp_input+0x294>)
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	4a2c      	ldr	r2, [pc, #176]	@ (800f720 <tcp_input+0x294>)
 800f66e:	6814      	ldr	r4, [r2, #0]
 800f670:	4618      	mov	r0, r3
 800f672:	f7fb fb14 	bl	800ac9e <lwip_htonl>
 800f676:	4603      	mov	r3, r0
 800f678:	6063      	str	r3, [r4, #4]
 800f67a:	6863      	ldr	r3, [r4, #4]
 800f67c:	4a33      	ldr	r2, [pc, #204]	@ (800f74c <tcp_input+0x2c0>)
 800f67e:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f680:	4b27      	ldr	r3, [pc, #156]	@ (800f720 <tcp_input+0x294>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	689b      	ldr	r3, [r3, #8]
 800f686:	4a26      	ldr	r2, [pc, #152]	@ (800f720 <tcp_input+0x294>)
 800f688:	6814      	ldr	r4, [r2, #0]
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fb fb07 	bl	800ac9e <lwip_htonl>
 800f690:	4603      	mov	r3, r0
 800f692:	60a3      	str	r3, [r4, #8]
 800f694:	68a3      	ldr	r3, [r4, #8]
 800f696:	4a2e      	ldr	r2, [pc, #184]	@ (800f750 <tcp_input+0x2c4>)
 800f698:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f69a:	4b21      	ldr	r3, [pc, #132]	@ (800f720 <tcp_input+0x294>)
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	89db      	ldrh	r3, [r3, #14]
 800f6a0:	b29b      	uxth	r3, r3
 800f6a2:	4a1f      	ldr	r2, [pc, #124]	@ (800f720 <tcp_input+0x294>)
 800f6a4:	6814      	ldr	r4, [r2, #0]
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	f7fb fae4 	bl	800ac74 <lwip_htons>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6b0:	4b1b      	ldr	r3, [pc, #108]	@ (800f720 <tcp_input+0x294>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	899b      	ldrh	r3, [r3, #12]
 800f6b6:	b29b      	uxth	r3, r3
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	f7fb fadb 	bl	800ac74 <lwip_htons>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	b2db      	uxtb	r3, r3
 800f6c2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f6c6:	b2da      	uxtb	r2, r3
 800f6c8:	4b22      	ldr	r3, [pc, #136]	@ (800f754 <tcp_input+0x2c8>)
 800f6ca:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	891a      	ldrh	r2, [r3, #8]
 800f6d0:	4b21      	ldr	r3, [pc, #132]	@ (800f758 <tcp_input+0x2cc>)
 800f6d2:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f6d4:	4b1f      	ldr	r3, [pc, #124]	@ (800f754 <tcp_input+0x2c8>)
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	f003 0303 	and.w	r3, r3, #3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d012      	beq.n	800f706 <tcp_input+0x27a>
    tcplen++;
 800f6e0:	4b1d      	ldr	r3, [pc, #116]	@ (800f758 <tcp_input+0x2cc>)
 800f6e2:	881b      	ldrh	r3, [r3, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	b29a      	uxth	r2, r3
 800f6e8:	4b1b      	ldr	r3, [pc, #108]	@ (800f758 <tcp_input+0x2cc>)
 800f6ea:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	891a      	ldrh	r2, [r3, #8]
 800f6f0:	4b19      	ldr	r3, [pc, #100]	@ (800f758 <tcp_input+0x2cc>)
 800f6f2:	881b      	ldrh	r3, [r3, #0]
 800f6f4:	429a      	cmp	r2, r3
 800f6f6:	d906      	bls.n	800f706 <tcp_input+0x27a>
      /* u16_t overflow, cannot handle this */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: length u16_t overflow, cannot handle this\n"));
 800f6f8:	4818      	ldr	r0, [pc, #96]	@ (800f75c <tcp_input+0x2d0>)
 800f6fa:	f00c f885 	bl	801b808 <puts>
 800f6fe:	2000      	movs	r0, #0
 800f700:	f00b ff3c 	bl	801b57c <fflush>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
 800f704:	e353      	b.n	800fdae <tcp_input+0x922>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f706:	2300      	movs	r3, #0
 800f708:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f70a:	4b15      	ldr	r3, [pc, #84]	@ (800f760 <tcp_input+0x2d4>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	61fb      	str	r3, [r7, #28]
 800f710:	e0ae      	b.n	800f870 <tcp_input+0x3e4>
 800f712:	bf00      	nop
 800f714:	0801f48c 	.word	0x0801f48c
 800f718:	0801f4c0 	.word	0x0801f4c0
 800f71c:	0801f4d8 	.word	0x0801f4d8
 800f720:	20011da8 	.word	0x20011da8
 800f724:	0801f500 	.word	0x0801f500
 800f728:	2000c0e8 	.word	0x2000c0e8
 800f72c:	0801f530 	.word	0x0801f530
 800f730:	20011dac 	.word	0x20011dac
 800f734:	20011db0 	.word	0x20011db0
 800f738:	20011dae 	.word	0x20011dae
 800f73c:	0801f558 	.word	0x0801f558
 800f740:	0801f568 	.word	0x0801f568
 800f744:	0801f5a0 	.word	0x0801f5a0
 800f748:	0801f5ac 	.word	0x0801f5ac
 800f74c:	20011db8 	.word	0x20011db8
 800f750:	20011dbc 	.word	0x20011dbc
 800f754:	20011dc4 	.word	0x20011dc4
 800f758:	20011dc2 	.word	0x20011dc2
 800f75c:	0801f5cc 	.word	0x0801f5cc
 800f760:	20011d88 	.word	0x20011d88
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	7d1b      	ldrb	r3, [r3, #20]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d108      	bne.n	800f77e <tcp_input+0x2f2>
 800f76c:	4b88      	ldr	r3, [pc, #544]	@ (800f990 <tcp_input+0x504>)
 800f76e:	22fb      	movs	r2, #251	@ 0xfb
 800f770:	4988      	ldr	r1, [pc, #544]	@ (800f994 <tcp_input+0x508>)
 800f772:	4889      	ldr	r0, [pc, #548]	@ (800f998 <tcp_input+0x50c>)
 800f774:	f00b ffd8 	bl	801b728 <iprintf>
 800f778:	2000      	movs	r0, #0
 800f77a:	f00b feff 	bl	801b57c <fflush>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	7d1b      	ldrb	r3, [r3, #20]
 800f782:	2b0a      	cmp	r3, #10
 800f784:	d108      	bne.n	800f798 <tcp_input+0x30c>
 800f786:	4b82      	ldr	r3, [pc, #520]	@ (800f990 <tcp_input+0x504>)
 800f788:	22fc      	movs	r2, #252	@ 0xfc
 800f78a:	4984      	ldr	r1, [pc, #528]	@ (800f99c <tcp_input+0x510>)
 800f78c:	4882      	ldr	r0, [pc, #520]	@ (800f998 <tcp_input+0x50c>)
 800f78e:	f00b ffcb 	bl	801b728 <iprintf>
 800f792:	2000      	movs	r0, #0
 800f794:	f00b fef2 	bl	801b57c <fflush>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	7d1b      	ldrb	r3, [r3, #20]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d108      	bne.n	800f7b2 <tcp_input+0x326>
 800f7a0:	4b7b      	ldr	r3, [pc, #492]	@ (800f990 <tcp_input+0x504>)
 800f7a2:	22fd      	movs	r2, #253	@ 0xfd
 800f7a4:	497e      	ldr	r1, [pc, #504]	@ (800f9a0 <tcp_input+0x514>)
 800f7a6:	487c      	ldr	r0, [pc, #496]	@ (800f998 <tcp_input+0x50c>)
 800f7a8:	f00b ffbe 	bl	801b728 <iprintf>
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	f00b fee5 	bl	801b57c <fflush>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7b2:	69fb      	ldr	r3, [r7, #28]
 800f7b4:	7a1b      	ldrb	r3, [r3, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d00c      	beq.n	800f7d4 <tcp_input+0x348>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7ba:	69fb      	ldr	r3, [r7, #28]
 800f7bc:	7a1a      	ldrb	r2, [r3, #8]
 800f7be:	4b79      	ldr	r3, [pc, #484]	@ (800f9a4 <tcp_input+0x518>)
 800f7c0:	685b      	ldr	r3, [r3, #4]
 800f7c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	d002      	beq.n	800f7d4 <tcp_input+0x348>
      prev = pcb;
 800f7ce:	69fb      	ldr	r3, [r7, #28]
 800f7d0:	61bb      	str	r3, [r7, #24]
      continue;
 800f7d2:	e04a      	b.n	800f86a <tcp_input+0x3de>
    }

    if (pcb->remote_port == tcphdr->src &&
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	8b1a      	ldrh	r2, [r3, #24]
 800f7d8:	4b73      	ldr	r3, [pc, #460]	@ (800f9a8 <tcp_input+0x51c>)
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	881b      	ldrh	r3, [r3, #0]
 800f7de:	b29b      	uxth	r3, r3
 800f7e0:	429a      	cmp	r2, r3
 800f7e2:	d140      	bne.n	800f866 <tcp_input+0x3da>
        pcb->local_port == tcphdr->dest &&
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	8ada      	ldrh	r2, [r3, #22]
 800f7e8:	4b6f      	ldr	r3, [pc, #444]	@ (800f9a8 <tcp_input+0x51c>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	885b      	ldrh	r3, [r3, #2]
 800f7ee:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d138      	bne.n	800f866 <tcp_input+0x3da>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	4b6a      	ldr	r3, [pc, #424]	@ (800f9a4 <tcp_input+0x518>)
 800f7fa:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f7fc:	429a      	cmp	r2, r3
 800f7fe:	d132      	bne.n	800f866 <tcp_input+0x3da>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	4b67      	ldr	r3, [pc, #412]	@ (800f9a4 <tcp_input+0x518>)
 800f806:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f808:	429a      	cmp	r2, r3
 800f80a:	d12c      	bne.n	800f866 <tcp_input+0x3da>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f80c:	69fb      	ldr	r3, [r7, #28]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	69fa      	ldr	r2, [r7, #28]
 800f812:	429a      	cmp	r2, r3
 800f814:	d109      	bne.n	800f82a <tcp_input+0x39e>
 800f816:	4b5e      	ldr	r3, [pc, #376]	@ (800f990 <tcp_input+0x504>)
 800f818:	f240 120d 	movw	r2, #269	@ 0x10d
 800f81c:	4963      	ldr	r1, [pc, #396]	@ (800f9ac <tcp_input+0x520>)
 800f81e:	485e      	ldr	r0, [pc, #376]	@ (800f998 <tcp_input+0x50c>)
 800f820:	f00b ff82 	bl	801b728 <iprintf>
 800f824:	2000      	movs	r0, #0
 800f826:	f00b fea9 	bl	801b57c <fflush>
      if (prev != NULL) {
 800f82a:	69bb      	ldr	r3, [r7, #24]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d00a      	beq.n	800f846 <tcp_input+0x3ba>
        prev->next = pcb->next;
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	68da      	ldr	r2, [r3, #12]
 800f834:	69bb      	ldr	r3, [r7, #24]
 800f836:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f838:	4b5d      	ldr	r3, [pc, #372]	@ (800f9b0 <tcp_input+0x524>)
 800f83a:	681a      	ldr	r2, [r3, #0]
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f840:	4a5b      	ldr	r2, [pc, #364]	@ (800f9b0 <tcp_input+0x524>)
 800f842:	69fb      	ldr	r3, [r7, #28]
 800f844:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	69fa      	ldr	r2, [r7, #28]
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d114      	bne.n	800f87a <tcp_input+0x3ee>
 800f850:	4b4f      	ldr	r3, [pc, #316]	@ (800f990 <tcp_input+0x504>)
 800f852:	f240 1215 	movw	r2, #277	@ 0x115
 800f856:	4957      	ldr	r1, [pc, #348]	@ (800f9b4 <tcp_input+0x528>)
 800f858:	484f      	ldr	r0, [pc, #316]	@ (800f998 <tcp_input+0x50c>)
 800f85a:	f00b ff65 	bl	801b728 <iprintf>
 800f85e:	2000      	movs	r0, #0
 800f860:	f00b fe8c 	bl	801b57c <fflush>
      break;
 800f864:	e009      	b.n	800f87a <tcp_input+0x3ee>
    }
    prev = pcb;
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	68db      	ldr	r3, [r3, #12]
 800f86e:	61fb      	str	r3, [r7, #28]
 800f870:	69fb      	ldr	r3, [r7, #28]
 800f872:	2b00      	cmp	r3, #0
 800f874:	f47f af76 	bne.w	800f764 <tcp_input+0x2d8>
 800f878:	e000      	b.n	800f87c <tcp_input+0x3f0>
      break;
 800f87a:	bf00      	nop
  }

  if (pcb == NULL) {
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	f040 80c1 	bne.w	800fa06 <tcp_input+0x57a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f884:	4b4c      	ldr	r3, [pc, #304]	@ (800f9b8 <tcp_input+0x52c>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	61fb      	str	r3, [r7, #28]
 800f88a:	e048      	b.n	800f91e <tcp_input+0x492>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f88c:	69fb      	ldr	r3, [r7, #28]
 800f88e:	7d1b      	ldrb	r3, [r3, #20]
 800f890:	2b0a      	cmp	r3, #10
 800f892:	d009      	beq.n	800f8a8 <tcp_input+0x41c>
 800f894:	4b3e      	ldr	r3, [pc, #248]	@ (800f990 <tcp_input+0x504>)
 800f896:	f240 121f 	movw	r2, #287	@ 0x11f
 800f89a:	4948      	ldr	r1, [pc, #288]	@ (800f9bc <tcp_input+0x530>)
 800f89c:	483e      	ldr	r0, [pc, #248]	@ (800f998 <tcp_input+0x50c>)
 800f89e:	f00b ff43 	bl	801b728 <iprintf>
 800f8a2:	2000      	movs	r0, #0
 800f8a4:	f00b fe6a 	bl	801b57c <fflush>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8a8:	69fb      	ldr	r3, [r7, #28]
 800f8aa:	7a1b      	ldrb	r3, [r3, #8]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d009      	beq.n	800f8c4 <tcp_input+0x438>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	7a1a      	ldrb	r2, [r3, #8]
 800f8b4:	4b3b      	ldr	r3, [pc, #236]	@ (800f9a4 <tcp_input+0x518>)
 800f8b6:	685b      	ldr	r3, [r3, #4]
 800f8b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f8bc:	3301      	adds	r3, #1
 800f8be:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d128      	bne.n	800f916 <tcp_input+0x48a>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	8b1a      	ldrh	r2, [r3, #24]
 800f8c8:	4b37      	ldr	r3, [pc, #220]	@ (800f9a8 <tcp_input+0x51c>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	881b      	ldrh	r3, [r3, #0]
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	429a      	cmp	r2, r3
 800f8d2:	d121      	bne.n	800f918 <tcp_input+0x48c>
          pcb->local_port == tcphdr->dest &&
 800f8d4:	69fb      	ldr	r3, [r7, #28]
 800f8d6:	8ada      	ldrh	r2, [r3, #22]
 800f8d8:	4b33      	ldr	r3, [pc, #204]	@ (800f9a8 <tcp_input+0x51c>)
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	885b      	ldrh	r3, [r3, #2]
 800f8de:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	d119      	bne.n	800f918 <tcp_input+0x48c>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8e4:	69fb      	ldr	r3, [r7, #28]
 800f8e6:	685a      	ldr	r2, [r3, #4]
 800f8e8:	4b2e      	ldr	r3, [pc, #184]	@ (800f9a4 <tcp_input+0x518>)
 800f8ea:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d113      	bne.n	800f918 <tcp_input+0x48c>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8f0:	69fb      	ldr	r3, [r7, #28]
 800f8f2:	681a      	ldr	r2, [r3, #0]
 800f8f4:	4b2b      	ldr	r3, [pc, #172]	@ (800f9a4 <tcp_input+0x518>)
 800f8f6:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d10d      	bne.n	800f918 <tcp_input+0x48c>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
 800f8fc:	4830      	ldr	r0, [pc, #192]	@ (800f9c0 <tcp_input+0x534>)
 800f8fe:	f00b ff83 	bl	801b808 <puts>
 800f902:	2000      	movs	r0, #0
 800f904:	f00b fe3a 	bl	801b57c <fflush>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f908:	69f8      	ldr	r0, [r7, #28]
 800f90a:	f000 fbd9 	bl	80100c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7fd f804 	bl	800c91c <pbuf_free>
        return;
 800f914:	e250      	b.n	800fdb8 <tcp_input+0x92c>
        continue;
 800f916:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f918:	69fb      	ldr	r3, [r7, #28]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	61fb      	str	r3, [r7, #28]
 800f91e:	69fb      	ldr	r3, [r7, #28]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1b3      	bne.n	800f88c <tcp_input+0x400>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f924:	2300      	movs	r3, #0
 800f926:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f928:	4b26      	ldr	r3, [pc, #152]	@ (800f9c4 <tcp_input+0x538>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	617b      	str	r3, [r7, #20]
 800f92e:	e02a      	b.n	800f986 <tcp_input+0x4fa>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	7a1b      	ldrb	r3, [r3, #8]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00c      	beq.n	800f952 <tcp_input+0x4c6>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f938:	697b      	ldr	r3, [r7, #20]
 800f93a:	7a1a      	ldrb	r2, [r3, #8]
 800f93c:	4b19      	ldr	r3, [pc, #100]	@ (800f9a4 <tcp_input+0x518>)
 800f93e:	685b      	ldr	r3, [r3, #4]
 800f940:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800f944:	3301      	adds	r3, #1
 800f946:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f948:	429a      	cmp	r2, r3
 800f94a:	d002      	beq.n	800f952 <tcp_input+0x4c6>
        prev = (struct tcp_pcb *)lpcb;
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	61bb      	str	r3, [r7, #24]
        continue;
 800f950:	e016      	b.n	800f980 <tcp_input+0x4f4>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	8ada      	ldrh	r2, [r3, #22]
 800f956:	4b14      	ldr	r3, [pc, #80]	@ (800f9a8 <tcp_input+0x51c>)
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	885b      	ldrh	r3, [r3, #2]
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	429a      	cmp	r2, r3
 800f960:	d10c      	bne.n	800f97c <tcp_input+0x4f0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f962:	697b      	ldr	r3, [r7, #20]
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	4b0f      	ldr	r3, [pc, #60]	@ (800f9a4 <tcp_input+0x518>)
 800f968:	695b      	ldr	r3, [r3, #20]
 800f96a:	429a      	cmp	r2, r3
 800f96c:	d02c      	beq.n	800f9c8 <tcp_input+0x53c>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d02a      	beq.n	800f9ca <tcp_input+0x53e>
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	681b      	ldr	r3, [r3, #0]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d026      	beq.n	800f9ca <tcp_input+0x53e>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f97c:	697b      	ldr	r3, [r7, #20]
 800f97e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f980:	697b      	ldr	r3, [r7, #20]
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	617b      	str	r3, [r7, #20]
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1d1      	bne.n	800f930 <tcp_input+0x4a4>
 800f98c:	e01d      	b.n	800f9ca <tcp_input+0x53e>
 800f98e:	bf00      	nop
 800f990:	0801f48c 	.word	0x0801f48c
 800f994:	0801f604 	.word	0x0801f604
 800f998:	0801f4d8 	.word	0x0801f4d8
 800f99c:	0801f62c 	.word	0x0801f62c
 800f9a0:	0801f658 	.word	0x0801f658
 800f9a4:	2000c0e8 	.word	0x2000c0e8
 800f9a8:	20011da8 	.word	0x20011da8
 800f9ac:	0801f680 	.word	0x0801f680
 800f9b0:	20011d88 	.word	0x20011d88
 800f9b4:	0801f6ac 	.word	0x0801f6ac
 800f9b8:	20011d8c 	.word	0x20011d8c
 800f9bc:	0801f6d8 	.word	0x0801f6d8
 800f9c0:	0801f708 	.word	0x0801f708
 800f9c4:	20011d84 	.word	0x20011d84
            break;
 800f9c8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f9ca:	697b      	ldr	r3, [r7, #20]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d01a      	beq.n	800fa06 <tcp_input+0x57a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f9d0:	69bb      	ldr	r3, [r7, #24]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d00a      	beq.n	800f9ec <tcp_input+0x560>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	68da      	ldr	r2, [r3, #12]
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f9de:	4b98      	ldr	r3, [pc, #608]	@ (800fc40 <tcp_input+0x7b4>)
 800f9e0:	681a      	ldr	r2, [r3, #0]
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f9e6:	4a96      	ldr	r2, [pc, #600]	@ (800fc40 <tcp_input+0x7b4>)
 800f9e8:	697b      	ldr	r3, [r7, #20]
 800f9ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
 800f9ec:	4895      	ldr	r0, [pc, #596]	@ (800fc44 <tcp_input+0x7b8>)
 800f9ee:	f00b ff0b 	bl	801b808 <puts>
 800f9f2:	2000      	movs	r0, #0
 800f9f4:	f00b fdc2 	bl	801b57c <fflush>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9f8:	6978      	ldr	r0, [r7, #20]
 800f9fa:	f000 fa3f 	bl	800fe7c <tcp_listen_input>
      }
      pbuf_free(p);
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	f7fc ff8c 	bl	800c91c <pbuf_free>
      return;
 800fa04:	e1d8      	b.n	800fdb8 <tcp_input+0x92c>
    }
  }

#if TCP_INPUT_DEBUG
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("+-+-+-+-+-+-+-+-+-+-+-+-+-+- tcp_input: flags "));
 800fa06:	4890      	ldr	r0, [pc, #576]	@ (800fc48 <tcp_input+0x7bc>)
 800fa08:	f00b fe8e 	bl	801b728 <iprintf>
 800fa0c:	2000      	movs	r0, #0
 800fa0e:	f00b fdb5 	bl	801b57c <fflush>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
 800fa12:	4b8e      	ldr	r3, [pc, #568]	@ (800fc4c <tcp_input+0x7c0>)
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	899b      	ldrh	r3, [r3, #12]
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7fb f92a 	bl	800ac74 <lwip_htons>
 800fa20:	4603      	mov	r3, r0
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa28:	b2db      	uxtb	r3, r3
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7ff fc54 	bl	800f2d8 <tcp_debug_print_flags>
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
 800fa30:	4887      	ldr	r0, [pc, #540]	@ (800fc50 <tcp_input+0x7c4>)
 800fa32:	f00b fee9 	bl	801b808 <puts>
 800fa36:	2000      	movs	r0, #0
 800fa38:	f00b fda0 	bl	801b57c <fflush>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	f000 8175 	beq.w	800fd2e <tcp_input+0x8a2>
    /* The incoming segment belongs to a connection. */
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
 800fa44:	69fb      	ldr	r3, [r7, #28]
 800fa46:	7d1b      	ldrb	r3, [r3, #20]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	f7ff fc2d 	bl	800f2a8 <tcp_debug_print_state>
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800fa4e:	4b81      	ldr	r3, [pc, #516]	@ (800fc54 <tcp_input+0x7c8>)
 800fa50:	2200      	movs	r2, #0
 800fa52:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	891a      	ldrh	r2, [r3, #8]
 800fa58:	4b7e      	ldr	r3, [pc, #504]	@ (800fc54 <tcp_input+0x7c8>)
 800fa5a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800fa5c:	4a7d      	ldr	r2, [pc, #500]	@ (800fc54 <tcp_input+0x7c8>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800fa62:	4b7a      	ldr	r3, [pc, #488]	@ (800fc4c <tcp_input+0x7c0>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	4a7b      	ldr	r2, [pc, #492]	@ (800fc54 <tcp_input+0x7c8>)
 800fa68:	6113      	str	r3, [r2, #16]

    recv_data = NULL;
 800fa6a:	4b7b      	ldr	r3, [pc, #492]	@ (800fc58 <tcp_input+0x7cc>)
 800fa6c:	2200      	movs	r2, #0
 800fa6e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa70:	4b7a      	ldr	r3, [pc, #488]	@ (800fc5c <tcp_input+0x7d0>)
 800fa72:	2200      	movs	r2, #0
 800fa74:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa76:	4b7a      	ldr	r3, [pc, #488]	@ (800fc60 <tcp_input+0x7d4>)
 800fa78:	2200      	movs	r2, #0
 800fa7a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa7c:	4b79      	ldr	r3, [pc, #484]	@ (800fc64 <tcp_input+0x7d8>)
 800fa7e:	781b      	ldrb	r3, [r3, #0]
 800fa80:	f003 0308 	and.w	r3, r3, #8
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d006      	beq.n	800fa96 <tcp_input+0x60a>
      p->flags |= PBUF_FLAG_PUSH;
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	7b5b      	ldrb	r3, [r3, #13]
 800fa8c:	f043 0301 	orr.w	r3, r3, #1
 800fa90:	b2da      	uxtb	r2, r3
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d017      	beq.n	800face <tcp_input+0x642>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa9e:	69f8      	ldr	r0, [r7, #28]
 800faa0:	f7fe fcf4 	bl	800e48c <tcp_process_refused_data>
 800faa4:	4603      	mov	r3, r0
 800faa6:	f113 0f0d 	cmn.w	r3, #13
 800faaa:	d007      	beq.n	800fabc <tcp_input+0x630>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00c      	beq.n	800face <tcp_input+0x642>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fab4:	4b6c      	ldr	r3, [pc, #432]	@ (800fc68 <tcp_input+0x7dc>)
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d008      	beq.n	800face <tcp_input+0x642>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	f040 8114 	bne.w	800fcee <tcp_input+0x862>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fac6:	69f8      	ldr	r0, [r7, #28]
 800fac8:	f004 fc1a 	bl	8014300 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800facc:	e10f      	b.n	800fcee <tcp_input+0x862>
      }
    }
    tcp_input_pcb = pcb;
 800face:	4a67      	ldr	r2, [pc, #412]	@ (800fc6c <tcp_input+0x7e0>)
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fad4:	69f8      	ldr	r0, [r7, #28]
 800fad6:	f000 fb71 	bl	80101bc <tcp_process>
 800fada:	4603      	mov	r3, r0
 800fadc:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fade:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fae2:	f113 0f0d 	cmn.w	r3, #13
 800fae6:	f000 8104 	beq.w	800fcf2 <tcp_input+0x866>
      if (recv_flags & TF_RESET) {
 800faea:	4b5c      	ldr	r3, [pc, #368]	@ (800fc5c <tcp_input+0x7d0>)
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	f003 0308 	and.w	r3, r3, #8
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d015      	beq.n	800fb22 <tcp_input+0x696>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d008      	beq.n	800fb12 <tcp_input+0x686>
 800fb00:	69fb      	ldr	r3, [r7, #28]
 800fb02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fb06:	69fa      	ldr	r2, [r7, #28]
 800fb08:	6912      	ldr	r2, [r2, #16]
 800fb0a:	f06f 010d 	mvn.w	r1, #13
 800fb0e:	4610      	mov	r0, r2
 800fb10:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fb12:	69f9      	ldr	r1, [r7, #28]
 800fb14:	4856      	ldr	r0, [pc, #344]	@ (800fc70 <tcp_input+0x7e4>)
 800fb16:	f7ff f903 	bl	800ed20 <tcp_pcb_remove>
        tcp_free(pcb);
 800fb1a:	69f8      	ldr	r0, [r7, #28]
 800fb1c:	f7fd fa2c 	bl	800cf78 <tcp_free>
 800fb20:	e0f2      	b.n	800fd08 <tcp_input+0x87c>
      } else {
        err = ERR_OK;
 800fb22:	2300      	movs	r3, #0
 800fb24:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fb26:	4b4e      	ldr	r3, [pc, #312]	@ (800fc60 <tcp_input+0x7d4>)
 800fb28:	881b      	ldrh	r3, [r3, #0]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d01d      	beq.n	800fb6a <tcp_input+0x6de>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fb2e:	4b4c      	ldr	r3, [pc, #304]	@ (800fc60 <tcp_input+0x7d4>)
 800fb30:	881b      	ldrh	r3, [r3, #0]
 800fb32:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800fb34:	69fb      	ldr	r3, [r7, #28]
 800fb36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d00a      	beq.n	800fb54 <tcp_input+0x6c8>
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800fb44:	69fa      	ldr	r2, [r7, #28]
 800fb46:	6910      	ldr	r0, [r2, #16]
 800fb48:	89fa      	ldrh	r2, [r7, #14]
 800fb4a:	69f9      	ldr	r1, [r7, #28]
 800fb4c:	4798      	blx	r3
 800fb4e:	4603      	mov	r3, r0
 800fb50:	74fb      	strb	r3, [r7, #19]
 800fb52:	e001      	b.n	800fb58 <tcp_input+0x6cc>
 800fb54:	2300      	movs	r3, #0
 800fb56:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fb58:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb5c:	f113 0f0d 	cmn.w	r3, #13
 800fb60:	f000 80c9 	beq.w	800fcf6 <tcp_input+0x86a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fb64:	4b3e      	ldr	r3, [pc, #248]	@ (800fc60 <tcp_input+0x7d4>)
 800fb66:	2200      	movs	r2, #0
 800fb68:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb6a:	69f8      	ldr	r0, [r7, #28]
 800fb6c:	f000 f942 	bl	800fdf4 <tcp_input_delayed_close>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f040 80c1 	bne.w	800fcfa <tcp_input+0x86e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb78:	4b37      	ldr	r3, [pc, #220]	@ (800fc58 <tcp_input+0x7cc>)
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d04b      	beq.n	800fc18 <tcp_input+0x78c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d009      	beq.n	800fb9c <tcp_input+0x710>
 800fb88:	4b3a      	ldr	r3, [pc, #232]	@ (800fc74 <tcp_input+0x7e8>)
 800fb8a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800fb8e:	493a      	ldr	r1, [pc, #232]	@ (800fc78 <tcp_input+0x7ec>)
 800fb90:	483a      	ldr	r0, [pc, #232]	@ (800fc7c <tcp_input+0x7f0>)
 800fb92:	f00b fdc9 	bl	801b728 <iprintf>
 800fb96:	2000      	movs	r0, #0
 800fb98:	f00b fcf0 	bl	801b57c <fflush>
          if (pcb->flags & TF_RXCLOSED) {
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	8b5b      	ldrh	r3, [r3, #26]
 800fba0:	f003 0310 	and.w	r3, r3, #16
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d008      	beq.n	800fbba <tcp_input+0x72e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fba8:	4b2b      	ldr	r3, [pc, #172]	@ (800fc58 <tcp_input+0x7cc>)
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4618      	mov	r0, r3
 800fbae:	f7fc feb5 	bl	800c91c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fbb2:	69f8      	ldr	r0, [r7, #28]
 800fbb4:	f7fd fd5e 	bl	800d674 <tcp_abort>
            goto aborted;
 800fbb8:	e0a6      	b.n	800fd08 <tcp_input+0x87c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fbba:	69fb      	ldr	r3, [r7, #28]
 800fbbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d00c      	beq.n	800fbde <tcp_input+0x752>
 800fbc4:	69fb      	ldr	r3, [r7, #28]
 800fbc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	6918      	ldr	r0, [r3, #16]
 800fbce:	4b22      	ldr	r3, [pc, #136]	@ (800fc58 <tcp_input+0x7cc>)
 800fbd0:	681a      	ldr	r2, [r3, #0]
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	69f9      	ldr	r1, [r7, #28]
 800fbd6:	47a0      	blx	r4
 800fbd8:	4603      	mov	r3, r0
 800fbda:	74fb      	strb	r3, [r7, #19]
 800fbdc:	e008      	b.n	800fbf0 <tcp_input+0x764>
 800fbde:	4b1e      	ldr	r3, [pc, #120]	@ (800fc58 <tcp_input+0x7cc>)
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	69f9      	ldr	r1, [r7, #28]
 800fbe6:	2000      	movs	r0, #0
 800fbe8:	f7fe fd40 	bl	800e66c <tcp_recv_null>
 800fbec:	4603      	mov	r3, r0
 800fbee:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fbf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fbf4:	f113 0f0d 	cmn.w	r3, #13
 800fbf8:	f000 8081 	beq.w	800fcfe <tcp_input+0x872>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fbfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d009      	beq.n	800fc18 <tcp_input+0x78c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fc04:	4b14      	ldr	r3, [pc, #80]	@ (800fc58 <tcp_input+0x7cc>)
 800fc06:	681a      	ldr	r2, [r3, #0]
 800fc08:	69fb      	ldr	r3, [r7, #28]
 800fc0a:	679a      	str	r2, [r3, #120]	@ 0x78
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: keep incoming packet, because pcb is \"full\"\n"));
 800fc0c:	481c      	ldr	r0, [pc, #112]	@ (800fc80 <tcp_input+0x7f4>)
 800fc0e:	f00b fdfb 	bl	801b808 <puts>
 800fc12:	2000      	movs	r0, #0
 800fc14:	f00b fcb2 	bl	801b57c <fflush>
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fc18:	4b10      	ldr	r3, [pc, #64]	@ (800fc5c <tcp_input+0x7d0>)
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	f003 0320 	and.w	r3, r3, #32
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d052      	beq.n	800fcca <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 800fc24:	69fb      	ldr	r3, [r7, #28]
 800fc26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d02b      	beq.n	800fc84 <tcp_input+0x7f8>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc30:	7b5a      	ldrb	r2, [r3, #13]
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fc36:	f042 0220 	orr.w	r2, r2, #32
 800fc3a:	b2d2      	uxtb	r2, r2
 800fc3c:	735a      	strb	r2, [r3, #13]
 800fc3e:	e044      	b.n	800fcca <tcp_input+0x83e>
 800fc40:	20011d84 	.word	0x20011d84
 800fc44:	0801f738 	.word	0x0801f738
 800fc48:	0801f764 	.word	0x0801f764
 800fc4c:	20011da8 	.word	0x20011da8
 800fc50:	0801f794 	.word	0x0801f794
 800fc54:	20011d94 	.word	0x20011d94
 800fc58:	20011dc8 	.word	0x20011dc8
 800fc5c:	20011dc5 	.word	0x20011dc5
 800fc60:	20011dc0 	.word	0x20011dc0
 800fc64:	20011dc4 	.word	0x20011dc4
 800fc68:	20011dc2 	.word	0x20011dc2
 800fc6c:	20011dcc 	.word	0x20011dcc
 800fc70:	20011d88 	.word	0x20011d88
 800fc74:	0801f48c 	.word	0x0801f48c
 800fc78:	0801f7b4 	.word	0x0801f7b4
 800fc7c:	0801f4d8 	.word	0x0801f4d8
 800fc80:	0801f7d0 	.word	0x0801f7d0
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc88:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800fc8c:	d005      	beq.n	800fc9a <tcp_input+0x80e>
              pcb->rcv_wnd++;
 800fc8e:	69fb      	ldr	r3, [r7, #28]
 800fc90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800fc92:	3301      	adds	r3, #1
 800fc94:	b29a      	uxth	r2, r3
 800fc96:	69fb      	ldr	r3, [r7, #28]
 800fc98:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fc9a:	69fb      	ldr	r3, [r7, #28]
 800fc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d00b      	beq.n	800fcbc <tcp_input+0x830>
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800fcaa:	69fb      	ldr	r3, [r7, #28]
 800fcac:	6918      	ldr	r0, [r3, #16]
 800fcae:	2300      	movs	r3, #0
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	69f9      	ldr	r1, [r7, #28]
 800fcb4:	47a0      	blx	r4
 800fcb6:	4603      	mov	r3, r0
 800fcb8:	74fb      	strb	r3, [r7, #19]
 800fcba:	e001      	b.n	800fcc0 <tcp_input+0x834>
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fcc0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fcc4:	f113 0f0d 	cmn.w	r3, #13
 800fcc8:	d01b      	beq.n	800fd02 <tcp_input+0x876>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fcca:	4b3d      	ldr	r3, [pc, #244]	@ (800fdc0 <tcp_input+0x934>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fcd0:	69f8      	ldr	r0, [r7, #28]
 800fcd2:	f000 f88f 	bl	800fdf4 <tcp_input_delayed_close>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d114      	bne.n	800fd06 <tcp_input+0x87a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fcdc:	69f8      	ldr	r0, [r7, #28]
 800fcde:	f003 fbc5 	bl	801346c <tcp_output>
#if TCP_INPUT_DEBUG
#if TCP_DEBUG
        tcp_debug_print_state(pcb->state);
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	7d1b      	ldrb	r3, [r3, #20]
 800fce6:	4618      	mov	r0, r3
 800fce8:	f7ff fade 	bl	800f2a8 <tcp_debug_print_state>
 800fcec:	e00c      	b.n	800fd08 <tcp_input+0x87c>
        goto aborted;
 800fcee:	bf00      	nop
 800fcf0:	e00a      	b.n	800fd08 <tcp_input+0x87c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fcf2:	bf00      	nop
 800fcf4:	e008      	b.n	800fd08 <tcp_input+0x87c>
              goto aborted;
 800fcf6:	bf00      	nop
 800fcf8:	e006      	b.n	800fd08 <tcp_input+0x87c>
          goto aborted;
 800fcfa:	bf00      	nop
 800fcfc:	e004      	b.n	800fd08 <tcp_input+0x87c>
            goto aborted;
 800fcfe:	bf00      	nop
 800fd00:	e002      	b.n	800fd08 <tcp_input+0x87c>
              goto aborted;
 800fd02:	bf00      	nop
 800fd04:	e000      	b.n	800fd08 <tcp_input+0x87c>
          goto aborted;
 800fd06:	bf00      	nop
    tcp_input_pcb = NULL;
 800fd08:	4b2d      	ldr	r3, [pc, #180]	@ (800fdc0 <tcp_input+0x934>)
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fd0e:	4b2d      	ldr	r3, [pc, #180]	@ (800fdc4 <tcp_input+0x938>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fd14:	4b2c      	ldr	r3, [pc, #176]	@ (800fdc8 <tcp_input+0x93c>)
 800fd16:	685b      	ldr	r3, [r3, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d037      	beq.n	800fd8c <tcp_input+0x900>
      pbuf_free(inseg.p);
 800fd1c:	4b2a      	ldr	r3, [pc, #168]	@ (800fdc8 <tcp_input+0x93c>)
 800fd1e:	685b      	ldr	r3, [r3, #4]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fc fdfb 	bl	800c91c <pbuf_free>
      inseg.p = NULL;
 800fd26:	4b28      	ldr	r3, [pc, #160]	@ (800fdc8 <tcp_input+0x93c>)
 800fd28:	2200      	movs	r2, #0
 800fd2a:	605a      	str	r2, [r3, #4]
 800fd2c:	e02e      	b.n	800fd8c <tcp_input+0x900>
    }
  } else {
    /* If no matching PCB was found, send a TCP RST (reset) to the
       sender. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_input: no PCB match found, resetting.\n"));
 800fd2e:	4827      	ldr	r0, [pc, #156]	@ (800fdcc <tcp_input+0x940>)
 800fd30:	f00b fd6a 	bl	801b808 <puts>
 800fd34:	2000      	movs	r0, #0
 800fd36:	f00b fc21 	bl	801b57c <fflush>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fd3a:	4b25      	ldr	r3, [pc, #148]	@ (800fdd0 <tcp_input+0x944>)
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	899b      	ldrh	r3, [r3, #12]
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fa ff96 	bl	800ac74 <lwip_htons>
 800fd48:	4603      	mov	r3, r0
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	f003 0304 	and.w	r3, r3, #4
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d118      	bne.n	800fd86 <tcp_input+0x8fa>
      TCP_STATS_INC(tcp.proterr);
      TCP_STATS_INC(tcp.drop);
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd54:	4b1f      	ldr	r3, [pc, #124]	@ (800fdd4 <tcp_input+0x948>)
 800fd56:	6819      	ldr	r1, [r3, #0]
 800fd58:	4b1f      	ldr	r3, [pc, #124]	@ (800fdd8 <tcp_input+0x94c>)
 800fd5a:	881b      	ldrh	r3, [r3, #0]
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	4b1f      	ldr	r3, [pc, #124]	@ (800fddc <tcp_input+0x950>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd64:	4b1a      	ldr	r3, [pc, #104]	@ (800fdd0 <tcp_input+0x944>)
 800fd66:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd68:	885b      	ldrh	r3, [r3, #2]
 800fd6a:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd6c:	4a18      	ldr	r2, [pc, #96]	@ (800fdd0 <tcp_input+0x944>)
 800fd6e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd70:	8812      	ldrh	r2, [r2, #0]
 800fd72:	b292      	uxth	r2, r2
 800fd74:	9202      	str	r2, [sp, #8]
 800fd76:	9301      	str	r3, [sp, #4]
 800fd78:	4b19      	ldr	r3, [pc, #100]	@ (800fde0 <tcp_input+0x954>)
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	4b19      	ldr	r3, [pc, #100]	@ (800fde4 <tcp_input+0x958>)
 800fd7e:	4602      	mov	r2, r0
 800fd80:	2000      	movs	r0, #0
 800fd82:	f004 fa55 	bl	8014230 <tcp_rst>
    }
    pbuf_free(p);
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f7fc fdc8 	bl	800c91c <pbuf_free>
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
 800fd8c:	f7ff fb1a 	bl	800f3c4 <tcp_pcbs_sane>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d10f      	bne.n	800fdb6 <tcp_input+0x92a>
 800fd96:	4b14      	ldr	r3, [pc, #80]	@ (800fde8 <tcp_input+0x95c>)
 800fd98:	f240 2249 	movw	r2, #585	@ 0x249
 800fd9c:	4913      	ldr	r1, [pc, #76]	@ (800fdec <tcp_input+0x960>)
 800fd9e:	4814      	ldr	r0, [pc, #80]	@ (800fdf0 <tcp_input+0x964>)
 800fda0:	f00b fcc2 	bl	801b728 <iprintf>
 800fda4:	2000      	movs	r0, #0
 800fda6:	f00b fbe9 	bl	801b57c <fflush>
  PERF_STOP("tcp_input");
  return;
 800fdaa:	e004      	b.n	800fdb6 <tcp_input+0x92a>
    goto dropped;
 800fdac:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f7fc fdb4 	bl	800c91c <pbuf_free>
 800fdb4:	e000      	b.n	800fdb8 <tcp_input+0x92c>
  return;
 800fdb6:	bf00      	nop
}
 800fdb8:	3724      	adds	r7, #36	@ 0x24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd90      	pop	{r4, r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	20011dcc 	.word	0x20011dcc
 800fdc4:	20011dc8 	.word	0x20011dc8
 800fdc8:	20011d94 	.word	0x20011d94
 800fdcc:	0801f808 	.word	0x0801f808
 800fdd0:	20011da8 	.word	0x20011da8
 800fdd4:	20011dbc 	.word	0x20011dbc
 800fdd8:	20011dc2 	.word	0x20011dc2
 800fddc:	20011db8 	.word	0x20011db8
 800fde0:	2000c0f8 	.word	0x2000c0f8
 800fde4:	2000c0fc 	.word	0x2000c0fc
 800fde8:	0801f48c 	.word	0x0801f48c
 800fdec:	0801f834 	.word	0x0801f834
 800fdf0:	0801f4d8 	.word	0x0801f4d8

0800fdf4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b082      	sub	sp, #8
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d109      	bne.n	800fe16 <tcp_input_delayed_close+0x22>
 800fe02:	4b19      	ldr	r3, [pc, #100]	@ (800fe68 <tcp_input_delayed_close+0x74>)
 800fe04:	f240 225a 	movw	r2, #602	@ 0x25a
 800fe08:	4918      	ldr	r1, [pc, #96]	@ (800fe6c <tcp_input_delayed_close+0x78>)
 800fe0a:	4819      	ldr	r0, [pc, #100]	@ (800fe70 <tcp_input_delayed_close+0x7c>)
 800fe0c:	f00b fc8c 	bl	801b728 <iprintf>
 800fe10:	2000      	movs	r0, #0
 800fe12:	f00b fbb3 	bl	801b57c <fflush>

  if (recv_flags & TF_CLOSED) {
 800fe16:	4b17      	ldr	r3, [pc, #92]	@ (800fe74 <tcp_input_delayed_close+0x80>)
 800fe18:	781b      	ldrb	r3, [r3, #0]
 800fe1a:	f003 0310 	and.w	r3, r3, #16
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d01c      	beq.n	800fe5c <tcp_input_delayed_close+0x68>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	8b5b      	ldrh	r3, [r3, #26]
 800fe26:	f003 0310 	and.w	r3, r3, #16
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d10d      	bne.n	800fe4a <tcp_input_delayed_close+0x56>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d008      	beq.n	800fe4a <tcp_input_delayed_close+0x56>
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	6912      	ldr	r2, [r2, #16]
 800fe42:	f06f 010e 	mvn.w	r1, #14
 800fe46:	4610      	mov	r0, r2
 800fe48:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fe4a:	6879      	ldr	r1, [r7, #4]
 800fe4c:	480a      	ldr	r0, [pc, #40]	@ (800fe78 <tcp_input_delayed_close+0x84>)
 800fe4e:	f7fe ff67 	bl	800ed20 <tcp_pcb_remove>
    tcp_free(pcb);
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f7fd f890 	bl	800cf78 <tcp_free>
    return 1;
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e000      	b.n	800fe5e <tcp_input_delayed_close+0x6a>
  }
  return 0;
 800fe5c:	2300      	movs	r3, #0
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3708      	adds	r7, #8
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	0801f48c 	.word	0x0801f48c
 800fe6c:	0801f850 	.word	0x0801f850
 800fe70:	0801f4d8 	.word	0x0801f4d8
 800fe74:	20011dc5 	.word	0x20011dc5
 800fe78:	20011d88 	.word	0x20011d88

0800fe7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fe7c:	b590      	push	{r4, r7, lr}
 800fe7e:	b08b      	sub	sp, #44	@ 0x2c
 800fe80:	af04      	add	r7, sp, #16
 800fe82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fe84:	4b7e      	ldr	r3, [pc, #504]	@ (8010080 <tcp_listen_input+0x204>)
 800fe86:	781b      	ldrb	r3, [r3, #0]
 800fe88:	f003 0304 	and.w	r3, r3, #4
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	f040 80f1 	bne.w	8010074 <tcp_listen_input+0x1f8>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d109      	bne.n	800feac <tcp_listen_input+0x30>
 800fe98:	4b7a      	ldr	r3, [pc, #488]	@ (8010084 <tcp_listen_input+0x208>)
 800fe9a:	f240 2281 	movw	r2, #641	@ 0x281
 800fe9e:	497a      	ldr	r1, [pc, #488]	@ (8010088 <tcp_listen_input+0x20c>)
 800fea0:	487a      	ldr	r0, [pc, #488]	@ (801008c <tcp_listen_input+0x210>)
 800fea2:	f00b fc41 	bl	801b728 <iprintf>
 800fea6:	2000      	movs	r0, #0
 800fea8:	f00b fb68 	bl	801b57c <fflush>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800feac:	4b74      	ldr	r3, [pc, #464]	@ (8010080 <tcp_listen_input+0x204>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 0310 	and.w	r3, r3, #16
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d01f      	beq.n	800fef8 <tcp_listen_input+0x7c>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
 800feb8:	4875      	ldr	r0, [pc, #468]	@ (8010090 <tcp_listen_input+0x214>)
 800feba:	f00b fca5 	bl	801b808 <puts>
 800febe:	2000      	movs	r0, #0
 800fec0:	f00b fb5c 	bl	801b57c <fflush>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fec4:	4b73      	ldr	r3, [pc, #460]	@ (8010094 <tcp_listen_input+0x218>)
 800fec6:	6819      	ldr	r1, [r3, #0]
 800fec8:	4b73      	ldr	r3, [pc, #460]	@ (8010098 <tcp_listen_input+0x21c>)
 800feca:	881b      	ldrh	r3, [r3, #0]
 800fecc:	461a      	mov	r2, r3
 800fece:	4b73      	ldr	r3, [pc, #460]	@ (801009c <tcp_listen_input+0x220>)
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fed4:	4b72      	ldr	r3, [pc, #456]	@ (80100a0 <tcp_listen_input+0x224>)
 800fed6:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fed8:	885b      	ldrh	r3, [r3, #2]
 800feda:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fedc:	4a70      	ldr	r2, [pc, #448]	@ (80100a0 <tcp_listen_input+0x224>)
 800fede:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee0:	8812      	ldrh	r2, [r2, #0]
 800fee2:	b292      	uxth	r2, r2
 800fee4:	9202      	str	r2, [sp, #8]
 800fee6:	9301      	str	r3, [sp, #4]
 800fee8:	4b6e      	ldr	r3, [pc, #440]	@ (80100a4 <tcp_listen_input+0x228>)
 800feea:	9300      	str	r3, [sp, #0]
 800feec:	4b6e      	ldr	r3, [pc, #440]	@ (80100a8 <tcp_listen_input+0x22c>)
 800feee:	4602      	mov	r2, r0
 800fef0:	6878      	ldr	r0, [r7, #4]
 800fef2:	f004 f99d 	bl	8014230 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fef6:	e0bf      	b.n	8010078 <tcp_listen_input+0x1fc>
  } else if (flags & TCP_SYN) {
 800fef8:	4b61      	ldr	r3, [pc, #388]	@ (8010080 <tcp_listen_input+0x204>)
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	f003 0302 	and.w	r3, r3, #2
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 80b9 	beq.w	8010078 <tcp_listen_input+0x1fc>
    LWIP_DEBUGF(TCP_DEBUG, ("TCP connection request %"U16_F" -> %"U16_F".\n", tcphdr->src, tcphdr->dest));
 800ff06:	4b66      	ldr	r3, [pc, #408]	@ (80100a0 <tcp_listen_input+0x224>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	881b      	ldrh	r3, [r3, #0]
 800ff0c:	b29b      	uxth	r3, r3
 800ff0e:	4619      	mov	r1, r3
 800ff10:	4b63      	ldr	r3, [pc, #396]	@ (80100a0 <tcp_listen_input+0x224>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	885b      	ldrh	r3, [r3, #2]
 800ff16:	b29b      	uxth	r3, r3
 800ff18:	461a      	mov	r2, r3
 800ff1a:	4864      	ldr	r0, [pc, #400]	@ (80100ac <tcp_listen_input+0x230>)
 800ff1c:	f00b fc04 	bl	801b728 <iprintf>
 800ff20:	2000      	movs	r0, #0
 800ff22:	f00b fb2b 	bl	801b57c <fflush>
    npcb = tcp_alloc(pcb->prio);
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	7d5b      	ldrb	r3, [r3, #21]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f7fe fcf4 	bl	800e918 <tcp_alloc>
 800ff30:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ff32:	697b      	ldr	r3, [r7, #20]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d117      	bne.n	800ff68 <tcp_listen_input+0xec>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_listen_input: could not allocate PCB\n"));
 800ff38:	485d      	ldr	r0, [pc, #372]	@ (80100b0 <tcp_listen_input+0x234>)
 800ff3a:	f00b fc65 	bl	801b808 <puts>
 800ff3e:	2000      	movs	r0, #0
 800ff40:	f00b fb1c 	bl	801b57c <fflush>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	699b      	ldr	r3, [r3, #24]
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d00a      	beq.n	800ff62 <tcp_listen_input+0xe6>
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	699b      	ldr	r3, [r3, #24]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	6910      	ldr	r0, [r2, #16]
 800ff54:	f04f 32ff 	mov.w	r2, #4294967295
 800ff58:	2100      	movs	r1, #0
 800ff5a:	4798      	blx	r3
 800ff5c:	4603      	mov	r3, r0
 800ff5e:	73bb      	strb	r3, [r7, #14]
      return;
 800ff60:	e08b      	b.n	801007a <tcp_listen_input+0x1fe>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ff62:	23f0      	movs	r3, #240	@ 0xf0
 800ff64:	73bb      	strb	r3, [r7, #14]
      return;
 800ff66:	e088      	b.n	801007a <tcp_listen_input+0x1fe>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ff68:	4b52      	ldr	r3, [pc, #328]	@ (80100b4 <tcp_listen_input+0x238>)
 800ff6a:	695a      	ldr	r2, [r3, #20]
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ff70:	4b50      	ldr	r3, [pc, #320]	@ (80100b4 <tcp_listen_input+0x238>)
 800ff72:	691a      	ldr	r2, [r3, #16]
 800ff74:	697b      	ldr	r3, [r7, #20]
 800ff76:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	8ada      	ldrh	r2, [r3, #22]
 800ff7c:	697b      	ldr	r3, [r7, #20]
 800ff7e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ff80:	4b47      	ldr	r3, [pc, #284]	@ (80100a0 <tcp_listen_input+0x224>)
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	881b      	ldrh	r3, [r3, #0]
 800ff86:	b29a      	uxth	r2, r3
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	2203      	movs	r2, #3
 800ff90:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ff92:	4b42      	ldr	r3, [pc, #264]	@ (801009c <tcp_listen_input+0x220>)
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	1c5a      	adds	r2, r3, #1
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800ffa4:	6978      	ldr	r0, [r7, #20]
 800ffa6:	f7fe ff6f 	bl	800ee88 <tcp_next_iss>
 800ffaa:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800ffac:	697b      	ldr	r3, [r7, #20]
 800ffae:	693a      	ldr	r2, [r7, #16]
 800ffb0:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	693a      	ldr	r2, [r7, #16]
 800ffb6:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800ffb8:	697b      	ldr	r3, [r7, #20]
 800ffba:	693a      	ldr	r2, [r7, #16]
 800ffbc:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800ffbe:	697b      	ldr	r3, [r7, #20]
 800ffc0:	693a      	ldr	r2, [r7, #16]
 800ffc2:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ffc4:	4b35      	ldr	r3, [pc, #212]	@ (801009c <tcp_listen_input+0x220>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	1e5a      	subs	r2, r3, #1
 800ffca:	697b      	ldr	r3, [r7, #20]
 800ffcc:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	691a      	ldr	r2, [r3, #16]
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	687a      	ldr	r2, [r7, #4]
 800ffda:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	7a5b      	ldrb	r3, [r3, #9]
 800ffe0:	f003 030c 	and.w	r3, r3, #12
 800ffe4:	b2da      	uxtb	r2, r3
 800ffe6:	697b      	ldr	r3, [r7, #20]
 800ffe8:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	7a1a      	ldrb	r2, [r3, #8]
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fff2:	4b31      	ldr	r3, [pc, #196]	@ (80100b8 <tcp_listen_input+0x23c>)
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	60da      	str	r2, [r3, #12]
 800fffa:	4a2f      	ldr	r2, [pc, #188]	@ (80100b8 <tcp_listen_input+0x23c>)
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	6013      	str	r3, [r2, #0]
 8010000:	f004 fbb4 	bl	801476c <tcp_timer_needed>
 8010004:	4b2d      	ldr	r3, [pc, #180]	@ (80100bc <tcp_listen_input+0x240>)
 8010006:	2201      	movs	r2, #1
 8010008:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801000a:	6978      	ldr	r0, [r7, #20]
 801000c:	f002 f800 	bl	8012010 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8010010:	4b23      	ldr	r3, [pc, #140]	@ (80100a0 <tcp_listen_input+0x224>)
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	89db      	ldrh	r3, [r3, #14]
 8010016:	b29a      	uxth	r2, r3
 8010018:	697b      	ldr	r3, [r7, #20]
 801001a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010024:	697b      	ldr	r3, [r7, #20]
 8010026:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801002a:	697b      	ldr	r3, [r7, #20]
 801002c:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	3304      	adds	r3, #4
 8010032:	4618      	mov	r0, r3
 8010034:	f009 fab4 	bl	80195a0 <ip4_route>
 8010038:	4601      	mov	r1, r0
 801003a:	697b      	ldr	r3, [r7, #20]
 801003c:	3304      	adds	r3, #4
 801003e:	461a      	mov	r2, r3
 8010040:	4620      	mov	r0, r4
 8010042:	f7fe ff49 	bl	800eed8 <tcp_eff_send_mss_netif>
 8010046:	4603      	mov	r3, r0
 8010048:	461a      	mov	r2, r3
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801004e:	2112      	movs	r1, #18
 8010050:	6978      	ldr	r0, [r7, #20]
 8010052:	f003 f8c7 	bl	80131e4 <tcp_enqueue_flags>
 8010056:	4603      	mov	r3, r0
 8010058:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801005a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d004      	beq.n	801006c <tcp_listen_input+0x1f0>
      tcp_abandon(npcb, 0);
 8010062:	2100      	movs	r1, #0
 8010064:	6978      	ldr	r0, [r7, #20]
 8010066:	f7fd fa39 	bl	800d4dc <tcp_abandon>
      return;
 801006a:	e006      	b.n	801007a <tcp_listen_input+0x1fe>
    tcp_output(npcb);
 801006c:	6978      	ldr	r0, [r7, #20]
 801006e:	f003 f9fd 	bl	801346c <tcp_output>
  return;
 8010072:	e001      	b.n	8010078 <tcp_listen_input+0x1fc>
    return;
 8010074:	bf00      	nop
 8010076:	e000      	b.n	801007a <tcp_listen_input+0x1fe>
  return;
 8010078:	bf00      	nop
}
 801007a:	371c      	adds	r7, #28
 801007c:	46bd      	mov	sp, r7
 801007e:	bd90      	pop	{r4, r7, pc}
 8010080:	20011dc4 	.word	0x20011dc4
 8010084:	0801f48c 	.word	0x0801f48c
 8010088:	0801f878 	.word	0x0801f878
 801008c:	0801f4d8 	.word	0x0801f4d8
 8010090:	0801f898 	.word	0x0801f898
 8010094:	20011dbc 	.word	0x20011dbc
 8010098:	20011dc2 	.word	0x20011dc2
 801009c:	20011db8 	.word	0x20011db8
 80100a0:	20011da8 	.word	0x20011da8
 80100a4:	2000c0f8 	.word	0x2000c0f8
 80100a8:	2000c0fc 	.word	0x2000c0fc
 80100ac:	0801f8c8 	.word	0x0801f8c8
 80100b0:	0801f8ec 	.word	0x0801f8ec
 80100b4:	2000c0e8 	.word	0x2000c0e8
 80100b8:	20011d88 	.word	0x20011d88
 80100bc:	20011d90 	.word	0x20011d90

080100c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b086      	sub	sp, #24
 80100c4:	af04      	add	r7, sp, #16
 80100c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80100c8:	4b31      	ldr	r3, [pc, #196]	@ (8010190 <tcp_timewait_input+0xd0>)
 80100ca:	781b      	ldrb	r3, [r3, #0]
 80100cc:	f003 0304 	and.w	r3, r3, #4
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d156      	bne.n	8010182 <tcp_timewait_input+0xc2>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d109      	bne.n	80100ee <tcp_timewait_input+0x2e>
 80100da:	4b2e      	ldr	r3, [pc, #184]	@ (8010194 <tcp_timewait_input+0xd4>)
 80100dc:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80100e0:	492d      	ldr	r1, [pc, #180]	@ (8010198 <tcp_timewait_input+0xd8>)
 80100e2:	482e      	ldr	r0, [pc, #184]	@ (801019c <tcp_timewait_input+0xdc>)
 80100e4:	f00b fb20 	bl	801b728 <iprintf>
 80100e8:	2000      	movs	r0, #0
 80100ea:	f00b fa47 	bl	801b57c <fflush>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80100ee:	4b28      	ldr	r3, [pc, #160]	@ (8010190 <tcp_timewait_input+0xd0>)
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	f003 0302 	and.w	r3, r3, #2
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d02a      	beq.n	8010150 <tcp_timewait_input+0x90>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80100fa:	4b29      	ldr	r3, [pc, #164]	@ (80101a0 <tcp_timewait_input+0xe0>)
 80100fc:	681a      	ldr	r2, [r3, #0]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010102:	1ad3      	subs	r3, r2, r3
 8010104:	2b00      	cmp	r3, #0
 8010106:	db2d      	blt.n	8010164 <tcp_timewait_input+0xa4>
 8010108:	4b25      	ldr	r3, [pc, #148]	@ (80101a0 <tcp_timewait_input+0xe0>)
 801010a:	681a      	ldr	r2, [r3, #0]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010114:	440b      	add	r3, r1
 8010116:	1ad3      	subs	r3, r2, r3
 8010118:	2b00      	cmp	r3, #0
 801011a:	dc23      	bgt.n	8010164 <tcp_timewait_input+0xa4>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801011c:	4b21      	ldr	r3, [pc, #132]	@ (80101a4 <tcp_timewait_input+0xe4>)
 801011e:	6819      	ldr	r1, [r3, #0]
 8010120:	4b21      	ldr	r3, [pc, #132]	@ (80101a8 <tcp_timewait_input+0xe8>)
 8010122:	881b      	ldrh	r3, [r3, #0]
 8010124:	461a      	mov	r2, r3
 8010126:	4b1e      	ldr	r3, [pc, #120]	@ (80101a0 <tcp_timewait_input+0xe0>)
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801012c:	4b1f      	ldr	r3, [pc, #124]	@ (80101ac <tcp_timewait_input+0xec>)
 801012e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010130:	885b      	ldrh	r3, [r3, #2]
 8010132:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010134:	4a1d      	ldr	r2, [pc, #116]	@ (80101ac <tcp_timewait_input+0xec>)
 8010136:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010138:	8812      	ldrh	r2, [r2, #0]
 801013a:	b292      	uxth	r2, r2
 801013c:	9202      	str	r2, [sp, #8]
 801013e:	9301      	str	r3, [sp, #4]
 8010140:	4b1b      	ldr	r3, [pc, #108]	@ (80101b0 <tcp_timewait_input+0xf0>)
 8010142:	9300      	str	r3, [sp, #0]
 8010144:	4b1b      	ldr	r3, [pc, #108]	@ (80101b4 <tcp_timewait_input+0xf4>)
 8010146:	4602      	mov	r2, r0
 8010148:	6878      	ldr	r0, [r7, #4]
 801014a:	f004 f871 	bl	8014230 <tcp_rst>
      return;
 801014e:	e01b      	b.n	8010188 <tcp_timewait_input+0xc8>
    }
  } else if (flags & TCP_FIN) {
 8010150:	4b0f      	ldr	r3, [pc, #60]	@ (8010190 <tcp_timewait_input+0xd0>)
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	f003 0301 	and.w	r3, r3, #1
 8010158:	2b00      	cmp	r3, #0
 801015a:	d003      	beq.n	8010164 <tcp_timewait_input+0xa4>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801015c:	4b16      	ldr	r3, [pc, #88]	@ (80101b8 <tcp_timewait_input+0xf8>)
 801015e:	681a      	ldr	r2, [r3, #0]
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8010164:	4b10      	ldr	r3, [pc, #64]	@ (80101a8 <tcp_timewait_input+0xe8>)
 8010166:	881b      	ldrh	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d00c      	beq.n	8010186 <tcp_timewait_input+0xc6>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	8b5b      	ldrh	r3, [r3, #26]
 8010170:	f043 0302 	orr.w	r3, r3, #2
 8010174:	b29a      	uxth	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f003 f976 	bl	801346c <tcp_output>
  }
  return;
 8010180:	e001      	b.n	8010186 <tcp_timewait_input+0xc6>
    return;
 8010182:	bf00      	nop
 8010184:	e000      	b.n	8010188 <tcp_timewait_input+0xc8>
  return;
 8010186:	bf00      	nop
}
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	20011dc4 	.word	0x20011dc4
 8010194:	0801f48c 	.word	0x0801f48c
 8010198:	0801f918 	.word	0x0801f918
 801019c:	0801f4d8 	.word	0x0801f4d8
 80101a0:	20011db8 	.word	0x20011db8
 80101a4:	20011dbc 	.word	0x20011dbc
 80101a8:	20011dc2 	.word	0x20011dc2
 80101ac:	20011da8 	.word	0x20011da8
 80101b0:	2000c0f8 	.word	0x2000c0f8
 80101b4:	2000c0fc 	.word	0x2000c0fc
 80101b8:	20011d7c 	.word	0x20011d7c

080101bc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80101bc:	b5b0      	push	{r4, r5, r7, lr}
 80101be:	b08c      	sub	sp, #48	@ 0x30
 80101c0:	af04      	add	r7, sp, #16
 80101c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80101c4:	2300      	movs	r3, #0
 80101c6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80101c8:	2300      	movs	r3, #0
 80101ca:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d109      	bne.n	80101e6 <tcp_process+0x2a>
 80101d2:	4ba1      	ldr	r3, [pc, #644]	@ (8010458 <tcp_process+0x29c>)
 80101d4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80101d8:	49a0      	ldr	r1, [pc, #640]	@ (801045c <tcp_process+0x2a0>)
 80101da:	48a1      	ldr	r0, [pc, #644]	@ (8010460 <tcp_process+0x2a4>)
 80101dc:	f00b faa4 	bl	801b728 <iprintf>
 80101e0:	2000      	movs	r0, #0
 80101e2:	f00b f9cb 	bl	801b57c <fflush>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80101e6:	4b9f      	ldr	r3, [pc, #636]	@ (8010464 <tcp_process+0x2a8>)
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	f003 0304 	and.w	r3, r3, #4
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d06f      	beq.n	80102d2 <tcp_process+0x116>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	7d1b      	ldrb	r3, [r3, #20]
 80101f6:	2b02      	cmp	r3, #2
 80101f8:	d108      	bne.n	801020c <tcp_process+0x50>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80101fe:	4b9a      	ldr	r3, [pc, #616]	@ (8010468 <tcp_process+0x2ac>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	429a      	cmp	r2, r3
 8010204:	d123      	bne.n	801024e <tcp_process+0x92>
        acceptable = 1;
 8010206:	2301      	movs	r3, #1
 8010208:	76fb      	strb	r3, [r7, #27]
 801020a:	e020      	b.n	801024e <tcp_process+0x92>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010210:	4b96      	ldr	r3, [pc, #600]	@ (801046c <tcp_process+0x2b0>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	429a      	cmp	r2, r3
 8010216:	d102      	bne.n	801021e <tcp_process+0x62>
        acceptable = 1;
 8010218:	2301      	movs	r3, #1
 801021a:	76fb      	strb	r3, [r7, #27]
 801021c:	e017      	b.n	801024e <tcp_process+0x92>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801021e:	4b93      	ldr	r3, [pc, #588]	@ (801046c <tcp_process+0x2b0>)
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010226:	1ad3      	subs	r3, r2, r3
 8010228:	2b00      	cmp	r3, #0
 801022a:	db10      	blt.n	801024e <tcp_process+0x92>
 801022c:	4b8f      	ldr	r3, [pc, #572]	@ (801046c <tcp_process+0x2b0>)
 801022e:	681a      	ldr	r2, [r3, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010234:	6879      	ldr	r1, [r7, #4]
 8010236:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8010238:	440b      	add	r3, r1
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	2b00      	cmp	r3, #0
 801023e:	dc06      	bgt.n	801024e <tcp_process+0x92>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	8b5b      	ldrh	r3, [r3, #26]
 8010244:	f043 0302 	orr.w	r3, r3, #2
 8010248:	b29a      	uxth	r2, r3
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801024e:	7efb      	ldrb	r3, [r7, #27]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d025      	beq.n	80102a0 <tcp_process+0xe4>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
 8010254:	4886      	ldr	r0, [pc, #536]	@ (8010470 <tcp_process+0x2b4>)
 8010256:	f00b fad7 	bl	801b808 <puts>
 801025a:	2000      	movs	r0, #0
 801025c:	f00b f98e 	bl	801b57c <fflush>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	7d1b      	ldrb	r3, [r3, #20]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d109      	bne.n	801027c <tcp_process+0xc0>
 8010268:	4b7b      	ldr	r3, [pc, #492]	@ (8010458 <tcp_process+0x29c>)
 801026a:	f44f 724e 	mov.w	r2, #824	@ 0x338
 801026e:	4981      	ldr	r1, [pc, #516]	@ (8010474 <tcp_process+0x2b8>)
 8010270:	487b      	ldr	r0, [pc, #492]	@ (8010460 <tcp_process+0x2a4>)
 8010272:	f00b fa59 	bl	801b728 <iprintf>
 8010276:	2000      	movs	r0, #0
 8010278:	f00b f980 	bl	801b57c <fflush>
      recv_flags |= TF_RESET;
 801027c:	4b7e      	ldr	r3, [pc, #504]	@ (8010478 <tcp_process+0x2bc>)
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	f043 0308 	orr.w	r3, r3, #8
 8010284:	b2da      	uxtb	r2, r3
 8010286:	4b7c      	ldr	r3, [pc, #496]	@ (8010478 <tcp_process+0x2bc>)
 8010288:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	8b5b      	ldrh	r3, [r3, #26]
 801028e:	f023 0301 	bic.w	r3, r3, #1
 8010292:	b29a      	uxth	r2, r3
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010298:	f06f 030d 	mvn.w	r3, #13
 801029c:	f000 bc51 	b.w	8010b42 <tcp_process+0x986>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 80102a0:	4b72      	ldr	r3, [pc, #456]	@ (801046c <tcp_process+0x2b0>)
 80102a2:	6819      	ldr	r1, [r3, #0]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102a8:	461a      	mov	r2, r3
 80102aa:	4874      	ldr	r0, [pc, #464]	@ (801047c <tcp_process+0x2c0>)
 80102ac:	f00b fa3c 	bl	801b728 <iprintf>
 80102b0:	2000      	movs	r0, #0
 80102b2:	f00b f963 	bl	801b57c <fflush>
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
 80102b6:	4b6d      	ldr	r3, [pc, #436]	@ (801046c <tcp_process+0x2b0>)
 80102b8:	6819      	ldr	r1, [r3, #0]
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102be:	461a      	mov	r2, r3
 80102c0:	486e      	ldr	r0, [pc, #440]	@ (801047c <tcp_process+0x2c0>)
 80102c2:	f00b fa31 	bl	801b728 <iprintf>
 80102c6:	2000      	movs	r0, #0
 80102c8:	f00b f958 	bl	801b57c <fflush>
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	f000 bc38 	b.w	8010b42 <tcp_process+0x986>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80102d2:	4b64      	ldr	r3, [pc, #400]	@ (8010464 <tcp_process+0x2a8>)
 80102d4:	781b      	ldrb	r3, [r3, #0]
 80102d6:	f003 0302 	and.w	r3, r3, #2
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d011      	beq.n	8010302 <tcp_process+0x146>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	7d1b      	ldrb	r3, [r3, #20]
 80102e2:	2b02      	cmp	r3, #2
 80102e4:	d00d      	beq.n	8010302 <tcp_process+0x146>
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	7d1b      	ldrb	r3, [r3, #20]
 80102ea:	2b03      	cmp	r3, #3
 80102ec:	d009      	beq.n	8010302 <tcp_process+0x146>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	8b5b      	ldrh	r3, [r3, #26]
 80102f2:	f043 0302 	orr.w	r3, r3, #2
 80102f6:	b29a      	uxth	r2, r3
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80102fc:	2300      	movs	r3, #0
 80102fe:	f000 bc20 	b.w	8010b42 <tcp_process+0x986>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	8b5b      	ldrh	r3, [r3, #26]
 8010306:	f003 0310 	and.w	r3, r3, #16
 801030a:	2b00      	cmp	r3, #0
 801030c:	d103      	bne.n	8010316 <tcp_process+0x15a>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801030e:	4b5c      	ldr	r3, [pc, #368]	@ (8010480 <tcp_process+0x2c4>)
 8010310:	681a      	ldr	r2, [r3, #0]
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	2200      	movs	r2, #0
 8010322:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8010326:	6878      	ldr	r0, [r7, #4]
 8010328:	f001 fe72 	bl	8012010 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	7d1b      	ldrb	r3, [r3, #20]
 8010330:	3b02      	subs	r3, #2
 8010332:	2b07      	cmp	r3, #7
 8010334:	f200 83f5 	bhi.w	8010b22 <tcp_process+0x966>
 8010338:	a201      	add	r2, pc, #4	@ (adr r2, 8010340 <tcp_process+0x184>)
 801033a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033e:	bf00      	nop
 8010340:	08010361 	.word	0x08010361
 8010344:	080105f7 	.word	0x080105f7
 8010348:	080107f9 	.word	0x080107f9
 801034c:	08010823 	.word	0x08010823
 8010350:	08010931 	.word	0x08010931
 8010354:	080107f9 	.word	0x080107f9
 8010358:	08010a1b 	.word	0x08010a1b
 801035c:	08010acd 	.word	0x08010acd
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
 8010360:	4b41      	ldr	r3, [pc, #260]	@ (8010468 <tcp_process+0x2ac>)
 8010362:	681c      	ldr	r4, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	685b      	ldr	r3, [r3, #4]
 8010370:	4618      	mov	r0, r3
 8010372:	f7fa fc94 	bl	800ac9e <lwip_htonl>
 8010376:	4603      	mov	r3, r0
 8010378:	462a      	mov	r2, r5
 801037a:	4621      	mov	r1, r4
 801037c:	4841      	ldr	r0, [pc, #260]	@ (8010484 <tcp_process+0x2c8>)
 801037e:	f00b f9d3 	bl	801b728 <iprintf>
 8010382:	2000      	movs	r0, #0
 8010384:	f00b f8fa 	bl	801b57c <fflush>
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8010388:	4b36      	ldr	r3, [pc, #216]	@ (8010464 <tcp_process+0x2a8>)
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	f003 0310 	and.w	r3, r3, #16
 8010390:	2b00      	cmp	r3, #0
 8010392:	f000 8103 	beq.w	801059c <tcp_process+0x3e0>
 8010396:	4b33      	ldr	r3, [pc, #204]	@ (8010464 <tcp_process+0x2a8>)
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	f003 0302 	and.w	r3, r3, #2
 801039e:	2b00      	cmp	r3, #0
 80103a0:	f000 80fc 	beq.w	801059c <tcp_process+0x3e0>
          && (ackno == pcb->lastack + 1)) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80103a8:	1c5a      	adds	r2, r3, #1
 80103aa:	4b2f      	ldr	r3, [pc, #188]	@ (8010468 <tcp_process+0x2ac>)
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	429a      	cmp	r2, r3
 80103b0:	f040 80f4 	bne.w	801059c <tcp_process+0x3e0>
        pcb->rcv_nxt = seqno + 1;
 80103b4:	4b2d      	ldr	r3, [pc, #180]	@ (801046c <tcp_process+0x2b0>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	1c5a      	adds	r2, r3, #1
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80103c6:	4b28      	ldr	r3, [pc, #160]	@ (8010468 <tcp_process+0x2ac>)
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80103ce:	4b2e      	ldr	r3, [pc, #184]	@ (8010488 <tcp_process+0x2cc>)
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	89db      	ldrh	r3, [r3, #14]
 80103d4:	b29a      	uxth	r2, r3
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80103e8:	4b20      	ldr	r3, [pc, #128]	@ (801046c <tcp_process+0x2b0>)
 80103ea:	681b      	ldr	r3, [r3, #0]
 80103ec:	1e5a      	subs	r2, r3, #1
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2204      	movs	r2, #4
 80103f6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	3304      	adds	r3, #4
 8010400:	4618      	mov	r0, r3
 8010402:	f009 f8cd 	bl	80195a0 <ip4_route>
 8010406:	4601      	mov	r1, r0
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	3304      	adds	r3, #4
 801040c:	461a      	mov	r2, r3
 801040e:	4620      	mov	r0, r4
 8010410:	f7fe fd62 	bl	800eed8 <tcp_eff_send_mss_netif>
 8010414:	4603      	mov	r3, r0
 8010416:	461a      	mov	r2, r3
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010420:	009a      	lsls	r2, r3, #2
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010426:	005b      	lsls	r3, r3, #1
 8010428:	f241 111c 	movw	r1, #4380	@ 0x111c
 801042c:	428b      	cmp	r3, r1
 801042e:	bf38      	it	cc
 8010430:	460b      	movcc	r3, r1
 8010432:	429a      	cmp	r2, r3
 8010434:	d204      	bcs.n	8010440 <tcp_process+0x284>
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	b29b      	uxth	r3, r3
 801043e:	e027      	b.n	8010490 <tcp_process+0x2d4>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010444:	005b      	lsls	r3, r3, #1
 8010446:	f241 121c 	movw	r2, #4380	@ 0x111c
 801044a:	4293      	cmp	r3, r2
 801044c:	d91e      	bls.n	801048c <tcp_process+0x2d0>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010452:	005b      	lsls	r3, r3, #1
 8010454:	b29b      	uxth	r3, r3
 8010456:	e01b      	b.n	8010490 <tcp_process+0x2d4>
 8010458:	0801f48c 	.word	0x0801f48c
 801045c:	0801f938 	.word	0x0801f938
 8010460:	0801f4d8 	.word	0x0801f4d8
 8010464:	20011dc4 	.word	0x20011dc4
 8010468:	20011dbc 	.word	0x20011dbc
 801046c:	20011db8 	.word	0x20011db8
 8010470:	0801f954 	.word	0x0801f954
 8010474:	0801f974 	.word	0x0801f974
 8010478:	20011dc5 	.word	0x20011dc5
 801047c:	0801f994 	.word	0x0801f994
 8010480:	20011d7c 	.word	0x20011d7c
 8010484:	0801f9cc 	.word	0x0801f9cc
 8010488:	20011da8 	.word	0x20011da8
 801048c:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801049c:	4619      	mov	r1, r3
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80104a4:	461a      	mov	r2, r3
 80104a6:	489a      	ldr	r0, [pc, #616]	@ (8010710 <tcp_process+0x554>)
 80104a8:	f00b f93e 	bl	801b728 <iprintf>
 80104ac:	2000      	movs	r0, #0
 80104ae:	f00b f865 	bl	801b57c <fflush>
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d109      	bne.n	80104d0 <tcp_process+0x314>
 80104bc:	4b95      	ldr	r3, [pc, #596]	@ (8010714 <tcp_process+0x558>)
 80104be:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80104c2:	4995      	ldr	r1, [pc, #596]	@ (8010718 <tcp_process+0x55c>)
 80104c4:	4895      	ldr	r0, [pc, #596]	@ (801071c <tcp_process+0x560>)
 80104c6:	f00b f92f 	bl	801b728 <iprintf>
 80104ca:	2000      	movs	r0, #0
 80104cc:	f00b f856 	bl	801b57c <fflush>
        --pcb->snd_queuelen;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104d6:	3b01      	subs	r3, #1
 80104d8:	b29a      	uxth	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80104e6:	4619      	mov	r1, r3
 80104e8:	488d      	ldr	r0, [pc, #564]	@ (8010720 <tcp_process+0x564>)
 80104ea:	f00b f91d 	bl	801b728 <iprintf>
 80104ee:	2000      	movs	r0, #0
 80104f0:	f00b f844 	bl	801b57c <fflush>
        rseg = pcb->unacked;
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80104f8:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d114      	bne.n	801052a <tcp_process+0x36e>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010504:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8010506:	69fb      	ldr	r3, [r7, #28]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d109      	bne.n	8010520 <tcp_process+0x364>
 801050c:	4b81      	ldr	r3, [pc, #516]	@ (8010714 <tcp_process+0x558>)
 801050e:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8010512:	4984      	ldr	r1, [pc, #528]	@ (8010724 <tcp_process+0x568>)
 8010514:	4881      	ldr	r0, [pc, #516]	@ (801071c <tcp_process+0x560>)
 8010516:	f00b f907 	bl	801b728 <iprintf>
 801051a:	2000      	movs	r0, #0
 801051c:	f00b f82e 	bl	801b57c <fflush>
          pcb->unsent = rseg->next;
 8010520:	69fb      	ldr	r3, [r7, #28]
 8010522:	681a      	ldr	r2, [r3, #0]
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	66da      	str	r2, [r3, #108]	@ 0x6c
 8010528:	e003      	b.n	8010532 <tcp_process+0x376>
        } else {
          pcb->unacked = rseg->next;
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	681a      	ldr	r2, [r3, #0]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8010532:	69f8      	ldr	r0, [r7, #28]
 8010534:	f7fe f84f 	bl	800e5d6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801053c:	2b00      	cmp	r3, #0
 801053e:	d104      	bne.n	801054a <tcp_process+0x38e>
          pcb->rtime = -1;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010546:	861a      	strh	r2, [r3, #48]	@ 0x30
 8010548:	e006      	b.n	8010558 <tcp_process+0x39c>
        } else {
          pcb->rtime = 0;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	2200      	movs	r2, #0
 801054e:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2200      	movs	r2, #0
 8010554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00a      	beq.n	8010578 <tcp_process+0x3bc>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	6910      	ldr	r0, [r2, #16]
 801056c:	2200      	movs	r2, #0
 801056e:	6879      	ldr	r1, [r7, #4]
 8010570:	4798      	blx	r3
 8010572:	4603      	mov	r3, r0
 8010574:	76bb      	strb	r3, [r7, #26]
 8010576:	e001      	b.n	801057c <tcp_process+0x3c0>
 8010578:	2300      	movs	r3, #0
 801057a:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801057c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010580:	f113 0f0d 	cmn.w	r3, #13
 8010584:	d102      	bne.n	801058c <tcp_process+0x3d0>
          return ERR_ABRT;
 8010586:	f06f 030c 	mvn.w	r3, #12
 801058a:	e2da      	b.n	8010b42 <tcp_process+0x986>
        }
        tcp_ack_now(pcb);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	8b5b      	ldrh	r3, [r3, #26]
 8010590:	f043 0302 	orr.w	r3, r3, #2
 8010594:	b29a      	uxth	r2, r3
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801059a:	e2c4      	b.n	8010b26 <tcp_process+0x96a>
      else if (flags & TCP_ACK) {
 801059c:	4b62      	ldr	r3, [pc, #392]	@ (8010728 <tcp_process+0x56c>)
 801059e:	781b      	ldrb	r3, [r3, #0]
 80105a0:	f003 0310 	and.w	r3, r3, #16
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 82be 	beq.w	8010b26 <tcp_process+0x96a>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105aa:	4b60      	ldr	r3, [pc, #384]	@ (801072c <tcp_process+0x570>)
 80105ac:	6819      	ldr	r1, [r3, #0]
 80105ae:	4b60      	ldr	r3, [pc, #384]	@ (8010730 <tcp_process+0x574>)
 80105b0:	881b      	ldrh	r3, [r3, #0]
 80105b2:	461a      	mov	r2, r3
 80105b4:	4b5f      	ldr	r3, [pc, #380]	@ (8010734 <tcp_process+0x578>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105ba:	4b5f      	ldr	r3, [pc, #380]	@ (8010738 <tcp_process+0x57c>)
 80105bc:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105be:	885b      	ldrh	r3, [r3, #2]
 80105c0:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80105c2:	4a5d      	ldr	r2, [pc, #372]	@ (8010738 <tcp_process+0x57c>)
 80105c4:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80105c6:	8812      	ldrh	r2, [r2, #0]
 80105c8:	b292      	uxth	r2, r2
 80105ca:	9202      	str	r2, [sp, #8]
 80105cc:	9301      	str	r3, [sp, #4]
 80105ce:	4b5b      	ldr	r3, [pc, #364]	@ (801073c <tcp_process+0x580>)
 80105d0:	9300      	str	r3, [sp, #0]
 80105d2:	4b5b      	ldr	r3, [pc, #364]	@ (8010740 <tcp_process+0x584>)
 80105d4:	4602      	mov	r2, r0
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f003 fe2a 	bl	8014230 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80105e2:	2b05      	cmp	r3, #5
 80105e4:	f200 829f 	bhi.w	8010b26 <tcp_process+0x96a>
          pcb->rtime = 0;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f003 fbae 	bl	8013d50 <tcp_rexmit_rto>
      break;
 80105f4:	e297      	b.n	8010b26 <tcp_process+0x96a>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80105f6:	4b4c      	ldr	r3, [pc, #304]	@ (8010728 <tcp_process+0x56c>)
 80105f8:	781b      	ldrb	r3, [r3, #0]
 80105fa:	f003 0310 	and.w	r3, r3, #16
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f000 80e6 	beq.w	80107d0 <tcp_process+0x614>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010604:	4b49      	ldr	r3, [pc, #292]	@ (801072c <tcp_process+0x570>)
 8010606:	681a      	ldr	r2, [r3, #0]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	3b01      	subs	r3, #1
 8010610:	2b00      	cmp	r3, #0
 8010612:	f2c0 80c3 	blt.w	801079c <tcp_process+0x5e0>
 8010616:	4b45      	ldr	r3, [pc, #276]	@ (801072c <tcp_process+0x570>)
 8010618:	681a      	ldr	r2, [r3, #0]
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801061e:	1ad3      	subs	r3, r2, r3
 8010620:	2b00      	cmp	r3, #0
 8010622:	f300 80bb 	bgt.w	801079c <tcp_process+0x5e0>
          pcb->state = ESTABLISHED;
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	2204      	movs	r2, #4
 801062a:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 801062c:	4b45      	ldr	r3, [pc, #276]	@ (8010744 <tcp_process+0x588>)
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	881b      	ldrh	r3, [r3, #0]
 8010632:	b29b      	uxth	r3, r3
 8010634:	4619      	mov	r1, r3
 8010636:	4b43      	ldr	r3, [pc, #268]	@ (8010744 <tcp_process+0x588>)
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	885b      	ldrh	r3, [r3, #2]
 801063c:	b29b      	uxth	r3, r3
 801063e:	461a      	mov	r2, r3
 8010640:	4841      	ldr	r0, [pc, #260]	@ (8010748 <tcp_process+0x58c>)
 8010642:	f00b f871 	bl	801b728 <iprintf>
 8010646:	2000      	movs	r0, #0
 8010648:	f00a ff98 	bl	801b57c <fflush>
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010650:	2b00      	cmp	r3, #0
 8010652:	d102      	bne.n	801065a <tcp_process+0x49e>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010654:	23fa      	movs	r3, #250	@ 0xfa
 8010656:	76bb      	strb	r3, [r7, #26]
 8010658:	e020      	b.n	801069c <tcp_process+0x4e0>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801065e:	699b      	ldr	r3, [r3, #24]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d109      	bne.n	8010678 <tcp_process+0x4bc>
 8010664:	4b2b      	ldr	r3, [pc, #172]	@ (8010714 <tcp_process+0x558>)
 8010666:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 801066a:	4938      	ldr	r1, [pc, #224]	@ (801074c <tcp_process+0x590>)
 801066c:	482b      	ldr	r0, [pc, #172]	@ (801071c <tcp_process+0x560>)
 801066e:	f00b f85b 	bl	801b728 <iprintf>
 8010672:	2000      	movs	r0, #0
 8010674:	f00a ff82 	bl	801b57c <fflush>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801067c:	699b      	ldr	r3, [r3, #24]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d00a      	beq.n	8010698 <tcp_process+0x4dc>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010686:	699b      	ldr	r3, [r3, #24]
 8010688:	687a      	ldr	r2, [r7, #4]
 801068a:	6910      	ldr	r0, [r2, #16]
 801068c:	2200      	movs	r2, #0
 801068e:	6879      	ldr	r1, [r7, #4]
 8010690:	4798      	blx	r3
 8010692:	4603      	mov	r3, r0
 8010694:	76bb      	strb	r3, [r7, #26]
 8010696:	e001      	b.n	801069c <tcp_process+0x4e0>
 8010698:	23f0      	movs	r3, #240	@ 0xf0
 801069a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801069c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00a      	beq.n	80106ba <tcp_process+0x4fe>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80106a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80106a8:	f113 0f0d 	cmn.w	r3, #13
 80106ac:	d002      	beq.n	80106b4 <tcp_process+0x4f8>
              tcp_abort(pcb);
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	f7fc ffe0 	bl	800d674 <tcp_abort>
            }
            return ERR_ABRT;
 80106b4:	f06f 030c 	mvn.w	r3, #12
 80106b8:	e243      	b.n	8010b42 <tcp_process+0x986>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80106ba:	6878      	ldr	r0, [r7, #4]
 80106bc:	f000 fbae 	bl	8010e1c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80106c0:	4b23      	ldr	r3, [pc, #140]	@ (8010750 <tcp_process+0x594>)
 80106c2:	881b      	ldrh	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d005      	beq.n	80106d4 <tcp_process+0x518>
            recv_acked--;
 80106c8:	4b21      	ldr	r3, [pc, #132]	@ (8010750 <tcp_process+0x594>)
 80106ca:	881b      	ldrh	r3, [r3, #0]
 80106cc:	3b01      	subs	r3, #1
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	4b1f      	ldr	r3, [pc, #124]	@ (8010750 <tcp_process+0x594>)
 80106d2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106d8:	009a      	lsls	r2, r3, #2
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106de:	005b      	lsls	r3, r3, #1
 80106e0:	f241 111c 	movw	r1, #4380	@ 0x111c
 80106e4:	428b      	cmp	r3, r1
 80106e6:	bf38      	it	cc
 80106e8:	460b      	movcc	r3, r1
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d204      	bcs.n	80106f8 <tcp_process+0x53c>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106f2:	009b      	lsls	r3, r3, #2
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	e02f      	b.n	8010758 <tcp_process+0x59c>
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80106fc:	005b      	lsls	r3, r3, #1
 80106fe:	f241 121c 	movw	r2, #4380	@ 0x111c
 8010702:	4293      	cmp	r3, r2
 8010704:	d926      	bls.n	8010754 <tcp_process+0x598>
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801070a:	005b      	lsls	r3, r3, #1
 801070c:	b29b      	uxth	r3, r3
 801070e:	e023      	b.n	8010758 <tcp_process+0x59c>
 8010710:	0801fa00 	.word	0x0801fa00
 8010714:	0801f48c 	.word	0x0801f48c
 8010718:	0801fa2c 	.word	0x0801fa2c
 801071c:	0801f4d8 	.word	0x0801f4d8
 8010720:	0801fa44 	.word	0x0801fa44
 8010724:	0801fa6c 	.word	0x0801fa6c
 8010728:	20011dc4 	.word	0x20011dc4
 801072c:	20011dbc 	.word	0x20011dbc
 8010730:	20011dc2 	.word	0x20011dc2
 8010734:	20011db8 	.word	0x20011db8
 8010738:	20011da8 	.word	0x20011da8
 801073c:	2000c0f8 	.word	0x2000c0f8
 8010740:	2000c0fc 	.word	0x2000c0fc
 8010744:	20011d94 	.word	0x20011d94
 8010748:	0801fa80 	.word	0x0801fa80
 801074c:	0801faa8 	.word	0x0801faa8
 8010750:	20011dc0 	.word	0x20011dc0
 8010754:	f241 131c 	movw	r3, #4380	@ 0x111c
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010764:	4619      	mov	r1, r3
 8010766:	687b      	ldr	r3, [r7, #4]
 8010768:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801076c:	461a      	mov	r2, r3
 801076e:	488f      	ldr	r0, [pc, #572]	@ (80109ac <tcp_process+0x7f0>)
 8010770:	f00a ffda 	bl	801b728 <iprintf>
 8010774:	2000      	movs	r0, #0
 8010776:	f00a ff01 	bl	801b57c <fflush>
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801077a:	4b8d      	ldr	r3, [pc, #564]	@ (80109b0 <tcp_process+0x7f4>)
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	f003 0320 	and.w	r3, r3, #32
 8010782:	2b00      	cmp	r3, #0
 8010784:	d037      	beq.n	80107f6 <tcp_process+0x63a>
            tcp_ack_now(pcb);
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	8b5b      	ldrh	r3, [r3, #26]
 801078a:	f043 0302 	orr.w	r3, r3, #2
 801078e:	b29a      	uxth	r2, r3
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	2207      	movs	r2, #7
 8010798:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801079a:	e02c      	b.n	80107f6 <tcp_process+0x63a>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801079c:	4b85      	ldr	r3, [pc, #532]	@ (80109b4 <tcp_process+0x7f8>)
 801079e:	6819      	ldr	r1, [r3, #0]
 80107a0:	4b85      	ldr	r3, [pc, #532]	@ (80109b8 <tcp_process+0x7fc>)
 80107a2:	881b      	ldrh	r3, [r3, #0]
 80107a4:	461a      	mov	r2, r3
 80107a6:	4b85      	ldr	r3, [pc, #532]	@ (80109bc <tcp_process+0x800>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107ac:	4b84      	ldr	r3, [pc, #528]	@ (80109c0 <tcp_process+0x804>)
 80107ae:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107b0:	885b      	ldrh	r3, [r3, #2]
 80107b2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80107b4:	4a82      	ldr	r2, [pc, #520]	@ (80109c0 <tcp_process+0x804>)
 80107b6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80107b8:	8812      	ldrh	r2, [r2, #0]
 80107ba:	b292      	uxth	r2, r2
 80107bc:	9202      	str	r2, [sp, #8]
 80107be:	9301      	str	r3, [sp, #4]
 80107c0:	4b80      	ldr	r3, [pc, #512]	@ (80109c4 <tcp_process+0x808>)
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	4b80      	ldr	r3, [pc, #512]	@ (80109c8 <tcp_process+0x80c>)
 80107c6:	4602      	mov	r2, r0
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f003 fd31 	bl	8014230 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80107ce:	e1ac      	b.n	8010b2a <tcp_process+0x96e>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80107d0:	4b7e      	ldr	r3, [pc, #504]	@ (80109cc <tcp_process+0x810>)
 80107d2:	781b      	ldrb	r3, [r3, #0]
 80107d4:	f003 0302 	and.w	r3, r3, #2
 80107d8:	2b00      	cmp	r3, #0
 80107da:	f000 81a6 	beq.w	8010b2a <tcp_process+0x96e>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107e2:	1e5a      	subs	r2, r3, #1
 80107e4:	4b75      	ldr	r3, [pc, #468]	@ (80109bc <tcp_process+0x800>)
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	429a      	cmp	r2, r3
 80107ea:	f040 819e 	bne.w	8010b2a <tcp_process+0x96e>
        tcp_rexmit(pcb);
 80107ee:	6878      	ldr	r0, [r7, #4]
 80107f0:	f003 fad2 	bl	8013d98 <tcp_rexmit>
      break;
 80107f4:	e199      	b.n	8010b2a <tcp_process+0x96e>
 80107f6:	e198      	b.n	8010b2a <tcp_process+0x96e>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f000 fb0f 	bl	8010e1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80107fe:	4b6c      	ldr	r3, [pc, #432]	@ (80109b0 <tcp_process+0x7f4>)
 8010800:	781b      	ldrb	r3, [r3, #0]
 8010802:	f003 0320 	and.w	r3, r3, #32
 8010806:	2b00      	cmp	r3, #0
 8010808:	f000 8191 	beq.w	8010b2e <tcp_process+0x972>
        tcp_ack_now(pcb);
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	8b5b      	ldrh	r3, [r3, #26]
 8010810:	f043 0302 	orr.w	r3, r3, #2
 8010814:	b29a      	uxth	r2, r3
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	2207      	movs	r2, #7
 801081e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010820:	e185      	b.n	8010b2e <tcp_process+0x972>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f000 fafa 	bl	8010e1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010828:	4b61      	ldr	r3, [pc, #388]	@ (80109b0 <tcp_process+0x7f4>)
 801082a:	781b      	ldrb	r3, [r3, #0]
 801082c:	f003 0320 	and.w	r3, r3, #32
 8010830:	2b00      	cmp	r3, #0
 8010832:	d066      	beq.n	8010902 <tcp_process+0x746>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010834:	4b65      	ldr	r3, [pc, #404]	@ (80109cc <tcp_process+0x810>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	f003 0310 	and.w	r3, r3, #16
 801083c:	2b00      	cmp	r3, #0
 801083e:	d055      	beq.n	80108ec <tcp_process+0x730>
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010844:	4b5b      	ldr	r3, [pc, #364]	@ (80109b4 <tcp_process+0x7f8>)
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	429a      	cmp	r2, r3
 801084a:	d14f      	bne.n	80108ec <tcp_process+0x730>
            pcb->unsent == NULL) {
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010850:	2b00      	cmp	r3, #0
 8010852:	d14b      	bne.n	80108ec <tcp_process+0x730>
          LWIP_DEBUGF(TCP_DEBUG,
 8010854:	4b5e      	ldr	r3, [pc, #376]	@ (80109d0 <tcp_process+0x814>)
 8010856:	691b      	ldr	r3, [r3, #16]
 8010858:	881b      	ldrh	r3, [r3, #0]
 801085a:	b29b      	uxth	r3, r3
 801085c:	4619      	mov	r1, r3
 801085e:	4b5c      	ldr	r3, [pc, #368]	@ (80109d0 <tcp_process+0x814>)
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	885b      	ldrh	r3, [r3, #2]
 8010864:	b29b      	uxth	r3, r3
 8010866:	461a      	mov	r2, r3
 8010868:	485a      	ldr	r0, [pc, #360]	@ (80109d4 <tcp_process+0x818>)
 801086a:	f00a ff5d 	bl	801b728 <iprintf>
 801086e:	2000      	movs	r0, #0
 8010870:	f00a fe84 	bl	801b57c <fflush>
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	8b5b      	ldrh	r3, [r3, #26]
 8010878:	f043 0302 	orr.w	r3, r3, #2
 801087c:	b29a      	uxth	r2, r3
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f7fe f9c8 	bl	800ec18 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010888:	4b53      	ldr	r3, [pc, #332]	@ (80109d8 <tcp_process+0x81c>)
 801088a:	681b      	ldr	r3, [r3, #0]
 801088c:	687a      	ldr	r2, [r7, #4]
 801088e:	429a      	cmp	r2, r3
 8010890:	d105      	bne.n	801089e <tcp_process+0x6e2>
 8010892:	4b51      	ldr	r3, [pc, #324]	@ (80109d8 <tcp_process+0x81c>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	4a4f      	ldr	r2, [pc, #316]	@ (80109d8 <tcp_process+0x81c>)
 801089a:	6013      	str	r3, [r2, #0]
 801089c:	e013      	b.n	80108c6 <tcp_process+0x70a>
 801089e:	4b4e      	ldr	r3, [pc, #312]	@ (80109d8 <tcp_process+0x81c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	617b      	str	r3, [r7, #20]
 80108a4:	e00c      	b.n	80108c0 <tcp_process+0x704>
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	68db      	ldr	r3, [r3, #12]
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	d104      	bne.n	80108ba <tcp_process+0x6fe>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	68da      	ldr	r2, [r3, #12]
 80108b4:	697b      	ldr	r3, [r7, #20]
 80108b6:	60da      	str	r2, [r3, #12]
 80108b8:	e005      	b.n	80108c6 <tcp_process+0x70a>
 80108ba:	697b      	ldr	r3, [r7, #20]
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	617b      	str	r3, [r7, #20]
 80108c0:	697b      	ldr	r3, [r7, #20]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d1ef      	bne.n	80108a6 <tcp_process+0x6ea>
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	60da      	str	r2, [r3, #12]
 80108cc:	4b43      	ldr	r3, [pc, #268]	@ (80109dc <tcp_process+0x820>)
 80108ce:	2201      	movs	r2, #1
 80108d0:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	220a      	movs	r2, #10
 80108d6:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80108d8:	4b41      	ldr	r3, [pc, #260]	@ (80109e0 <tcp_process+0x824>)
 80108da:	681a      	ldr	r2, [r3, #0]
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	60da      	str	r2, [r3, #12]
 80108e0:	4a3f      	ldr	r2, [pc, #252]	@ (80109e0 <tcp_process+0x824>)
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	6013      	str	r3, [r2, #0]
 80108e6:	f003 ff41 	bl	801476c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80108ea:	e122      	b.n	8010b32 <tcp_process+0x976>
          tcp_ack_now(pcb);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	8b5b      	ldrh	r3, [r3, #26]
 80108f0:	f043 0302 	orr.w	r3, r3, #2
 80108f4:	b29a      	uxth	r2, r3
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2208      	movs	r2, #8
 80108fe:	751a      	strb	r2, [r3, #20]
      break;
 8010900:	e117      	b.n	8010b32 <tcp_process+0x976>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010902:	4b32      	ldr	r3, [pc, #200]	@ (80109cc <tcp_process+0x810>)
 8010904:	781b      	ldrb	r3, [r3, #0]
 8010906:	f003 0310 	and.w	r3, r3, #16
 801090a:	2b00      	cmp	r3, #0
 801090c:	f000 8111 	beq.w	8010b32 <tcp_process+0x976>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010914:	4b27      	ldr	r3, [pc, #156]	@ (80109b4 <tcp_process+0x7f8>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	429a      	cmp	r2, r3
 801091a:	f040 810a 	bne.w	8010b32 <tcp_process+0x976>
                 pcb->unsent == NULL) {
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010922:	2b00      	cmp	r3, #0
 8010924:	f040 8105 	bne.w	8010b32 <tcp_process+0x976>
        pcb->state = FIN_WAIT_2;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	2206      	movs	r2, #6
 801092c:	751a      	strb	r2, [r3, #20]
      break;
 801092e:	e100      	b.n	8010b32 <tcp_process+0x976>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fa73 	bl	8010e1c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010936:	4b1e      	ldr	r3, [pc, #120]	@ (80109b0 <tcp_process+0x7f4>)
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	f003 0320 	and.w	r3, r3, #32
 801093e:	2b00      	cmp	r3, #0
 8010940:	f000 80f9 	beq.w	8010b36 <tcp_process+0x97a>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 8010944:	4b22      	ldr	r3, [pc, #136]	@ (80109d0 <tcp_process+0x814>)
 8010946:	691b      	ldr	r3, [r3, #16]
 8010948:	881b      	ldrh	r3, [r3, #0]
 801094a:	b29b      	uxth	r3, r3
 801094c:	4619      	mov	r1, r3
 801094e:	4b20      	ldr	r3, [pc, #128]	@ (80109d0 <tcp_process+0x814>)
 8010950:	691b      	ldr	r3, [r3, #16]
 8010952:	885b      	ldrh	r3, [r3, #2]
 8010954:	b29b      	uxth	r3, r3
 8010956:	461a      	mov	r2, r3
 8010958:	4822      	ldr	r0, [pc, #136]	@ (80109e4 <tcp_process+0x828>)
 801095a:	f00a fee5 	bl	801b728 <iprintf>
 801095e:	2000      	movs	r0, #0
 8010960:	f00a fe0c 	bl	801b57c <fflush>
        tcp_ack_now(pcb);
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	8b5b      	ldrh	r3, [r3, #26]
 8010968:	f043 0302 	orr.w	r3, r3, #2
 801096c:	b29a      	uxth	r2, r3
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010972:	6878      	ldr	r0, [r7, #4]
 8010974:	f7fe f950 	bl	800ec18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010978:	4b17      	ldr	r3, [pc, #92]	@ (80109d8 <tcp_process+0x81c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	687a      	ldr	r2, [r7, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d105      	bne.n	801098e <tcp_process+0x7d2>
 8010982:	4b15      	ldr	r3, [pc, #84]	@ (80109d8 <tcp_process+0x81c>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	4a13      	ldr	r2, [pc, #76]	@ (80109d8 <tcp_process+0x81c>)
 801098a:	6013      	str	r3, [r2, #0]
 801098c:	e032      	b.n	80109f4 <tcp_process+0x838>
 801098e:	4b12      	ldr	r3, [pc, #72]	@ (80109d8 <tcp_process+0x81c>)
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	613b      	str	r3, [r7, #16]
 8010994:	e02b      	b.n	80109ee <tcp_process+0x832>
 8010996:	693b      	ldr	r3, [r7, #16]
 8010998:	68db      	ldr	r3, [r3, #12]
 801099a:	687a      	ldr	r2, [r7, #4]
 801099c:	429a      	cmp	r2, r3
 801099e:	d123      	bne.n	80109e8 <tcp_process+0x82c>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	68da      	ldr	r2, [r3, #12]
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	60da      	str	r2, [r3, #12]
 80109a8:	e024      	b.n	80109f4 <tcp_process+0x838>
 80109aa:	bf00      	nop
 80109ac:	0801fac8 	.word	0x0801fac8
 80109b0:	20011dc5 	.word	0x20011dc5
 80109b4:	20011dbc 	.word	0x20011dbc
 80109b8:	20011dc2 	.word	0x20011dc2
 80109bc:	20011db8 	.word	0x20011db8
 80109c0:	20011da8 	.word	0x20011da8
 80109c4:	2000c0f8 	.word	0x2000c0f8
 80109c8:	2000c0fc 	.word	0x2000c0fc
 80109cc:	20011dc4 	.word	0x20011dc4
 80109d0:	20011d94 	.word	0x20011d94
 80109d4:	0801faf8 	.word	0x0801faf8
 80109d8:	20011d88 	.word	0x20011d88
 80109dc:	20011d90 	.word	0x20011d90
 80109e0:	20011d8c 	.word	0x20011d8c
 80109e4:	0801fb28 	.word	0x0801fb28
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	68db      	ldr	r3, [r3, #12]
 80109ec:	613b      	str	r3, [r7, #16]
 80109ee:	693b      	ldr	r3, [r7, #16]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d1d0      	bne.n	8010996 <tcp_process+0x7da>
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2200      	movs	r2, #0
 80109f8:	60da      	str	r2, [r3, #12]
 80109fa:	4b54      	ldr	r3, [pc, #336]	@ (8010b4c <tcp_process+0x990>)
 80109fc:	2201      	movs	r2, #1
 80109fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	220a      	movs	r2, #10
 8010a04:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010a06:	4b52      	ldr	r3, [pc, #328]	@ (8010b50 <tcp_process+0x994>)
 8010a08:	681a      	ldr	r2, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	60da      	str	r2, [r3, #12]
 8010a0e:	4a50      	ldr	r2, [pc, #320]	@ (8010b50 <tcp_process+0x994>)
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6013      	str	r3, [r2, #0]
 8010a14:	f003 feaa 	bl	801476c <tcp_timer_needed>
      }
      break;
 8010a18:	e08d      	b.n	8010b36 <tcp_process+0x97a>
    case CLOSING:
      tcp_receive(pcb);
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f000 f9fe 	bl	8010e1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010a20:	4b4c      	ldr	r3, [pc, #304]	@ (8010b54 <tcp_process+0x998>)
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	f003 0310 	and.w	r3, r3, #16
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	f000 8086 	beq.w	8010b3a <tcp_process+0x97e>
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010a32:	4b49      	ldr	r3, [pc, #292]	@ (8010b58 <tcp_process+0x99c>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	429a      	cmp	r2, r3
 8010a38:	d17f      	bne.n	8010b3a <tcp_process+0x97e>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d17b      	bne.n	8010b3a <tcp_process+0x97e>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 8010a42:	4b46      	ldr	r3, [pc, #280]	@ (8010b5c <tcp_process+0x9a0>)
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	881b      	ldrh	r3, [r3, #0]
 8010a48:	b29b      	uxth	r3, r3
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	4b43      	ldr	r3, [pc, #268]	@ (8010b5c <tcp_process+0x9a0>)
 8010a4e:	691b      	ldr	r3, [r3, #16]
 8010a50:	885b      	ldrh	r3, [r3, #2]
 8010a52:	b29b      	uxth	r3, r3
 8010a54:	461a      	mov	r2, r3
 8010a56:	4842      	ldr	r0, [pc, #264]	@ (8010b60 <tcp_process+0x9a4>)
 8010a58:	f00a fe66 	bl	801b728 <iprintf>
 8010a5c:	2000      	movs	r0, #0
 8010a5e:	f00a fd8d 	bl	801b57c <fflush>
        tcp_pcb_purge(pcb);
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7fe f8d8 	bl	800ec18 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010a68:	4b3e      	ldr	r3, [pc, #248]	@ (8010b64 <tcp_process+0x9a8>)
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	687a      	ldr	r2, [r7, #4]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	d105      	bne.n	8010a7e <tcp_process+0x8c2>
 8010a72:	4b3c      	ldr	r3, [pc, #240]	@ (8010b64 <tcp_process+0x9a8>)
 8010a74:	681b      	ldr	r3, [r3, #0]
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	4a3a      	ldr	r2, [pc, #232]	@ (8010b64 <tcp_process+0x9a8>)
 8010a7a:	6013      	str	r3, [r2, #0]
 8010a7c:	e013      	b.n	8010aa6 <tcp_process+0x8ea>
 8010a7e:	4b39      	ldr	r3, [pc, #228]	@ (8010b64 <tcp_process+0x9a8>)
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	60fb      	str	r3, [r7, #12]
 8010a84:	e00c      	b.n	8010aa0 <tcp_process+0x8e4>
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	68db      	ldr	r3, [r3, #12]
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	429a      	cmp	r2, r3
 8010a8e:	d104      	bne.n	8010a9a <tcp_process+0x8de>
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	68da      	ldr	r2, [r3, #12]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	60da      	str	r2, [r3, #12]
 8010a98:	e005      	b.n	8010aa6 <tcp_process+0x8ea>
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	68db      	ldr	r3, [r3, #12]
 8010a9e:	60fb      	str	r3, [r7, #12]
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d1ef      	bne.n	8010a86 <tcp_process+0x8ca>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	60da      	str	r2, [r3, #12]
 8010aac:	4b27      	ldr	r3, [pc, #156]	@ (8010b4c <tcp_process+0x990>)
 8010aae:	2201      	movs	r2, #1
 8010ab0:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	220a      	movs	r2, #10
 8010ab6:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010ab8:	4b25      	ldr	r3, [pc, #148]	@ (8010b50 <tcp_process+0x994>)
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	60da      	str	r2, [r3, #12]
 8010ac0:	4a23      	ldr	r2, [pc, #140]	@ (8010b50 <tcp_process+0x994>)
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	6013      	str	r3, [r2, #0]
 8010ac6:	f003 fe51 	bl	801476c <tcp_timer_needed>
      }
      break;
 8010aca:	e036      	b.n	8010b3a <tcp_process+0x97e>
    case LAST_ACK:
      tcp_receive(pcb);
 8010acc:	6878      	ldr	r0, [r7, #4]
 8010ace:	f000 f9a5 	bl	8010e1c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010ad2:	4b20      	ldr	r3, [pc, #128]	@ (8010b54 <tcp_process+0x998>)
 8010ad4:	781b      	ldrb	r3, [r3, #0]
 8010ad6:	f003 0310 	and.w	r3, r3, #16
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d02f      	beq.n	8010b3e <tcp_process+0x982>
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8010b58 <tcp_process+0x99c>)
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d129      	bne.n	8010b3e <tcp_process+0x982>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d125      	bne.n	8010b3e <tcp_process+0x982>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
 8010af2:	4b1a      	ldr	r3, [pc, #104]	@ (8010b5c <tcp_process+0x9a0>)
 8010af4:	691b      	ldr	r3, [r3, #16]
 8010af6:	881b      	ldrh	r3, [r3, #0]
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	4619      	mov	r1, r3
 8010afc:	4b17      	ldr	r3, [pc, #92]	@ (8010b5c <tcp_process+0x9a0>)
 8010afe:	691b      	ldr	r3, [r3, #16]
 8010b00:	885b      	ldrh	r3, [r3, #2]
 8010b02:	b29b      	uxth	r3, r3
 8010b04:	461a      	mov	r2, r3
 8010b06:	4818      	ldr	r0, [pc, #96]	@ (8010b68 <tcp_process+0x9ac>)
 8010b08:	f00a fe0e 	bl	801b728 <iprintf>
 8010b0c:	2000      	movs	r0, #0
 8010b0e:	f00a fd35 	bl	801b57c <fflush>
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010b12:	4b16      	ldr	r3, [pc, #88]	@ (8010b6c <tcp_process+0x9b0>)
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	f043 0310 	orr.w	r3, r3, #16
 8010b1a:	b2da      	uxtb	r2, r3
 8010b1c:	4b13      	ldr	r3, [pc, #76]	@ (8010b6c <tcp_process+0x9b0>)
 8010b1e:	701a      	strb	r2, [r3, #0]
      }
      break;
 8010b20:	e00d      	b.n	8010b3e <tcp_process+0x982>
    default:
      break;
 8010b22:	bf00      	nop
 8010b24:	e00c      	b.n	8010b40 <tcp_process+0x984>
      break;
 8010b26:	bf00      	nop
 8010b28:	e00a      	b.n	8010b40 <tcp_process+0x984>
      break;
 8010b2a:	bf00      	nop
 8010b2c:	e008      	b.n	8010b40 <tcp_process+0x984>
      break;
 8010b2e:	bf00      	nop
 8010b30:	e006      	b.n	8010b40 <tcp_process+0x984>
      break;
 8010b32:	bf00      	nop
 8010b34:	e004      	b.n	8010b40 <tcp_process+0x984>
      break;
 8010b36:	bf00      	nop
 8010b38:	e002      	b.n	8010b40 <tcp_process+0x984>
      break;
 8010b3a:	bf00      	nop
 8010b3c:	e000      	b.n	8010b40 <tcp_process+0x984>
      break;
 8010b3e:	bf00      	nop
  }
  return ERR_OK;
 8010b40:	2300      	movs	r3, #0
}
 8010b42:	4618      	mov	r0, r3
 8010b44:	3720      	adds	r7, #32
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bdb0      	pop	{r4, r5, r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	20011d90 	.word	0x20011d90
 8010b50:	20011d8c 	.word	0x20011d8c
 8010b54:	20011dc4 	.word	0x20011dc4
 8010b58:	20011dbc 	.word	0x20011dbc
 8010b5c:	20011d94 	.word	0x20011d94
 8010b60:	0801fb58 	.word	0x0801fb58
 8010b64:	20011d88 	.word	0x20011d88
 8010b68:	0801fb84 	.word	0x0801fb84
 8010b6c:	20011dc5 	.word	0x20011dc5

08010b70 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010b70:	b590      	push	{r4, r7, lr}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d109      	bne.n	8010b94 <tcp_oos_insert_segment+0x24>
 8010b80:	4b3d      	ldr	r3, [pc, #244]	@ (8010c78 <tcp_oos_insert_segment+0x108>)
 8010b82:	f240 421f 	movw	r2, #1055	@ 0x41f
 8010b86:	493d      	ldr	r1, [pc, #244]	@ (8010c7c <tcp_oos_insert_segment+0x10c>)
 8010b88:	483d      	ldr	r0, [pc, #244]	@ (8010c80 <tcp_oos_insert_segment+0x110>)
 8010b8a:	f00a fdcd 	bl	801b728 <iprintf>
 8010b8e:	2000      	movs	r0, #0
 8010b90:	f00a fcf4 	bl	801b57c <fflush>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	691b      	ldr	r3, [r3, #16]
 8010b98:	899b      	ldrh	r3, [r3, #12]
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fa f869 	bl	800ac74 <lwip_htons>
 8010ba2:	4603      	mov	r3, r0
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	f003 0301 	and.w	r3, r3, #1
 8010baa:	2b00      	cmp	r3, #0
 8010bac:	d028      	beq.n	8010c00 <tcp_oos_insert_segment+0x90>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8010bae:	6838      	ldr	r0, [r7, #0]
 8010bb0:	f7fd fcfc 	bl	800e5ac <tcp_segs_free>
    next = NULL;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	603b      	str	r3, [r7, #0]
 8010bb8:	e056      	b.n	8010c68 <tcp_oos_insert_segment+0xf8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	691b      	ldr	r3, [r3, #16]
 8010bbe:	899b      	ldrh	r3, [r3, #12]
 8010bc0:	b29b      	uxth	r3, r3
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fa f856 	bl	800ac74 <lwip_htons>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	f003 0301 	and.w	r3, r3, #1
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00d      	beq.n	8010bf0 <tcp_oos_insert_segment+0x80>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	691b      	ldr	r3, [r3, #16]
 8010bd8:	899b      	ldrh	r3, [r3, #12]
 8010bda:	b29c      	uxth	r4, r3
 8010bdc:	2001      	movs	r0, #1
 8010bde:	f7fa f849 	bl	800ac74 <lwip_htons>
 8010be2:	4603      	mov	r3, r0
 8010be4:	461a      	mov	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	691b      	ldr	r3, [r3, #16]
 8010bea:	4322      	orrs	r2, r4
 8010bec:	b292      	uxth	r2, r2
 8010bee:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010bf4:	683b      	ldr	r3, [r7, #0]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010bfa:	68f8      	ldr	r0, [r7, #12]
 8010bfc:	f7fd fceb 	bl	800e5d6 <tcp_seg_free>
    while (next &&
 8010c00:	683b      	ldr	r3, [r7, #0]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d00e      	beq.n	8010c24 <tcp_oos_insert_segment+0xb4>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	891b      	ldrh	r3, [r3, #8]
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8010c84 <tcp_oos_insert_segment+0x114>)
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	441a      	add	r2, r3
 8010c12:	683b      	ldr	r3, [r7, #0]
 8010c14:	691b      	ldr	r3, [r3, #16]
 8010c16:	685b      	ldr	r3, [r3, #4]
 8010c18:	6839      	ldr	r1, [r7, #0]
 8010c1a:	8909      	ldrh	r1, [r1, #8]
 8010c1c:	440b      	add	r3, r1
 8010c1e:	1ad3      	subs	r3, r2, r3
    while (next &&
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	daca      	bge.n	8010bba <tcp_oos_insert_segment+0x4a>
    }
    if (next &&
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d01e      	beq.n	8010c68 <tcp_oos_insert_segment+0xf8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	891b      	ldrh	r3, [r3, #8]
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4b14      	ldr	r3, [pc, #80]	@ (8010c84 <tcp_oos_insert_segment+0x114>)
 8010c32:	681b      	ldr	r3, [r3, #0]
 8010c34:	441a      	add	r2, r3
 8010c36:	683b      	ldr	r3, [r7, #0]
 8010c38:	691b      	ldr	r3, [r3, #16]
 8010c3a:	685b      	ldr	r3, [r3, #4]
 8010c3c:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	dd12      	ble.n	8010c68 <tcp_oos_insert_segment+0xf8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	691b      	ldr	r3, [r3, #16]
 8010c46:	685b      	ldr	r3, [r3, #4]
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8010c84 <tcp_oos_insert_segment+0x114>)
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	1ad3      	subs	r3, r2, r3
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	685a      	ldr	r2, [r3, #4]
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	891b      	ldrh	r3, [r3, #8]
 8010c60:	4619      	mov	r1, r3
 8010c62:	4610      	mov	r0, r2
 8010c64:	f7fb fc9e 	bl	800c5a4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	683a      	ldr	r2, [r7, #0]
 8010c6c:	601a      	str	r2, [r3, #0]
}
 8010c6e:	bf00      	nop
 8010c70:	3714      	adds	r7, #20
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd90      	pop	{r4, r7, pc}
 8010c76:	bf00      	nop
 8010c78:	0801f48c 	.word	0x0801f48c
 8010c7c:	0801fbb4 	.word	0x0801fbb4
 8010c80:	0801f4d8 	.word	0x0801f4d8
 8010c84:	20011db8 	.word	0x20011db8

08010c88 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010c88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c8a:	b087      	sub	sp, #28
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	60f8      	str	r0, [r7, #12]
 8010c90:	60b9      	str	r1, [r7, #8]
 8010c92:	607a      	str	r2, [r7, #4]
 8010c94:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010c96:	e084      	b.n	8010da2 <tcp_free_acked_segments+0x11a>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
                     TCP_TCPLEN(seg_list), ackno)) {
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
 8010c98:	68bb      	ldr	r3, [r7, #8]
 8010c9a:	691b      	ldr	r3, [r3, #16]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7f9 fffd 	bl	800ac9e <lwip_htonl>
 8010ca4:	4605      	mov	r5, r0
 8010ca6:	68bb      	ldr	r3, [r7, #8]
 8010ca8:	691b      	ldr	r3, [r3, #16]
 8010caa:	685b      	ldr	r3, [r3, #4]
 8010cac:	4618      	mov	r0, r3
 8010cae:	f7f9 fff6 	bl	800ac9e <lwip_htonl>
 8010cb2:	4604      	mov	r4, r0
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	891b      	ldrh	r3, [r3, #8]
 8010cb8:	461e      	mov	r6, r3
 8010cba:	68bb      	ldr	r3, [r7, #8]
 8010cbc:	691b      	ldr	r3, [r3, #16]
 8010cbe:	899b      	ldrh	r3, [r3, #12]
 8010cc0:	b29b      	uxth	r3, r3
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	f7f9 ffd6 	bl	800ac74 <lwip_htons>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	b2db      	uxtb	r3, r3
 8010ccc:	f003 0303 	and.w	r3, r3, #3
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d001      	beq.n	8010cd8 <tcp_free_acked_segments+0x50>
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	e000      	b.n	8010cda <tcp_free_acked_segments+0x52>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	4433      	add	r3, r6
 8010cdc:	18e2      	adds	r2, r4, r3
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	4629      	mov	r1, r5
 8010ce2:	4845      	ldr	r0, [pc, #276]	@ (8010df8 <tcp_free_acked_segments+0x170>)
 8010ce4:	f00a fd20 	bl	801b728 <iprintf>
 8010ce8:	2000      	movs	r0, #0
 8010cea:	f00a fc47 	bl	801b57c <fflush>
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010cee:	68bb      	ldr	r3, [r7, #8]
 8010cf0:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f7fb fecb 	bl	800ca98 <pbuf_clen>
 8010d02:	4603      	mov	r3, r0
 8010d04:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d0c:	4619      	mov	r1, r3
 8010d0e:	483b      	ldr	r0, [pc, #236]	@ (8010dfc <tcp_free_acked_segments+0x174>)
 8010d10:	f00a fd0a 	bl	801b728 <iprintf>
 8010d14:	2000      	movs	r0, #0
 8010d16:	f00a fc31 	bl	801b57c <fflush>
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d20:	8a7a      	ldrh	r2, [r7, #18]
 8010d22:	429a      	cmp	r2, r3
 8010d24:	d909      	bls.n	8010d3a <tcp_free_acked_segments+0xb2>
 8010d26:	4b36      	ldr	r3, [pc, #216]	@ (8010e00 <tcp_free_acked_segments+0x178>)
 8010d28:	f240 4257 	movw	r2, #1111	@ 0x457
 8010d2c:	4935      	ldr	r1, [pc, #212]	@ (8010e04 <tcp_free_acked_segments+0x17c>)
 8010d2e:	4836      	ldr	r0, [pc, #216]	@ (8010e08 <tcp_free_acked_segments+0x180>)
 8010d30:	f00a fcfa 	bl	801b728 <iprintf>
 8010d34:	2000      	movs	r0, #0
 8010d36:	f00a fc21 	bl	801b57c <fflush>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8010d40:	8a7b      	ldrh	r3, [r7, #18]
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	891a      	ldrh	r2, [r3, #8]
 8010d50:	4b2e      	ldr	r3, [pc, #184]	@ (8010e0c <tcp_free_acked_segments+0x184>)
 8010d52:	881b      	ldrh	r3, [r3, #0]
 8010d54:	4413      	add	r3, r2
 8010d56:	b29a      	uxth	r2, r3
 8010d58:	4b2c      	ldr	r3, [pc, #176]	@ (8010e0c <tcp_free_acked_segments+0x184>)
 8010d5a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8010d5c:	6978      	ldr	r0, [r7, #20]
 8010d5e:	f7fd fc3a 	bl	800e5d6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	4828      	ldr	r0, [pc, #160]	@ (8010e10 <tcp_free_acked_segments+0x188>)
 8010d6e:	f00a fcdb 	bl	801b728 <iprintf>
 8010d72:	2000      	movs	r0, #0
 8010d74:	f00a fc02 	bl	801b57c <fflush>
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d00f      	beq.n	8010da2 <tcp_free_acked_segments+0x11a>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d10c      	bne.n	8010da2 <tcp_free_acked_segments+0x11a>
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d109      	bne.n	8010da2 <tcp_free_acked_segments+0x11a>
 8010d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8010e00 <tcp_free_acked_segments+0x178>)
 8010d90:	f240 4261 	movw	r2, #1121	@ 0x461
 8010d94:	491f      	ldr	r1, [pc, #124]	@ (8010e14 <tcp_free_acked_segments+0x18c>)
 8010d96:	481c      	ldr	r0, [pc, #112]	@ (8010e08 <tcp_free_acked_segments+0x180>)
 8010d98:	f00a fcc6 	bl	801b728 <iprintf>
 8010d9c:	2000      	movs	r0, #0
 8010d9e:	f00a fbed 	bl	801b57c <fflush>
  while (seg_list != NULL &&
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	d021      	beq.n	8010dec <tcp_free_acked_segments+0x164>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	691b      	ldr	r3, [r3, #16]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f9 ff75 	bl	800ac9e <lwip_htonl>
 8010db4:	4604      	mov	r4, r0
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	891b      	ldrh	r3, [r3, #8]
 8010dba:	461d      	mov	r5, r3
 8010dbc:	68bb      	ldr	r3, [r7, #8]
 8010dbe:	691b      	ldr	r3, [r3, #16]
 8010dc0:	899b      	ldrh	r3, [r3, #12]
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7f9 ff55 	bl	800ac74 <lwip_htons>
 8010dca:	4603      	mov	r3, r0
 8010dcc:	b2db      	uxtb	r3, r3
 8010dce:	f003 0303 	and.w	r3, r3, #3
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d001      	beq.n	8010dda <tcp_free_acked_segments+0x152>
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	e000      	b.n	8010ddc <tcp_free_acked_segments+0x154>
 8010dda:	2300      	movs	r3, #0
 8010ddc:	442b      	add	r3, r5
 8010dde:	18e2      	adds	r2, r4, r3
 8010de0:	4b0d      	ldr	r3, [pc, #52]	@ (8010e18 <tcp_free_acked_segments+0x190>)
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	f77f af56 	ble.w	8010c98 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010dec:	68bb      	ldr	r3, [r7, #8]
}
 8010dee:	4618      	mov	r0, r3
 8010df0:	371c      	adds	r7, #28
 8010df2:	46bd      	mov	sp, r7
 8010df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010df6:	bf00      	nop
 8010df8:	0801fbdc 	.word	0x0801fbdc
 8010dfc:	0801fc08 	.word	0x0801fc08
 8010e00:	0801f48c 	.word	0x0801f48c
 8010e04:	0801fc28 	.word	0x0801fc28
 8010e08:	0801f4d8 	.word	0x0801f4d8
 8010e0c:	20011dc0 	.word	0x20011dc0
 8010e10:	0801fc50 	.word	0x0801fc50
 8010e14:	0801fc68 	.word	0x0801fc68
 8010e18:	20011dbc 	.word	0x20011dbc

08010e1c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e20:	b096      	sub	sp, #88	@ 0x58
 8010e22:	af02      	add	r7, sp, #8
 8010e24:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010e26:	2300      	movs	r3, #0
 8010e28:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d109      	bne.n	8010e44 <tcp_receive+0x28>
 8010e30:	4b77      	ldr	r3, [pc, #476]	@ (8011010 <tcp_receive+0x1f4>)
 8010e32:	f240 427b 	movw	r2, #1147	@ 0x47b
 8010e36:	4977      	ldr	r1, [pc, #476]	@ (8011014 <tcp_receive+0x1f8>)
 8010e38:	4877      	ldr	r0, [pc, #476]	@ (8011018 <tcp_receive+0x1fc>)
 8010e3a:	f00a fc75 	bl	801b728 <iprintf>
 8010e3e:	2000      	movs	r0, #0
 8010e40:	f00a fb9c 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	7d1b      	ldrb	r3, [r3, #20]
 8010e48:	2b03      	cmp	r3, #3
 8010e4a:	d809      	bhi.n	8010e60 <tcp_receive+0x44>
 8010e4c:	4b70      	ldr	r3, [pc, #448]	@ (8011010 <tcp_receive+0x1f4>)
 8010e4e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8010e52:	4972      	ldr	r1, [pc, #456]	@ (801101c <tcp_receive+0x200>)
 8010e54:	4870      	ldr	r0, [pc, #448]	@ (8011018 <tcp_receive+0x1fc>)
 8010e56:	f00a fc67 	bl	801b728 <iprintf>
 8010e5a:	2000      	movs	r0, #0
 8010e5c:	f00a fb8e 	bl	801b57c <fflush>

  if (flags & TCP_ACK) {
 8010e60:	4b6f      	ldr	r3, [pc, #444]	@ (8011020 <tcp_receive+0x204>)
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	f003 0310 	and.w	r3, r3, #16
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	f000 8323 	beq.w	80114b4 <tcp_receive+0x698>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010e74:	461a      	mov	r2, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010e7a:	4413      	add	r3, r2
 8010e7c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010e82:	4b68      	ldr	r3, [pc, #416]	@ (8011024 <tcp_receive+0x208>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	1ad3      	subs	r3, r2, r3
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	db1b      	blt.n	8010ec4 <tcp_receive+0xa8>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8010e90:	4b64      	ldr	r3, [pc, #400]	@ (8011024 <tcp_receive+0x208>)
 8010e92:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010e94:	429a      	cmp	r2, r3
 8010e96:	d106      	bne.n	8010ea6 <tcp_receive+0x8a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010e9c:	4b62      	ldr	r3, [pc, #392]	@ (8011028 <tcp_receive+0x20c>)
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	1ad3      	subs	r3, r2, r3
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	db0e      	blt.n	8010ec4 <tcp_receive+0xa8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8010eaa:	4b5f      	ldr	r3, [pc, #380]	@ (8011028 <tcp_receive+0x20c>)
 8010eac:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d130      	bne.n	8010f14 <tcp_receive+0xf8>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010eb2:	4b5e      	ldr	r3, [pc, #376]	@ (801102c <tcp_receive+0x210>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	89db      	ldrh	r3, [r3, #14]
 8010eb8:	b29a      	uxth	r2, r3
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ec0:	429a      	cmp	r2, r3
 8010ec2:	d927      	bls.n	8010f14 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010ec4:	4b59      	ldr	r3, [pc, #356]	@ (801102c <tcp_receive+0x210>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	89db      	ldrh	r3, [r3, #14]
 8010eca:	b29a      	uxth	r2, r3
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010ede:	429a      	cmp	r2, r3
 8010ee0:	d205      	bcs.n	8010eee <tcp_receive+0xd2>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8010eee:	4b4d      	ldr	r3, [pc, #308]	@ (8011024 <tcp_receive+0x208>)
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8010ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8011028 <tcp_receive+0x20c>)
 8010ef8:	681a      	ldr	r2, [r3, #0]
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	659a      	str	r2, [r3, #88]	@ 0x58
      LWIP_DEBUGF(TCP_WND_DEBUG, ("tcp_receive: window update %"TCPWNDSIZE_F"\n", pcb->snd_wnd));
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8010f04:	4619      	mov	r1, r3
 8010f06:	484a      	ldr	r0, [pc, #296]	@ (8011030 <tcp_receive+0x214>)
 8010f08:	f00a fc0e 	bl	801b728 <iprintf>
 8010f0c:	2000      	movs	r0, #0
 8010f0e:	f00a fb35 	bl	801b57c <fflush>
 8010f12:	e01c      	b.n	8010f4e <tcp_receive+0x132>
#if TCP_WND_DEBUG
    } else {
      if (pcb->snd_wnd != (tcpwnd_size_t)SND_WND_SCALE(pcb, tcphdr->wnd)) {
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010f1a:	4b44      	ldr	r3, [pc, #272]	@ (801102c <tcp_receive+0x210>)
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	89db      	ldrh	r3, [r3, #14]
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	429a      	cmp	r2, r3
 8010f24:	d013      	beq.n	8010f4e <tcp_receive+0x132>
        LWIP_DEBUGF(TCP_WND_DEBUG,
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8010f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8011028 <tcp_receive+0x20c>)
 8010f2c:	6818      	ldr	r0, [r3, #0]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 8010f32:	4b3c      	ldr	r3, [pc, #240]	@ (8011024 <tcp_receive+0x208>)
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	687a      	ldr	r2, [r7, #4]
 8010f38:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8010f3a:	9201      	str	r2, [sp, #4]
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	4623      	mov	r3, r4
 8010f40:	4602      	mov	r2, r0
 8010f42:	483c      	ldr	r0, [pc, #240]	@ (8011034 <tcp_receive+0x218>)
 8010f44:	f00a fbf0 	bl	801b728 <iprintf>
 8010f48:	2000      	movs	r0, #0
 8010f4a:	f00a fb17 	bl	801b57c <fflush>
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010f4e:	4b36      	ldr	r3, [pc, #216]	@ (8011028 <tcp_receive+0x20c>)
 8010f50:	681a      	ldr	r2, [r3, #0]
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f56:	1ad3      	subs	r3, r2, r3
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	dc6f      	bgt.n	801103c <tcp_receive+0x220>
      /* Clause 2 */
      if (tcplen == 0) {
 8010f5c:	4b36      	ldr	r3, [pc, #216]	@ (8011038 <tcp_receive+0x21c>)
 8010f5e:	881b      	ldrh	r3, [r3, #0]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d14b      	bne.n	8010ffc <tcp_receive+0x1e0>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8010f6e:	4413      	add	r3, r2
 8010f70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d142      	bne.n	8010ffc <tcp_receive+0x1e0>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	db3d      	blt.n	8010ffc <tcp_receive+0x1e0>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010f84:	4b28      	ldr	r3, [pc, #160]	@ (8011028 <tcp_receive+0x20c>)
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	429a      	cmp	r2, r3
 8010f8a:	d137      	bne.n	8010ffc <tcp_receive+0x1e0>
              found_dupack = 1;
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010f96:	2bff      	cmp	r3, #255	@ 0xff
 8010f98:	d007      	beq.n	8010faa <tcp_receive+0x18e>
                ++pcb->dupacks;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	b2da      	uxtb	r2, r3
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010fb0:	2b03      	cmp	r3, #3
 8010fb2:	d91b      	bls.n	8010fec <tcp_receive+0x1d0>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010fbe:	4413      	add	r3, r2
 8010fc0:	b29a      	uxth	r2, r3
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d30a      	bcc.n	8010fe2 <tcp_receive+0x1c6>
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010fd6:	4413      	add	r3, r2
 8010fd8:	b29a      	uxth	r2, r3
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8010fe0:	e004      	b.n	8010fec <tcp_receive+0x1d0>
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010fe8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8010ff2:	2b02      	cmp	r3, #2
 8010ff4:	d902      	bls.n	8010ffc <tcp_receive+0x1e0>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010ff6:	6878      	ldr	r0, [r7, #4]
 8010ff8:	f002 ff46 	bl	8013e88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010ffc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	f040 81c3 	bne.w	801138a <tcp_receive+0x56e>
        pcb->dupacks = 0;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2200      	movs	r2, #0
 8011008:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801100c:	e1bd      	b.n	801138a <tcp_receive+0x56e>
 801100e:	bf00      	nop
 8011010:	0801f48c 	.word	0x0801f48c
 8011014:	0801fc88 	.word	0x0801fc88
 8011018:	0801f4d8 	.word	0x0801f4d8
 801101c:	0801fca4 	.word	0x0801fca4
 8011020:	20011dc4 	.word	0x20011dc4
 8011024:	20011db8 	.word	0x20011db8
 8011028:	20011dbc 	.word	0x20011dbc
 801102c:	20011da8 	.word	0x20011da8
 8011030:	0801fcc0 	.word	0x0801fcc0
 8011034:	0801fce0 	.word	0x0801fce0
 8011038:	20011dc2 	.word	0x20011dc2
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801103c:	4ba2      	ldr	r3, [pc, #648]	@ (80112c8 <tcp_receive+0x4ac>)
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	3b01      	subs	r3, #1
 8011048:	2b00      	cmp	r3, #0
 801104a:	f2c0 8199 	blt.w	8011380 <tcp_receive+0x564>
 801104e:	4b9e      	ldr	r3, [pc, #632]	@ (80112c8 <tcp_receive+0x4ac>)
 8011050:	681a      	ldr	r2, [r3, #0]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011056:	1ad3      	subs	r3, r2, r3
 8011058:	2b00      	cmp	r3, #0
 801105a:	f300 8191 	bgt.w	8011380 <tcp_receive+0x564>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	8b5b      	ldrh	r3, [r3, #26]
 8011062:	f003 0304 	and.w	r3, r3, #4
 8011066:	2b00      	cmp	r3, #0
 8011068:	d010      	beq.n	801108c <tcp_receive+0x270>
        tcp_clear_flags(pcb, TF_INFR);
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	8b5b      	ldrh	r3, [r3, #26]
 801106e:	f023 0304 	bic.w	r3, r3, #4
 8011072:	b29a      	uxth	r2, r3
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2200      	movs	r2, #0
 8011088:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2200      	movs	r2, #0
 8011090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801109a:	10db      	asrs	r3, r3, #3
 801109c:	b21b      	sxth	r3, r3
 801109e:	b29a      	uxth	r2, r3
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80110a6:	b29b      	uxth	r3, r3
 80110a8:	4413      	add	r3, r2
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	b21a      	sxth	r2, r3
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80110b4:	4b84      	ldr	r3, [pc, #528]	@ (80112c8 <tcp_receive+0x4ac>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	b29a      	uxth	r2, r3
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80110be:	b29b      	uxth	r3, r3
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2200      	movs	r2, #0
 80110c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80110cc:	4b7e      	ldr	r3, [pc, #504]	@ (80112c8 <tcp_receive+0x4ac>)
 80110ce:	681a      	ldr	r2, [r3, #0]
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	7d1b      	ldrb	r3, [r3, #20]
 80110d8:	2b03      	cmp	r3, #3
 80110da:	f240 8098 	bls.w	801120e <tcp_receive+0x3f2>
        if (pcb->cwnd < pcb->ssthresh) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80110ea:	429a      	cmp	r2, r3
 80110ec:	d23c      	bcs.n	8011168 <tcp_receive+0x34c>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	8b5b      	ldrh	r3, [r3, #26]
 80110f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d001      	beq.n	80110fe <tcp_receive+0x2e2>
 80110fa:	2301      	movs	r3, #1
 80110fc:	e000      	b.n	8011100 <tcp_receive+0x2e4>
 80110fe:	2302      	movs	r3, #2
 8011100:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8011104:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8011108:	b29a      	uxth	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801110e:	fb12 f303 	smulbb	r3, r2, r3
 8011112:	b29b      	uxth	r3, r3
 8011114:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8011116:	4293      	cmp	r3, r2
 8011118:	bf28      	it	cs
 801111a:	4613      	movcs	r3, r2
 801111c:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8011124:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8011126:	4413      	add	r3, r2
 8011128:	b29a      	uxth	r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011130:	429a      	cmp	r2, r3
 8011132:	d309      	bcc.n	8011148 <tcp_receive+0x32c>
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 801113a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801113c:	4413      	add	r3, r2
 801113e:	b29a      	uxth	r2, r3
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8011146:	e004      	b.n	8011152 <tcp_receive+0x336>
 8011148:	687b      	ldr	r3, [r7, #4]
 801114a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801114e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011158:	4619      	mov	r1, r3
 801115a:	485c      	ldr	r0, [pc, #368]	@ (80112cc <tcp_receive+0x4b0>)
 801115c:	f00a fae4 	bl	801b728 <iprintf>
 8011160:	2000      	movs	r0, #0
 8011162:	f00a fa0b 	bl	801b57c <fflush>
 8011166:	e052      	b.n	801120e <tcp_receive+0x3f2>
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 801116e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011170:	4413      	add	r3, r2
 8011172:	b29a      	uxth	r2, r3
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801117a:	429a      	cmp	r2, r3
 801117c:	d309      	bcc.n	8011192 <tcp_receive+0x376>
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8011184:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8011186:	4413      	add	r3, r2
 8011188:	b29a      	uxth	r2, r3
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8011190:	e004      	b.n	801119c <tcp_receive+0x380>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011198:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80111a8:	429a      	cmp	r2, r3
 80111aa:	d326      	bcc.n	80111fa <tcp_receive+0x3de>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80111b8:	1ad3      	subs	r3, r2, r3
 80111ba:	b29a      	uxth	r2, r3
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80111cc:	4413      	add	r3, r2
 80111ce:	b29a      	uxth	r2, r3
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80111d6:	429a      	cmp	r2, r3
 80111d8:	d30a      	bcc.n	80111f0 <tcp_receive+0x3d4>
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80111e4:	4413      	add	r3, r2
 80111e6:	b29a      	uxth	r2, r3
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 80111ee:	e004      	b.n	80111fa <tcp_receive+0x3de>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80111f6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: congestion avoidance cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8011200:	4619      	mov	r1, r3
 8011202:	4833      	ldr	r0, [pc, #204]	@ (80112d0 <tcp_receive+0x4b4>)
 8011204:	f00a fa90 	bl	801b728 <iprintf>
 8011208:	2000      	movs	r0, #0
 801120a:	f00a f9b7 	bl	801b57c <fflush>
        }
      }
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: ACK for %"U32_F", unacked->seqno %"U32_F":%"U32_F"\n",
 801120e:	4b2e      	ldr	r3, [pc, #184]	@ (80112c8 <tcp_receive+0x4ac>)
 8011210:	681d      	ldr	r5, [r3, #0]
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011216:	2b00      	cmp	r3, #0
 8011218:	d008      	beq.n	801122c <tcp_receive+0x410>
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801121e:	691b      	ldr	r3, [r3, #16]
 8011220:	685b      	ldr	r3, [r3, #4]
 8011222:	4618      	mov	r0, r3
 8011224:	f7f9 fd3b 	bl	800ac9e <lwip_htonl>
 8011228:	4604      	mov	r4, r0
 801122a:	e000      	b.n	801122e <tcp_receive+0x412>
 801122c:	2400      	movs	r4, #0
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011232:	2b00      	cmp	r3, #0
 8011234:	d01f      	beq.n	8011276 <tcp_receive+0x45a>
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801123a:	691b      	ldr	r3, [r3, #16]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	4618      	mov	r0, r3
 8011240:	f7f9 fd2d 	bl	800ac9e <lwip_htonl>
 8011244:	4606      	mov	r6, r0
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801124a:	891b      	ldrh	r3, [r3, #8]
 801124c:	4698      	mov	r8, r3
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011252:	691b      	ldr	r3, [r3, #16]
 8011254:	899b      	ldrh	r3, [r3, #12]
 8011256:	b29b      	uxth	r3, r3
 8011258:	4618      	mov	r0, r3
 801125a:	f7f9 fd0b 	bl	800ac74 <lwip_htons>
 801125e:	4603      	mov	r3, r0
 8011260:	b2db      	uxtb	r3, r3
 8011262:	f003 0303 	and.w	r3, r3, #3
 8011266:	2b00      	cmp	r3, #0
 8011268:	d001      	beq.n	801126e <tcp_receive+0x452>
 801126a:	2301      	movs	r3, #1
 801126c:	e000      	b.n	8011270 <tcp_receive+0x454>
 801126e:	2300      	movs	r3, #0
 8011270:	4443      	add	r3, r8
 8011272:	4433      	add	r3, r6
 8011274:	e000      	b.n	8011278 <tcp_receive+0x45c>
 8011276:	2300      	movs	r3, #0
 8011278:	4622      	mov	r2, r4
 801127a:	4629      	mov	r1, r5
 801127c:	4815      	ldr	r0, [pc, #84]	@ (80112d4 <tcp_receive+0x4b8>)
 801127e:	f00a fa53 	bl	801b728 <iprintf>
 8011282:	2000      	movs	r0, #0
 8011284:	f00a f97a 	bl	801b57c <fflush>
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011290:	4a11      	ldr	r2, [pc, #68]	@ (80112d8 <tcp_receive+0x4bc>)
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7ff fcf8 	bl	8010c88 <tcp_free_acked_segments>
 8011298:	4602      	mov	r2, r0
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112a6:	4a0d      	ldr	r2, [pc, #52]	@ (80112dc <tcp_receive+0x4c0>)
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f7ff fced 	bl	8010c88 <tcp_free_acked_segments>
 80112ae:	4602      	mov	r2, r0
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80112b8:	2b00      	cmp	r3, #0
 80112ba:	d111      	bne.n	80112e0 <tcp_receive+0x4c4>
        pcb->rtime = -1;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80112c2:	861a      	strh	r2, [r3, #48]	@ 0x30
 80112c4:	e00f      	b.n	80112e6 <tcp_receive+0x4ca>
 80112c6:	bf00      	nop
 80112c8:	20011dbc 	.word	0x20011dbc
 80112cc:	0801fd30 	.word	0x0801fd30
 80112d0:	0801fd54 	.word	0x0801fd54
 80112d4:	0801fd80 	.word	0x0801fd80
 80112d8:	0801fdb4 	.word	0x0801fdb4
 80112dc:	0801fdbc 	.word	0x0801fdbc
      } else {
        pcb->rtime = 0;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2200      	movs	r2, #0
 80112e4:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	2200      	movs	r2, #0
 80112ea:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80112f0:	2b00      	cmp	r3, #0
 80112f2:	d103      	bne.n	80112fc <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	2200      	movs	r2, #0
 80112f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011302:	4ba1      	ldr	r3, [pc, #644]	@ (8011588 <tcp_receive+0x76c>)
 8011304:	881b      	ldrh	r3, [r3, #0]
 8011306:	4413      	add	r3, r2
 8011308:	b29a      	uxth	r2, r3
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	8b5b      	ldrh	r3, [r3, #26]
 8011314:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8011318:	2b00      	cmp	r3, #0
 801131a:	d035      	beq.n	8011388 <tcp_receive+0x56c>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011320:	2b00      	cmp	r3, #0
 8011322:	d118      	bne.n	8011356 <tcp_receive+0x53a>
          if ((pcb->unsent == NULL) ||
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011328:	2b00      	cmp	r3, #0
 801132a:	d00c      	beq.n	8011346 <tcp_receive+0x52a>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011334:	691b      	ldr	r3, [r3, #16]
 8011336:	685b      	ldr	r3, [r3, #4]
 8011338:	4618      	mov	r0, r3
 801133a:	f7f9 fcb0 	bl	800ac9e <lwip_htonl>
 801133e:	4603      	mov	r3, r0
 8011340:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8011342:	2b00      	cmp	r3, #0
 8011344:	dc20      	bgt.n	8011388 <tcp_receive+0x56c>
            tcp_clear_flags(pcb, TF_RTO);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	8b5b      	ldrh	r3, [r3, #26]
 801134a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801134e:	b29a      	uxth	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011354:	e018      	b.n	8011388 <tcp_receive+0x56c>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801135e:	691b      	ldr	r3, [r3, #16]
 8011360:	685b      	ldr	r3, [r3, #4]
 8011362:	4618      	mov	r0, r3
 8011364:	f7f9 fc9b 	bl	800ac9e <lwip_htonl>
 8011368:	4603      	mov	r3, r0
 801136a:	1ae3      	subs	r3, r4, r3
 801136c:	2b00      	cmp	r3, #0
 801136e:	dc0b      	bgt.n	8011388 <tcp_receive+0x56c>
          tcp_clear_flags(pcb, TF_RTO);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	8b5b      	ldrh	r3, [r3, #26]
 8011374:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8011378:	b29a      	uxth	r2, r3
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801137e:	e003      	b.n	8011388 <tcp_receive+0x56c>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8011380:	6878      	ldr	r0, [r7, #4]
 8011382:	f002 ffbd 	bl	8014300 <tcp_send_empty_ack>
 8011386:	e000      	b.n	801138a <tcp_receive+0x56e>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8011388:	bf00      	nop
    }

    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: pcb->rttest %"U32_F" rtseq %"U32_F" ackno %"U32_F"\n",
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011392:	4b7e      	ldr	r3, [pc, #504]	@ (801158c <tcp_receive+0x770>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	487e      	ldr	r0, [pc, #504]	@ (8011590 <tcp_receive+0x774>)
 8011398:	f00a f9c6 	bl	801b728 <iprintf>
 801139c:	2000      	movs	r0, #0
 801139e:	f00a f8ed 	bl	801b57c <fflush>
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	f000 8084 	beq.w	80114b4 <tcp_receive+0x698>
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80113b0:	4b76      	ldr	r3, [pc, #472]	@ (801158c <tcp_receive+0x770>)
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	1ad3      	subs	r3, r2, r3
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	da7c      	bge.n	80114b4 <tcp_receive+0x698>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80113ba:	4b76      	ldr	r3, [pc, #472]	@ (8011594 <tcp_receive+0x778>)
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	b29a      	uxth	r2, r3
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80113c4:	b29b      	uxth	r3, r3
 80113c6:	1ad3      	subs	r3, r2, r3
 80113c8:	b29b      	uxth	r3, r3
 80113ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
 80113ce:	f9b7 104e 	ldrsh.w	r1, [r7, #78]	@ 0x4e
 80113d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80113d6:	461a      	mov	r2, r3
 80113d8:	0152      	lsls	r2, r2, #5
 80113da:	1ad2      	subs	r2, r2, r3
 80113dc:	0092      	lsls	r2, r2, #2
 80113de:	4413      	add	r3, r2
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	b29b      	uxth	r3, r3
 80113e4:	461a      	mov	r2, r3
 80113e6:	486c      	ldr	r0, [pc, #432]	@ (8011598 <tcp_receive+0x77c>)
 80113e8:	f00a f99e 	bl	801b728 <iprintf>
 80113ec:	2000      	movs	r0, #0
 80113ee:	f00a f8c5 	bl	801b57c <fflush>
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80113f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80113fc:	10db      	asrs	r3, r3, #3
 80113fe:	b21b      	sxth	r3, r3
 8011400:	b29b      	uxth	r3, r3
 8011402:	1ad3      	subs	r3, r2, r3
 8011404:	b29b      	uxth	r3, r3
 8011406:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801140a:	687b      	ldr	r3, [r7, #4]
 801140c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011410:	b29a      	uxth	r2, r3
 8011412:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011416:	4413      	add	r3, r2
 8011418:	b29b      	uxth	r3, r3
 801141a:	b21a      	sxth	r2, r3
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8011420:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8011424:	2b00      	cmp	r3, #0
 8011426:	da05      	bge.n	8011434 <tcp_receive+0x618>
        m = (s16_t) - m;
 8011428:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 801142c:	425b      	negs	r3, r3
 801142e:	b29b      	uxth	r3, r3
 8011430:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8011434:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801143e:	109b      	asrs	r3, r3, #2
 8011440:	b21b      	sxth	r3, r3
 8011442:	b29b      	uxth	r3, r3
 8011444:	1ad3      	subs	r3, r2, r3
 8011446:	b29b      	uxth	r3, r3
 8011448:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011452:	b29a      	uxth	r2, r3
 8011454:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8011458:	4413      	add	r3, r2
 801145a:	b29b      	uxth	r3, r3
 801145c:	b21a      	sxth	r2, r3
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8011468:	10db      	asrs	r3, r3, #3
 801146a:	b21b      	sxth	r3, r3
 801146c:	b29a      	uxth	r2, r3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8011474:	b29b      	uxth	r3, r3
 8011476:	4413      	add	r3, r2
 8011478:	b29b      	uxth	r3, r3
 801147a:	b21a      	sxth	r2, r3
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011488:	4619      	mov	r1, r3
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 8011490:	b29b      	uxth	r3, r3
 8011492:	461a      	mov	r2, r3
 8011494:	0152      	lsls	r2, r2, #5
 8011496:	1ad2      	subs	r2, r2, r3
 8011498:	0092      	lsls	r2, r2, #2
 801149a:	4413      	add	r3, r2
 801149c:	009b      	lsls	r3, r3, #2
 801149e:	b29b      	uxth	r3, r3
 80114a0:	461a      	mov	r2, r3
 80114a2:	483e      	ldr	r0, [pc, #248]	@ (801159c <tcp_receive+0x780>)
 80114a4:	f00a f940 	bl	801b728 <iprintf>
 80114a8:	2000      	movs	r0, #0
 80114aa:	f00a f867 	bl	801b57c <fflush>
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80114b4:	4b3a      	ldr	r3, [pc, #232]	@ (80115a0 <tcp_receive+0x784>)
 80114b6:	881b      	ldrh	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	f000 8545 	beq.w	8011f48 <tcp_receive+0x112c>
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	7d1b      	ldrb	r3, [r3, #20]
 80114c2:	2b06      	cmp	r3, #6
 80114c4:	f200 8540 	bhi.w	8011f48 <tcp_receive+0x112c>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114cc:	4b35      	ldr	r3, [pc, #212]	@ (80115a4 <tcp_receive+0x788>)
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	3b01      	subs	r3, #1
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	f2c0 8099 	blt.w	801160c <tcp_receive+0x7f0>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114de:	4b30      	ldr	r3, [pc, #192]	@ (80115a0 <tcp_receive+0x784>)
 80114e0:	881b      	ldrh	r3, [r3, #0]
 80114e2:	4619      	mov	r1, r3
 80114e4:	4b2f      	ldr	r3, [pc, #188]	@ (80115a4 <tcp_receive+0x788>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	440b      	add	r3, r1
 80114ea:	1ad3      	subs	r3, r2, r3
 80114ec:	3301      	adds	r3, #1
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	f300 808c 	bgt.w	801160c <tcp_receive+0x7f0>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80114f4:	4b2c      	ldr	r3, [pc, #176]	@ (80115a8 <tcp_receive+0x78c>)
 80114f6:	685b      	ldr	r3, [r3, #4]
 80114f8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114fe:	4b29      	ldr	r3, [pc, #164]	@ (80115a4 <tcp_receive+0x788>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	1ad3      	subs	r3, r2, r3
 8011504:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8011506:	4b28      	ldr	r3, [pc, #160]	@ (80115a8 <tcp_receive+0x78c>)
 8011508:	685b      	ldr	r3, [r3, #4]
 801150a:	2b00      	cmp	r3, #0
 801150c:	d109      	bne.n	8011522 <tcp_receive+0x706>
 801150e:	4b27      	ldr	r3, [pc, #156]	@ (80115ac <tcp_receive+0x790>)
 8011510:	f240 5294 	movw	r2, #1428	@ 0x594
 8011514:	4926      	ldr	r1, [pc, #152]	@ (80115b0 <tcp_receive+0x794>)
 8011516:	4827      	ldr	r0, [pc, #156]	@ (80115b4 <tcp_receive+0x798>)
 8011518:	f00a f906 	bl	801b728 <iprintf>
 801151c:	2000      	movs	r0, #0
 801151e:	f00a f82d 	bl	801b57c <fflush>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8011522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011524:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011528:	4293      	cmp	r3, r2
 801152a:	d909      	bls.n	8011540 <tcp_receive+0x724>
 801152c:	4b1f      	ldr	r3, [pc, #124]	@ (80115ac <tcp_receive+0x790>)
 801152e:	f240 5295 	movw	r2, #1429	@ 0x595
 8011532:	4921      	ldr	r1, [pc, #132]	@ (80115b8 <tcp_receive+0x79c>)
 8011534:	481f      	ldr	r0, [pc, #124]	@ (80115b4 <tcp_receive+0x798>)
 8011536:	f00a f8f7 	bl	801b728 <iprintf>
 801153a:	2000      	movs	r0, #0
 801153c:	f00a f81e 	bl	801b57c <fflush>
      off = (u16_t)off32;
 8011540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011542:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8011546:	4b18      	ldr	r3, [pc, #96]	@ (80115a8 <tcp_receive+0x78c>)
 8011548:	685b      	ldr	r3, [r3, #4]
 801154a:	891b      	ldrh	r3, [r3, #8]
 801154c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8011550:	429a      	cmp	r2, r3
 8011552:	d909      	bls.n	8011568 <tcp_receive+0x74c>
 8011554:	4b15      	ldr	r3, [pc, #84]	@ (80115ac <tcp_receive+0x790>)
 8011556:	f240 5297 	movw	r2, #1431	@ 0x597
 801155a:	4918      	ldr	r1, [pc, #96]	@ (80115bc <tcp_receive+0x7a0>)
 801155c:	4815      	ldr	r0, [pc, #84]	@ (80115b4 <tcp_receive+0x798>)
 801155e:	f00a f8e3 	bl	801b728 <iprintf>
 8011562:	2000      	movs	r0, #0
 8011564:	f00a f80a 	bl	801b57c <fflush>
      inseg.len -= off;
 8011568:	4b0f      	ldr	r3, [pc, #60]	@ (80115a8 <tcp_receive+0x78c>)
 801156a:	891a      	ldrh	r2, [r3, #8]
 801156c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011570:	1ad3      	subs	r3, r2, r3
 8011572:	b29a      	uxth	r2, r3
 8011574:	4b0c      	ldr	r3, [pc, #48]	@ (80115a8 <tcp_receive+0x78c>)
 8011576:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011578:	4b0b      	ldr	r3, [pc, #44]	@ (80115a8 <tcp_receive+0x78c>)
 801157a:	685b      	ldr	r3, [r3, #4]
 801157c:	891a      	ldrh	r2, [r3, #8]
 801157e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8011582:	1ad3      	subs	r3, r2, r3
 8011584:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8011586:	e02b      	b.n	80115e0 <tcp_receive+0x7c4>
 8011588:	20011dc0 	.word	0x20011dc0
 801158c:	20011dbc 	.word	0x20011dbc
 8011590:	0801fdc4 	.word	0x0801fdc4
 8011594:	20011d7c 	.word	0x20011d7c
 8011598:	0801fdf8 	.word	0x0801fdf8
 801159c:	0801fe2c 	.word	0x0801fe2c
 80115a0:	20011dc2 	.word	0x20011dc2
 80115a4:	20011db8 	.word	0x20011db8
 80115a8:	20011d94 	.word	0x20011d94
 80115ac:	0801f48c 	.word	0x0801f48c
 80115b0:	0801fe58 	.word	0x0801fe58
 80115b4:	0801f4d8 	.word	0x0801f4d8
 80115b8:	0801fe68 	.word	0x0801fe68
 80115bc:	0801fe78 	.word	0x0801fe78
        off -= p->len;
 80115c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115c2:	895b      	ldrh	r3, [r3, #10]
 80115c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80115ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115d0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80115d2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80115d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115d6:	2200      	movs	r2, #0
 80115d8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80115da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80115e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115e2:	895b      	ldrh	r3, [r3, #10]
 80115e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d8e9      	bhi.n	80115c0 <tcp_receive+0x7a4>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80115ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80115f0:	4619      	mov	r1, r3
 80115f2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80115f4:	f7fb f8fa 	bl	800c7ec <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115fc:	4a86      	ldr	r2, [pc, #536]	@ (8011818 <tcp_receive+0x9fc>)
 80115fe:	6013      	str	r3, [r2, #0]
 8011600:	4b86      	ldr	r3, [pc, #536]	@ (801181c <tcp_receive+0xa00>)
 8011602:	691b      	ldr	r3, [r3, #16]
 8011604:	4a84      	ldr	r2, [pc, #528]	@ (8011818 <tcp_receive+0x9fc>)
 8011606:	6812      	ldr	r2, [r2, #0]
 8011608:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801160a:	e016      	b.n	801163a <tcp_receive+0x81e>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801160c:	4b82      	ldr	r3, [pc, #520]	@ (8011818 <tcp_receive+0x9fc>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011614:	1ad3      	subs	r3, r2, r3
 8011616:	2b00      	cmp	r3, #0
 8011618:	da0f      	bge.n	801163a <tcp_receive+0x81e>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
 801161a:	4b7f      	ldr	r3, [pc, #508]	@ (8011818 <tcp_receive+0x9fc>)
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	4619      	mov	r1, r3
 8011620:	487f      	ldr	r0, [pc, #508]	@ (8011820 <tcp_receive+0xa04>)
 8011622:	f00a f881 	bl	801b728 <iprintf>
 8011626:	2000      	movs	r0, #0
 8011628:	f009 ffa8 	bl	801b57c <fflush>
        tcp_ack_now(pcb);
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	8b5b      	ldrh	r3, [r3, #26]
 8011630:	f043 0302 	orr.w	r3, r3, #2
 8011634:	b29a      	uxth	r2, r3
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801163a:	4b77      	ldr	r3, [pc, #476]	@ (8011818 <tcp_receive+0x9fc>)
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011642:	1ad3      	subs	r3, r2, r3
 8011644:	2b00      	cmp	r3, #0
 8011646:	f2c0 847a 	blt.w	8011f3e <tcp_receive+0x1122>
 801164a:	4b73      	ldr	r3, [pc, #460]	@ (8011818 <tcp_receive+0x9fc>)
 801164c:	681a      	ldr	r2, [r3, #0]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011652:	6879      	ldr	r1, [r7, #4]
 8011654:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011656:	440b      	add	r3, r1
 8011658:	1ad3      	subs	r3, r2, r3
 801165a:	3301      	adds	r3, #1
 801165c:	2b00      	cmp	r3, #0
 801165e:	f300 846e 	bgt.w	8011f3e <tcp_receive+0x1122>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011666:	4b6c      	ldr	r3, [pc, #432]	@ (8011818 <tcp_receive+0x9fc>)
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	429a      	cmp	r2, r3
 801166c:	f040 82cf 	bne.w	8011c0e <tcp_receive+0xdf2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8011670:	4b6a      	ldr	r3, [pc, #424]	@ (801181c <tcp_receive+0xa00>)
 8011672:	891c      	ldrh	r4, [r3, #8]
 8011674:	4b69      	ldr	r3, [pc, #420]	@ (801181c <tcp_receive+0xa00>)
 8011676:	691b      	ldr	r3, [r3, #16]
 8011678:	899b      	ldrh	r3, [r3, #12]
 801167a:	b29b      	uxth	r3, r3
 801167c:	4618      	mov	r0, r3
 801167e:	f7f9 faf9 	bl	800ac74 <lwip_htons>
 8011682:	4603      	mov	r3, r0
 8011684:	b2db      	uxtb	r3, r3
 8011686:	f003 0303 	and.w	r3, r3, #3
 801168a:	2b00      	cmp	r3, #0
 801168c:	d001      	beq.n	8011692 <tcp_receive+0x876>
 801168e:	2301      	movs	r3, #1
 8011690:	e000      	b.n	8011694 <tcp_receive+0x878>
 8011692:	2300      	movs	r3, #0
 8011694:	4423      	add	r3, r4
 8011696:	b29a      	uxth	r2, r3
 8011698:	4b62      	ldr	r3, [pc, #392]	@ (8011824 <tcp_receive+0xa08>)
 801169a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80116a0:	4b60      	ldr	r3, [pc, #384]	@ (8011824 <tcp_receive+0xa08>)
 80116a2:	881b      	ldrh	r3, [r3, #0]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	f080 8089 	bcs.w	80117bc <tcp_receive+0x9a0>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
 80116aa:	4b5b      	ldr	r3, [pc, #364]	@ (8011818 <tcp_receive+0x9fc>)
 80116ac:	6819      	ldr	r1, [r3, #0]
 80116ae:	4b5d      	ldr	r3, [pc, #372]	@ (8011824 <tcp_receive+0xa08>)
 80116b0:	881b      	ldrh	r3, [r3, #0]
 80116b2:	4618      	mov	r0, r3
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116b8:	687a      	ldr	r2, [r7, #4]
 80116ba:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80116bc:	4413      	add	r3, r2
 80116be:	4602      	mov	r2, r0
 80116c0:	4859      	ldr	r0, [pc, #356]	@ (8011828 <tcp_receive+0xa0c>)
 80116c2:	f00a f831 	bl	801b728 <iprintf>
 80116c6:	2000      	movs	r0, #0
 80116c8:	f009 ff58 	bl	801b57c <fflush>
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80116cc:	4b53      	ldr	r3, [pc, #332]	@ (801181c <tcp_receive+0xa00>)
 80116ce:	691b      	ldr	r3, [r3, #16]
 80116d0:	899b      	ldrh	r3, [r3, #12]
 80116d2:	b29b      	uxth	r3, r3
 80116d4:	4618      	mov	r0, r3
 80116d6:	f7f9 facd 	bl	800ac74 <lwip_htons>
 80116da:	4603      	mov	r3, r0
 80116dc:	b2db      	uxtb	r3, r3
 80116de:	f003 0301 	and.w	r3, r3, #1
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d01e      	beq.n	8011724 <tcp_receive+0x908>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80116e6:	4b4d      	ldr	r3, [pc, #308]	@ (801181c <tcp_receive+0xa00>)
 80116e8:	691b      	ldr	r3, [r3, #16]
 80116ea:	899b      	ldrh	r3, [r3, #12]
 80116ec:	b29b      	uxth	r3, r3
 80116ee:	b21b      	sxth	r3, r3
 80116f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80116f4:	b21c      	sxth	r4, r3
 80116f6:	4b49      	ldr	r3, [pc, #292]	@ (801181c <tcp_receive+0xa00>)
 80116f8:	691b      	ldr	r3, [r3, #16]
 80116fa:	899b      	ldrh	r3, [r3, #12]
 80116fc:	b29b      	uxth	r3, r3
 80116fe:	4618      	mov	r0, r3
 8011700:	f7f9 fab8 	bl	800ac74 <lwip_htons>
 8011704:	4603      	mov	r3, r0
 8011706:	b2db      	uxtb	r3, r3
 8011708:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801170c:	b29b      	uxth	r3, r3
 801170e:	4618      	mov	r0, r3
 8011710:	f7f9 fab0 	bl	800ac74 <lwip_htons>
 8011714:	4603      	mov	r3, r0
 8011716:	b21b      	sxth	r3, r3
 8011718:	4323      	orrs	r3, r4
 801171a:	b21a      	sxth	r2, r3
 801171c:	4b3f      	ldr	r3, [pc, #252]	@ (801181c <tcp_receive+0xa00>)
 801171e:	691b      	ldr	r3, [r3, #16]
 8011720:	b292      	uxth	r2, r2
 8011722:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011728:	4b3c      	ldr	r3, [pc, #240]	@ (801181c <tcp_receive+0xa00>)
 801172a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801172c:	4b3b      	ldr	r3, [pc, #236]	@ (801181c <tcp_receive+0xa00>)
 801172e:	691b      	ldr	r3, [r3, #16]
 8011730:	899b      	ldrh	r3, [r3, #12]
 8011732:	b29b      	uxth	r3, r3
 8011734:	4618      	mov	r0, r3
 8011736:	f7f9 fa9d 	bl	800ac74 <lwip_htons>
 801173a:	4603      	mov	r3, r0
 801173c:	b2db      	uxtb	r3, r3
 801173e:	f003 0302 	and.w	r3, r3, #2
 8011742:	2b00      	cmp	r3, #0
 8011744:	d005      	beq.n	8011752 <tcp_receive+0x936>
            inseg.len -= 1;
 8011746:	4b35      	ldr	r3, [pc, #212]	@ (801181c <tcp_receive+0xa00>)
 8011748:	891b      	ldrh	r3, [r3, #8]
 801174a:	3b01      	subs	r3, #1
 801174c:	b29a      	uxth	r2, r3
 801174e:	4b33      	ldr	r3, [pc, #204]	@ (801181c <tcp_receive+0xa00>)
 8011750:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8011752:	4b32      	ldr	r3, [pc, #200]	@ (801181c <tcp_receive+0xa00>)
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	4a31      	ldr	r2, [pc, #196]	@ (801181c <tcp_receive+0xa00>)
 8011758:	8912      	ldrh	r2, [r2, #8]
 801175a:	4611      	mov	r1, r2
 801175c:	4618      	mov	r0, r3
 801175e:	f7fa ff21 	bl	800c5a4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8011762:	4b2e      	ldr	r3, [pc, #184]	@ (801181c <tcp_receive+0xa00>)
 8011764:	891c      	ldrh	r4, [r3, #8]
 8011766:	4b2d      	ldr	r3, [pc, #180]	@ (801181c <tcp_receive+0xa00>)
 8011768:	691b      	ldr	r3, [r3, #16]
 801176a:	899b      	ldrh	r3, [r3, #12]
 801176c:	b29b      	uxth	r3, r3
 801176e:	4618      	mov	r0, r3
 8011770:	f7f9 fa80 	bl	800ac74 <lwip_htons>
 8011774:	4603      	mov	r3, r0
 8011776:	b2db      	uxtb	r3, r3
 8011778:	f003 0303 	and.w	r3, r3, #3
 801177c:	2b00      	cmp	r3, #0
 801177e:	d001      	beq.n	8011784 <tcp_receive+0x968>
 8011780:	2301      	movs	r3, #1
 8011782:	e000      	b.n	8011786 <tcp_receive+0x96a>
 8011784:	2300      	movs	r3, #0
 8011786:	4423      	add	r3, r4
 8011788:	b29a      	uxth	r2, r3
 801178a:	4b26      	ldr	r3, [pc, #152]	@ (8011824 <tcp_receive+0xa08>)
 801178c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801178e:	4b25      	ldr	r3, [pc, #148]	@ (8011824 <tcp_receive+0xa08>)
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	461a      	mov	r2, r3
 8011794:	4b20      	ldr	r3, [pc, #128]	@ (8011818 <tcp_receive+0x9fc>)
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	441a      	add	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801179e:	6879      	ldr	r1, [r7, #4]
 80117a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80117a2:	440b      	add	r3, r1
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d009      	beq.n	80117bc <tcp_receive+0x9a0>
 80117a8:	4b20      	ldr	r3, [pc, #128]	@ (801182c <tcp_receive+0xa10>)
 80117aa:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80117ae:	4920      	ldr	r1, [pc, #128]	@ (8011830 <tcp_receive+0xa14>)
 80117b0:	4820      	ldr	r0, [pc, #128]	@ (8011834 <tcp_receive+0xa18>)
 80117b2:	f009 ffb9 	bl	801b728 <iprintf>
 80117b6:	2000      	movs	r0, #0
 80117b8:	f009 fee0 	bl	801b57c <fflush>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	f000 80f6 	beq.w	80119b2 <tcp_receive+0xb96>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80117c6:	4b15      	ldr	r3, [pc, #84]	@ (801181c <tcp_receive+0xa00>)
 80117c8:	691b      	ldr	r3, [r3, #16]
 80117ca:	899b      	ldrh	r3, [r3, #12]
 80117cc:	b29b      	uxth	r3, r3
 80117ce:	4618      	mov	r0, r3
 80117d0:	f7f9 fa50 	bl	800ac74 <lwip_htons>
 80117d4:	4603      	mov	r3, r0
 80117d6:	b2db      	uxtb	r3, r3
 80117d8:	f003 0301 	and.w	r3, r3, #1
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d016      	beq.n	801180e <tcp_receive+0x9f2>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
 80117e0:	4815      	ldr	r0, [pc, #84]	@ (8011838 <tcp_receive+0xa1c>)
 80117e2:	f00a f811 	bl	801b808 <puts>
 80117e6:	2000      	movs	r0, #0
 80117e8:	f009 fec8 	bl	801b57c <fflush>
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80117ec:	e00a      	b.n	8011804 <tcp_receive+0x9e8>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117f2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80117f8:	681a      	ldr	r2, [r3, #0]
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 80117fe:	68f8      	ldr	r0, [r7, #12]
 8011800:	f7fc fee9 	bl	800e5d6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011808:	2b00      	cmp	r3, #0
 801180a:	d1f0      	bne.n	80117ee <tcp_receive+0x9d2>
 801180c:	e0d1      	b.n	80119b2 <tcp_receive+0xb96>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011812:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8011814:	e058      	b.n	80118c8 <tcp_receive+0xaac>
 8011816:	bf00      	nop
 8011818:	20011db8 	.word	0x20011db8
 801181c:	20011d94 	.word	0x20011d94
 8011820:	0801fe88 	.word	0x0801fe88
 8011824:	20011dc2 	.word	0x20011dc2
 8011828:	0801feac 	.word	0x0801feac
 801182c:	0801f48c 	.word	0x0801f48c
 8011830:	0801fefc 	.word	0x0801fefc
 8011834:	0801f4d8 	.word	0x0801f4d8
 8011838:	0801ff34 	.word	0x0801ff34
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801183c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801183e:	691b      	ldr	r3, [r3, #16]
 8011840:	899b      	ldrh	r3, [r3, #12]
 8011842:	b29b      	uxth	r3, r3
 8011844:	4618      	mov	r0, r3
 8011846:	f7f9 fa15 	bl	800ac74 <lwip_htons>
 801184a:	4603      	mov	r3, r0
 801184c:	b2db      	uxtb	r3, r3
 801184e:	f003 0301 	and.w	r3, r3, #1
 8011852:	2b00      	cmp	r3, #0
 8011854:	d030      	beq.n	80118b8 <tcp_receive+0xa9c>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011856:	4b98      	ldr	r3, [pc, #608]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011858:	691b      	ldr	r3, [r3, #16]
 801185a:	899b      	ldrh	r3, [r3, #12]
 801185c:	b29b      	uxth	r3, r3
 801185e:	4618      	mov	r0, r3
 8011860:	f7f9 fa08 	bl	800ac74 <lwip_htons>
 8011864:	4603      	mov	r3, r0
 8011866:	b2db      	uxtb	r3, r3
 8011868:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801186c:	2b00      	cmp	r3, #0
 801186e:	d123      	bne.n	80118b8 <tcp_receive+0xa9c>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011870:	4b91      	ldr	r3, [pc, #580]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011872:	691b      	ldr	r3, [r3, #16]
 8011874:	899b      	ldrh	r3, [r3, #12]
 8011876:	b29c      	uxth	r4, r3
 8011878:	2001      	movs	r0, #1
 801187a:	f7f9 f9fb 	bl	800ac74 <lwip_htons>
 801187e:	4603      	mov	r3, r0
 8011880:	461a      	mov	r2, r3
 8011882:	4b8d      	ldr	r3, [pc, #564]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011884:	691b      	ldr	r3, [r3, #16]
 8011886:	4322      	orrs	r2, r4
 8011888:	b292      	uxth	r2, r2
 801188a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801188c:	4b8a      	ldr	r3, [pc, #552]	@ (8011ab8 <tcp_receive+0xc9c>)
 801188e:	891c      	ldrh	r4, [r3, #8]
 8011890:	4b89      	ldr	r3, [pc, #548]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011892:	691b      	ldr	r3, [r3, #16]
 8011894:	899b      	ldrh	r3, [r3, #12]
 8011896:	b29b      	uxth	r3, r3
 8011898:	4618      	mov	r0, r3
 801189a:	f7f9 f9eb 	bl	800ac74 <lwip_htons>
 801189e:	4603      	mov	r3, r0
 80118a0:	b2db      	uxtb	r3, r3
 80118a2:	f003 0303 	and.w	r3, r3, #3
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d001      	beq.n	80118ae <tcp_receive+0xa92>
 80118aa:	2301      	movs	r3, #1
 80118ac:	e000      	b.n	80118b0 <tcp_receive+0xa94>
 80118ae:	2300      	movs	r3, #0
 80118b0:	4423      	add	r3, r4
 80118b2:	b29a      	uxth	r2, r3
 80118b4:	4b81      	ldr	r3, [pc, #516]	@ (8011abc <tcp_receive+0xca0>)
 80118b6:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80118b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ba:	613b      	str	r3, [r7, #16]
              next = next->next;
 80118bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80118c2:	6938      	ldr	r0, [r7, #16]
 80118c4:	f7fc fe87 	bl	800e5d6 <tcp_seg_free>
            while (next &&
 80118c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d00e      	beq.n	80118ec <tcp_receive+0xad0>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80118ce:	4b7b      	ldr	r3, [pc, #492]	@ (8011abc <tcp_receive+0xca0>)
 80118d0:	881b      	ldrh	r3, [r3, #0]
 80118d2:	461a      	mov	r2, r3
 80118d4:	4b7a      	ldr	r3, [pc, #488]	@ (8011ac0 <tcp_receive+0xca4>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	441a      	add	r2, r3
 80118da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118dc:	691b      	ldr	r3, [r3, #16]
 80118de:	685b      	ldr	r3, [r3, #4]
 80118e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80118e2:	8909      	ldrh	r1, [r1, #8]
 80118e4:	440b      	add	r3, r1
 80118e6:	1ad3      	subs	r3, r2, r3
            while (next &&
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	daa7      	bge.n	801183c <tcp_receive+0xa20>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80118ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d05c      	beq.n	80119ac <tcp_receive+0xb90>
                TCP_SEQ_GT(seqno + tcplen,
 80118f2:	4b72      	ldr	r3, [pc, #456]	@ (8011abc <tcp_receive+0xca0>)
 80118f4:	881b      	ldrh	r3, [r3, #0]
 80118f6:	461a      	mov	r2, r3
 80118f8:	4b71      	ldr	r3, [pc, #452]	@ (8011ac0 <tcp_receive+0xca4>)
 80118fa:	681b      	ldr	r3, [r3, #0]
 80118fc:	441a      	add	r2, r3
 80118fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011900:	691b      	ldr	r3, [r3, #16]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011906:	2b00      	cmp	r3, #0
 8011908:	dd50      	ble.n	80119ac <tcp_receive+0xb90>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801190a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801190c:	691b      	ldr	r3, [r3, #16]
 801190e:	685b      	ldr	r3, [r3, #4]
 8011910:	b29a      	uxth	r2, r3
 8011912:	4b6b      	ldr	r3, [pc, #428]	@ (8011ac0 <tcp_receive+0xca4>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	b29b      	uxth	r3, r3
 8011918:	1ad3      	subs	r3, r2, r3
 801191a:	b29a      	uxth	r2, r3
 801191c:	4b66      	ldr	r3, [pc, #408]	@ (8011ab8 <tcp_receive+0xc9c>)
 801191e:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011920:	4b65      	ldr	r3, [pc, #404]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011922:	691b      	ldr	r3, [r3, #16]
 8011924:	899b      	ldrh	r3, [r3, #12]
 8011926:	b29b      	uxth	r3, r3
 8011928:	4618      	mov	r0, r3
 801192a:	f7f9 f9a3 	bl	800ac74 <lwip_htons>
 801192e:	4603      	mov	r3, r0
 8011930:	b2db      	uxtb	r3, r3
 8011932:	f003 0302 	and.w	r3, r3, #2
 8011936:	2b00      	cmp	r3, #0
 8011938:	d005      	beq.n	8011946 <tcp_receive+0xb2a>
                inseg.len -= 1;
 801193a:	4b5f      	ldr	r3, [pc, #380]	@ (8011ab8 <tcp_receive+0xc9c>)
 801193c:	891b      	ldrh	r3, [r3, #8]
 801193e:	3b01      	subs	r3, #1
 8011940:	b29a      	uxth	r2, r3
 8011942:	4b5d      	ldr	r3, [pc, #372]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011944:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011946:	4b5c      	ldr	r3, [pc, #368]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011948:	685b      	ldr	r3, [r3, #4]
 801194a:	4a5b      	ldr	r2, [pc, #364]	@ (8011ab8 <tcp_receive+0xc9c>)
 801194c:	8912      	ldrh	r2, [r2, #8]
 801194e:	4611      	mov	r1, r2
 8011950:	4618      	mov	r0, r3
 8011952:	f7fa fe27 	bl	800c5a4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011956:	4b58      	ldr	r3, [pc, #352]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011958:	891c      	ldrh	r4, [r3, #8]
 801195a:	4b57      	ldr	r3, [pc, #348]	@ (8011ab8 <tcp_receive+0xc9c>)
 801195c:	691b      	ldr	r3, [r3, #16]
 801195e:	899b      	ldrh	r3, [r3, #12]
 8011960:	b29b      	uxth	r3, r3
 8011962:	4618      	mov	r0, r3
 8011964:	f7f9 f986 	bl	800ac74 <lwip_htons>
 8011968:	4603      	mov	r3, r0
 801196a:	b2db      	uxtb	r3, r3
 801196c:	f003 0303 	and.w	r3, r3, #3
 8011970:	2b00      	cmp	r3, #0
 8011972:	d001      	beq.n	8011978 <tcp_receive+0xb5c>
 8011974:	2301      	movs	r3, #1
 8011976:	e000      	b.n	801197a <tcp_receive+0xb5e>
 8011978:	2300      	movs	r3, #0
 801197a:	4423      	add	r3, r4
 801197c:	b29a      	uxth	r2, r3
 801197e:	4b4f      	ldr	r3, [pc, #316]	@ (8011abc <tcp_receive+0xca0>)
 8011980:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8011982:	4b4e      	ldr	r3, [pc, #312]	@ (8011abc <tcp_receive+0xca0>)
 8011984:	881b      	ldrh	r3, [r3, #0]
 8011986:	461a      	mov	r2, r3
 8011988:	4b4d      	ldr	r3, [pc, #308]	@ (8011ac0 <tcp_receive+0xca4>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	441a      	add	r2, r3
 801198e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011990:	691b      	ldr	r3, [r3, #16]
 8011992:	685b      	ldr	r3, [r3, #4]
 8011994:	429a      	cmp	r2, r3
 8011996:	d009      	beq.n	80119ac <tcp_receive+0xb90>
 8011998:	4b4a      	ldr	r3, [pc, #296]	@ (8011ac4 <tcp_receive+0xca8>)
 801199a:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 801199e:	494a      	ldr	r1, [pc, #296]	@ (8011ac8 <tcp_receive+0xcac>)
 80119a0:	484a      	ldr	r0, [pc, #296]	@ (8011acc <tcp_receive+0xcb0>)
 80119a2:	f009 fec1 	bl	801b728 <iprintf>
 80119a6:	2000      	movs	r0, #0
 80119a8:	f009 fde8 	bl	801b57c <fflush>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80119b0:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80119b2:	4b42      	ldr	r3, [pc, #264]	@ (8011abc <tcp_receive+0xca0>)
 80119b4:	881b      	ldrh	r3, [r3, #0]
 80119b6:	461a      	mov	r2, r3
 80119b8:	4b41      	ldr	r3, [pc, #260]	@ (8011ac0 <tcp_receive+0xca4>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	441a      	add	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80119c6:	4b3d      	ldr	r3, [pc, #244]	@ (8011abc <tcp_receive+0xca0>)
 80119c8:	881b      	ldrh	r3, [r3, #0]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d209      	bcs.n	80119e2 <tcp_receive+0xbc6>
 80119ce:	4b3d      	ldr	r3, [pc, #244]	@ (8011ac4 <tcp_receive+0xca8>)
 80119d0:	f240 6207 	movw	r2, #1543	@ 0x607
 80119d4:	493e      	ldr	r1, [pc, #248]	@ (8011ad0 <tcp_receive+0xcb4>)
 80119d6:	483d      	ldr	r0, [pc, #244]	@ (8011acc <tcp_receive+0xcb0>)
 80119d8:	f009 fea6 	bl	801b728 <iprintf>
 80119dc:	2000      	movs	r0, #0
 80119de:	f009 fdcd 	bl	801b57c <fflush>
        pcb->rcv_wnd -= tcplen;
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80119e6:	4b35      	ldr	r3, [pc, #212]	@ (8011abc <tcp_receive+0xca0>)
 80119e8:	881b      	ldrh	r3, [r3, #0]
 80119ea:	1ad3      	subs	r3, r2, r3
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f7fb ffc6 	bl	800d984 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80119f8:	4b2f      	ldr	r3, [pc, #188]	@ (8011ab8 <tcp_receive+0xc9c>)
 80119fa:	685b      	ldr	r3, [r3, #4]
 80119fc:	891b      	ldrh	r3, [r3, #8]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d006      	beq.n	8011a10 <tcp_receive+0xbf4>
          recv_data = inseg.p;
 8011a02:	4b2d      	ldr	r3, [pc, #180]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011a04:	685b      	ldr	r3, [r3, #4]
 8011a06:	4a33      	ldr	r2, [pc, #204]	@ (8011ad4 <tcp_receive+0xcb8>)
 8011a08:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011a10:	4b29      	ldr	r3, [pc, #164]	@ (8011ab8 <tcp_receive+0xc9c>)
 8011a12:	691b      	ldr	r3, [r3, #16]
 8011a14:	899b      	ldrh	r3, [r3, #12]
 8011a16:	b29b      	uxth	r3, r3
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7f9 f92b 	bl	800ac74 <lwip_htons>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	b2db      	uxtb	r3, r3
 8011a22:	f003 0301 	and.w	r3, r3, #1
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	f000 80c7 	beq.w	8011bba <tcp_receive+0xd9e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
 8011a2c:	482a      	ldr	r0, [pc, #168]	@ (8011ad8 <tcp_receive+0xcbc>)
 8011a2e:	f009 feeb 	bl	801b808 <puts>
 8011a32:	2000      	movs	r0, #0
 8011a34:	f009 fda2 	bl	801b57c <fflush>
          recv_flags |= TF_GOT_FIN;
 8011a38:	4b28      	ldr	r3, [pc, #160]	@ (8011adc <tcp_receive+0xcc0>)
 8011a3a:	781b      	ldrb	r3, [r3, #0]
 8011a3c:	f043 0320 	orr.w	r3, r3, #32
 8011a40:	b2da      	uxtb	r2, r3
 8011a42:	4b26      	ldr	r3, [pc, #152]	@ (8011adc <tcp_receive+0xcc0>)
 8011a44:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011a46:	e0b8      	b.n	8011bba <tcp_receive+0xd9e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a4c:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a52:	691b      	ldr	r3, [r3, #16]
 8011a54:	685b      	ldr	r3, [r3, #4]
 8011a56:	4a1a      	ldr	r2, [pc, #104]	@ (8011ac0 <tcp_receive+0xca4>)
 8011a58:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	891b      	ldrh	r3, [r3, #8]
 8011a5e:	461c      	mov	r4, r3
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	691b      	ldr	r3, [r3, #16]
 8011a64:	899b      	ldrh	r3, [r3, #12]
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7f9 f903 	bl	800ac74 <lwip_htons>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	f003 0303 	and.w	r3, r3, #3
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <tcp_receive+0xc62>
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	e000      	b.n	8011a80 <tcp_receive+0xc64>
 8011a7e:	2300      	movs	r3, #0
 8011a80:	191a      	adds	r2, r3, r4
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011a86:	441a      	add	r2, r3
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011a90:	461c      	mov	r4, r3
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	891b      	ldrh	r3, [r3, #8]
 8011a96:	461d      	mov	r5, r3
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	691b      	ldr	r3, [r3, #16]
 8011a9c:	899b      	ldrh	r3, [r3, #12]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f7f9 f8e7 	bl	800ac74 <lwip_htons>
 8011aa6:	4603      	mov	r3, r0
 8011aa8:	b2db      	uxtb	r3, r3
 8011aaa:	f003 0303 	and.w	r3, r3, #3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d016      	beq.n	8011ae0 <tcp_receive+0xcc4>
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	e015      	b.n	8011ae2 <tcp_receive+0xcc6>
 8011ab6:	bf00      	nop
 8011ab8:	20011d94 	.word	0x20011d94
 8011abc:	20011dc2 	.word	0x20011dc2
 8011ac0:	20011db8 	.word	0x20011db8
 8011ac4:	0801f48c 	.word	0x0801f48c
 8011ac8:	0801ff6c 	.word	0x0801ff6c
 8011acc:	0801f4d8 	.word	0x0801f4d8
 8011ad0:	0801ffa8 	.word	0x0801ffa8
 8011ad4:	20011dc8 	.word	0x20011dc8
 8011ad8:	0801ffc8 	.word	0x0801ffc8
 8011adc:	20011dc5 	.word	0x20011dc5
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	442b      	add	r3, r5
 8011ae4:	429c      	cmp	r4, r3
 8011ae6:	d209      	bcs.n	8011afc <tcp_receive+0xce0>
 8011ae8:	4b91      	ldr	r3, [pc, #580]	@ (8011d30 <tcp_receive+0xf14>)
 8011aea:	f240 622b 	movw	r2, #1579	@ 0x62b
 8011aee:	4991      	ldr	r1, [pc, #580]	@ (8011d34 <tcp_receive+0xf18>)
 8011af0:	4891      	ldr	r0, [pc, #580]	@ (8011d38 <tcp_receive+0xf1c>)
 8011af2:	f009 fe19 	bl	801b728 <iprintf>
 8011af6:	2000      	movs	r0, #0
 8011af8:	f009 fd40 	bl	801b57c <fflush>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	891b      	ldrh	r3, [r3, #8]
 8011b00:	461c      	mov	r4, r3
 8011b02:	68bb      	ldr	r3, [r7, #8]
 8011b04:	691b      	ldr	r3, [r3, #16]
 8011b06:	899b      	ldrh	r3, [r3, #12]
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7f9 f8b2 	bl	800ac74 <lwip_htons>
 8011b10:	4603      	mov	r3, r0
 8011b12:	b2db      	uxtb	r3, r3
 8011b14:	f003 0303 	and.w	r3, r3, #3
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d001      	beq.n	8011b20 <tcp_receive+0xd04>
 8011b1c:	2301      	movs	r3, #1
 8011b1e:	e000      	b.n	8011b22 <tcp_receive+0xd06>
 8011b20:	2300      	movs	r3, #0
 8011b22:	1919      	adds	r1, r3, r4
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011b28:	b28b      	uxth	r3, r1
 8011b2a:	1ad3      	subs	r3, r2, r3
 8011b2c:	b29a      	uxth	r2, r3
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7fb ff26 	bl	800d984 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	891b      	ldrh	r3, [r3, #8]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d013      	beq.n	8011b6a <tcp_receive+0xd4e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011b42:	4b7e      	ldr	r3, [pc, #504]	@ (8011d3c <tcp_receive+0xf20>)
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d008      	beq.n	8011b5c <tcp_receive+0xd40>
              pbuf_cat(recv_data, cseg->p);
 8011b4a:	4b7c      	ldr	r3, [pc, #496]	@ (8011d3c <tcp_receive+0xf20>)
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	68bb      	ldr	r3, [r7, #8]
 8011b50:	685b      	ldr	r3, [r3, #4]
 8011b52:	4619      	mov	r1, r3
 8011b54:	4610      	mov	r0, r2
 8011b56:	f7fa ffe3 	bl	800cb20 <pbuf_cat>
 8011b5a:	e003      	b.n	8011b64 <tcp_receive+0xd48>
            } else {
              recv_data = cseg->p;
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	4a76      	ldr	r2, [pc, #472]	@ (8011d3c <tcp_receive+0xf20>)
 8011b62:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	2200      	movs	r2, #0
 8011b68:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011b6a:	68bb      	ldr	r3, [r7, #8]
 8011b6c:	691b      	ldr	r3, [r3, #16]
 8011b6e:	899b      	ldrh	r3, [r3, #12]
 8011b70:	b29b      	uxth	r3, r3
 8011b72:	4618      	mov	r0, r3
 8011b74:	f7f9 f87e 	bl	800ac74 <lwip_htons>
 8011b78:	4603      	mov	r3, r0
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	f003 0301 	and.w	r3, r3, #1
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d013      	beq.n	8011bac <tcp_receive+0xd90>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
 8011b84:	486e      	ldr	r0, [pc, #440]	@ (8011d40 <tcp_receive+0xf24>)
 8011b86:	f009 fe3f 	bl	801b808 <puts>
 8011b8a:	2000      	movs	r0, #0
 8011b8c:	f009 fcf6 	bl	801b57c <fflush>
            recv_flags |= TF_GOT_FIN;
 8011b90:	4b6c      	ldr	r3, [pc, #432]	@ (8011d44 <tcp_receive+0xf28>)
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	f043 0320 	orr.w	r3, r3, #32
 8011b98:	b2da      	uxtb	r2, r3
 8011b9a:	4b6a      	ldr	r3, [pc, #424]	@ (8011d44 <tcp_receive+0xf28>)
 8011b9c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	7d1b      	ldrb	r3, [r3, #20]
 8011ba2:	2b04      	cmp	r3, #4
 8011ba4:	d102      	bne.n	8011bac <tcp_receive+0xd90>
              pcb->state = CLOSE_WAIT;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	2207      	movs	r2, #7
 8011baa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	681a      	ldr	r2, [r3, #0]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8011bb4:	68b8      	ldr	r0, [r7, #8]
 8011bb6:	f7fc fd0e 	bl	800e5d6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d008      	beq.n	8011bd4 <tcp_receive+0xdb8>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011bc6:	691b      	ldr	r3, [r3, #16]
 8011bc8:	685a      	ldr	r2, [r3, #4]
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	f43f af3a 	beq.w	8011a48 <tcp_receive+0xc2c>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	8b5b      	ldrh	r3, [r3, #26]
 8011bd8:	f003 0301 	and.w	r3, r3, #1
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d00e      	beq.n	8011bfe <tcp_receive+0xde2>
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	8b5b      	ldrh	r3, [r3, #26]
 8011be4:	f023 0301 	bic.w	r3, r3, #1
 8011be8:	b29a      	uxth	r2, r3
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	835a      	strh	r2, [r3, #26]
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	8b5b      	ldrh	r3, [r3, #26]
 8011bf2:	f043 0302 	orr.w	r3, r3, #2
 8011bf6:	b29a      	uxth	r2, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011bfc:	e1a3      	b.n	8011f46 <tcp_receive+0x112a>
        tcp_ack(pcb);
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	8b5b      	ldrh	r3, [r3, #26]
 8011c02:	f043 0301 	orr.w	r3, r3, #1
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8011c0c:	e19b      	b.n	8011f46 <tcp_receive+0x112a>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d106      	bne.n	8011c24 <tcp_receive+0xe08>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011c16:	484c      	ldr	r0, [pc, #304]	@ (8011d48 <tcp_receive+0xf2c>)
 8011c18:	f7fc fcf8 	bl	800e60c <tcp_seg_copy>
 8011c1c:	4602      	mov	r2, r0
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	675a      	str	r2, [r3, #116]	@ 0x74
 8011c22:	e188      	b.n	8011f36 <tcp_receive+0x111a>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011c24:	2300      	movs	r3, #0
 8011c26:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c2e:	e172      	b.n	8011f16 <tcp_receive+0x10fa>
            if (seqno == next->tcphdr->seqno) {
 8011c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c32:	691b      	ldr	r3, [r3, #16]
 8011c34:	685a      	ldr	r2, [r3, #4]
 8011c36:	4b45      	ldr	r3, [pc, #276]	@ (8011d4c <tcp_receive+0xf30>)
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d11d      	bne.n	8011c7a <tcp_receive+0xe5e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011c3e:	4b42      	ldr	r3, [pc, #264]	@ (8011d48 <tcp_receive+0xf2c>)
 8011c40:	891a      	ldrh	r2, [r3, #8]
 8011c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c44:	891b      	ldrh	r3, [r3, #8]
 8011c46:	429a      	cmp	r2, r3
 8011c48:	f240 816a 	bls.w	8011f20 <tcp_receive+0x1104>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c4c:	483e      	ldr	r0, [pc, #248]	@ (8011d48 <tcp_receive+0xf2c>)
 8011c4e:	f7fc fcdd 	bl	800e60c <tcp_seg_copy>
 8011c52:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011c54:	697b      	ldr	r3, [r7, #20]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	f000 8164 	beq.w	8011f24 <tcp_receive+0x1108>
                  if (prev != NULL) {
 8011c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d003      	beq.n	8011c6a <tcp_receive+0xe4e>
                    prev->next = cseg;
 8011c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c64:	697a      	ldr	r2, [r7, #20]
 8011c66:	601a      	str	r2, [r3, #0]
 8011c68:	e002      	b.n	8011c70 <tcp_receive+0xe54>
                  } else {
                    pcb->ooseq = cseg;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	697a      	ldr	r2, [r7, #20]
 8011c6e:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011c70:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011c72:	6978      	ldr	r0, [r7, #20]
 8011c74:	f7fe ff7c 	bl	8010b70 <tcp_oos_insert_segment>
                }
                break;
 8011c78:	e154      	b.n	8011f24 <tcp_receive+0x1108>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8011c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d117      	bne.n	8011cb0 <tcp_receive+0xe94>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011c80:	4b32      	ldr	r3, [pc, #200]	@ (8011d4c <tcp_receive+0xf30>)
 8011c82:	681a      	ldr	r2, [r3, #0]
 8011c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c86:	691b      	ldr	r3, [r3, #16]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	1ad3      	subs	r3, r2, r3
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	da5f      	bge.n	8011d50 <tcp_receive+0xf34>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011c90:	482d      	ldr	r0, [pc, #180]	@ (8011d48 <tcp_receive+0xf2c>)
 8011c92:	f7fc fcbb 	bl	800e60c <tcp_seg_copy>
 8011c96:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011c98:	69bb      	ldr	r3, [r7, #24]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	f000 8144 	beq.w	8011f28 <tcp_receive+0x110c>
                    pcb->ooseq = cseg;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	69ba      	ldr	r2, [r7, #24]
 8011ca4:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8011ca6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011ca8:	69b8      	ldr	r0, [r7, #24]
 8011caa:	f7fe ff61 	bl	8010b70 <tcp_oos_insert_segment>
                  }
                  break;
 8011cae:	e13b      	b.n	8011f28 <tcp_receive+0x110c>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011cb0:	4b26      	ldr	r3, [pc, #152]	@ (8011d4c <tcp_receive+0xf30>)
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cb6:	691b      	ldr	r3, [r3, #16]
 8011cb8:	685b      	ldr	r3, [r3, #4]
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	3b01      	subs	r3, #1
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	db46      	blt.n	8011d50 <tcp_receive+0xf34>
 8011cc2:	4b22      	ldr	r3, [pc, #136]	@ (8011d4c <tcp_receive+0xf30>)
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc8:	691b      	ldr	r3, [r3, #16]
 8011cca:	685b      	ldr	r3, [r3, #4]
 8011ccc:	1ad3      	subs	r3, r2, r3
 8011cce:	3301      	adds	r3, #1
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	dc3d      	bgt.n	8011d50 <tcp_receive+0xf34>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011cd4:	481c      	ldr	r0, [pc, #112]	@ (8011d48 <tcp_receive+0xf2c>)
 8011cd6:	f7fc fc99 	bl	800e60c <tcp_seg_copy>
 8011cda:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	f000 8124 	beq.w	8011f2c <tcp_receive+0x1110>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ce6:	691b      	ldr	r3, [r3, #16]
 8011ce8:	685b      	ldr	r3, [r3, #4]
 8011cea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011cec:	8912      	ldrh	r2, [r2, #8]
 8011cee:	441a      	add	r2, r3
 8011cf0:	4b16      	ldr	r3, [pc, #88]	@ (8011d4c <tcp_receive+0xf30>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	1ad3      	subs	r3, r2, r3
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	dd12      	ble.n	8011d20 <tcp_receive+0xf04>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8011cfa:	4b14      	ldr	r3, [pc, #80]	@ (8011d4c <tcp_receive+0xf30>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	b29a      	uxth	r2, r3
 8011d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d02:	691b      	ldr	r3, [r3, #16]
 8011d04:	685b      	ldr	r3, [r3, #4]
 8011d06:	b29b      	uxth	r3, r3
 8011d08:	1ad3      	subs	r3, r2, r3
 8011d0a:	b29a      	uxth	r2, r3
 8011d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d0e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d12:	685a      	ldr	r2, [r3, #4]
 8011d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d16:	891b      	ldrh	r3, [r3, #8]
 8011d18:	4619      	mov	r1, r3
 8011d1a:	4610      	mov	r0, r2
 8011d1c:	f7fa fc42 	bl	800c5a4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d22:	69fa      	ldr	r2, [r7, #28]
 8011d24:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011d26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011d28:	69f8      	ldr	r0, [r7, #28]
 8011d2a:	f7fe ff21 	bl	8010b70 <tcp_oos_insert_segment>
                  }
                  break;
 8011d2e:	e0fd      	b.n	8011f2c <tcp_receive+0x1110>
 8011d30:	0801f48c 	.word	0x0801f48c
 8011d34:	0801ffe4 	.word	0x0801ffe4
 8011d38:	0801f4d8 	.word	0x0801f4d8
 8011d3c:	20011dc8 	.word	0x20011dc8
 8011d40:	0802000c 	.word	0x0802000c
 8011d44:	20011dc5 	.word	0x20011dc5
 8011d48:	20011d94 	.word	0x20011d94
 8011d4c:	20011db8 	.word	0x20011db8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d52:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	f040 80d9 	bne.w	8011f10 <tcp_receive+0x10f4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8011d5e:	4b8a      	ldr	r3, [pc, #552]	@ (8011f88 <tcp_receive+0x116c>)
 8011d60:	681a      	ldr	r2, [r3, #0]
 8011d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d64:	691b      	ldr	r3, [r3, #16]
 8011d66:	685b      	ldr	r3, [r3, #4]
 8011d68:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	f340 80d0 	ble.w	8011f10 <tcp_receive+0x10f4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d72:	691b      	ldr	r3, [r3, #16]
 8011d74:	899b      	ldrh	r3, [r3, #12]
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f7f8 ff7b 	bl	800ac74 <lwip_htons>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	b2db      	uxtb	r3, r3
 8011d82:	f003 0301 	and.w	r3, r3, #1
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	f040 80d2 	bne.w	8011f30 <tcp_receive+0x1114>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8011d8c:	487f      	ldr	r0, [pc, #508]	@ (8011f8c <tcp_receive+0x1170>)
 8011d8e:	f7fc fc3d 	bl	800e60c <tcp_seg_copy>
 8011d92:	4602      	mov	r2, r0
 8011d94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d96:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011d98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	f000 80c9 	beq.w	8011f34 <tcp_receive+0x1118>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011daa:	8912      	ldrh	r2, [r2, #8]
 8011dac:	441a      	add	r2, r3
 8011dae:	4b76      	ldr	r3, [pc, #472]	@ (8011f88 <tcp_receive+0x116c>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	1ad3      	subs	r3, r2, r3
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	dd12      	ble.n	8011dde <tcp_receive+0xfc2>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011db8:	4b73      	ldr	r3, [pc, #460]	@ (8011f88 <tcp_receive+0x116c>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	b29a      	uxth	r2, r3
 8011dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dc0:	691b      	ldr	r3, [r3, #16]
 8011dc2:	685b      	ldr	r3, [r3, #4]
 8011dc4:	b29b      	uxth	r3, r3
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	b29a      	uxth	r2, r3
 8011dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dcc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8011dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dd0:	685a      	ldr	r2, [r3, #4]
 8011dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dd4:	891b      	ldrh	r3, [r3, #8]
 8011dd6:	4619      	mov	r1, r3
 8011dd8:	4610      	mov	r0, r2
 8011dda:	f7fa fbe3 	bl	800c5a4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8011dde:	4b6c      	ldr	r3, [pc, #432]	@ (8011f90 <tcp_receive+0x1174>)
 8011de0:	881b      	ldrh	r3, [r3, #0]
 8011de2:	461a      	mov	r2, r3
 8011de4:	4b68      	ldr	r3, [pc, #416]	@ (8011f88 <tcp_receive+0x116c>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	441a      	add	r2, r3
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dee:	6879      	ldr	r1, [r7, #4]
 8011df0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011df2:	440b      	add	r3, r1
 8011df4:	1ad3      	subs	r3, r2, r3
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	f340 809c 	ble.w	8011f34 <tcp_receive+0x1118>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
 8011dfc:	4b62      	ldr	r3, [pc, #392]	@ (8011f88 <tcp_receive+0x116c>)
 8011dfe:	6819      	ldr	r1, [r3, #0]
 8011e00:	4b63      	ldr	r3, [pc, #396]	@ (8011f90 <tcp_receive+0x1174>)
 8011e02:	881b      	ldrh	r3, [r3, #0]
 8011e04:	4618      	mov	r0, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e0a:	687a      	ldr	r2, [r7, #4]
 8011e0c:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011e0e:	4413      	add	r3, r2
 8011e10:	4602      	mov	r2, r0
 8011e12:	4860      	ldr	r0, [pc, #384]	@ (8011f94 <tcp_receive+0x1178>)
 8011e14:	f009 fc88 	bl	801b728 <iprintf>
 8011e18:	2000      	movs	r0, #0
 8011e1a:	f009 fbaf 	bl	801b57c <fflush>
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8011e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	691b      	ldr	r3, [r3, #16]
 8011e24:	899b      	ldrh	r3, [r3, #12]
 8011e26:	b29b      	uxth	r3, r3
 8011e28:	4618      	mov	r0, r3
 8011e2a:	f7f8 ff23 	bl	800ac74 <lwip_htons>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	b2db      	uxtb	r3, r3
 8011e32:	f003 0301 	and.w	r3, r3, #1
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d021      	beq.n	8011e7e <tcp_receive+0x1062>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	691b      	ldr	r3, [r3, #16]
 8011e40:	899b      	ldrh	r3, [r3, #12]
 8011e42:	b29b      	uxth	r3, r3
 8011e44:	b21b      	sxth	r3, r3
 8011e46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8011e4a:	b21c      	sxth	r4, r3
 8011e4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	691b      	ldr	r3, [r3, #16]
 8011e52:	899b      	ldrh	r3, [r3, #12]
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	4618      	mov	r0, r3
 8011e58:	f7f8 ff0c 	bl	800ac74 <lwip_htons>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	b2db      	uxtb	r3, r3
 8011e60:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8011e64:	b29b      	uxth	r3, r3
 8011e66:	4618      	mov	r0, r3
 8011e68:	f7f8 ff04 	bl	800ac74 <lwip_htons>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	b21b      	sxth	r3, r3
 8011e70:	4323      	orrs	r3, r4
 8011e72:	b21a      	sxth	r2, r3
 8011e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	691b      	ldr	r3, [r3, #16]
 8011e7a:	b292      	uxth	r2, r2
 8011e7c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e82:	b29a      	uxth	r2, r3
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011e88:	4413      	add	r3, r2
 8011e8a:	b299      	uxth	r1, r3
 8011e8c:	4b3e      	ldr	r3, [pc, #248]	@ (8011f88 <tcp_receive+0x116c>)
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	b29a      	uxth	r2, r3
 8011e92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	1a8a      	subs	r2, r1, r2
 8011e98:	b292      	uxth	r2, r2
 8011e9a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	685a      	ldr	r2, [r3, #4]
 8011ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	891b      	ldrh	r3, [r3, #8]
 8011ea8:	4619      	mov	r1, r3
 8011eaa:	4610      	mov	r0, r2
 8011eac:	f7fa fb7a 	bl	800c5a4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011eb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	891c      	ldrh	r4, [r3, #8]
 8011eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	691b      	ldr	r3, [r3, #16]
 8011ebc:	899b      	ldrh	r3, [r3, #12]
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	f7f8 fed7 	bl	800ac74 <lwip_htons>
 8011ec6:	4603      	mov	r3, r0
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	f003 0303 	and.w	r3, r3, #3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d001      	beq.n	8011ed6 <tcp_receive+0x10ba>
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	e000      	b.n	8011ed8 <tcp_receive+0x10bc>
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	4423      	add	r3, r4
 8011eda:	b29a      	uxth	r2, r3
 8011edc:	4b2c      	ldr	r3, [pc, #176]	@ (8011f90 <tcp_receive+0x1174>)
 8011ede:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8011f90 <tcp_receive+0x1174>)
 8011ee2:	881b      	ldrh	r3, [r3, #0]
 8011ee4:	461a      	mov	r2, r3
 8011ee6:	4b28      	ldr	r3, [pc, #160]	@ (8011f88 <tcp_receive+0x116c>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	441a      	add	r2, r3
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ef0:	6879      	ldr	r1, [r7, #4]
 8011ef2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011ef4:	440b      	add	r3, r1
 8011ef6:	429a      	cmp	r2, r3
 8011ef8:	d01c      	beq.n	8011f34 <tcp_receive+0x1118>
 8011efa:	4b27      	ldr	r3, [pc, #156]	@ (8011f98 <tcp_receive+0x117c>)
 8011efc:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8011f00:	4926      	ldr	r1, [pc, #152]	@ (8011f9c <tcp_receive+0x1180>)
 8011f02:	4827      	ldr	r0, [pc, #156]	@ (8011fa0 <tcp_receive+0x1184>)
 8011f04:	f009 fc10 	bl	801b728 <iprintf>
 8011f08:	2000      	movs	r0, #0
 8011f0a:	f009 fb37 	bl	801b57c <fflush>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011f0e:	e011      	b.n	8011f34 <tcp_receive+0x1118>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	f47f ae89 	bne.w	8011c30 <tcp_receive+0xe14>
 8011f1e:	e00a      	b.n	8011f36 <tcp_receive+0x111a>
                break;
 8011f20:	bf00      	nop
 8011f22:	e008      	b.n	8011f36 <tcp_receive+0x111a>
                break;
 8011f24:	bf00      	nop
 8011f26:	e006      	b.n	8011f36 <tcp_receive+0x111a>
                  break;
 8011f28:	bf00      	nop
 8011f2a:	e004      	b.n	8011f36 <tcp_receive+0x111a>
                  break;
 8011f2c:	bf00      	nop
 8011f2e:	e002      	b.n	8011f36 <tcp_receive+0x111a>
                  break;
 8011f30:	bf00      	nop
 8011f32:	e000      	b.n	8011f36 <tcp_receive+0x111a>
                break;
 8011f34:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011f36:	6878      	ldr	r0, [r7, #4]
 8011f38:	f002 f9e2 	bl	8014300 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011f3c:	e003      	b.n	8011f46 <tcp_receive+0x112a>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f002 f9de 	bl	8014300 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8011f44:	e01a      	b.n	8011f7c <tcp_receive+0x1160>
 8011f46:	e019      	b.n	8011f7c <tcp_receive+0x1160>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011f48:	4b0f      	ldr	r3, [pc, #60]	@ (8011f88 <tcp_receive+0x116c>)
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f50:	1ad3      	subs	r3, r2, r3
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	db0a      	blt.n	8011f6c <tcp_receive+0x1150>
 8011f56:	4b0c      	ldr	r3, [pc, #48]	@ (8011f88 <tcp_receive+0x116c>)
 8011f58:	681a      	ldr	r2, [r3, #0]
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f5e:	6879      	ldr	r1, [r7, #4]
 8011f60:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8011f62:	440b      	add	r3, r1
 8011f64:	1ad3      	subs	r3, r2, r3
 8011f66:	3301      	adds	r3, #1
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	dd07      	ble.n	8011f7c <tcp_receive+0x1160>
      tcp_ack_now(pcb);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	8b5b      	ldrh	r3, [r3, #26]
 8011f70:	f043 0302 	orr.w	r3, r3, #2
 8011f74:	b29a      	uxth	r2, r3
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011f7a:	e7ff      	b.n	8011f7c <tcp_receive+0x1160>
 8011f7c:	bf00      	nop
 8011f7e:	3750      	adds	r7, #80	@ 0x50
 8011f80:	46bd      	mov	sp, r7
 8011f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f86:	bf00      	nop
 8011f88:	20011db8 	.word	0x20011db8
 8011f8c:	20011d94 	.word	0x20011d94
 8011f90:	20011dc2 	.word	0x20011dc2
 8011f94:	0801feac 	.word	0x0801feac
 8011f98:	0801f48c 	.word	0x0801f48c
 8011f9c:	0801fefc 	.word	0x0801fefc
 8011fa0:	0801f4d8 	.word	0x0801f4d8

08011fa4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b083      	sub	sp, #12
 8011fa8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8011faa:	4b15      	ldr	r3, [pc, #84]	@ (8012000 <tcp_get_next_optbyte+0x5c>)
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	1c5a      	adds	r2, r3, #1
 8011fb0:	b291      	uxth	r1, r2
 8011fb2:	4a13      	ldr	r2, [pc, #76]	@ (8012000 <tcp_get_next_optbyte+0x5c>)
 8011fb4:	8011      	strh	r1, [r2, #0]
 8011fb6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8011fb8:	4b12      	ldr	r3, [pc, #72]	@ (8012004 <tcp_get_next_optbyte+0x60>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d004      	beq.n	8011fca <tcp_get_next_optbyte+0x26>
 8011fc0:	4b11      	ldr	r3, [pc, #68]	@ (8012008 <tcp_get_next_optbyte+0x64>)
 8011fc2:	881b      	ldrh	r3, [r3, #0]
 8011fc4:	88fa      	ldrh	r2, [r7, #6]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d208      	bcs.n	8011fdc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8011fca:	4b10      	ldr	r3, [pc, #64]	@ (801200c <tcp_get_next_optbyte+0x68>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	3314      	adds	r3, #20
 8011fd0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011fd2:	88fb      	ldrh	r3, [r7, #6]
 8011fd4:	683a      	ldr	r2, [r7, #0]
 8011fd6:	4413      	add	r3, r2
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	e00b      	b.n	8011ff4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8011fdc:	88fb      	ldrh	r3, [r7, #6]
 8011fde:	b2da      	uxtb	r2, r3
 8011fe0:	4b09      	ldr	r3, [pc, #36]	@ (8012008 <tcp_get_next_optbyte+0x64>)
 8011fe2:	881b      	ldrh	r3, [r3, #0]
 8011fe4:	b2db      	uxtb	r3, r3
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8011fea:	4b06      	ldr	r3, [pc, #24]	@ (8012004 <tcp_get_next_optbyte+0x60>)
 8011fec:	681a      	ldr	r2, [r3, #0]
 8011fee:	797b      	ldrb	r3, [r7, #5]
 8011ff0:	4413      	add	r3, r2
 8011ff2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	370c      	adds	r7, #12
 8011ff8:	46bd      	mov	sp, r7
 8011ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffe:	4770      	bx	lr
 8012000:	20011db4 	.word	0x20011db4
 8012004:	20011db0 	.word	0x20011db0
 8012008:	20011dae 	.word	0x20011dae
 801200c:	20011da8 	.word	0x20011da8

08012010 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d109      	bne.n	8012032 <tcp_parseopt+0x22>
 801201e:	4b44      	ldr	r3, [pc, #272]	@ (8012130 <tcp_parseopt+0x120>)
 8012020:	f240 727d 	movw	r2, #1917	@ 0x77d
 8012024:	4943      	ldr	r1, [pc, #268]	@ (8012134 <tcp_parseopt+0x124>)
 8012026:	4844      	ldr	r0, [pc, #272]	@ (8012138 <tcp_parseopt+0x128>)
 8012028:	f009 fb7e 	bl	801b728 <iprintf>
 801202c:	2000      	movs	r0, #0
 801202e:	f009 faa5 	bl	801b57c <fflush>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8012032:	4b42      	ldr	r3, [pc, #264]	@ (801213c <tcp_parseopt+0x12c>)
 8012034:	881b      	ldrh	r3, [r3, #0]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d076      	beq.n	8012128 <tcp_parseopt+0x118>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801203a:	4b41      	ldr	r3, [pc, #260]	@ (8012140 <tcp_parseopt+0x130>)
 801203c:	2200      	movs	r2, #0
 801203e:	801a      	strh	r2, [r3, #0]
 8012040:	e06c      	b.n	801211c <tcp_parseopt+0x10c>
      u8_t opt = tcp_get_next_optbyte();
 8012042:	f7ff ffaf 	bl	8011fa4 <tcp_get_next_optbyte>
 8012046:	4603      	mov	r3, r0
 8012048:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801204a:	7bfb      	ldrb	r3, [r7, #15]
 801204c:	2b02      	cmp	r3, #2
 801204e:	d014      	beq.n	801207a <tcp_parseopt+0x6a>
 8012050:	2b02      	cmp	r3, #2
 8012052:	dc45      	bgt.n	80120e0 <tcp_parseopt+0xd0>
 8012054:	2b00      	cmp	r3, #0
 8012056:	d002      	beq.n	801205e <tcp_parseopt+0x4e>
 8012058:	2b01      	cmp	r3, #1
 801205a:	d007      	beq.n	801206c <tcp_parseopt+0x5c>
 801205c:	e040      	b.n	80120e0 <tcp_parseopt+0xd0>
        case LWIP_TCP_OPT_EOL:
          /* End of options. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
 801205e:	4839      	ldr	r0, [pc, #228]	@ (8012144 <tcp_parseopt+0x134>)
 8012060:	f009 fbd2 	bl	801b808 <puts>
 8012064:	2000      	movs	r0, #0
 8012066:	f009 fa89 	bl	801b57c <fflush>
          return;
 801206a:	e05d      	b.n	8012128 <tcp_parseopt+0x118>
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
 801206c:	4836      	ldr	r0, [pc, #216]	@ (8012148 <tcp_parseopt+0x138>)
 801206e:	f009 fbcb 	bl	801b808 <puts>
 8012072:	2000      	movs	r0, #0
 8012074:	f009 fa82 	bl	801b57c <fflush>
          break;
 8012078:	e050      	b.n	801211c <tcp_parseopt+0x10c>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
 801207a:	4834      	ldr	r0, [pc, #208]	@ (801214c <tcp_parseopt+0x13c>)
 801207c:	f009 fbc4 	bl	801b808 <puts>
 8012080:	2000      	movs	r0, #0
 8012082:	f009 fa7b 	bl	801b57c <fflush>
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8012086:	f7ff ff8d 	bl	8011fa4 <tcp_get_next_optbyte>
 801208a:	4603      	mov	r3, r0
 801208c:	2b04      	cmp	r3, #4
 801208e:	d106      	bne.n	801209e <tcp_parseopt+0x8e>
 8012090:	4b2b      	ldr	r3, [pc, #172]	@ (8012140 <tcp_parseopt+0x130>)
 8012092:	881b      	ldrh	r3, [r3, #0]
 8012094:	3301      	adds	r3, #1
 8012096:	4a29      	ldr	r2, [pc, #164]	@ (801213c <tcp_parseopt+0x12c>)
 8012098:	8812      	ldrh	r2, [r2, #0]
 801209a:	4293      	cmp	r3, r2
 801209c:	db06      	blt.n	80120ac <tcp_parseopt+0x9c>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
 801209e:	482c      	ldr	r0, [pc, #176]	@ (8012150 <tcp_parseopt+0x140>)
 80120a0:	f009 fbb2 	bl	801b808 <puts>
 80120a4:	2000      	movs	r0, #0
 80120a6:	f009 fa69 	bl	801b57c <fflush>
            return;
 80120aa:	e03d      	b.n	8012128 <tcp_parseopt+0x118>
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80120ac:	f7ff ff7a 	bl	8011fa4 <tcp_get_next_optbyte>
 80120b0:	4603      	mov	r3, r0
 80120b2:	021b      	lsls	r3, r3, #8
 80120b4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80120b6:	f7ff ff75 	bl	8011fa4 <tcp_get_next_optbyte>
 80120ba:	4603      	mov	r3, r0
 80120bc:	461a      	mov	r2, r3
 80120be:	89bb      	ldrh	r3, [r7, #12]
 80120c0:	4313      	orrs	r3, r2
 80120c2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80120c4:	89bb      	ldrh	r3, [r7, #12]
 80120c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80120ca:	d804      	bhi.n	80120d6 <tcp_parseopt+0xc6>
 80120cc:	89bb      	ldrh	r3, [r7, #12]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d001      	beq.n	80120d6 <tcp_parseopt+0xc6>
 80120d2:	89ba      	ldrh	r2, [r7, #12]
 80120d4:	e001      	b.n	80120da <tcp_parseopt+0xca>
 80120d6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80120de:	e01d      	b.n	801211c <tcp_parseopt+0x10c>
            tcp_set_flags(pcb, TF_SACK);
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
 80120e0:	481c      	ldr	r0, [pc, #112]	@ (8012154 <tcp_parseopt+0x144>)
 80120e2:	f009 fb91 	bl	801b808 <puts>
 80120e6:	2000      	movs	r0, #0
 80120e8:	f009 fa48 	bl	801b57c <fflush>
          data = tcp_get_next_optbyte();
 80120ec:	f7ff ff5a 	bl	8011fa4 <tcp_get_next_optbyte>
 80120f0:	4603      	mov	r3, r0
 80120f2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80120f4:	7afb      	ldrb	r3, [r7, #11]
 80120f6:	2b01      	cmp	r3, #1
 80120f8:	d806      	bhi.n	8012108 <tcp_parseopt+0xf8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
 80120fa:	4815      	ldr	r0, [pc, #84]	@ (8012150 <tcp_parseopt+0x140>)
 80120fc:	f009 fb84 	bl	801b808 <puts>
 8012100:	2000      	movs	r0, #0
 8012102:	f009 fa3b 	bl	801b57c <fflush>
            /* If the length field is zero, the options are malformed
               and we don't process them further. */
            return;
 8012106:	e00f      	b.n	8012128 <tcp_parseopt+0x118>
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8012108:	7afb      	ldrb	r3, [r7, #11]
 801210a:	b29a      	uxth	r2, r3
 801210c:	4b0c      	ldr	r3, [pc, #48]	@ (8012140 <tcp_parseopt+0x130>)
 801210e:	881b      	ldrh	r3, [r3, #0]
 8012110:	4413      	add	r3, r2
 8012112:	b29b      	uxth	r3, r3
 8012114:	3b02      	subs	r3, #2
 8012116:	b29a      	uxth	r2, r3
 8012118:	4b09      	ldr	r3, [pc, #36]	@ (8012140 <tcp_parseopt+0x130>)
 801211a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801211c:	4b08      	ldr	r3, [pc, #32]	@ (8012140 <tcp_parseopt+0x130>)
 801211e:	881a      	ldrh	r2, [r3, #0]
 8012120:	4b06      	ldr	r3, [pc, #24]	@ (801213c <tcp_parseopt+0x12c>)
 8012122:	881b      	ldrh	r3, [r3, #0]
 8012124:	429a      	cmp	r2, r3
 8012126:	d38c      	bcc.n	8012042 <tcp_parseopt+0x32>
      }
    }
  }
}
 8012128:	3710      	adds	r7, #16
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	0801f48c 	.word	0x0801f48c
 8012134:	08020028 	.word	0x08020028
 8012138:	0801f4d8 	.word	0x0801f4d8
 801213c:	20011dac 	.word	0x20011dac
 8012140:	20011db4 	.word	0x20011db4
 8012144:	08020044 	.word	0x08020044
 8012148:	08020058 	.word	0x08020058
 801214c:	0802006c 	.word	0x0802006c
 8012150:	08020080 	.word	0x08020080
 8012154:	0802009c 	.word	0x0802009c

08012158 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8012158:	b480      	push	{r7}
 801215a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801215c:	4b05      	ldr	r3, [pc, #20]	@ (8012174 <tcp_trigger_input_pcb_close+0x1c>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	f043 0310 	orr.w	r3, r3, #16
 8012164:	b2da      	uxtb	r2, r3
 8012166:	4b03      	ldr	r3, [pc, #12]	@ (8012174 <tcp_trigger_input_pcb_close+0x1c>)
 8012168:	701a      	strb	r2, [r3, #0]
}
 801216a:	bf00      	nop
 801216c:	46bd      	mov	sp, r7
 801216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012172:	4770      	bx	lr
 8012174:	20011dc5 	.word	0x20011dc5

08012178 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b084      	sub	sp, #16
 801217c:	af00      	add	r7, sp, #0
 801217e:	60f8      	str	r0, [r7, #12]
 8012180:	60b9      	str	r1, [r7, #8]
 8012182:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00a      	beq.n	80121a0 <tcp_route+0x28>
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	7a1b      	ldrb	r3, [r3, #8]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d006      	beq.n	80121a0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8012192:	68fb      	ldr	r3, [r7, #12]
 8012194:	7a1b      	ldrb	r3, [r3, #8]
 8012196:	4618      	mov	r0, r3
 8012198:	f7f9 ffa8 	bl	800c0ec <netif_get_by_index>
 801219c:	4603      	mov	r3, r0
 801219e:	e003      	b.n	80121a8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f007 f9fd 	bl	80195a0 <ip4_route>
 80121a6:	4603      	mov	r3, r0
  }
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3710      	adds	r7, #16
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80121b0:	b590      	push	{r4, r7, lr}
 80121b2:	b087      	sub	sp, #28
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	603b      	str	r3, [r7, #0]
 80121bc:	4613      	mov	r3, r2
 80121be:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d108      	bne.n	80121d8 <tcp_create_segment+0x28>
 80121c6:	4b4f      	ldr	r3, [pc, #316]	@ (8012304 <tcp_create_segment+0x154>)
 80121c8:	22a3      	movs	r2, #163	@ 0xa3
 80121ca:	494f      	ldr	r1, [pc, #316]	@ (8012308 <tcp_create_segment+0x158>)
 80121cc:	484f      	ldr	r0, [pc, #316]	@ (801230c <tcp_create_segment+0x15c>)
 80121ce:	f009 faab 	bl	801b728 <iprintf>
 80121d2:	2000      	movs	r0, #0
 80121d4:	f009 f9d2 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d108      	bne.n	80121f0 <tcp_create_segment+0x40>
 80121de:	4b49      	ldr	r3, [pc, #292]	@ (8012304 <tcp_create_segment+0x154>)
 80121e0:	22a4      	movs	r2, #164	@ 0xa4
 80121e2:	494b      	ldr	r1, [pc, #300]	@ (8012310 <tcp_create_segment+0x160>)
 80121e4:	4849      	ldr	r0, [pc, #292]	@ (801230c <tcp_create_segment+0x15c>)
 80121e6:	f009 fa9f 	bl	801b728 <iprintf>
 80121ea:	2000      	movs	r0, #0
 80121ec:	f009 f9c6 	bl	801b57c <fflush>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80121f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80121f4:	009b      	lsls	r3, r3, #2
 80121f6:	b2db      	uxtb	r3, r3
 80121f8:	f003 0304 	and.w	r3, r3, #4
 80121fc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80121fe:	2003      	movs	r0, #3
 8012200:	f7f9 fa8c 	bl	800b71c <memp_malloc>
 8012204:	6138      	str	r0, [r7, #16]
 8012206:	693b      	ldr	r3, [r7, #16]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d10a      	bne.n	8012222 <tcp_create_segment+0x72>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
 801220c:	4841      	ldr	r0, [pc, #260]	@ (8012314 <tcp_create_segment+0x164>)
 801220e:	f009 fafb 	bl	801b808 <puts>
 8012212:	2000      	movs	r0, #0
 8012214:	f009 f9b2 	bl	801b57c <fflush>
    pbuf_free(p);
 8012218:	68b8      	ldr	r0, [r7, #8]
 801221a:	f7fa fb7f 	bl	800c91c <pbuf_free>
    return NULL;
 801221e:	2300      	movs	r3, #0
 8012220:	e06c      	b.n	80122fc <tcp_create_segment+0x14c>
  }
  seg->flags = optflags;
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012228:	731a      	strb	r2, [r3, #12]
  seg->next = NULL;
 801222a:	693b      	ldr	r3, [r7, #16]
 801222c:	2200      	movs	r2, #0
 801222e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	68ba      	ldr	r2, [r7, #8]
 8012234:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	891a      	ldrh	r2, [r3, #8]
 801223a:	7dfb      	ldrb	r3, [r7, #23]
 801223c:	b29b      	uxth	r3, r3
 801223e:	429a      	cmp	r2, r3
 8012240:	d208      	bcs.n	8012254 <tcp_create_segment+0xa4>
 8012242:	4b30      	ldr	r3, [pc, #192]	@ (8012304 <tcp_create_segment+0x154>)
 8012244:	22b0      	movs	r2, #176	@ 0xb0
 8012246:	4934      	ldr	r1, [pc, #208]	@ (8012318 <tcp_create_segment+0x168>)
 8012248:	4830      	ldr	r0, [pc, #192]	@ (801230c <tcp_create_segment+0x15c>)
 801224a:	f009 fa6d 	bl	801b728 <iprintf>
 801224e:	2000      	movs	r0, #0
 8012250:	f009 f994 	bl	801b57c <fflush>
  seg->len = p->tot_len - optlen;
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	891a      	ldrh	r2, [r3, #8]
 8012258:	7dfb      	ldrb	r3, [r7, #23]
 801225a:	b29b      	uxth	r3, r3
 801225c:	1ad3      	subs	r3, r2, r3
 801225e:	b29a      	uxth	r2, r3
 8012260:	693b      	ldr	r3, [r7, #16]
 8012262:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
  seg->oversize_left = 0;
 8012264:	693b      	ldr	r3, [r7, #16]
 8012266:	2200      	movs	r2, #0
 8012268:	815a      	strh	r2, [r3, #10]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801226a:	2114      	movs	r1, #20
 801226c:	68b8      	ldr	r0, [r7, #8]
 801226e:	f7fa faad 	bl	800c7cc <pbuf_add_header>
 8012272:	4603      	mov	r3, r0
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00a      	beq.n	801228e <tcp_create_segment+0xde>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
 8012278:	4828      	ldr	r0, [pc, #160]	@ (801231c <tcp_create_segment+0x16c>)
 801227a:	f009 fac5 	bl	801b808 <puts>
 801227e:	2000      	movs	r0, #0
 8012280:	f009 f97c 	bl	801b57c <fflush>
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8012284:	6938      	ldr	r0, [r7, #16]
 8012286:	f7fc f9a6 	bl	800e5d6 <tcp_seg_free>
    return NULL;
 801228a:	2300      	movs	r3, #0
 801228c:	e036      	b.n	80122fc <tcp_create_segment+0x14c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	685b      	ldr	r3, [r3, #4]
 8012292:	685a      	ldr	r2, [r3, #4]
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	611a      	str	r2, [r3, #16]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	8ada      	ldrh	r2, [r3, #22]
 801229c:	693b      	ldr	r3, [r7, #16]
 801229e:	691c      	ldr	r4, [r3, #16]
 80122a0:	4610      	mov	r0, r2
 80122a2:	f7f8 fce7 	bl	800ac74 <lwip_htons>
 80122a6:	4603      	mov	r3, r0
 80122a8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	8b1a      	ldrh	r2, [r3, #24]
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	691c      	ldr	r4, [r3, #16]
 80122b2:	4610      	mov	r0, r2
 80122b4:	f7f8 fcde 	bl	800ac74 <lwip_htons>
 80122b8:	4603      	mov	r3, r0
 80122ba:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	691c      	ldr	r4, [r3, #16]
 80122c0:	6838      	ldr	r0, [r7, #0]
 80122c2:	f7f8 fcec 	bl	800ac9e <lwip_htonl>
 80122c6:	4603      	mov	r3, r0
 80122c8:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80122ca:	7dfb      	ldrb	r3, [r7, #23]
 80122cc:	089b      	lsrs	r3, r3, #2
 80122ce:	b2db      	uxtb	r3, r3
 80122d0:	3305      	adds	r3, #5
 80122d2:	b29b      	uxth	r3, r3
 80122d4:	031b      	lsls	r3, r3, #12
 80122d6:	b29a      	uxth	r2, r3
 80122d8:	79fb      	ldrb	r3, [r7, #7]
 80122da:	b29b      	uxth	r3, r3
 80122dc:	4313      	orrs	r3, r2
 80122de:	b29a      	uxth	r2, r3
 80122e0:	693b      	ldr	r3, [r7, #16]
 80122e2:	691c      	ldr	r4, [r3, #16]
 80122e4:	4610      	mov	r0, r2
 80122e6:	f7f8 fcc5 	bl	800ac74 <lwip_htons>
 80122ea:	4603      	mov	r3, r0
 80122ec:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80122ee:	693b      	ldr	r3, [r7, #16]
 80122f0:	691b      	ldr	r3, [r3, #16]
 80122f2:	2200      	movs	r2, #0
 80122f4:	749a      	strb	r2, [r3, #18]
 80122f6:	2200      	movs	r2, #0
 80122f8:	74da      	strb	r2, [r3, #19]
  return seg;
 80122fa:	693b      	ldr	r3, [r7, #16]
}
 80122fc:	4618      	mov	r0, r3
 80122fe:	371c      	adds	r7, #28
 8012300:	46bd      	mov	sp, r7
 8012302:	bd90      	pop	{r4, r7, pc}
 8012304:	080200b0 	.word	0x080200b0
 8012308:	080200e4 	.word	0x080200e4
 801230c:	08020104 	.word	0x08020104
 8012310:	0802012c 	.word	0x0802012c
 8012314:	08020150 	.word	0x08020150
 8012318:	08020170 	.word	0x08020170
 801231c:	08020188 	.word	0x08020188

08012320 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b086      	sub	sp, #24
 8012324:	af00      	add	r7, sp, #0
 8012326:	607b      	str	r3, [r7, #4]
 8012328:	4603      	mov	r3, r0
 801232a:	73fb      	strb	r3, [r7, #15]
 801232c:	460b      	mov	r3, r1
 801232e:	81bb      	strh	r3, [r7, #12]
 8012330:	4613      	mov	r3, r2
 8012332:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8012334:	89bb      	ldrh	r3, [r7, #12]
 8012336:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d108      	bne.n	8012350 <tcp_pbuf_prealloc+0x30>
 801233e:	4b34      	ldr	r3, [pc, #208]	@ (8012410 <tcp_pbuf_prealloc+0xf0>)
 8012340:	22e8      	movs	r2, #232	@ 0xe8
 8012342:	4934      	ldr	r1, [pc, #208]	@ (8012414 <tcp_pbuf_prealloc+0xf4>)
 8012344:	4834      	ldr	r0, [pc, #208]	@ (8012418 <tcp_pbuf_prealloc+0xf8>)
 8012346:	f009 f9ef 	bl	801b728 <iprintf>
 801234a:	2000      	movs	r0, #0
 801234c:	f009 f916 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8012350:	6a3b      	ldr	r3, [r7, #32]
 8012352:	2b00      	cmp	r3, #0
 8012354:	d108      	bne.n	8012368 <tcp_pbuf_prealloc+0x48>
 8012356:	4b2e      	ldr	r3, [pc, #184]	@ (8012410 <tcp_pbuf_prealloc+0xf0>)
 8012358:	22e9      	movs	r2, #233	@ 0xe9
 801235a:	4930      	ldr	r1, [pc, #192]	@ (801241c <tcp_pbuf_prealloc+0xfc>)
 801235c:	482e      	ldr	r0, [pc, #184]	@ (8012418 <tcp_pbuf_prealloc+0xf8>)
 801235e:	f009 f9e3 	bl	801b728 <iprintf>
 8012362:	2000      	movs	r0, #0
 8012364:	f009 f90a 	bl	801b57c <fflush>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8012368:	89ba      	ldrh	r2, [r7, #12]
 801236a:	897b      	ldrh	r3, [r7, #10]
 801236c:	429a      	cmp	r2, r3
 801236e:	d221      	bcs.n	80123b4 <tcp_pbuf_prealloc+0x94>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012370:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012374:	f003 0302 	and.w	r3, r3, #2
 8012378:	2b00      	cmp	r3, #0
 801237a:	d111      	bne.n	80123a0 <tcp_pbuf_prealloc+0x80>
        (!(pcb->flags & TF_NODELAY) &&
 801237c:	6a3b      	ldr	r3, [r7, #32]
 801237e:	8b5b      	ldrh	r3, [r3, #26]
 8012380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8012384:	2b00      	cmp	r3, #0
 8012386:	d115      	bne.n	80123b4 <tcp_pbuf_prealloc+0x94>
        (!(pcb->flags & TF_NODELAY) &&
 8012388:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801238c:	2b00      	cmp	r3, #0
 801238e:	d007      	beq.n	80123a0 <tcp_pbuf_prealloc+0x80>
         (!first_seg ||
          pcb->unsent != NULL ||
 8012390:	6a3b      	ldr	r3, [r7, #32]
 8012392:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8012394:	2b00      	cmp	r3, #0
 8012396:	d103      	bne.n	80123a0 <tcp_pbuf_prealloc+0x80>
          pcb->unacked != NULL))) {
 8012398:	6a3b      	ldr	r3, [r7, #32]
 801239a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 801239c:	2b00      	cmp	r3, #0
 801239e:	d009      	beq.n	80123b4 <tcp_pbuf_prealloc+0x94>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80123a0:	89bb      	ldrh	r3, [r7, #12]
 80123a2:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 80123a6:	f023 0203 	bic.w	r2, r3, #3
 80123aa:	897b      	ldrh	r3, [r7, #10]
 80123ac:	4293      	cmp	r3, r2
 80123ae:	bf28      	it	cs
 80123b0:	4613      	movcs	r3, r2
 80123b2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80123b4:	8af9      	ldrh	r1, [r7, #22]
 80123b6:	7bfb      	ldrb	r3, [r7, #15]
 80123b8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80123bc:	4618      	mov	r0, r3
 80123be:	f7f9 ff47 	bl	800c250 <pbuf_alloc>
 80123c2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80123c4:	693b      	ldr	r3, [r7, #16]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d101      	bne.n	80123ce <tcp_pbuf_prealloc+0xae>
    return NULL;
 80123ca:	2300      	movs	r3, #0
 80123cc:	e01c      	b.n	8012408 <tcp_pbuf_prealloc+0xe8>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d009      	beq.n	80123ea <tcp_pbuf_prealloc+0xca>
 80123d6:	4b0e      	ldr	r3, [pc, #56]	@ (8012410 <tcp_pbuf_prealloc+0xf0>)
 80123d8:	f240 120b 	movw	r2, #267	@ 0x10b
 80123dc:	4910      	ldr	r1, [pc, #64]	@ (8012420 <tcp_pbuf_prealloc+0x100>)
 80123de:	480e      	ldr	r0, [pc, #56]	@ (8012418 <tcp_pbuf_prealloc+0xf8>)
 80123e0:	f009 f9a2 	bl	801b728 <iprintf>
 80123e4:	2000      	movs	r0, #0
 80123e6:	f009 f8c9 	bl	801b57c <fflush>
  *oversize = p->len - length;
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	895a      	ldrh	r2, [r3, #10]
 80123ee:	89bb      	ldrh	r3, [r7, #12]
 80123f0:	1ad3      	subs	r3, r2, r3
 80123f2:	b29a      	uxth	r2, r3
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80123f8:	693b      	ldr	r3, [r7, #16]
 80123fa:	89ba      	ldrh	r2, [r7, #12]
 80123fc:	811a      	strh	r2, [r3, #8]
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	891a      	ldrh	r2, [r3, #8]
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	815a      	strh	r2, [r3, #10]
  return p;
 8012406:	693b      	ldr	r3, [r7, #16]
}
 8012408:	4618      	mov	r0, r3
 801240a:	3718      	adds	r7, #24
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	080200b0 	.word	0x080200b0
 8012414:	080201bc 	.word	0x080201bc
 8012418:	08020104 	.word	0x08020104
 801241c:	080201e0 	.word	0x080201e0
 8012420:	08020200 	.word	0x08020200

08012424 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	460b      	mov	r3, r1
 801242e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d109      	bne.n	801244a <tcp_write_checks+0x26>
 8012436:	4b4b      	ldr	r3, [pc, #300]	@ (8012564 <tcp_write_checks+0x140>)
 8012438:	f240 1233 	movw	r2, #307	@ 0x133
 801243c:	494a      	ldr	r1, [pc, #296]	@ (8012568 <tcp_write_checks+0x144>)
 801243e:	484b      	ldr	r0, [pc, #300]	@ (801256c <tcp_write_checks+0x148>)
 8012440:	f009 f972 	bl	801b728 <iprintf>
 8012444:	2000      	movs	r0, #0
 8012446:	f009 f899 	bl	801b57c <fflush>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	7d1b      	ldrb	r3, [r3, #20]
 801244e:	2b04      	cmp	r3, #4
 8012450:	d014      	beq.n	801247c <tcp_write_checks+0x58>
      (pcb->state != CLOSE_WAIT) &&
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8012456:	2b07      	cmp	r3, #7
 8012458:	d010      	beq.n	801247c <tcp_write_checks+0x58>
      (pcb->state != SYN_SENT) &&
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801245e:	2b02      	cmp	r3, #2
 8012460:	d00c      	beq.n	801247c <tcp_write_checks+0x58>
      (pcb->state != SYN_RCVD)) {
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8012466:	2b03      	cmp	r3, #3
 8012468:	d008      	beq.n	801247c <tcp_write_checks+0x58>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
 801246a:	4841      	ldr	r0, [pc, #260]	@ (8012570 <tcp_write_checks+0x14c>)
 801246c:	f009 f9cc 	bl	801b808 <puts>
 8012470:	2000      	movs	r0, #0
 8012472:	f009 f883 	bl	801b57c <fflush>
    return ERR_CONN;
 8012476:	f06f 030a 	mvn.w	r3, #10
 801247a:	e06e      	b.n	801255a <tcp_write_checks+0x136>
  } else if (len == 0) {
 801247c:	887b      	ldrh	r3, [r7, #2]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d101      	bne.n	8012486 <tcp_write_checks+0x62>
    return ERR_OK;
 8012482:	2300      	movs	r3, #0
 8012484:	e069      	b.n	801255a <tcp_write_checks+0x136>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801248c:	887a      	ldrh	r2, [r7, #2]
 801248e:	429a      	cmp	r2, r3
 8012490:	d914      	bls.n	80124bc <tcp_write_checks+0x98>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
 8012492:	8879      	ldrh	r1, [r7, #2]
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801249a:	461a      	mov	r2, r3
 801249c:	4835      	ldr	r0, [pc, #212]	@ (8012574 <tcp_write_checks+0x150>)
 801249e:	f009 f943 	bl	801b728 <iprintf>
 80124a2:	2000      	movs	r0, #0
 80124a4:	f009 f86a 	bl	801b57c <fflush>
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	8b5b      	ldrh	r3, [r3, #26]
 80124ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124b0:	b29a      	uxth	r2, r3
 80124b2:	687b      	ldr	r3, [r7, #4]
 80124b4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80124b6:	f04f 33ff 	mov.w	r3, #4294967295
 80124ba:	e04e      	b.n	801255a <tcp_write_checks+0x136>
  }

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124c2:	4619      	mov	r1, r3
 80124c4:	482c      	ldr	r0, [pc, #176]	@ (8012578 <tcp_write_checks+0x154>)
 80124c6:	f009 f92f 	bl	801b728 <iprintf>
 80124ca:	2000      	movs	r0, #0
 80124cc:	f009 f856 	bl	801b57c <fflush>

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124d6:	2b08      	cmp	r3, #8
 80124d8:	d914      	bls.n	8012504 <tcp_write_checks+0xe0>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80124e0:	2209      	movs	r2, #9
 80124e2:	4619      	mov	r1, r3
 80124e4:	4825      	ldr	r0, [pc, #148]	@ (801257c <tcp_write_checks+0x158>)
 80124e6:	f009 f91f 	bl	801b728 <iprintf>
 80124ea:	2000      	movs	r0, #0
 80124ec:	f009 f846 	bl	801b57c <fflush>
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	8b5b      	ldrh	r3, [r3, #26]
 80124f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80124f8:	b29a      	uxth	r2, r3
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 80124fe:	f04f 33ff 	mov.w	r3, #4294967295
 8012502:	e02a      	b.n	801255a <tcp_write_checks+0x136>
  }
  if (pcb->snd_queuelen != 0) {
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801250a:	2b00      	cmp	r3, #0
 801250c:	d012      	beq.n	8012534 <tcp_write_checks+0x110>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012512:	2b00      	cmp	r3, #0
 8012514:	d120      	bne.n	8012558 <tcp_write_checks+0x134>
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801251a:	2b00      	cmp	r3, #0
 801251c:	d11c      	bne.n	8012558 <tcp_write_checks+0x134>
 801251e:	4b11      	ldr	r3, [pc, #68]	@ (8012564 <tcp_write_checks+0x140>)
 8012520:	f240 1255 	movw	r2, #341	@ 0x155
 8012524:	4916      	ldr	r1, [pc, #88]	@ (8012580 <tcp_write_checks+0x15c>)
 8012526:	4811      	ldr	r0, [pc, #68]	@ (801256c <tcp_write_checks+0x148>)
 8012528:	f009 f8fe 	bl	801b728 <iprintf>
 801252c:	2000      	movs	r0, #0
 801252e:	f009 f825 	bl	801b57c <fflush>
 8012532:	e011      	b.n	8012558 <tcp_write_checks+0x134>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012538:	2b00      	cmp	r3, #0
 801253a:	d103      	bne.n	8012544 <tcp_write_checks+0x120>
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012540:	2b00      	cmp	r3, #0
 8012542:	d009      	beq.n	8012558 <tcp_write_checks+0x134>
 8012544:	4b07      	ldr	r3, [pc, #28]	@ (8012564 <tcp_write_checks+0x140>)
 8012546:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 801254a:	490e      	ldr	r1, [pc, #56]	@ (8012584 <tcp_write_checks+0x160>)
 801254c:	4807      	ldr	r0, [pc, #28]	@ (801256c <tcp_write_checks+0x148>)
 801254e:	f009 f8eb 	bl	801b728 <iprintf>
 8012552:	2000      	movs	r0, #0
 8012554:	f009 f812 	bl	801b57c <fflush>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8012558:	2300      	movs	r3, #0
}
 801255a:	4618      	mov	r0, r3
 801255c:	3708      	adds	r7, #8
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	080200b0 	.word	0x080200b0
 8012568:	08020214 	.word	0x08020214
 801256c:	08020104 	.word	0x08020104
 8012570:	08020234 	.word	0x08020234
 8012574:	08020258 	.word	0x08020258
 8012578:	0802028c 	.word	0x0802028c
 801257c:	080202a8 	.word	0x080202a8
 8012580:	080202d4 	.word	0x080202d4
 8012584:	08020310 	.word	0x08020310

08012588 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8012588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801258a:	b09b      	sub	sp, #108	@ 0x6c
 801258c:	af04      	add	r7, sp, #16
 801258e:	60f8      	str	r0, [r7, #12]
 8012590:	60b9      	str	r1, [r7, #8]
 8012592:	4611      	mov	r1, r2
 8012594:	461a      	mov	r2, r3
 8012596:	460b      	mov	r3, r1
 8012598:	80fb      	strh	r3, [r7, #6]
 801259a:	4613      	mov	r3, r2
 801259c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801259e:	2300      	movs	r3, #0
 80125a0:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80125a2:	2300      	movs	r3, #0
 80125a4:	653b      	str	r3, [r7, #80]	@ 0x50
 80125a6:	2300      	movs	r3, #0
 80125a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80125aa:	2300      	movs	r3, #0
 80125ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125ae:	2300      	movs	r3, #0
 80125b0:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80125b2:	2300      	movs	r3, #0
 80125b4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80125b8:	2300      	movs	r3, #0
 80125ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80125be:	2300      	movs	r3, #0
 80125c0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80125ca:	2300      	movs	r3, #0
 80125cc:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d10d      	bne.n	80125f0 <tcp_write+0x68>
 80125d4:	4b96      	ldr	r3, [pc, #600]	@ (8012830 <tcp_write+0x2a8>)
 80125d6:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 80125da:	4996      	ldr	r1, [pc, #600]	@ (8012834 <tcp_write+0x2ac>)
 80125dc:	4896      	ldr	r0, [pc, #600]	@ (8012838 <tcp_write+0x2b0>)
 80125de:	f009 f8a3 	bl	801b728 <iprintf>
 80125e2:	2000      	movs	r0, #0
 80125e4:	f008 ffca 	bl	801b57c <fflush>
 80125e8:	f06f 030f 	mvn.w	r3, #15
 80125ec:	f000 bc15 	b.w	8012e1a <tcp_write+0x892>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80125f6:	085b      	lsrs	r3, r3, #1
 80125f8:	b29a      	uxth	r2, r3
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80125fe:	4293      	cmp	r3, r2
 8012600:	bf28      	it	cs
 8012602:	4613      	movcs	r3, r2
 8012604:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8012606:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012608:	2b00      	cmp	r3, #0
 801260a:	d102      	bne.n	8012612 <tcp_write+0x8a>
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012610:	e000      	b.n	8012614 <tcp_write+0x8c>
 8012612:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012614:	84bb      	strh	r3, [r7, #36]	@ 0x24
#if LWIP_NETIF_TX_SINGLE_PBUF
  /* Always copy to try to create single pbufs for TX */
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
 8012616:	88fa      	ldrh	r2, [r7, #6]
 8012618:	797b      	ldrb	r3, [r7, #5]
 801261a:	9300      	str	r3, [sp, #0]
 801261c:	4613      	mov	r3, r2
 801261e:	68ba      	ldr	r2, [r7, #8]
 8012620:	68f9      	ldr	r1, [r7, #12]
 8012622:	4886      	ldr	r0, [pc, #536]	@ (801283c <tcp_write+0x2b4>)
 8012624:	f009 f880 	bl	801b728 <iprintf>
 8012628:	2000      	movs	r0, #0
 801262a:	f008 ffa7 	bl	801b57c <fflush>
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d10c      	bne.n	801264e <tcp_write+0xc6>
 8012634:	4b7e      	ldr	r3, [pc, #504]	@ (8012830 <tcp_write+0x2a8>)
 8012636:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801263a:	4981      	ldr	r1, [pc, #516]	@ (8012840 <tcp_write+0x2b8>)
 801263c:	487e      	ldr	r0, [pc, #504]	@ (8012838 <tcp_write+0x2b0>)
 801263e:	f009 f873 	bl	801b728 <iprintf>
 8012642:	2000      	movs	r0, #0
 8012644:	f008 ff9a 	bl	801b57c <fflush>
 8012648:	f06f 030f 	mvn.w	r3, #15
 801264c:	e3e5      	b.n	8012e1a <tcp_write+0x892>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801264e:	88fb      	ldrh	r3, [r7, #6]
 8012650:	4619      	mov	r1, r3
 8012652:	68f8      	ldr	r0, [r7, #12]
 8012654:	f7ff fee6 	bl	8012424 <tcp_write_checks>
 8012658:	4603      	mov	r3, r0
 801265a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801265e:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8012662:	2b00      	cmp	r3, #0
 8012664:	d002      	beq.n	801266c <tcp_write+0xe4>
    return err;
 8012666:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 801266a:	e3d6      	b.n	8012e1a <tcp_write+0x892>
  }
  queuelen = pcb->snd_queuelen;
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012672:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012676:	2300      	movs	r3, #0
 8012678:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801267c:	68fb      	ldr	r3, [r7, #12]
 801267e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012680:	2b00      	cmp	r3, #0
 8012682:	f000 8137 	beq.w	80128f4 <tcp_write+0x36c>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012686:	68fb      	ldr	r3, [r7, #12]
 8012688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801268a:	653b      	str	r3, [r7, #80]	@ 0x50
 801268c:	e002      	b.n	8012694 <tcp_write+0x10c>
         last_unsent = last_unsent->next);
 801268e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1f8      	bne.n	801268e <tcp_write+0x106>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801269c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801269e:	7b1b      	ldrb	r3, [r3, #12]
 80126a0:	009b      	lsls	r3, r3, #2
 80126a2:	b29b      	uxth	r3, r3
 80126a4:	f003 0304 	and.w	r3, r3, #4
 80126a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80126aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80126ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126ae:	891b      	ldrh	r3, [r3, #8]
 80126b0:	4619      	mov	r1, r3
 80126b2:	8c3b      	ldrh	r3, [r7, #32]
 80126b4:	440b      	add	r3, r1
 80126b6:	429a      	cmp	r2, r3
 80126b8:	da09      	bge.n	80126ce <tcp_write+0x146>
 80126ba:	4b5d      	ldr	r3, [pc, #372]	@ (8012830 <tcp_write+0x2a8>)
 80126bc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 80126c0:	4960      	ldr	r1, [pc, #384]	@ (8012844 <tcp_write+0x2bc>)
 80126c2:	485d      	ldr	r0, [pc, #372]	@ (8012838 <tcp_write+0x2b0>)
 80126c4:	f009 f830 	bl	801b728 <iprintf>
 80126c8:	2000      	movs	r0, #0
 80126ca:	f008 ff57 	bl	801b57c <fflush>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80126ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126d0:	891a      	ldrh	r2, [r3, #8]
 80126d2:	8c3b      	ldrh	r3, [r7, #32]
 80126d4:	4413      	add	r3, r2
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80126da:	1ad3      	subs	r3, r2, r3
 80126dc:	873b      	strh	r3, [r7, #56]	@ 0x38
     * function.
     */
#if TCP_OVERSIZE
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	f8b3 2068 	ldrh.w	r2, [r3, #104]	@ 0x68
 80126e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126e6:	895b      	ldrh	r3, [r3, #10]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d009      	beq.n	8012700 <tcp_write+0x178>
 80126ec:	4b50      	ldr	r3, [pc, #320]	@ (8012830 <tcp_write+0x2a8>)
 80126ee:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80126f2:	4955      	ldr	r1, [pc, #340]	@ (8012848 <tcp_write+0x2c0>)
 80126f4:	4850      	ldr	r0, [pc, #320]	@ (8012838 <tcp_write+0x2b0>)
 80126f6:	f009 f817 	bl	801b728 <iprintf>
 80126fa:	2000      	movs	r0, #0
 80126fc:	f008 ff3e 	bl	801b57c <fflush>
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8012706:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8012708:	8a7b      	ldrh	r3, [r7, #18]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d029      	beq.n	8012762 <tcp_write+0x1da>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801270e:	8a7b      	ldrh	r3, [r7, #18]
 8012710:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8012712:	429a      	cmp	r2, r3
 8012714:	d209      	bcs.n	801272a <tcp_write+0x1a2>
 8012716:	4b46      	ldr	r3, [pc, #280]	@ (8012830 <tcp_write+0x2a8>)
 8012718:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 801271c:	494b      	ldr	r1, [pc, #300]	@ (801284c <tcp_write+0x2c4>)
 801271e:	4846      	ldr	r0, [pc, #280]	@ (8012838 <tcp_write+0x2b0>)
 8012720:	f009 f802 	bl	801b728 <iprintf>
 8012724:	2000      	movs	r0, #0
 8012726:	f008 ff29 	bl	801b57c <fflush>
      seg = last_unsent;
 801272a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801272c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801272e:	8a7b      	ldrh	r3, [r7, #18]
 8012730:	88fa      	ldrh	r2, [r7, #6]
 8012732:	4293      	cmp	r3, r2
 8012734:	bf28      	it	cs
 8012736:	4613      	movcs	r3, r2
 8012738:	b29b      	uxth	r3, r3
 801273a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801273c:	4293      	cmp	r3, r2
 801273e:	bf28      	it	cs
 8012740:	4613      	movcs	r3, r2
 8012742:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8012744:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012748:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801274a:	4413      	add	r3, r2
 801274c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8012750:	8a7a      	ldrh	r2, [r7, #18]
 8012752:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012754:	1ad3      	subs	r3, r2, r3
 8012756:	b29b      	uxth	r3, r3
 8012758:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801275a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801275c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8012762:	8a7b      	ldrh	r3, [r7, #18]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d00e      	beq.n	8012786 <tcp_write+0x1fe>
 8012768:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801276c:	88fb      	ldrh	r3, [r7, #6]
 801276e:	429a      	cmp	r2, r3
 8012770:	d009      	beq.n	8012786 <tcp_write+0x1fe>
 8012772:	4b2f      	ldr	r3, [pc, #188]	@ (8012830 <tcp_write+0x2a8>)
 8012774:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012778:	4935      	ldr	r1, [pc, #212]	@ (8012850 <tcp_write+0x2c8>)
 801277a:	482f      	ldr	r0, [pc, #188]	@ (8012838 <tcp_write+0x2b0>)
 801277c:	f008 ffd4 	bl	801b728 <iprintf>
 8012780:	2000      	movs	r0, #0
 8012782:	f008 fefb 	bl	801b57c <fflush>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8012786:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801278a:	88fb      	ldrh	r3, [r7, #6]
 801278c:	429a      	cmp	r2, r3
 801278e:	f080 81ea 	bcs.w	8012b66 <tcp_write+0x5de>
 8012792:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8012794:	2b00      	cmp	r3, #0
 8012796:	f000 81e6 	beq.w	8012b66 <tcp_write+0x5de>
 801279a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801279c:	891b      	ldrh	r3, [r3, #8]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	f000 81e1 	beq.w	8012b66 <tcp_write+0x5de>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80127a4:	88fa      	ldrh	r2, [r7, #6]
 80127a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80127aa:	1ad2      	subs	r2, r2, r3
 80127ac:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80127ae:	4293      	cmp	r3, r2
 80127b0:	bfa8      	it	ge
 80127b2:	4613      	movge	r3, r2
 80127b4:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80127b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80127b8:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80127ba:	797b      	ldrb	r3, [r7, #5]
 80127bc:	f003 0301 	and.w	r3, r3, #1
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d031      	beq.n	8012828 <tcp_write+0x2a0>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80127c4:	f107 0012 	add.w	r0, r7, #18
 80127c8:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80127ca:	8bf9      	ldrh	r1, [r7, #30]
 80127cc:	2301      	movs	r3, #1
 80127ce:	9302      	str	r3, [sp, #8]
 80127d0:	797b      	ldrb	r3, [r7, #5]
 80127d2:	9301      	str	r3, [sp, #4]
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	9300      	str	r3, [sp, #0]
 80127d8:	4603      	mov	r3, r0
 80127da:	2000      	movs	r0, #0
 80127dc:	f7ff fda0 	bl	8012320 <tcp_pbuf_prealloc>
 80127e0:	6578      	str	r0, [r7, #84]	@ 0x54
 80127e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d108      	bne.n	80127fa <tcp_write+0x272>
          LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80127e8:	8bfb      	ldrh	r3, [r7, #30]
 80127ea:	4619      	mov	r1, r3
 80127ec:	4819      	ldr	r0, [pc, #100]	@ (8012854 <tcp_write+0x2cc>)
 80127ee:	f008 ff9b 	bl	801b728 <iprintf>
 80127f2:	2000      	movs	r0, #0
 80127f4:	f008 fec2 	bl	801b57c <fflush>
                      ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n",
                       seglen));
          goto memerr;
 80127f8:	e2d9      	b.n	8012dae <tcp_write+0x826>
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
 80127fa:	8a7b      	ldrh	r3, [r7, #18]
 80127fc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80127fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012800:	6858      	ldr	r0, [r3, #4]
 8012802:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012806:	68ba      	ldr	r2, [r7, #8]
 8012808:	4413      	add	r3, r2
 801280a:	8bfa      	ldrh	r2, [r7, #30]
 801280c:	4619      	mov	r1, r3
 801280e:	f009 f972 	bl	801baf6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8012812:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012814:	f7fa f940 	bl	800ca98 <pbuf_clen>
 8012818:	4603      	mov	r3, r0
 801281a:	461a      	mov	r2, r3
 801281c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012820:	4413      	add	r3, r2
 8012822:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8012826:	e05e      	b.n	80128e6 <tcp_write+0x35e>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8012828:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	637b      	str	r3, [r7, #52]	@ 0x34
 801282e:	e016      	b.n	801285e <tcp_write+0x2d6>
 8012830:	080200b0 	.word	0x080200b0
 8012834:	08020344 	.word	0x08020344
 8012838:	08020104 	.word	0x08020104
 801283c:	0802035c 	.word	0x0802035c
 8012840:	08020390 	.word	0x08020390
 8012844:	080203c4 	.word	0x080203c4
 8012848:	080203dc 	.word	0x080203dc
 801284c:	0802040c 	.word	0x0802040c
 8012850:	0802042c 	.word	0x0802042c
 8012854:	0802044c 	.word	0x0802044c
 8012858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	637b      	str	r3, [r7, #52]	@ 0x34
 801285e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d1f8      	bne.n	8012858 <tcp_write+0x2d0>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8012866:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012868:	7b1b      	ldrb	r3, [r3, #12]
 801286a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 801286e:	2b00      	cmp	r3, #0
 8012870:	d118      	bne.n	80128a4 <tcp_write+0x31c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8012872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012874:	685b      	ldr	r3, [r3, #4]
 8012876:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012878:	8952      	ldrh	r2, [r2, #10]
 801287a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801287c:	68ba      	ldr	r2, [r7, #8]
 801287e:	429a      	cmp	r2, r3
 8012880:	d110      	bne.n	80128a4 <tcp_write+0x31c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8012882:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012886:	2b00      	cmp	r3, #0
 8012888:	d009      	beq.n	801289e <tcp_write+0x316>
 801288a:	4ba3      	ldr	r3, [pc, #652]	@ (8012b18 <tcp_write+0x590>)
 801288c:	f240 2231 	movw	r2, #561	@ 0x231
 8012890:	49a2      	ldr	r1, [pc, #648]	@ (8012b1c <tcp_write+0x594>)
 8012892:	48a3      	ldr	r0, [pc, #652]	@ (8012b20 <tcp_write+0x598>)
 8012894:	f008 ff48 	bl	801b728 <iprintf>
 8012898:	2000      	movs	r0, #0
 801289a:	f008 fe6f 	bl	801b57c <fflush>
          extendlen = seglen;
 801289e:	8bfb      	ldrh	r3, [r7, #30]
 80128a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80128a2:	e020      	b.n	80128e6 <tcp_write+0x35e>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80128a4:	8bfb      	ldrh	r3, [r7, #30]
 80128a6:	2201      	movs	r2, #1
 80128a8:	4619      	mov	r1, r3
 80128aa:	2000      	movs	r0, #0
 80128ac:	f7f9 fcd0 	bl	800c250 <pbuf_alloc>
 80128b0:	6578      	str	r0, [r7, #84]	@ 0x54
 80128b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d106      	bne.n	80128c6 <tcp_write+0x33e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 80128b8:	489a      	ldr	r0, [pc, #616]	@ (8012b24 <tcp_write+0x59c>)
 80128ba:	f008 ffa5 	bl	801b808 <puts>
 80128be:	2000      	movs	r0, #0
 80128c0:	f008 fe5c 	bl	801b57c <fflush>
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
 80128c4:	e273      	b.n	8012dae <tcp_write+0x826>
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80128c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80128ca:	68ba      	ldr	r2, [r7, #8]
 80128cc:	441a      	add	r2, r3
 80128ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80128d0:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80128d2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80128d4:	f7fa f8e0 	bl	800ca98 <pbuf_clen>
 80128d8:	4603      	mov	r3, r0
 80128da:	461a      	mov	r2, r3
 80128dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80128e0:	4413      	add	r3, r2
 80128e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80128e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80128ea:	8bfb      	ldrh	r3, [r7, #30]
 80128ec:	4413      	add	r3, r2
 80128ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80128f2:	e138      	b.n	8012b66 <tcp_write+0x5de>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	f000 8133 	beq.w	8012b66 <tcp_write+0x5de>
 8012900:	4b85      	ldr	r3, [pc, #532]	@ (8012b18 <tcp_write+0x590>)
 8012902:	f240 224a 	movw	r2, #586	@ 0x24a
 8012906:	4988      	ldr	r1, [pc, #544]	@ (8012b28 <tcp_write+0x5a0>)
 8012908:	4885      	ldr	r0, [pc, #532]	@ (8012b20 <tcp_write+0x598>)
 801290a:	f008 ff0d 	bl	801b728 <iprintf>
 801290e:	2000      	movs	r0, #0
 8012910:	f008 fe34 	bl	801b57c <fflush>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012914:	e127      	b.n	8012b66 <tcp_write+0x5de>
    struct pbuf *p;
    u16_t left = len - pos;
 8012916:	88fa      	ldrh	r2, [r7, #6]
 8012918:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801291c:	1ad3      	subs	r3, r2, r3
 801291e:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012920:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012924:	b29b      	uxth	r3, r3
 8012926:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012928:	1ad3      	subs	r3, r2, r3
 801292a:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801292c:	8b7a      	ldrh	r2, [r7, #26]
 801292e:	8bbb      	ldrh	r3, [r7, #28]
 8012930:	4293      	cmp	r3, r2
 8012932:	bf28      	it	cs
 8012934:	4613      	movcs	r3, r2
 8012936:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012938:	797b      	ldrb	r3, [r7, #5]
 801293a:	f003 0301 	and.w	r3, r3, #1
 801293e:	2b00      	cmp	r3, #0
 8012940:	d041      	beq.n	80129c6 <tcp_write+0x43e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8012942:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012946:	b29a      	uxth	r2, r3
 8012948:	8b3b      	ldrh	r3, [r7, #24]
 801294a:	4413      	add	r3, r2
 801294c:	b299      	uxth	r1, r3
 801294e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012950:	2b00      	cmp	r3, #0
 8012952:	bf0c      	ite	eq
 8012954:	2301      	moveq	r3, #1
 8012956:	2300      	movne	r3, #0
 8012958:	b2db      	uxtb	r3, r3
 801295a:	f107 0012 	add.w	r0, r7, #18
 801295e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8012960:	9302      	str	r3, [sp, #8]
 8012962:	797b      	ldrb	r3, [r7, #5]
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	4603      	mov	r3, r0
 801296c:	2036      	movs	r0, #54	@ 0x36
 801296e:	f7ff fcd7 	bl	8012320 <tcp_pbuf_prealloc>
 8012972:	6338      	str	r0, [r7, #48]	@ 0x30
 8012974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012976:	2b00      	cmp	r3, #0
 8012978:	d108      	bne.n	801298c <tcp_write+0x404>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
 801297a:	8b3b      	ldrh	r3, [r7, #24]
 801297c:	4619      	mov	r1, r3
 801297e:	486b      	ldr	r0, [pc, #428]	@ (8012b2c <tcp_write+0x5a4>)
 8012980:	f008 fed2 	bl	801b728 <iprintf>
 8012984:	2000      	movs	r0, #0
 8012986:	f008 fdf9 	bl	801b57c <fflush>
        goto memerr;
 801298a:	e210      	b.n	8012dae <tcp_write+0x826>
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801298c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801298e:	895b      	ldrh	r3, [r3, #10]
 8012990:	8b3a      	ldrh	r2, [r7, #24]
 8012992:	429a      	cmp	r2, r3
 8012994:	d909      	bls.n	80129aa <tcp_write+0x422>
 8012996:	4b60      	ldr	r3, [pc, #384]	@ (8012b18 <tcp_write+0x590>)
 8012998:	f240 2266 	movw	r2, #614	@ 0x266
 801299c:	4964      	ldr	r1, [pc, #400]	@ (8012b30 <tcp_write+0x5a8>)
 801299e:	4860      	ldr	r0, [pc, #384]	@ (8012b20 <tcp_write+0x598>)
 80129a0:	f008 fec2 	bl	801b728 <iprintf>
 80129a4:	2000      	movs	r0, #0
 80129a6:	f008 fde9 	bl	801b57c <fflush>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80129aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80129ac:	685a      	ldr	r2, [r3, #4]
 80129ae:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80129b2:	18d0      	adds	r0, r2, r3
 80129b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80129b8:	68ba      	ldr	r2, [r7, #8]
 80129ba:	4413      	add	r3, r2
 80129bc:	8b3a      	ldrh	r2, [r7, #24]
 80129be:	4619      	mov	r1, r3
 80129c0:	f009 f899 	bl	801baf6 <memcpy>
 80129c4:	e03e      	b.n	8012a44 <tcp_write+0x4bc>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80129c6:	8a7b      	ldrh	r3, [r7, #18]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d009      	beq.n	80129e0 <tcp_write+0x458>
 80129cc:	4b52      	ldr	r3, [pc, #328]	@ (8012b18 <tcp_write+0x590>)
 80129ce:	f240 2271 	movw	r2, #625	@ 0x271
 80129d2:	4958      	ldr	r1, [pc, #352]	@ (8012b34 <tcp_write+0x5ac>)
 80129d4:	4852      	ldr	r0, [pc, #328]	@ (8012b20 <tcp_write+0x598>)
 80129d6:	f008 fea7 	bl	801b728 <iprintf>
 80129da:	2000      	movs	r0, #0
 80129dc:	f008 fdce 	bl	801b57c <fflush>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80129e0:	8b3b      	ldrh	r3, [r7, #24]
 80129e2:	2201      	movs	r2, #1
 80129e4:	4619      	mov	r1, r3
 80129e6:	2036      	movs	r0, #54	@ 0x36
 80129e8:	f7f9 fc32 	bl	800c250 <pbuf_alloc>
 80129ec:	6178      	str	r0, [r7, #20]
 80129ee:	697b      	ldr	r3, [r7, #20]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d106      	bne.n	8012a02 <tcp_write+0x47a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
 80129f4:	484b      	ldr	r0, [pc, #300]	@ (8012b24 <tcp_write+0x59c>)
 80129f6:	f008 ff07 	bl	801b808 <puts>
 80129fa:	2000      	movs	r0, #0
 80129fc:	f008 fdbe 	bl	801b57c <fflush>
        goto memerr;
 8012a00:	e1d5      	b.n	8012dae <tcp_write+0x826>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012a02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012a06:	68ba      	ldr	r2, [r7, #8]
 8012a08:	441a      	add	r2, r3
 8012a0a:	697b      	ldr	r3, [r7, #20]
 8012a0c:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012a0e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8012a12:	b29b      	uxth	r3, r3
 8012a14:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012a18:	4619      	mov	r1, r3
 8012a1a:	2036      	movs	r0, #54	@ 0x36
 8012a1c:	f7f9 fc18 	bl	800c250 <pbuf_alloc>
 8012a20:	6338      	str	r0, [r7, #48]	@ 0x30
 8012a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d109      	bne.n	8012a3c <tcp_write+0x4b4>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012a28:	6978      	ldr	r0, [r7, #20]
 8012a2a:	f7f9 ff77 	bl	800c91c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
 8012a2e:	4842      	ldr	r0, [pc, #264]	@ (8012b38 <tcp_write+0x5b0>)
 8012a30:	f008 feea 	bl	801b808 <puts>
 8012a34:	2000      	movs	r0, #0
 8012a36:	f008 fda1 	bl	801b57c <fflush>
        goto memerr;
 8012a3a:	e1b8      	b.n	8012dae <tcp_write+0x826>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8012a3c:	6979      	ldr	r1, [r7, #20]
 8012a3e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a40:	f7fa f86e 	bl	800cb20 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a46:	f7fa f827 	bl	800ca98 <pbuf_clen>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	461a      	mov	r2, r3
 8012a4e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012a52:	4413      	add	r3, r2
 8012a54:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8012a58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012a5c:	2b09      	cmp	r3, #9
 8012a5e:	d90d      	bls.n	8012a7c <tcp_write+0x4f4>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
 8012a60:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8012a64:	2209      	movs	r2, #9
 8012a66:	4619      	mov	r1, r3
 8012a68:	4834      	ldr	r0, [pc, #208]	@ (8012b3c <tcp_write+0x5b4>)
 8012a6a:	f008 fe5d 	bl	801b728 <iprintf>
 8012a6e:	2000      	movs	r0, #0
 8012a70:	f008 fd84 	bl	801b57c <fflush>
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8012a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012a76:	f7f9 ff51 	bl	800c91c <pbuf_free>
      goto memerr;
 8012a7a:	e198      	b.n	8012dae <tcp_write+0x826>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012a80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8012a84:	441a      	add	r2, r3
 8012a86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a8a:	9300      	str	r3, [sp, #0]
 8012a8c:	4613      	mov	r3, r2
 8012a8e:	2200      	movs	r2, #0
 8012a90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012a92:	68f8      	ldr	r0, [r7, #12]
 8012a94:	f7ff fb8c 	bl	80121b0 <tcp_create_segment>
 8012a98:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8012a9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	f000 8185 	beq.w	8012dac <tcp_write+0x824>
      goto memerr;
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = oversize;
 8012aa2:	8a7a      	ldrh	r2, [r7, #18]
 8012aa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012aa6:	815a      	strh	r2, [r3, #10]
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8012aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d102      	bne.n	8012ab4 <tcp_write+0x52c>
      queue = seg;
 8012aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8012ab2:	e00f      	b.n	8012ad4 <tcp_write+0x54c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8012ab4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d109      	bne.n	8012ace <tcp_write+0x546>
 8012aba:	4b17      	ldr	r3, [pc, #92]	@ (8012b18 <tcp_write+0x590>)
 8012abc:	f240 22ab 	movw	r2, #683	@ 0x2ab
 8012ac0:	491f      	ldr	r1, [pc, #124]	@ (8012b40 <tcp_write+0x5b8>)
 8012ac2:	4817      	ldr	r0, [pc, #92]	@ (8012b20 <tcp_write+0x598>)
 8012ac4:	f008 fe30 	bl	801b728 <iprintf>
 8012ac8:	2000      	movs	r0, #0
 8012aca:	f008 fd57 	bl	801b57c <fflush>
      prev_seg->next = seg;
 8012ace:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012ad0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012ad2:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8012ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ad6:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
 8012ad8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ada:	691b      	ldr	r3, [r3, #16]
 8012adc:	685b      	ldr	r3, [r3, #4]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f7f8 f8dd 	bl	800ac9e <lwip_htonl>
 8012ae4:	4605      	mov	r5, r0
 8012ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	4618      	mov	r0, r3
 8012aee:	f7f8 f8d6 	bl	800ac9e <lwip_htonl>
 8012af2:	4604      	mov	r4, r0
 8012af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012af6:	891b      	ldrh	r3, [r3, #8]
 8012af8:	461e      	mov	r6, r3
 8012afa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012afc:	691b      	ldr	r3, [r3, #16]
 8012afe:	899b      	ldrh	r3, [r3, #12]
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7f8 f8b6 	bl	800ac74 <lwip_htons>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	f003 0303 	and.w	r3, r3, #3
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d017      	beq.n	8012b44 <tcp_write+0x5bc>
 8012b14:	2301      	movs	r3, #1
 8012b16:	e016      	b.n	8012b46 <tcp_write+0x5be>
 8012b18:	080200b0 	.word	0x080200b0
 8012b1c:	0802048c 	.word	0x0802048c
 8012b20:	08020104 	.word	0x08020104
 8012b24:	080204b8 	.word	0x080204b8
 8012b28:	080204f0 	.word	0x080204f0
 8012b2c:	0802044c 	.word	0x0802044c
 8012b30:	08020520 	.word	0x08020520
 8012b34:	08020560 	.word	0x08020560
 8012b38:	08020570 	.word	0x08020570
 8012b3c:	080205a8 	.word	0x080205a8
 8012b40:	080205cc 	.word	0x080205cc
 8012b44:	2300      	movs	r3, #0
 8012b46:	4433      	add	r3, r6
 8012b48:	4423      	add	r3, r4
 8012b4a:	461a      	mov	r2, r3
 8012b4c:	4629      	mov	r1, r5
 8012b4e:	488f      	ldr	r0, [pc, #572]	@ (8012d8c <tcp_write+0x804>)
 8012b50:	f008 fdea 	bl	801b728 <iprintf>
 8012b54:	2000      	movs	r0, #0
 8012b56:	f008 fd11 	bl	801b57c <fflush>
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8012b5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012b5e:	8b3b      	ldrh	r3, [r7, #24]
 8012b60:	4413      	add	r3, r2
 8012b62:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 8012b66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8012b6a:	88fb      	ldrh	r3, [r7, #6]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	f4ff aed2 	bcc.w	8012916 <tcp_write+0x38e>
  /*
   * All three segmentation phases were successful. We can commit the
   * transaction.
   */
#if TCP_OVERSIZE_DBGCHECK
  if ((last_unsent != NULL) && (oversize_add != 0)) {
 8012b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d009      	beq.n	8012b8c <tcp_write+0x604>
 8012b78:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d006      	beq.n	8012b8c <tcp_write+0x604>
    last_unsent->oversize_left += oversize_add;
 8012b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b80:	895a      	ldrh	r2, [r3, #10]
 8012b82:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8012b84:	4413      	add	r3, r2
 8012b86:	b29a      	uxth	r2, r3
 8012b88:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b8a:	815a      	strh	r2, [r3, #10]
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012b8c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d042      	beq.n	8012c18 <tcp_write+0x690>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012b92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012b94:	685b      	ldr	r3, [r3, #4]
 8012b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012b98:	e01e      	b.n	8012bd8 <tcp_write+0x650>
      p->tot_len += oversize_used;
 8012b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b9c:	891a      	ldrh	r2, [r3, #8]
 8012b9e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012ba0:	4413      	add	r3, r2
 8012ba2:	b29a      	uxth	r2, r3
 8012ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ba6:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8012ba8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d110      	bne.n	8012bd2 <tcp_write+0x64a>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bb2:	685b      	ldr	r3, [r3, #4]
 8012bb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012bb6:	8952      	ldrh	r2, [r2, #10]
 8012bb8:	4413      	add	r3, r2
 8012bba:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012bbc:	68b9      	ldr	r1, [r7, #8]
 8012bbe:	4618      	mov	r0, r3
 8012bc0:	f008 ff99 	bl	801baf6 <memcpy>
        p->len += oversize_used;
 8012bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bc6:	895a      	ldrh	r2, [r3, #10]
 8012bc8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012bca:	4413      	add	r3, r2
 8012bcc:	b29a      	uxth	r2, r3
 8012bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bd0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d1dd      	bne.n	8012b9a <tcp_write+0x612>
      }
    }
    last_unsent->len += oversize_used;
 8012bde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012be0:	891a      	ldrh	r2, [r3, #8]
 8012be2:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012be4:	4413      	add	r3, r2
 8012be6:	b29a      	uxth	r2, r3
 8012be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bea:	811a      	strh	r2, [r3, #8]
#if TCP_OVERSIZE_DBGCHECK
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
 8012bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bee:	895b      	ldrh	r3, [r3, #10]
 8012bf0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d909      	bls.n	8012c0a <tcp_write+0x682>
 8012bf6:	4b66      	ldr	r3, [pc, #408]	@ (8012d90 <tcp_write+0x808>)
 8012bf8:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8012bfc:	4965      	ldr	r1, [pc, #404]	@ (8012d94 <tcp_write+0x80c>)
 8012bfe:	4866      	ldr	r0, [pc, #408]	@ (8012d98 <tcp_write+0x810>)
 8012c00:	f008 fd92 	bl	801b728 <iprintf>
 8012c04:	2000      	movs	r0, #0
 8012c06:	f008 fcb9 	bl	801b57c <fflush>
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
 8012c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c0c:	895a      	ldrh	r2, [r3, #10]
 8012c0e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8012c10:	1ad3      	subs	r3, r2, r3
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c16:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012c18:	8a7a      	ldrh	r2, [r7, #18]
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8012c20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d01b      	beq.n	8012c5e <tcp_write+0x6d6>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012c26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d109      	bne.n	8012c40 <tcp_write+0x6b8>
 8012c2c:	4b58      	ldr	r3, [pc, #352]	@ (8012d90 <tcp_write+0x808>)
 8012c2e:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8012c32:	495a      	ldr	r1, [pc, #360]	@ (8012d9c <tcp_write+0x814>)
 8012c34:	4858      	ldr	r0, [pc, #352]	@ (8012d98 <tcp_write+0x810>)
 8012c36:	f008 fd77 	bl	801b728 <iprintf>
 8012c3a:	2000      	movs	r0, #0
 8012c3c:	f008 fc9e 	bl	801b57c <fflush>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012c46:	4618      	mov	r0, r3
 8012c48:	f7f9 ff6a 	bl	800cb20 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8012c4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c4e:	891a      	ldrh	r2, [r3, #8]
 8012c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012c52:	891b      	ldrh	r3, [r3, #8]
 8012c54:	4413      	add	r3, r2
 8012c56:	b29a      	uxth	r2, r3
 8012c58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c5a:	811a      	strh	r2, [r3, #8]
 8012c5c:	e03a      	b.n	8012cd4 <tcp_write+0x74c>
  } else if (extendlen > 0) {
 8012c5e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d037      	beq.n	8012cd4 <tcp_write+0x74c>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8012c64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d003      	beq.n	8012c72 <tcp_write+0x6ea>
 8012c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c6c:	685b      	ldr	r3, [r3, #4]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d109      	bne.n	8012c86 <tcp_write+0x6fe>
 8012c72:	4b47      	ldr	r3, [pc, #284]	@ (8012d90 <tcp_write+0x808>)
 8012c74:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8012c78:	4949      	ldr	r1, [pc, #292]	@ (8012da0 <tcp_write+0x818>)
 8012c7a:	4847      	ldr	r0, [pc, #284]	@ (8012d98 <tcp_write+0x810>)
 8012c7c:	f008 fd54 	bl	801b728 <iprintf>
 8012c80:	2000      	movs	r0, #0
 8012c82:	f008 fc7b 	bl	801b57c <fflush>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c88:	685b      	ldr	r3, [r3, #4]
 8012c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012c8c:	e009      	b.n	8012ca2 <tcp_write+0x71a>
      p->tot_len += extendlen;
 8012c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c90:	891a      	ldrh	r2, [r3, #8]
 8012c92:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012c94:	4413      	add	r3, r2
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c9a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8012c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012c9e:	681b      	ldr	r3, [r3, #0]
 8012ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012ca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1f1      	bne.n	8012c8e <tcp_write+0x706>
    }
    p->tot_len += extendlen;
 8012caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cac:	891a      	ldrh	r2, [r3, #8]
 8012cae:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012cb0:	4413      	add	r3, r2
 8012cb2:	b29a      	uxth	r2, r3
 8012cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cb6:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cba:	895a      	ldrh	r2, [r3, #10]
 8012cbc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012cbe:	4413      	add	r3, r2
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012cc4:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cc8:	891a      	ldrh	r2, [r3, #8]
 8012cca:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8012ccc:	4413      	add	r3, r2
 8012cce:	b29a      	uxth	r2, r3
 8012cd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cd2:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d103      	bne.n	8012ce2 <tcp_write+0x75a>
    pcb->unsent = queue;
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012cde:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012ce0:	e002      	b.n	8012ce8 <tcp_write+0x760>
  } else {
    last_unsent->next = queue;
 8012ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ce4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012ce6:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8012cec:	88fb      	ldrh	r3, [r7, #6]
 8012cee:	441a      	add	r2, r3
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012cfa:	88fb      	ldrh	r3, [r7, #6]
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8012d0c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d16:	4619      	mov	r1, r3
 8012d18:	4822      	ldr	r0, [pc, #136]	@ (8012da4 <tcp_write+0x81c>)
 8012d1a:	f008 fd05 	bl	801b728 <iprintf>
 8012d1e:	2000      	movs	r0, #0
 8012d20:	f008 fc2c 	bl	801b57c <fflush>
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d011      	beq.n	8012d52 <tcp_write+0x7ca>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d10d      	bne.n	8012d52 <tcp_write+0x7ca>
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d109      	bne.n	8012d52 <tcp_write+0x7ca>
 8012d3e:	4b14      	ldr	r3, [pc, #80]	@ (8012d90 <tcp_write+0x808>)
 8012d40:	f240 3212 	movw	r2, #786	@ 0x312
 8012d44:	4918      	ldr	r1, [pc, #96]	@ (8012da8 <tcp_write+0x820>)
 8012d46:	4814      	ldr	r0, [pc, #80]	@ (8012d98 <tcp_write+0x810>)
 8012d48:	f008 fcee 	bl	801b728 <iprintf>
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	f008 fc15 	bl	801b57c <fflush>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8012d52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d016      	beq.n	8012d86 <tcp_write+0x7fe>
 8012d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d5a:	691b      	ldr	r3, [r3, #16]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d012      	beq.n	8012d86 <tcp_write+0x7fe>
 8012d60:	797b      	ldrb	r3, [r7, #5]
 8012d62:	f003 0302 	and.w	r3, r3, #2
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d10d      	bne.n	8012d86 <tcp_write+0x7fe>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8012d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d6c:	691b      	ldr	r3, [r3, #16]
 8012d6e:	899b      	ldrh	r3, [r3, #12]
 8012d70:	b29c      	uxth	r4, r3
 8012d72:	2008      	movs	r0, #8
 8012d74:	f7f7 ff7e 	bl	800ac74 <lwip_htons>
 8012d78:	4603      	mov	r3, r0
 8012d7a:	461a      	mov	r2, r3
 8012d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d7e:	691b      	ldr	r3, [r3, #16]
 8012d80:	4322      	orrs	r2, r4
 8012d82:	b292      	uxth	r2, r2
 8012d84:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8012d86:	2300      	movs	r3, #0
 8012d88:	e047      	b.n	8012e1a <tcp_write+0x892>
 8012d8a:	bf00      	nop
 8012d8c:	080205e0 	.word	0x080205e0
 8012d90:	080200b0 	.word	0x080200b0
 8012d94:	08020600 	.word	0x08020600
 8012d98:	08020104 	.word	0x08020104
 8012d9c:	0802062c 	.word	0x0802062c
 8012da0:	08020664 	.word	0x08020664
 8012da4:	0802069c 	.word	0x0802069c
 8012da8:	080206c0 	.word	0x080206c0
      goto memerr;
 8012dac:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	8b5b      	ldrh	r3, [r3, #26]
 8012db2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012db6:	b29a      	uxth	r2, r3
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8012dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d002      	beq.n	8012dc8 <tcp_write+0x840>
    pbuf_free(concat_p);
 8012dc2:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8012dc4:	f7f9 fdaa 	bl	800c91c <pbuf_free>
  }
  if (queue != NULL) {
 8012dc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d002      	beq.n	8012dd4 <tcp_write+0x84c>
    tcp_segs_free(queue);
 8012dce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8012dd0:	f7fb fbec 	bl	800e5ac <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d011      	beq.n	8012e02 <tcp_write+0x87a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d10d      	bne.n	8012e02 <tcp_write+0x87a>
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d109      	bne.n	8012e02 <tcp_write+0x87a>
 8012dee:	4b0d      	ldr	r3, [pc, #52]	@ (8012e24 <tcp_write+0x89c>)
 8012df0:	f240 3227 	movw	r2, #807	@ 0x327
 8012df4:	490c      	ldr	r1, [pc, #48]	@ (8012e28 <tcp_write+0x8a0>)
 8012df6:	480d      	ldr	r0, [pc, #52]	@ (8012e2c <tcp_write+0x8a4>)
 8012df8:	f008 fc96 	bl	801b728 <iprintf>
 8012dfc:	2000      	movs	r0, #0
 8012dfe:	f008 fbbd 	bl	801b57c <fflush>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012e08:	4619      	mov	r1, r3
 8012e0a:	4809      	ldr	r0, [pc, #36]	@ (8012e30 <tcp_write+0x8a8>)
 8012e0c:	f008 fc8c 	bl	801b728 <iprintf>
 8012e10:	2000      	movs	r0, #0
 8012e12:	f008 fbb3 	bl	801b57c <fflush>
  return ERR_MEM;
 8012e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	375c      	adds	r7, #92	@ 0x5c
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012e22:	bf00      	nop
 8012e24:	080200b0 	.word	0x080200b0
 8012e28:	080206c0 	.word	0x080206c0
 8012e2c:	08020104 	.word	0x08020104
 8012e30:	080206e0 	.word	0x080206e0

08012e34 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012e34:	b590      	push	{r4, r7, lr}
 8012e36:	b08b      	sub	sp, #44	@ 0x2c
 8012e38:	af02      	add	r7, sp, #8
 8012e3a:	6078      	str	r0, [r7, #4]
 8012e3c:	460b      	mov	r3, r1
 8012e3e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012e40:	2300      	movs	r3, #0
 8012e42:	61fb      	str	r3, [r7, #28]
 8012e44:	2300      	movs	r3, #0
 8012e46:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012e48:	2300      	movs	r3, #0
 8012e4a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d109      	bne.n	8012e66 <tcp_split_unsent_seg+0x32>
 8012e52:	4ba0      	ldr	r3, [pc, #640]	@ (80130d4 <tcp_split_unsent_seg+0x2a0>)
 8012e54:	f240 324b 	movw	r2, #843	@ 0x34b
 8012e58:	499f      	ldr	r1, [pc, #636]	@ (80130d8 <tcp_split_unsent_seg+0x2a4>)
 8012e5a:	48a0      	ldr	r0, [pc, #640]	@ (80130dc <tcp_split_unsent_seg+0x2a8>)
 8012e5c:	f008 fc64 	bl	801b728 <iprintf>
 8012e60:	2000      	movs	r0, #0
 8012e62:	f008 fb8b 	bl	801b57c <fflush>

  useg = pcb->unsent;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012e6a:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012e6c:	697b      	ldr	r3, [r7, #20]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d102      	bne.n	8012e78 <tcp_split_unsent_seg+0x44>
    return ERR_MEM;
 8012e72:	f04f 33ff 	mov.w	r3, #4294967295
 8012e76:	e156      	b.n	8013126 <tcp_split_unsent_seg+0x2f2>
  }

  if (split == 0) {
 8012e78:	887b      	ldrh	r3, [r7, #2]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d10c      	bne.n	8012e98 <tcp_split_unsent_seg+0x64>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012e7e:	4b95      	ldr	r3, [pc, #596]	@ (80130d4 <tcp_split_unsent_seg+0x2a0>)
 8012e80:	f240 3253 	movw	r2, #851	@ 0x353
 8012e84:	4996      	ldr	r1, [pc, #600]	@ (80130e0 <tcp_split_unsent_seg+0x2ac>)
 8012e86:	4895      	ldr	r0, [pc, #596]	@ (80130dc <tcp_split_unsent_seg+0x2a8>)
 8012e88:	f008 fc4e 	bl	801b728 <iprintf>
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	f008 fb75 	bl	801b57c <fflush>
    return ERR_VAL;
 8012e92:	f06f 0305 	mvn.w	r3, #5
 8012e96:	e146      	b.n	8013126 <tcp_split_unsent_seg+0x2f2>
  }

  if (useg->len <= split) {
 8012e98:	697b      	ldr	r3, [r7, #20]
 8012e9a:	891b      	ldrh	r3, [r3, #8]
 8012e9c:	887a      	ldrh	r2, [r7, #2]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	d301      	bcc.n	8012ea6 <tcp_split_unsent_seg+0x72>
    return ERR_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	e13f      	b.n	8013126 <tcp_split_unsent_seg+0x2f2>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012eaa:	887a      	ldrh	r2, [r7, #2]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d909      	bls.n	8012ec4 <tcp_split_unsent_seg+0x90>
 8012eb0:	4b88      	ldr	r3, [pc, #544]	@ (80130d4 <tcp_split_unsent_seg+0x2a0>)
 8012eb2:	f240 325b 	movw	r2, #859	@ 0x35b
 8012eb6:	498b      	ldr	r1, [pc, #556]	@ (80130e4 <tcp_split_unsent_seg+0x2b0>)
 8012eb8:	4888      	ldr	r0, [pc, #544]	@ (80130dc <tcp_split_unsent_seg+0x2a8>)
 8012eba:	f008 fc35 	bl	801b728 <iprintf>
 8012ebe:	2000      	movs	r0, #0
 8012ec0:	f008 fb5c 	bl	801b57c <fflush>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8012ec4:	697b      	ldr	r3, [r7, #20]
 8012ec6:	891b      	ldrh	r3, [r3, #8]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d109      	bne.n	8012ee0 <tcp_split_unsent_seg+0xac>
 8012ecc:	4b81      	ldr	r3, [pc, #516]	@ (80130d4 <tcp_split_unsent_seg+0x2a0>)
 8012ece:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8012ed2:	4985      	ldr	r1, [pc, #532]	@ (80130e8 <tcp_split_unsent_seg+0x2b4>)
 8012ed4:	4881      	ldr	r0, [pc, #516]	@ (80130dc <tcp_split_unsent_seg+0x2a8>)
 8012ed6:	f008 fc27 	bl	801b728 <iprintf>
 8012eda:	2000      	movs	r0, #0
 8012edc:	f008 fb4e 	bl	801b57c <fflush>

  /* We should check that we don't exceed TCP_SND_QUEUELEN but we need
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8012ee6:	4619      	mov	r1, r3
 8012ee8:	4880      	ldr	r0, [pc, #512]	@ (80130ec <tcp_split_unsent_seg+0x2b8>)
 8012eea:	f008 fc1d 	bl	801b728 <iprintf>
 8012eee:	2000      	movs	r0, #0
 8012ef0:	f008 fb44 	bl	801b57c <fflush>

  optflags = useg->flags;
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	7b1b      	ldrb	r3, [r3, #12]
 8012ef8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012efa:	7bfb      	ldrb	r3, [r7, #15]
 8012efc:	009b      	lsls	r3, r3, #2
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	f003 0304 	and.w	r3, r3, #4
 8012f04:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	891a      	ldrh	r2, [r3, #8]
 8012f0a:	887b      	ldrh	r3, [r7, #2]
 8012f0c:	1ad3      	subs	r3, r2, r3
 8012f0e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012f10:	7bbb      	ldrb	r3, [r7, #14]
 8012f12:	b29a      	uxth	r2, r3
 8012f14:	89bb      	ldrh	r3, [r7, #12]
 8012f16:	4413      	add	r3, r2
 8012f18:	b29b      	uxth	r3, r3
 8012f1a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012f1e:	4619      	mov	r1, r3
 8012f20:	2036      	movs	r0, #54	@ 0x36
 8012f22:	f7f9 f995 	bl	800c250 <pbuf_alloc>
 8012f26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012f28:	693b      	ldr	r3, [r7, #16]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d108      	bne.n	8012f40 <tcp_split_unsent_seg+0x10c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8012f2e:	89bb      	ldrh	r3, [r7, #12]
 8012f30:	4619      	mov	r1, r3
 8012f32:	486f      	ldr	r0, [pc, #444]	@ (80130f0 <tcp_split_unsent_seg+0x2bc>)
 8012f34:	f008 fbf8 	bl	801b728 <iprintf>
 8012f38:	2000      	movs	r0, #0
 8012f3a:	f008 fb1f 	bl	801b57c <fflush>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
 8012f3e:	e0dd      	b.n	80130fc <tcp_split_unsent_seg+0x2c8>
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012f40:	697b      	ldr	r3, [r7, #20]
 8012f42:	685b      	ldr	r3, [r3, #4]
 8012f44:	891a      	ldrh	r2, [r3, #8]
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	891b      	ldrh	r3, [r3, #8]
 8012f4a:	1ad3      	subs	r3, r2, r3
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	887b      	ldrh	r3, [r7, #2]
 8012f50:	4413      	add	r3, r2
 8012f52:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	6858      	ldr	r0, [r3, #4]
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	685a      	ldr	r2, [r3, #4]
 8012f5c:	7bbb      	ldrb	r3, [r7, #14]
 8012f5e:	18d1      	adds	r1, r2, r3
 8012f60:	897b      	ldrh	r3, [r7, #10]
 8012f62:	89ba      	ldrh	r2, [r7, #12]
 8012f64:	f7f9 ff4a 	bl	800cdfc <pbuf_copy_partial>
 8012f68:	4603      	mov	r3, r0
 8012f6a:	461a      	mov	r2, r3
 8012f6c:	89bb      	ldrh	r3, [r7, #12]
 8012f6e:	4293      	cmp	r3, r2
 8012f70:	d008      	beq.n	8012f84 <tcp_split_unsent_seg+0x150>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8012f72:	89bb      	ldrh	r3, [r7, #12]
 8012f74:	4619      	mov	r1, r3
 8012f76:	485f      	ldr	r0, [pc, #380]	@ (80130f4 <tcp_split_unsent_seg+0x2c0>)
 8012f78:	f008 fbd6 	bl	801b728 <iprintf>
 8012f7c:	2000      	movs	r0, #0
 8012f7e:	f008 fafd 	bl	801b57c <fflush>
                ("tcp_split_unsent_seg: could not copy pbuf remainder %u\n", remainder));
    goto memerr;
 8012f82:	e0bb      	b.n	80130fc <tcp_split_unsent_seg+0x2c8>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	691b      	ldr	r3, [r3, #16]
 8012f88:	899b      	ldrh	r3, [r3, #12]
 8012f8a:	b29b      	uxth	r3, r3
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7f7 fe71 	bl	800ac74 <lwip_htons>
 8012f92:	4603      	mov	r3, r0
 8012f94:	b2db      	uxtb	r3, r3
 8012f96:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012f9a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012fa0:	7efb      	ldrb	r3, [r7, #27]
 8012fa2:	f003 0308 	and.w	r3, r3, #8
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d007      	beq.n	8012fba <tcp_split_unsent_seg+0x186>
    split_flags &= ~TCP_PSH;
 8012faa:	7efb      	ldrb	r3, [r7, #27]
 8012fac:	f023 0308 	bic.w	r3, r3, #8
 8012fb0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012fb2:	7ebb      	ldrb	r3, [r7, #26]
 8012fb4:	f043 0308 	orr.w	r3, r3, #8
 8012fb8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8012fba:	7efb      	ldrb	r3, [r7, #27]
 8012fbc:	f003 0301 	and.w	r3, r3, #1
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d007      	beq.n	8012fd4 <tcp_split_unsent_seg+0x1a0>
    split_flags &= ~TCP_FIN;
 8012fc4:	7efb      	ldrb	r3, [r7, #27]
 8012fc6:	f023 0301 	bic.w	r3, r3, #1
 8012fca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8012fcc:	7ebb      	ldrb	r3, [r7, #26]
 8012fce:	f043 0301 	orr.w	r3, r3, #1
 8012fd2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8012fd4:	697b      	ldr	r3, [r7, #20]
 8012fd6:	691b      	ldr	r3, [r3, #16]
 8012fd8:	685b      	ldr	r3, [r3, #4]
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7f7 fe5f 	bl	800ac9e <lwip_htonl>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	887b      	ldrh	r3, [r7, #2]
 8012fe4:	18d1      	adds	r1, r2, r3
 8012fe6:	7eba      	ldrb	r2, [r7, #26]
 8012fe8:	7bfb      	ldrb	r3, [r7, #15]
 8012fea:	9300      	str	r3, [sp, #0]
 8012fec:	460b      	mov	r3, r1
 8012fee:	6939      	ldr	r1, [r7, #16]
 8012ff0:	6878      	ldr	r0, [r7, #4]
 8012ff2:	f7ff f8dd 	bl	80121b0 <tcp_create_segment>
 8012ff6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8012ff8:	69fb      	ldr	r3, [r7, #28]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d106      	bne.n	801300c <tcp_split_unsent_seg+0x1d8>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8012ffe:	483e      	ldr	r0, [pc, #248]	@ (80130f8 <tcp_split_unsent_seg+0x2c4>)
 8013000:	f008 fc02 	bl	801b808 <puts>
 8013004:	2000      	movs	r0, #0
 8013006:	f008 fab9 	bl	801b57c <fflush>
                ("tcp_split_unsent_seg: could not create new TCP segment\n"));
    goto memerr;
 801300a:	e077      	b.n	80130fc <tcp_split_unsent_seg+0x2c8>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801300c:	697b      	ldr	r3, [r7, #20]
 801300e:	685b      	ldr	r3, [r3, #4]
 8013010:	4618      	mov	r0, r3
 8013012:	f7f9 fd41 	bl	800ca98 <pbuf_clen>
 8013016:	4603      	mov	r3, r0
 8013018:	461a      	mov	r2, r3
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013020:	1a9b      	subs	r3, r3, r2
 8013022:	b29a      	uxth	r2, r3
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	6858      	ldr	r0, [r3, #4]
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	685b      	ldr	r3, [r3, #4]
 8013032:	891a      	ldrh	r2, [r3, #8]
 8013034:	89bb      	ldrh	r3, [r7, #12]
 8013036:	1ad3      	subs	r3, r2, r3
 8013038:	b29b      	uxth	r3, r3
 801303a:	4619      	mov	r1, r3
 801303c:	f7f9 fab2 	bl	800c5a4 <pbuf_realloc>
  useg->len -= remainder;
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	891a      	ldrh	r2, [r3, #8]
 8013044:	89bb      	ldrh	r3, [r7, #12]
 8013046:	1ad3      	subs	r3, r2, r3
 8013048:	b29a      	uxth	r2, r3
 801304a:	697b      	ldr	r3, [r7, #20]
 801304c:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801304e:	697b      	ldr	r3, [r7, #20]
 8013050:	691b      	ldr	r3, [r3, #16]
 8013052:	899b      	ldrh	r3, [r3, #12]
 8013054:	b29c      	uxth	r4, r3
 8013056:	7efb      	ldrb	r3, [r7, #27]
 8013058:	b29b      	uxth	r3, r3
 801305a:	4618      	mov	r0, r3
 801305c:	f7f7 fe0a 	bl	800ac74 <lwip_htons>
 8013060:	4603      	mov	r3, r0
 8013062:	461a      	mov	r2, r3
 8013064:	697b      	ldr	r3, [r7, #20]
 8013066:	691b      	ldr	r3, [r3, #16]
 8013068:	4322      	orrs	r2, r4
 801306a:	b292      	uxth	r2, r2
 801306c:	819a      	strh	r2, [r3, #12]
#if TCP_OVERSIZE_DBGCHECK
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	2200      	movs	r2, #0
 8013072:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	4618      	mov	r0, r3
 801307a:	f7f9 fd0d 	bl	800ca98 <pbuf_clen>
 801307e:	4603      	mov	r3, r0
 8013080:	461a      	mov	r2, r3
 8013082:	687b      	ldr	r3, [r7, #4]
 8013084:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8013088:	4413      	add	r3, r2
 801308a:	b29a      	uxth	r2, r3
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8013092:	69fb      	ldr	r3, [r7, #28]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	4618      	mov	r0, r3
 8013098:	f7f9 fcfe 	bl	800ca98 <pbuf_clen>
 801309c:	4603      	mov	r3, r0
 801309e:	461a      	mov	r2, r3
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80130a6:	4413      	add	r3, r2
 80130a8:	b29a      	uxth	r2, r3
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	69fb      	ldr	r3, [r7, #28]
 80130b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	69fa      	ldr	r2, [r7, #28]
 80130bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	681b      	ldr	r3, [r3, #0]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d103      	bne.n	80130ce <tcp_split_unsent_seg+0x29a>
    pcb->unsent_oversize = 0;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2200      	movs	r2, #0
 80130ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80130ce:	2300      	movs	r3, #0
 80130d0:	e029      	b.n	8013126 <tcp_split_unsent_seg+0x2f2>
 80130d2:	bf00      	nop
 80130d4:	080200b0 	.word	0x080200b0
 80130d8:	08020700 	.word	0x08020700
 80130dc:	08020104 	.word	0x08020104
 80130e0:	08020724 	.word	0x08020724
 80130e4:	08020748 	.word	0x08020748
 80130e8:	08020758 	.word	0x08020758
 80130ec:	08020768 	.word	0x08020768
 80130f0:	0802078c 	.word	0x0802078c
 80130f4:	080207d4 	.word	0x080207d4
 80130f8:	0802080c 	.word	0x0802080c
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80130fc:	69fb      	ldr	r3, [r7, #28]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d009      	beq.n	8013116 <tcp_split_unsent_seg+0x2e2>
 8013102:	4b0b      	ldr	r3, [pc, #44]	@ (8013130 <tcp_split_unsent_seg+0x2fc>)
 8013104:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8013108:	490a      	ldr	r1, [pc, #40]	@ (8013134 <tcp_split_unsent_seg+0x300>)
 801310a:	480b      	ldr	r0, [pc, #44]	@ (8013138 <tcp_split_unsent_seg+0x304>)
 801310c:	f008 fb0c 	bl	801b728 <iprintf>
 8013110:	2000      	movs	r0, #0
 8013112:	f008 fa33 	bl	801b57c <fflush>
  if (p != NULL) {
 8013116:	693b      	ldr	r3, [r7, #16]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d002      	beq.n	8013122 <tcp_split_unsent_seg+0x2ee>
    pbuf_free(p);
 801311c:	6938      	ldr	r0, [r7, #16]
 801311e:	f7f9 fbfd 	bl	800c91c <pbuf_free>
  }

  return ERR_MEM;
 8013122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013126:	4618      	mov	r0, r3
 8013128:	3724      	adds	r7, #36	@ 0x24
 801312a:	46bd      	mov	sp, r7
 801312c:	bd90      	pop	{r4, r7, pc}
 801312e:	bf00      	nop
 8013130:	080200b0 	.word	0x080200b0
 8013134:	08020844 	.word	0x08020844
 8013138:	08020104 	.word	0x08020104

0801313c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801313c:	b590      	push	{r4, r7, lr}
 801313e:	b085      	sub	sp, #20
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d109      	bne.n	801315e <tcp_send_fin+0x22>
 801314a:	4b23      	ldr	r3, [pc, #140]	@ (80131d8 <tcp_send_fin+0x9c>)
 801314c:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8013150:	4922      	ldr	r1, [pc, #136]	@ (80131dc <tcp_send_fin+0xa0>)
 8013152:	4823      	ldr	r0, [pc, #140]	@ (80131e0 <tcp_send_fin+0xa4>)
 8013154:	f008 fae8 	bl	801b728 <iprintf>
 8013158:	2000      	movs	r0, #0
 801315a:	f008 fa0f 	bl	801b57c <fflush>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013162:	2b00      	cmp	r3, #0
 8013164:	d02e      	beq.n	80131c4 <tcp_send_fin+0x88>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801316a:	60fb      	str	r3, [r7, #12]
 801316c:	e002      	b.n	8013174 <tcp_send_fin+0x38>
         last_unsent = last_unsent->next);
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681b      	ldr	r3, [r3, #0]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d1f8      	bne.n	801316e <tcp_send_fin+0x32>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801317c:	68fb      	ldr	r3, [r7, #12]
 801317e:	691b      	ldr	r3, [r3, #16]
 8013180:	899b      	ldrh	r3, [r3, #12]
 8013182:	b29b      	uxth	r3, r3
 8013184:	4618      	mov	r0, r3
 8013186:	f7f7 fd75 	bl	800ac74 <lwip_htons>
 801318a:	4603      	mov	r3, r0
 801318c:	b2db      	uxtb	r3, r3
 801318e:	f003 0307 	and.w	r3, r3, #7
 8013192:	2b00      	cmp	r3, #0
 8013194:	d116      	bne.n	80131c4 <tcp_send_fin+0x88>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	691b      	ldr	r3, [r3, #16]
 801319a:	899b      	ldrh	r3, [r3, #12]
 801319c:	b29c      	uxth	r4, r3
 801319e:	2001      	movs	r0, #1
 80131a0:	f7f7 fd68 	bl	800ac74 <lwip_htons>
 80131a4:	4603      	mov	r3, r0
 80131a6:	461a      	mov	r2, r3
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	691b      	ldr	r3, [r3, #16]
 80131ac:	4322      	orrs	r2, r4
 80131ae:	b292      	uxth	r2, r2
 80131b0:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	8b5b      	ldrh	r3, [r3, #26]
 80131b6:	f043 0320 	orr.w	r3, r3, #32
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80131c0:	2300      	movs	r3, #0
 80131c2:	e004      	b.n	80131ce <tcp_send_fin+0x92>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80131c4:	2101      	movs	r1, #1
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f000 f80c 	bl	80131e4 <tcp_enqueue_flags>
 80131cc:	4603      	mov	r3, r0
}
 80131ce:	4618      	mov	r0, r3
 80131d0:	3714      	adds	r7, #20
 80131d2:	46bd      	mov	sp, r7
 80131d4:	bd90      	pop	{r4, r7, pc}
 80131d6:	bf00      	nop
 80131d8:	080200b0 	.word	0x080200b0
 80131dc:	08020850 	.word	0x08020850
 80131e0:	08020104 	.word	0x08020104

080131e4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80131e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80131e6:	b08b      	sub	sp, #44	@ 0x2c
 80131e8:	af02      	add	r7, sp, #8
 80131ea:	6078      	str	r0, [r7, #4]
 80131ec:	460b      	mov	r3, r1
 80131ee:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80131f0:	2300      	movs	r3, #0
 80131f2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80131f4:	2300      	movs	r3, #0
 80131f6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80131fe:	4619      	mov	r1, r3
 8013200:	488f      	ldr	r0, [pc, #572]	@ (8013440 <tcp_enqueue_flags+0x25c>)
 8013202:	f008 fa91 	bl	801b728 <iprintf>
 8013206:	2000      	movs	r0, #0
 8013208:	f008 f9b8 	bl	801b57c <fflush>

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801320c:	78fb      	ldrb	r3, [r7, #3]
 801320e:	f003 0303 	and.w	r3, r3, #3
 8013212:	2b00      	cmp	r3, #0
 8013214:	d109      	bne.n	801322a <tcp_enqueue_flags+0x46>
 8013216:	4b8b      	ldr	r3, [pc, #556]	@ (8013444 <tcp_enqueue_flags+0x260>)
 8013218:	f240 4211 	movw	r2, #1041	@ 0x411
 801321c:	498a      	ldr	r1, [pc, #552]	@ (8013448 <tcp_enqueue_flags+0x264>)
 801321e:	488b      	ldr	r0, [pc, #556]	@ (801344c <tcp_enqueue_flags+0x268>)
 8013220:	f008 fa82 	bl	801b728 <iprintf>
 8013224:	2000      	movs	r0, #0
 8013226:	f008 f9a9 	bl	801b57c <fflush>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d109      	bne.n	8013244 <tcp_enqueue_flags+0x60>
 8013230:	4b84      	ldr	r3, [pc, #528]	@ (8013444 <tcp_enqueue_flags+0x260>)
 8013232:	f240 4213 	movw	r2, #1043	@ 0x413
 8013236:	4986      	ldr	r1, [pc, #536]	@ (8013450 <tcp_enqueue_flags+0x26c>)
 8013238:	4884      	ldr	r0, [pc, #528]	@ (801344c <tcp_enqueue_flags+0x268>)
 801323a:	f008 fa75 	bl	801b728 <iprintf>
 801323e:	2000      	movs	r0, #0
 8013240:	f008 f99c 	bl	801b57c <fflush>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8013244:	78fb      	ldrb	r3, [r7, #3]
 8013246:	f003 0302 	and.w	r3, r3, #2
 801324a:	2b00      	cmp	r3, #0
 801324c:	d001      	beq.n	8013252 <tcp_enqueue_flags+0x6e>
    optflags = TF_SEG_OPTS_MSS;
 801324e:	2301      	movs	r3, #1
 8013250:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013252:	7ffb      	ldrb	r3, [r7, #31]
 8013254:	009b      	lsls	r3, r3, #2
 8013256:	b2db      	uxtb	r3, r3
 8013258:	f003 0304 	and.w	r3, r3, #4
 801325c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801325e:	7dfb      	ldrb	r3, [r7, #23]
 8013260:	b29b      	uxth	r3, r3
 8013262:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013266:	4619      	mov	r1, r3
 8013268:	2036      	movs	r0, #54	@ 0x36
 801326a:	f7f8 fff1 	bl	800c250 <pbuf_alloc>
 801326e:	6138      	str	r0, [r7, #16]
 8013270:	693b      	ldr	r3, [r7, #16]
 8013272:	2b00      	cmp	r3, #0
 8013274:	d109      	bne.n	801328a <tcp_enqueue_flags+0xa6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	8b5b      	ldrh	r3, [r3, #26]
 801327a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801327e:	b29a      	uxth	r2, r3
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8013284:	f04f 33ff 	mov.w	r3, #4294967295
 8013288:	e0d6      	b.n	8013438 <tcp_enqueue_flags+0x254>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801328a:	693b      	ldr	r3, [r7, #16]
 801328c:	895a      	ldrh	r2, [r3, #10]
 801328e:	7dfb      	ldrb	r3, [r7, #23]
 8013290:	b29b      	uxth	r3, r3
 8013292:	429a      	cmp	r2, r3
 8013294:	d209      	bcs.n	80132aa <tcp_enqueue_flags+0xc6>
 8013296:	4b6b      	ldr	r3, [pc, #428]	@ (8013444 <tcp_enqueue_flags+0x260>)
 8013298:	f240 4239 	movw	r2, #1081	@ 0x439
 801329c:	496d      	ldr	r1, [pc, #436]	@ (8013454 <tcp_enqueue_flags+0x270>)
 801329e:	486b      	ldr	r0, [pc, #428]	@ (801344c <tcp_enqueue_flags+0x268>)
 80132a0:	f008 fa42 	bl	801b728 <iprintf>
 80132a4:	2000      	movs	r0, #0
 80132a6:	f008 f969 	bl	801b57c <fflush>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80132ae:	78fa      	ldrb	r2, [r7, #3]
 80132b0:	7ffb      	ldrb	r3, [r7, #31]
 80132b2:	9300      	str	r3, [sp, #0]
 80132b4:	460b      	mov	r3, r1
 80132b6:	6939      	ldr	r1, [r7, #16]
 80132b8:	6878      	ldr	r0, [r7, #4]
 80132ba:	f7fe ff79 	bl	80121b0 <tcp_create_segment>
 80132be:	60f8      	str	r0, [r7, #12]
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d109      	bne.n	80132da <tcp_enqueue_flags+0xf6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	8b5b      	ldrh	r3, [r3, #26]
 80132ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80132ce:	b29a      	uxth	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80132d4:	f04f 33ff 	mov.w	r3, #4294967295
 80132d8:	e0ae      	b.n	8013438 <tcp_enqueue_flags+0x254>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	691b      	ldr	r3, [r3, #16]
 80132de:	f003 0303 	and.w	r3, r3, #3
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	d009      	beq.n	80132fa <tcp_enqueue_flags+0x116>
 80132e6:	4b57      	ldr	r3, [pc, #348]	@ (8013444 <tcp_enqueue_flags+0x260>)
 80132e8:	f240 4242 	movw	r2, #1090	@ 0x442
 80132ec:	495a      	ldr	r1, [pc, #360]	@ (8013458 <tcp_enqueue_flags+0x274>)
 80132ee:	4857      	ldr	r0, [pc, #348]	@ (801344c <tcp_enqueue_flags+0x268>)
 80132f0:	f008 fa1a 	bl	801b728 <iprintf>
 80132f4:	2000      	movs	r0, #0
 80132f6:	f008 f941 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	891b      	ldrh	r3, [r3, #8]
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d009      	beq.n	8013316 <tcp_enqueue_flags+0x132>
 8013302:	4b50      	ldr	r3, [pc, #320]	@ (8013444 <tcp_enqueue_flags+0x260>)
 8013304:	f240 4243 	movw	r2, #1091	@ 0x443
 8013308:	4954      	ldr	r1, [pc, #336]	@ (801345c <tcp_enqueue_flags+0x278>)
 801330a:	4850      	ldr	r0, [pc, #320]	@ (801344c <tcp_enqueue_flags+0x268>)
 801330c:	f008 fa0c 	bl	801b728 <iprintf>
 8013310:	2000      	movs	r0, #0
 8013312:	f008 f933 	bl	801b57c <fflush>

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE,
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	691b      	ldr	r3, [r3, #16]
 801331a:	685b      	ldr	r3, [r3, #4]
 801331c:	4618      	mov	r0, r3
 801331e:	f7f7 fcbe 	bl	800ac9e <lwip_htonl>
 8013322:	4605      	mov	r5, r0
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	691b      	ldr	r3, [r3, #16]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	4618      	mov	r0, r3
 801332c:	f7f7 fcb7 	bl	800ac9e <lwip_htonl>
 8013330:	4604      	mov	r4, r0
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	891b      	ldrh	r3, [r3, #8]
 8013336:	461e      	mov	r6, r3
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	691b      	ldr	r3, [r3, #16]
 801333c:	899b      	ldrh	r3, [r3, #12]
 801333e:	b29b      	uxth	r3, r3
 8013340:	4618      	mov	r0, r3
 8013342:	f7f7 fc97 	bl	800ac74 <lwip_htons>
 8013346:	4603      	mov	r3, r0
 8013348:	b2db      	uxtb	r3, r3
 801334a:	f003 0303 	and.w	r3, r3, #3
 801334e:	2b00      	cmp	r3, #0
 8013350:	d001      	beq.n	8013356 <tcp_enqueue_flags+0x172>
 8013352:	2301      	movs	r3, #1
 8013354:	e000      	b.n	8013358 <tcp_enqueue_flags+0x174>
 8013356:	2300      	movs	r3, #0
 8013358:	4433      	add	r3, r6
 801335a:	18e2      	adds	r2, r4, r3
 801335c:	78fb      	ldrb	r3, [r7, #3]
 801335e:	4629      	mov	r1, r5
 8013360:	483f      	ldr	r0, [pc, #252]	@ (8013460 <tcp_enqueue_flags+0x27c>)
 8013362:	f008 f9e1 	bl	801b728 <iprintf>
 8013366:	2000      	movs	r0, #0
 8013368:	f008 f908 	bl	801b57c <fflush>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013370:	2b00      	cmp	r3, #0
 8013372:	d103      	bne.n	801337c <tcp_enqueue_flags+0x198>
    pcb->unsent = seg;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	68fa      	ldr	r2, [r7, #12]
 8013378:	66da      	str	r2, [r3, #108]	@ 0x6c
 801337a:	e00d      	b.n	8013398 <tcp_enqueue_flags+0x1b4>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013380:	61bb      	str	r3, [r7, #24]
 8013382:	e002      	b.n	801338a <tcp_enqueue_flags+0x1a6>
 8013384:	69bb      	ldr	r3, [r7, #24]
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	61bb      	str	r3, [r7, #24]
 801338a:	69bb      	ldr	r3, [r7, #24]
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d1f8      	bne.n	8013384 <tcp_enqueue_flags+0x1a0>
    useg->next = seg;
 8013392:	69bb      	ldr	r3, [r7, #24]
 8013394:	68fa      	ldr	r2, [r7, #12]
 8013396:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	2200      	movs	r2, #0
 801339c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80133a0:	78fb      	ldrb	r3, [r7, #3]
 80133a2:	f003 0302 	and.w	r3, r3, #2
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d104      	bne.n	80133b4 <tcp_enqueue_flags+0x1d0>
 80133aa:	78fb      	ldrb	r3, [r7, #3]
 80133ac:	f003 0301 	and.w	r3, r3, #1
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d004      	beq.n	80133be <tcp_enqueue_flags+0x1da>
    pcb->snd_lbb++;
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80133b8:	1c5a      	adds	r2, r3, #1
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80133be:	78fb      	ldrb	r3, [r7, #3]
 80133c0:	f003 0301 	and.w	r3, r3, #1
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d006      	beq.n	80133d6 <tcp_enqueue_flags+0x1f2>
    tcp_set_flags(pcb, TF_FIN);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	8b5b      	ldrh	r3, [r3, #26]
 80133cc:	f043 0320 	orr.w	r3, r3, #32
 80133d0:	b29a      	uxth	r2, r3
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	4618      	mov	r0, r3
 80133dc:	f7f9 fb5c 	bl	800ca98 <pbuf_clen>
 80133e0:	4603      	mov	r3, r0
 80133e2:	461a      	mov	r2, r3
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80133ea:	4413      	add	r3, r2
 80133ec:	b29a      	uxth	r2, r3
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80133fa:	4619      	mov	r1, r3
 80133fc:	4819      	ldr	r0, [pc, #100]	@ (8013464 <tcp_enqueue_flags+0x280>)
 80133fe:	f008 f993 	bl	801b728 <iprintf>
 8013402:	2000      	movs	r0, #0
 8013404:	f008 f8ba 	bl	801b57c <fflush>
  if (pcb->snd_queuelen != 0) {
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801340e:	2b00      	cmp	r3, #0
 8013410:	d011      	beq.n	8013436 <tcp_enqueue_flags+0x252>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8013412:	687b      	ldr	r3, [r7, #4]
 8013414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013416:	2b00      	cmp	r3, #0
 8013418:	d10d      	bne.n	8013436 <tcp_enqueue_flags+0x252>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801341e:	2b00      	cmp	r3, #0
 8013420:	d109      	bne.n	8013436 <tcp_enqueue_flags+0x252>
 8013422:	4b08      	ldr	r3, [pc, #32]	@ (8013444 <tcp_enqueue_flags+0x260>)
 8013424:	f240 4265 	movw	r2, #1125	@ 0x465
 8013428:	490f      	ldr	r1, [pc, #60]	@ (8013468 <tcp_enqueue_flags+0x284>)
 801342a:	4808      	ldr	r0, [pc, #32]	@ (801344c <tcp_enqueue_flags+0x268>)
 801342c:	f008 f97c 	bl	801b728 <iprintf>
 8013430:	2000      	movs	r0, #0
 8013432:	f008 f8a3 	bl	801b57c <fflush>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8013436:	2300      	movs	r3, #0
}
 8013438:	4618      	mov	r0, r3
 801343a:	3724      	adds	r7, #36	@ 0x24
 801343c:	46bd      	mov	sp, r7
 801343e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013440:	0802086c 	.word	0x0802086c
 8013444:	080200b0 	.word	0x080200b0
 8013448:	08020890 	.word	0x08020890
 801344c:	08020104 	.word	0x08020104
 8013450:	080208e8 	.word	0x080208e8
 8013454:	08020908 	.word	0x08020908
 8013458:	08020944 	.word	0x08020944
 801345c:	0802095c 	.word	0x0802095c
 8013460:	08020988 	.word	0x08020988
 8013464:	080209b8 	.word	0x080209b8
 8013468:	080209e4 	.word	0x080209e4

0801346c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801346c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801346e:	b091      	sub	sp, #68	@ 0x44
 8013470:	af04      	add	r7, sp, #16
 8013472:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg, *useg;
  u32_t wnd, snd_nxt;
  err_t err;
  struct netif *netif;
#if TCP_CWND_DEBUG
  s16_t i = 0;
 8013474:	2300      	movs	r3, #0
 8013476:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d109      	bne.n	8013492 <tcp_output+0x26>
 801347e:	4b98      	ldr	r3, [pc, #608]	@ (80136e0 <tcp_output+0x274>)
 8013480:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8013484:	4997      	ldr	r1, [pc, #604]	@ (80136e4 <tcp_output+0x278>)
 8013486:	4898      	ldr	r0, [pc, #608]	@ (80136e8 <tcp_output+0x27c>)
 8013488:	f008 f94e 	bl	801b728 <iprintf>
 801348c:	2000      	movs	r0, #0
 801348e:	f008 f875 	bl	801b57c <fflush>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	7d1b      	ldrb	r3, [r3, #20]
 8013496:	2b01      	cmp	r3, #1
 8013498:	d109      	bne.n	80134ae <tcp_output+0x42>
 801349a:	4b91      	ldr	r3, [pc, #580]	@ (80136e0 <tcp_output+0x274>)
 801349c:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80134a0:	4992      	ldr	r1, [pc, #584]	@ (80136ec <tcp_output+0x280>)
 80134a2:	4891      	ldr	r0, [pc, #580]	@ (80136e8 <tcp_output+0x27c>)
 80134a4:	f008 f940 	bl	801b728 <iprintf>
 80134a8:	2000      	movs	r0, #0
 80134aa:	f008 f867 	bl	801b57c <fflush>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80134ae:	4b90      	ldr	r3, [pc, #576]	@ (80136f0 <tcp_output+0x284>)
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	687a      	ldr	r2, [r7, #4]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d101      	bne.n	80134bc <tcp_output+0x50>
    return ERR_OK;
 80134b8:	2300      	movs	r3, #0
 80134ba:	e24f      	b.n	801395c <tcp_output+0x4f0>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80134c8:	4293      	cmp	r3, r2
 80134ca:	bf28      	it	cs
 80134cc:	4613      	movcs	r3, r2
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	61fb      	str	r3, [r7, #28]

  seg = pcb->unsent;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80134d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (seg == NULL) {
 80134d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d126      	bne.n	801352c <tcp_output+0xc0>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: nothing to send (%p)\n",
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80134e2:	4619      	mov	r1, r3
 80134e4:	4883      	ldr	r0, [pc, #524]	@ (80136f4 <tcp_output+0x288>)
 80134e6:	f008 f91f 	bl	801b728 <iprintf>
 80134ea:	2000      	movs	r0, #0
 80134ec:	f008 f846 	bl	801b57c <fflush>
                                   (void *)pcb->unsent));
    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80134f6:	4619      	mov	r1, r3
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80134fe:	461a      	mov	r2, r3
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013504:	9300      	str	r3, [sp, #0]
 8013506:	69fb      	ldr	r3, [r7, #28]
 8013508:	487b      	ldr	r0, [pc, #492]	@ (80136f8 <tcp_output+0x28c>)
 801350a:	f008 f90d 	bl	801b728 <iprintf>
 801350e:	2000      	movs	r0, #0
 8013510:	f008 f834 	bl	801b57c <fflush>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	8b5b      	ldrh	r3, [r3, #26]
 8013518:	f003 0302 	and.w	r3, r3, #2
 801351c:	2b00      	cmp	r3, #0
 801351e:	f000 8210 	beq.w	8013942 <tcp_output+0x4d6>
      return tcp_send_empty_ack(pcb);
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f000 feec 	bl	8014300 <tcp_send_empty_ack>
 8013528:	4603      	mov	r3, r0
 801352a:	e217      	b.n	801395c <tcp_output+0x4f0>
    }
    /* nothing to send: shortcut out of here */
    goto output_done;
  } else {
    LWIP_DEBUGF(TCP_CWND_DEBUG,
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8013532:	461d      	mov	r5, r3
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801353a:	461e      	mov	r6, r3
 801353c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801353e:	691b      	ldr	r3, [r3, #16]
 8013540:	685b      	ldr	r3, [r3, #4]
 8013542:	4618      	mov	r0, r3
 8013544:	f7f7 fbab 	bl	800ac9e <lwip_htonl>
 8013548:	4602      	mov	r2, r0
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801354e:	1ad3      	subs	r3, r2, r3
 8013550:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013552:	8912      	ldrh	r2, [r2, #8]
 8013554:	189c      	adds	r4, r3, r2
 8013556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013558:	691b      	ldr	r3, [r3, #16]
 801355a:	685b      	ldr	r3, [r3, #4]
 801355c:	4618      	mov	r0, r3
 801355e:	f7f7 fb9e 	bl	800ac9e <lwip_htonl>
 8013562:	4602      	mov	r2, r0
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013568:	9302      	str	r3, [sp, #8]
 801356a:	9201      	str	r2, [sp, #4]
 801356c:	9400      	str	r4, [sp, #0]
 801356e:	69fb      	ldr	r3, [r7, #28]
 8013570:	4632      	mov	r2, r6
 8013572:	4629      	mov	r1, r5
 8013574:	4861      	ldr	r0, [pc, #388]	@ (80136fc <tcp_output+0x290>)
 8013576:	f008 f8d7 	bl	801b728 <iprintf>
 801357a:	2000      	movs	r0, #0
 801357c:	f007 fffe 	bl	801b57c <fflush>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8013580:	6879      	ldr	r1, [r7, #4]
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	3304      	adds	r3, #4
 8013586:	461a      	mov	r2, r3
 8013588:	6878      	ldr	r0, [r7, #4]
 801358a:	f7fe fdf5 	bl	8012178 <tcp_route>
 801358e:	61b8      	str	r0, [r7, #24]
  if (netif == NULL) {
 8013590:	69bb      	ldr	r3, [r7, #24]
 8013592:	2b00      	cmp	r3, #0
 8013594:	d102      	bne.n	801359c <tcp_output+0x130>
    return ERR_RTE;
 8013596:	f06f 0303 	mvn.w	r3, #3
 801359a:	e1df      	b.n	801395c <tcp_output+0x4f0>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d003      	beq.n	80135aa <tcp_output+0x13e>
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	681b      	ldr	r3, [r3, #0]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d111      	bne.n	80135ce <tcp_output+0x162>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d002      	beq.n	80135b6 <tcp_output+0x14a>
 80135b0:	69bb      	ldr	r3, [r7, #24]
 80135b2:	3304      	adds	r3, #4
 80135b4:	e000      	b.n	80135b8 <tcp_output+0x14c>
 80135b6:	2300      	movs	r3, #0
 80135b8:	617b      	str	r3, [r7, #20]
    if (local_ip == NULL) {
 80135ba:	697b      	ldr	r3, [r7, #20]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d102      	bne.n	80135c6 <tcp_output+0x15a>
      return ERR_RTE;
 80135c0:	f06f 0303 	mvn.w	r3, #3
 80135c4:	e1ca      	b.n	801395c <tcp_output+0x4f0>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80135ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135d0:	691b      	ldr	r3, [r3, #16]
 80135d2:	685b      	ldr	r3, [r3, #4]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7f7 fb62 	bl	800ac9e <lwip_htonl>
 80135da:	4602      	mov	r2, r0
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80135e0:	1ad3      	subs	r3, r2, r3
 80135e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80135e4:	8912      	ldrh	r2, [r2, #8]
 80135e6:	4413      	add	r3, r2
 80135e8:	69fa      	ldr	r2, [r7, #28]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d227      	bcs.n	801363e <tcp_output+0x1d2>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80135f4:	461a      	mov	r2, r3
 80135f6:	69fb      	ldr	r3, [r7, #28]
 80135f8:	4293      	cmp	r3, r2
 80135fa:	d114      	bne.n	8013626 <tcp_output+0x1ba>
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013600:	2b00      	cmp	r3, #0
 8013602:	d110      	bne.n	8013626 <tcp_output+0x1ba>
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801360a:	2b00      	cmp	r3, #0
 801360c:	d10b      	bne.n	8013626 <tcp_output+0x1ba>
      pcb->persist_cnt = 0;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	2200      	movs	r2, #0
 8013612:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	2201      	movs	r2, #1
 801361a:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	2200      	movs	r2, #0
 8013622:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	8b5b      	ldrh	r3, [r3, #26]
 801362a:	f003 0302 	and.w	r3, r3, #2
 801362e:	2b00      	cmp	r3, #0
 8013630:	f000 8189 	beq.w	8013946 <tcp_output+0x4da>
      return tcp_send_empty_ack(pcb);
 8013634:	6878      	ldr	r0, [r7, #4]
 8013636:	f000 fe63 	bl	8014300 <tcp_send_empty_ack>
 801363a:	4603      	mov	r3, r0
 801363c:	e18e      	b.n	801395c <tcp_output+0x4f0>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2200      	movs	r2, #0
 8013642:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801364a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (useg != NULL) {
 801364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801364e:	2b00      	cmp	r3, #0
 8013650:	f000 8158 	beq.w	8013904 <tcp_output+0x498>
    for (; useg->next != NULL; useg = useg->next);
 8013654:	e002      	b.n	801365c <tcp_output+0x1f0>
 8013656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d1f8      	bne.n	8013656 <tcp_output+0x1ea>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8013664:	e14e      	b.n	8013904 <tcp_output+0x498>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8013666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013668:	691b      	ldr	r3, [r3, #16]
 801366a:	899b      	ldrh	r3, [r3, #12]
 801366c:	b29b      	uxth	r3, r3
 801366e:	4618      	mov	r0, r3
 8013670:	f7f7 fb00 	bl	800ac74 <lwip_htons>
 8013674:	4603      	mov	r3, r0
 8013676:	b2db      	uxtb	r3, r3
 8013678:	f003 0304 	and.w	r3, r3, #4
 801367c:	2b00      	cmp	r3, #0
 801367e:	d009      	beq.n	8013694 <tcp_output+0x228>
 8013680:	4b17      	ldr	r3, [pc, #92]	@ (80136e0 <tcp_output+0x274>)
 8013682:	f240 5236 	movw	r2, #1334	@ 0x536
 8013686:	491e      	ldr	r1, [pc, #120]	@ (8013700 <tcp_output+0x294>)
 8013688:	4817      	ldr	r0, [pc, #92]	@ (80136e8 <tcp_output+0x27c>)
 801368a:	f008 f84d 	bl	801b728 <iprintf>
 801368e:	2000      	movs	r0, #0
 8013690:	f007 ff74 	bl	801b57c <fflush>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013698:	2b00      	cmp	r3, #0
 801369a:	d01f      	beq.n	80136dc <tcp_output+0x270>
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	8b5b      	ldrh	r3, [r3, #26]
 80136a0:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80136a4:	2b00      	cmp	r3, #0
 80136a6:	d119      	bne.n	80136dc <tcp_output+0x270>
 80136a8:	687b      	ldr	r3, [r7, #4]
 80136aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d00b      	beq.n	80136c8 <tcp_output+0x25c>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d110      	bne.n	80136dc <tcp_output+0x270>
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136be:	891a      	ldrh	r2, [r3, #8]
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80136c4:	429a      	cmp	r2, r3
 80136c6:	d209      	bcs.n	80136dc <tcp_output+0x270>
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d004      	beq.n	80136dc <tcp_output+0x270>
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80136d8:	2b08      	cmp	r3, #8
 80136da:	d913      	bls.n	8013704 <tcp_output+0x298>
 80136dc:	2301      	movs	r3, #1
 80136de:	e012      	b.n	8013706 <tcp_output+0x29a>
 80136e0:	080200b0 	.word	0x080200b0
 80136e4:	08020a0c 	.word	0x08020a0c
 80136e8:	08020104 	.word	0x08020104
 80136ec:	08020a24 	.word	0x08020a24
 80136f0:	20011dcc 	.word	0x20011dcc
 80136f4:	08020a4c 	.word	0x08020a4c
 80136f8:	08020a70 	.word	0x08020a70
 80136fc:	08020ab4 	.word	0x08020ab4
 8013700:	08020b00 	.word	0x08020b00
 8013704:	2300      	movs	r3, #0
 8013706:	2b00      	cmp	r3, #0
 8013708:	d106      	bne.n	8013718 <tcp_output+0x2ac>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	8b5b      	ldrh	r3, [r3, #26]
 801370e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8013712:	2b00      	cmp	r3, #0
 8013714:	f000 810b 	beq.w	801392e <tcp_output+0x4c2>
      break;
    }
#if TCP_CWND_DEBUG
    LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_output: snd_wnd %"TCPWNDSIZE_F", cwnd %"TCPWNDSIZE_F", wnd %"U32_F", effwnd %"U32_F", seq %"U32_F", ack %"U32_F", i %"S16_F"\n",
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801371e:	461d      	mov	r5, r3
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013726:	461e      	mov	r6, r3
 8013728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801372a:	691b      	ldr	r3, [r3, #16]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	4618      	mov	r0, r3
 8013730:	f7f7 fab5 	bl	800ac9e <lwip_htonl>
 8013734:	4602      	mov	r2, r0
 8013736:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013738:	891b      	ldrh	r3, [r3, #8]
 801373a:	441a      	add	r2, r3
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013740:	1ad4      	subs	r4, r2, r3
 8013742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013744:	691b      	ldr	r3, [r3, #16]
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	4618      	mov	r0, r3
 801374a:	f7f7 faa8 	bl	800ac9e <lwip_htonl>
 801374e:	4601      	mov	r1, r0
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013754:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 8013758:	9203      	str	r2, [sp, #12]
 801375a:	9302      	str	r3, [sp, #8]
 801375c:	9101      	str	r1, [sp, #4]
 801375e:	9400      	str	r4, [sp, #0]
 8013760:	69fb      	ldr	r3, [r7, #28]
 8013762:	4632      	mov	r2, r6
 8013764:	4629      	mov	r1, r5
 8013766:	487f      	ldr	r0, [pc, #508]	@ (8013964 <tcp_output+0x4f8>)
 8013768:	f007 ffde 	bl	801b728 <iprintf>
 801376c:	2000      	movs	r0, #0
 801376e:	f007 ff05 	bl	801b57c <fflush>
                                 pcb->snd_wnd, pcb->cwnd, wnd,
                                 lwip_ntohl(seg->tcphdr->seqno) + seg->len -
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
 8013772:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013774:	3301      	adds	r3, #1
 8013776:	b29b      	uxth	r3, r3
 8013778:	84fb      	strh	r3, [r7, #38]	@ 0x26
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	7d1b      	ldrb	r3, [r3, #20]
 801377e:	2b02      	cmp	r3, #2
 8013780:	d00d      	beq.n	801379e <tcp_output+0x332>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8013782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013784:	691b      	ldr	r3, [r3, #16]
 8013786:	899b      	ldrh	r3, [r3, #12]
 8013788:	b29c      	uxth	r4, r3
 801378a:	2010      	movs	r0, #16
 801378c:	f7f7 fa72 	bl	800ac74 <lwip_htons>
 8013790:	4603      	mov	r3, r0
 8013792:	461a      	mov	r2, r3
 8013794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013796:	691b      	ldr	r3, [r3, #16]
 8013798:	4322      	orrs	r2, r4
 801379a:	b292      	uxth	r2, r2
 801379c:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801379e:	69ba      	ldr	r2, [r7, #24]
 80137a0:	6879      	ldr	r1, [r7, #4]
 80137a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137a4:	f000 f904 	bl	80139b0 <tcp_output_segment>
 80137a8:	4603      	mov	r3, r0
 80137aa:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80137ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d009      	beq.n	80137c8 <tcp_output+0x35c>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	8b5b      	ldrh	r3, [r3, #26]
 80137b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80137bc:	b29a      	uxth	r2, r3
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	835a      	strh	r2, [r3, #26]
      return err;
 80137c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80137c6:	e0c9      	b.n	801395c <tcp_output+0x4f0>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
 80137c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ca:	2200      	movs	r2, #0
 80137cc:	815a      	strh	r2, [r3, #10]
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80137ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d0:	681a      	ldr	r2, [r3, #0]
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	7d1b      	ldrb	r3, [r3, #20]
 80137da:	2b02      	cmp	r3, #2
 80137dc:	d006      	beq.n	80137ec <tcp_output+0x380>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	8b5b      	ldrh	r3, [r3, #26]
 80137e2:	f023 0303 	bic.w	r3, r3, #3
 80137e6:	b29a      	uxth	r2, r3
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80137ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ee:	691b      	ldr	r3, [r3, #16]
 80137f0:	685b      	ldr	r3, [r3, #4]
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7f7 fa53 	bl	800ac9e <lwip_htonl>
 80137f8:	4604      	mov	r4, r0
 80137fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137fc:	891b      	ldrh	r3, [r3, #8]
 80137fe:	461d      	mov	r5, r3
 8013800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013802:	691b      	ldr	r3, [r3, #16]
 8013804:	899b      	ldrh	r3, [r3, #12]
 8013806:	b29b      	uxth	r3, r3
 8013808:	4618      	mov	r0, r3
 801380a:	f7f7 fa33 	bl	800ac74 <lwip_htons>
 801380e:	4603      	mov	r3, r0
 8013810:	b2db      	uxtb	r3, r3
 8013812:	f003 0303 	and.w	r3, r3, #3
 8013816:	2b00      	cmp	r3, #0
 8013818:	d001      	beq.n	801381e <tcp_output+0x3b2>
 801381a:	2301      	movs	r3, #1
 801381c:	e000      	b.n	8013820 <tcp_output+0x3b4>
 801381e:	2300      	movs	r3, #0
 8013820:	442b      	add	r3, r5
 8013822:	4423      	add	r3, r4
 8013824:	60fb      	str	r3, [r7, #12]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	1ad3      	subs	r3, r2, r3
 801382e:	2b00      	cmp	r3, #0
 8013830:	da02      	bge.n	8013838 <tcp_output+0x3cc>
      pcb->snd_nxt = snd_nxt;
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	68fa      	ldr	r2, [r7, #12]
 8013836:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8013838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801383a:	891b      	ldrh	r3, [r3, #8]
 801383c:	461c      	mov	r4, r3
 801383e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013840:	691b      	ldr	r3, [r3, #16]
 8013842:	899b      	ldrh	r3, [r3, #12]
 8013844:	b29b      	uxth	r3, r3
 8013846:	4618      	mov	r0, r3
 8013848:	f7f7 fa14 	bl	800ac74 <lwip_htons>
 801384c:	4603      	mov	r3, r0
 801384e:	b2db      	uxtb	r3, r3
 8013850:	f003 0303 	and.w	r3, r3, #3
 8013854:	2b00      	cmp	r3, #0
 8013856:	d001      	beq.n	801385c <tcp_output+0x3f0>
 8013858:	2301      	movs	r3, #1
 801385a:	e000      	b.n	801385e <tcp_output+0x3f2>
 801385c:	2300      	movs	r3, #0
 801385e:	4423      	add	r3, r4
 8013860:	2b00      	cmp	r3, #0
 8013862:	d049      	beq.n	80138f8 <tcp_output+0x48c>
      seg->next = NULL;
 8013864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013866:	2200      	movs	r2, #0
 8013868:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801386e:	2b00      	cmp	r3, #0
 8013870:	d105      	bne.n	801387e <tcp_output+0x412>
        pcb->unacked = seg;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013876:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8013878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801387a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801387c:	e03f      	b.n	80138fe <tcp_output+0x492>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801387e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013880:	691b      	ldr	r3, [r3, #16]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	4618      	mov	r0, r3
 8013886:	f7f7 fa0a 	bl	800ac9e <lwip_htonl>
 801388a:	4604      	mov	r4, r0
 801388c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801388e:	691b      	ldr	r3, [r3, #16]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	4618      	mov	r0, r3
 8013894:	f7f7 fa03 	bl	800ac9e <lwip_htonl>
 8013898:	4603      	mov	r3, r0
 801389a:	1ae3      	subs	r3, r4, r3
 801389c:	2b00      	cmp	r3, #0
 801389e:	da24      	bge.n	80138ea <tcp_output+0x47e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	3370      	adds	r3, #112	@ 0x70
 80138a4:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 80138a6:	e002      	b.n	80138ae <tcp_output+0x442>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80138a8:	6a3b      	ldr	r3, [r7, #32]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	623b      	str	r3, [r7, #32]
          while (*cur_seg &&
 80138ae:	6a3b      	ldr	r3, [r7, #32]
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d011      	beq.n	80138da <tcp_output+0x46e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80138b6:	6a3b      	ldr	r3, [r7, #32]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	691b      	ldr	r3, [r3, #16]
 80138bc:	685b      	ldr	r3, [r3, #4]
 80138be:	4618      	mov	r0, r3
 80138c0:	f7f7 f9ed 	bl	800ac9e <lwip_htonl>
 80138c4:	4604      	mov	r4, r0
 80138c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c8:	691b      	ldr	r3, [r3, #16]
 80138ca:	685b      	ldr	r3, [r3, #4]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7f7 f9e6 	bl	800ac9e <lwip_htonl>
 80138d2:	4603      	mov	r3, r0
 80138d4:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	dbe6      	blt.n	80138a8 <tcp_output+0x43c>
          }
          seg->next = (*cur_seg);
 80138da:	6a3b      	ldr	r3, [r7, #32]
 80138dc:	681a      	ldr	r2, [r3, #0]
 80138de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e0:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80138e2:	6a3b      	ldr	r3, [r7, #32]
 80138e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80138e6:	601a      	str	r2, [r3, #0]
 80138e8:	e009      	b.n	80138fe <tcp_output+0x492>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80138ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80138ee:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80138f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80138f6:	e002      	b.n	80138fe <tcp_output+0x492>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80138f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138fa:	f7fa fe6c 	bl	800e5d6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (seg != NULL &&
 8013904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013906:	2b00      	cmp	r3, #0
 8013908:	d012      	beq.n	8013930 <tcp_output+0x4c4>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801390c:	691b      	ldr	r3, [r3, #16]
 801390e:	685b      	ldr	r3, [r3, #4]
 8013910:	4618      	mov	r0, r3
 8013912:	f7f7 f9c4 	bl	800ac9e <lwip_htonl>
 8013916:	4602      	mov	r2, r0
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801391c:	1ad3      	subs	r3, r2, r3
 801391e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013920:	8912      	ldrh	r2, [r2, #8]
 8013922:	4413      	add	r3, r2
  while (seg != NULL &&
 8013924:	69fa      	ldr	r2, [r7, #28]
 8013926:	429a      	cmp	r2, r3
 8013928:	f4bf ae9d 	bcs.w	8013666 <tcp_output+0x1fa>
 801392c:	e000      	b.n	8013930 <tcp_output+0x4c4>
      break;
 801392e:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013934:	2b00      	cmp	r3, #0
 8013936:	d108      	bne.n	801394a <tcp_output+0x4de>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	2200      	movs	r2, #0
 801393c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8013940:	e004      	b.n	801394c <tcp_output+0x4e0>
    goto output_done;
 8013942:	bf00      	nop
 8013944:	e002      	b.n	801394c <tcp_output+0x4e0>
    goto output_done;
 8013946:	bf00      	nop
 8013948:	e000      	b.n	801394c <tcp_output+0x4e0>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801394a:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	8b5b      	ldrh	r3, [r3, #26]
 8013950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8013954:	b29a      	uxth	r2, r3
 8013956:	687b      	ldr	r3, [r7, #4]
 8013958:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801395a:	2300      	movs	r3, #0
}
 801395c:	4618      	mov	r0, r3
 801395e:	3734      	adds	r7, #52	@ 0x34
 8013960:	46bd      	mov	sp, r7
 8013962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013964:	08020b18 	.word	0x08020b18

08013968 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b082      	sub	sp, #8
 801396c:	af00      	add	r7, sp, #0
 801396e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	2b00      	cmp	r3, #0
 8013974:	d109      	bne.n	801398a <tcp_output_segment_busy+0x22>
 8013976:	4b0b      	ldr	r3, [pc, #44]	@ (80139a4 <tcp_output_segment_busy+0x3c>)
 8013978:	f240 529a 	movw	r2, #1434	@ 0x59a
 801397c:	490a      	ldr	r1, [pc, #40]	@ (80139a8 <tcp_output_segment_busy+0x40>)
 801397e:	480b      	ldr	r0, [pc, #44]	@ (80139ac <tcp_output_segment_busy+0x44>)
 8013980:	f007 fed2 	bl	801b728 <iprintf>
 8013984:	2000      	movs	r0, #0
 8013986:	f007 fdf9 	bl	801b57c <fflush>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	7b9b      	ldrb	r3, [r3, #14]
 8013990:	2b01      	cmp	r3, #1
 8013992:	d001      	beq.n	8013998 <tcp_output_segment_busy+0x30>
    /* other reference found */
    return 1;
 8013994:	2301      	movs	r3, #1
 8013996:	e000      	b.n	801399a <tcp_output_segment_busy+0x32>
  }
  /* no other references found */
  return 0;
 8013998:	2300      	movs	r3, #0
}
 801399a:	4618      	mov	r0, r3
 801399c:	3708      	adds	r7, #8
 801399e:	46bd      	mov	sp, r7
 80139a0:	bd80      	pop	{r7, pc}
 80139a2:	bf00      	nop
 80139a4:	080200b0 	.word	0x080200b0
 80139a8:	08020b6c 	.word	0x08020b6c
 80139ac:	08020104 	.word	0x08020104

080139b0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80139b0:	b5b0      	push	{r4, r5, r7, lr}
 80139b2:	b08c      	sub	sp, #48	@ 0x30
 80139b4:	af04      	add	r7, sp, #16
 80139b6:	60f8      	str	r0, [r7, #12]
 80139b8:	60b9      	str	r1, [r7, #8]
 80139ba:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80139bc:	68fb      	ldr	r3, [r7, #12]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d109      	bne.n	80139d6 <tcp_output_segment+0x26>
 80139c2:	4b7e      	ldr	r3, [pc, #504]	@ (8013bbc <tcp_output_segment+0x20c>)
 80139c4:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 80139c8:	497d      	ldr	r1, [pc, #500]	@ (8013bc0 <tcp_output_segment+0x210>)
 80139ca:	487e      	ldr	r0, [pc, #504]	@ (8013bc4 <tcp_output_segment+0x214>)
 80139cc:	f007 feac 	bl	801b728 <iprintf>
 80139d0:	2000      	movs	r0, #0
 80139d2:	f007 fdd3 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80139d6:	68bb      	ldr	r3, [r7, #8]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d109      	bne.n	80139f0 <tcp_output_segment+0x40>
 80139dc:	4b77      	ldr	r3, [pc, #476]	@ (8013bbc <tcp_output_segment+0x20c>)
 80139de:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 80139e2:	4979      	ldr	r1, [pc, #484]	@ (8013bc8 <tcp_output_segment+0x218>)
 80139e4:	4877      	ldr	r0, [pc, #476]	@ (8013bc4 <tcp_output_segment+0x214>)
 80139e6:	f007 fe9f 	bl	801b728 <iprintf>
 80139ea:	2000      	movs	r0, #0
 80139ec:	f007 fdc6 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d109      	bne.n	8013a0a <tcp_output_segment+0x5a>
 80139f6:	4b71      	ldr	r3, [pc, #452]	@ (8013bbc <tcp_output_segment+0x20c>)
 80139f8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80139fc:	4973      	ldr	r1, [pc, #460]	@ (8013bcc <tcp_output_segment+0x21c>)
 80139fe:	4871      	ldr	r0, [pc, #452]	@ (8013bc4 <tcp_output_segment+0x214>)
 8013a00:	f007 fe92 	bl	801b728 <iprintf>
 8013a04:	2000      	movs	r0, #0
 8013a06:	f007 fdb9 	bl	801b57c <fflush>

  if (tcp_output_segment_busy(seg)) {
 8013a0a:	68f8      	ldr	r0, [r7, #12]
 8013a0c:	f7ff ffac 	bl	8013968 <tcp_output_segment_busy>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d007      	beq.n	8013a26 <tcp_output_segment+0x76>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
 8013a16:	486e      	ldr	r0, [pc, #440]	@ (8013bd0 <tcp_output_segment+0x220>)
 8013a18:	f007 fef6 	bl	801b808 <puts>
 8013a1c:	2000      	movs	r0, #0
 8013a1e:	f007 fdad 	bl	801b57c <fflush>
    return ERR_OK;
 8013a22:	2300      	movs	r3, #0
 8013a24:	e0c6      	b.n	8013bb4 <tcp_output_segment+0x204>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013a2a:	68fb      	ldr	r3, [r7, #12]
 8013a2c:	691c      	ldr	r4, [r3, #16]
 8013a2e:	4610      	mov	r0, r2
 8013a30:	f7f7 f935 	bl	800ac9e <lwip_htonl>
 8013a34:	4603      	mov	r3, r0
 8013a36:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	691c      	ldr	r4, [r3, #16]
 8013a40:	4610      	mov	r0, r2
 8013a42:	f7f7 f917 	bl	800ac74 <lwip_htons>
 8013a46:	4603      	mov	r3, r0
 8013a48:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013a4a:	68bb      	ldr	r3, [r7, #8]
 8013a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a4e:	68ba      	ldr	r2, [r7, #8]
 8013a50:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8013a52:	441a      	add	r2, r3
 8013a54:	68bb      	ldr	r3, [r7, #8]
 8013a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	691b      	ldr	r3, [r3, #16]
 8013a5c:	3314      	adds	r3, #20
 8013a5e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	7b1b      	ldrb	r3, [r3, #12]
 8013a64:	f003 0301 	and.w	r3, r3, #1
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d015      	beq.n	8013a98 <tcp_output_segment+0xe8>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	3304      	adds	r3, #4
 8013a70:	461a      	mov	r2, r3
 8013a72:	6879      	ldr	r1, [r7, #4]
 8013a74:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8013a78:	f7fb fa2e 	bl	800eed8 <tcp_eff_send_mss_netif>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8013a80:	8b7b      	ldrh	r3, [r7, #26]
 8013a82:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7f7 f909 	bl	800ac9e <lwip_htonl>
 8013a8c:	4602      	mov	r2, r0
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	601a      	str	r2, [r3, #0]
    opts += 1;
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	3304      	adds	r3, #4
 8013a96:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	da02      	bge.n	8013aa8 <tcp_output_segment+0xf8>
    pcb->rtime = 0;
 8013aa2:	68bb      	ldr	r3, [r7, #8]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8013aa8:	68bb      	ldr	r3, [r7, #8]
 8013aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d115      	bne.n	8013adc <tcp_output_segment+0x12c>
    pcb->rttest = tcp_ticks;
 8013ab0:	4b48      	ldr	r3, [pc, #288]	@ (8013bd4 <tcp_output_segment+0x224>)
 8013ab2:	681a      	ldr	r2, [r3, #0]
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	691b      	ldr	r3, [r3, #16]
 8013abc:	685b      	ldr	r3, [r3, #4]
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7f7 f8ed 	bl	800ac9e <lwip_htonl>
 8013ac4:	4602      	mov	r2, r0
 8013ac6:	68bb      	ldr	r3, [r7, #8]
 8013ac8:	639a      	str	r2, [r3, #56]	@ 0x38

    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_output_segment: rtseq %"U32_F"\n", pcb->rtseq));
 8013aca:	68bb      	ldr	r3, [r7, #8]
 8013acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013ace:	4619      	mov	r1, r3
 8013ad0:	4841      	ldr	r0, [pc, #260]	@ (8013bd8 <tcp_output_segment+0x228>)
 8013ad2:	f007 fe29 	bl	801b728 <iprintf>
 8013ad6:	2000      	movs	r0, #0
 8013ad8:	f007 fd50 	bl	801b57c <fflush>
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	691b      	ldr	r3, [r3, #16]
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7f7 f8db 	bl	800ac9e <lwip_htonl>
 8013ae8:	4604      	mov	r4, r0
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	691b      	ldr	r3, [r3, #16]
 8013aee:	685b      	ldr	r3, [r3, #4]
 8013af0:	4618      	mov	r0, r3
 8013af2:	f7f7 f8d4 	bl	800ac9e <lwip_htonl>
 8013af6:	4602      	mov	r2, r0
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	891b      	ldrh	r3, [r3, #8]
 8013afc:	4413      	add	r3, r2
 8013afe:	461a      	mov	r2, r3
 8013b00:	4621      	mov	r1, r4
 8013b02:	4836      	ldr	r0, [pc, #216]	@ (8013bdc <tcp_output_segment+0x22c>)
 8013b04:	f007 fe10 	bl	801b728 <iprintf>
 8013b08:	2000      	movs	r0, #0
 8013b0a:	f007 fd37 	bl	801b57c <fflush>
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	691a      	ldr	r2, [r3, #16]
 8013b12:	68fb      	ldr	r3, [r7, #12]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	685b      	ldr	r3, [r3, #4]
 8013b18:	1ad3      	subs	r3, r2, r3
 8013b1a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	685b      	ldr	r3, [r3, #4]
 8013b20:	8959      	ldrh	r1, [r3, #10]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	8b3a      	ldrh	r2, [r7, #24]
 8013b28:	1a8a      	subs	r2, r1, r2
 8013b2a:	b292      	uxth	r2, r2
 8013b2c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	8919      	ldrh	r1, [r3, #8]
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	685b      	ldr	r3, [r3, #4]
 8013b38:	8b3a      	ldrh	r2, [r7, #24]
 8013b3a:	1a8a      	subs	r2, r1, r2
 8013b3c:	b292      	uxth	r2, r2
 8013b3e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8013b40:	68fb      	ldr	r3, [r7, #12]
 8013b42:	685b      	ldr	r3, [r3, #4]
 8013b44:	68fa      	ldr	r2, [r7, #12]
 8013b46:	6912      	ldr	r2, [r2, #16]
 8013b48:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	691b      	ldr	r3, [r3, #16]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	741a      	strb	r2, [r3, #16]
 8013b52:	2200      	movs	r2, #0
 8013b54:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	691a      	ldr	r2, [r3, #16]
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	7b1b      	ldrb	r3, [r3, #12]
 8013b5e:	f003 0301 	and.w	r3, r3, #1
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d001      	beq.n	8013b6a <tcp_output_segment+0x1ba>
 8013b66:	2318      	movs	r3, #24
 8013b68:	e000      	b.n	8013b6c <tcp_output_segment+0x1bc>
 8013b6a:	2314      	movs	r3, #20
 8013b6c:	4413      	add	r3, r2
 8013b6e:	69fa      	ldr	r2, [r7, #28]
 8013b70:	429a      	cmp	r2, r3
 8013b72:	d009      	beq.n	8013b88 <tcp_output_segment+0x1d8>
 8013b74:	4b11      	ldr	r3, [pc, #68]	@ (8013bbc <tcp_output_segment+0x20c>)
 8013b76:	f240 621c 	movw	r2, #1564	@ 0x61c
 8013b7a:	4919      	ldr	r1, [pc, #100]	@ (8013be0 <tcp_output_segment+0x230>)
 8013b7c:	4811      	ldr	r0, [pc, #68]	@ (8013bc4 <tcp_output_segment+0x214>)
 8013b7e:	f007 fdd3 	bl	801b728 <iprintf>
 8013b82:	2000      	movs	r0, #0
 8013b84:	f007 fcfa 	bl	801b57c <fflush>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	6858      	ldr	r0, [r3, #4]
 8013b8c:	68b9      	ldr	r1, [r7, #8]
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	1d1c      	adds	r4, r3, #4
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	7add      	ldrb	r5, [r3, #11]
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	7a9b      	ldrb	r3, [r3, #10]
 8013b9a:	687a      	ldr	r2, [r7, #4]
 8013b9c:	9202      	str	r2, [sp, #8]
 8013b9e:	2206      	movs	r2, #6
 8013ba0:	9201      	str	r2, [sp, #4]
 8013ba2:	9300      	str	r3, [sp, #0]
 8013ba4:	462b      	mov	r3, r5
 8013ba6:	4622      	mov	r2, r4
 8013ba8:	f005 ffea 	bl	8019b80 <ip4_output_if>
 8013bac:	4603      	mov	r3, r0
 8013bae:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013bb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3720      	adds	r7, #32
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bdb0      	pop	{r4, r5, r7, pc}
 8013bbc:	080200b0 	.word	0x080200b0
 8013bc0:	08020b94 	.word	0x08020b94
 8013bc4:	08020104 	.word	0x08020104
 8013bc8:	08020bb4 	.word	0x08020bb4
 8013bcc:	08020bd4 	.word	0x08020bd4
 8013bd0:	08020bf8 	.word	0x08020bf8
 8013bd4:	20011d7c 	.word	0x20011d7c
 8013bd8:	08020c1c 	.word	0x08020c1c
 8013bdc:	08020c3c 	.word	0x08020c3c
 8013be0:	08020c5c 	.word	0x08020c5c

08013be4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013be4:	b5b0      	push	{r4, r5, r7, lr}
 8013be6:	b084      	sub	sp, #16
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d109      	bne.n	8013c06 <tcp_rexmit_rto_prepare+0x22>
 8013bf2:	4b3d      	ldr	r3, [pc, #244]	@ (8013ce8 <tcp_rexmit_rto_prepare+0x104>)
 8013bf4:	f240 6263 	movw	r2, #1635	@ 0x663
 8013bf8:	493c      	ldr	r1, [pc, #240]	@ (8013cec <tcp_rexmit_rto_prepare+0x108>)
 8013bfa:	483d      	ldr	r0, [pc, #244]	@ (8013cf0 <tcp_rexmit_rto_prepare+0x10c>)
 8013bfc:	f007 fd94 	bl	801b728 <iprintf>
 8013c00:	2000      	movs	r0, #0
 8013c02:	f007 fcbb 	bl	801b57c <fflush>

  if (pcb->unacked == NULL) {
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d102      	bne.n	8013c14 <tcp_rexmit_rto_prepare+0x30>
    return ERR_VAL;
 8013c0e:	f06f 0305 	mvn.w	r3, #5
 8013c12:	e065      	b.n	8013ce0 <tcp_rexmit_rto_prepare+0xfc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013c18:	60fb      	str	r3, [r7, #12]
 8013c1a:	e011      	b.n	8013c40 <tcp_rexmit_rto_prepare+0x5c>
    if (tcp_output_segment_busy(seg)) {
 8013c1c:	68f8      	ldr	r0, [r7, #12]
 8013c1e:	f7ff fea3 	bl	8013968 <tcp_output_segment_busy>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d008      	beq.n	8013c3a <tcp_rexmit_rto_prepare+0x56>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
 8013c28:	4832      	ldr	r0, [pc, #200]	@ (8013cf4 <tcp_rexmit_rto_prepare+0x110>)
 8013c2a:	f007 fded 	bl	801b808 <puts>
 8013c2e:	2000      	movs	r0, #0
 8013c30:	f007 fca4 	bl	801b57c <fflush>
      return ERR_VAL;
 8013c34:	f06f 0305 	mvn.w	r3, #5
 8013c38:	e052      	b.n	8013ce0 <tcp_rexmit_rto_prepare+0xfc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	60fb      	str	r3, [r7, #12]
 8013c40:	68fb      	ldr	r3, [r7, #12]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d1e9      	bne.n	8013c1c <tcp_rexmit_rto_prepare+0x38>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f7ff fe8d 	bl	8013968 <tcp_output_segment_busy>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d008      	beq.n	8013c66 <tcp_rexmit_rto_prepare+0x82>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
 8013c54:	4827      	ldr	r0, [pc, #156]	@ (8013cf4 <tcp_rexmit_rto_prepare+0x110>)
 8013c56:	f007 fdd7 	bl	801b808 <puts>
 8013c5a:	2000      	movs	r0, #0
 8013c5c:	f007 fc8e 	bl	801b57c <fflush>
    return ERR_VAL;
 8013c60:	f06f 0305 	mvn.w	r3, #5
 8013c64:	e03c      	b.n	8013ce0 <tcp_rexmit_rto_prepare+0xfc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013c6a:	68fb      	ldr	r3, [r7, #12]
 8013c6c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE_DBGCHECK
  /* if last unsent changed, we need to update unsent_oversize */
  if (pcb->unsent == NULL) {
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d104      	bne.n	8013c80 <tcp_rexmit_rto_prepare+0x9c>
    pcb->unsent_oversize = seg->oversize_left;
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	895a      	ldrh	r2, [r3, #10]
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	2200      	movs	r2, #0
 8013c8c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	8b5b      	ldrh	r3, [r3, #26]
 8013c92:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8013c96:	b29a      	uxth	r2, r3
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	691b      	ldr	r3, [r3, #16]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	f7f6 fffb 	bl	800ac9e <lwip_htonl>
 8013ca8:	4604      	mov	r4, r0
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	891b      	ldrh	r3, [r3, #8]
 8013cae:	461d      	mov	r5, r3
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	691b      	ldr	r3, [r3, #16]
 8013cb4:	899b      	ldrh	r3, [r3, #12]
 8013cb6:	b29b      	uxth	r3, r3
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7f6 ffdb 	bl	800ac74 <lwip_htons>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	f003 0303 	and.w	r3, r3, #3
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d001      	beq.n	8013cce <tcp_rexmit_rto_prepare+0xea>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e000      	b.n	8013cd0 <tcp_rexmit_rto_prepare+0xec>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	442b      	add	r3, r5
 8013cd2:	18e2      	adds	r2, r4, r3
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8013cde:	2300      	movs	r3, #0
}
 8013ce0:	4618      	mov	r0, r3
 8013ce2:	3710      	adds	r7, #16
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	bdb0      	pop	{r4, r5, r7, pc}
 8013ce8:	080200b0 	.word	0x080200b0
 8013cec:	08020c70 	.word	0x08020c70
 8013cf0:	08020104 	.word	0x08020104
 8013cf4:	08020c94 	.word	0x08020c94

08013cf8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d109      	bne.n	8013d1a <tcp_rexmit_rto_commit+0x22>
 8013d06:	4b0f      	ldr	r3, [pc, #60]	@ (8013d44 <tcp_rexmit_rto_commit+0x4c>)
 8013d08:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013d0c:	490e      	ldr	r1, [pc, #56]	@ (8013d48 <tcp_rexmit_rto_commit+0x50>)
 8013d0e:	480f      	ldr	r0, [pc, #60]	@ (8013d4c <tcp_rexmit_rto_commit+0x54>)
 8013d10:	f007 fd0a 	bl	801b728 <iprintf>
 8013d14:	2000      	movs	r0, #0
 8013d16:	f007 fc31 	bl	801b57c <fflush>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013d20:	2bff      	cmp	r3, #255	@ 0xff
 8013d22:	d007      	beq.n	8013d34 <tcp_rexmit_rto_commit+0x3c>
    ++pcb->nrtx;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013d2a:	3301      	adds	r3, #1
 8013d2c:	b2da      	uxtb	r2, r3
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f7ff fb99 	bl	801346c <tcp_output>
}
 8013d3a:	bf00      	nop
 8013d3c:	3708      	adds	r7, #8
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	080200b0 	.word	0x080200b0
 8013d48:	08020cb4 	.word	0x08020cb4
 8013d4c:	08020104 	.word	0x08020104

08013d50 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b082      	sub	sp, #8
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d109      	bne.n	8013d72 <tcp_rexmit_rto+0x22>
 8013d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8013d8c <tcp_rexmit_rto+0x3c>)
 8013d60:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8013d64:	490a      	ldr	r1, [pc, #40]	@ (8013d90 <tcp_rexmit_rto+0x40>)
 8013d66:	480b      	ldr	r0, [pc, #44]	@ (8013d94 <tcp_rexmit_rto+0x44>)
 8013d68:	f007 fcde 	bl	801b728 <iprintf>
 8013d6c:	2000      	movs	r0, #0
 8013d6e:	f007 fc05 	bl	801b57c <fflush>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013d72:	6878      	ldr	r0, [r7, #4]
 8013d74:	f7ff ff36 	bl	8013be4 <tcp_rexmit_rto_prepare>
 8013d78:	4603      	mov	r3, r0
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d102      	bne.n	8013d84 <tcp_rexmit_rto+0x34>
    tcp_rexmit_rto_commit(pcb);
 8013d7e:	6878      	ldr	r0, [r7, #4]
 8013d80:	f7ff ffba 	bl	8013cf8 <tcp_rexmit_rto_commit>
  }
}
 8013d84:	bf00      	nop
 8013d86:	3708      	adds	r7, #8
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}
 8013d8c:	080200b0 	.word	0x080200b0
 8013d90:	08020cd8 	.word	0x08020cd8
 8013d94:	08020104 	.word	0x08020104

08013d98 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8013d98:	b590      	push	{r4, r7, lr}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d109      	bne.n	8013dba <tcp_rexmit+0x22>
 8013da6:	4b34      	ldr	r3, [pc, #208]	@ (8013e78 <tcp_rexmit+0xe0>)
 8013da8:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8013dac:	4933      	ldr	r1, [pc, #204]	@ (8013e7c <tcp_rexmit+0xe4>)
 8013dae:	4834      	ldr	r0, [pc, #208]	@ (8013e80 <tcp_rexmit+0xe8>)
 8013db0:	f007 fcba 	bl	801b728 <iprintf>
 8013db4:	2000      	movs	r0, #0
 8013db6:	f007 fbe1 	bl	801b57c <fflush>

  if (pcb->unacked == NULL) {
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d102      	bne.n	8013dc8 <tcp_rexmit+0x30>
    return ERR_VAL;
 8013dc2:	f06f 0305 	mvn.w	r3, #5
 8013dc6:	e052      	b.n	8013e6e <tcp_rexmit+0xd6>
  }

  seg = pcb->unacked;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013dcc:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8013dce:	68b8      	ldr	r0, [r7, #8]
 8013dd0:	f7ff fdca 	bl	8013968 <tcp_output_segment_busy>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d008      	beq.n	8013dec <tcp_rexmit+0x54>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
 8013dda:	482a      	ldr	r0, [pc, #168]	@ (8013e84 <tcp_rexmit+0xec>)
 8013ddc:	f007 fd14 	bl	801b808 <puts>
 8013de0:	2000      	movs	r0, #0
 8013de2:	f007 fbcb 	bl	801b57c <fflush>
    return ERR_VAL;
 8013de6:	f06f 0305 	mvn.w	r3, #5
 8013dea:	e040      	b.n	8013e6e <tcp_rexmit+0xd6>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8013dec:	68bb      	ldr	r3, [r7, #8]
 8013dee:	681a      	ldr	r2, [r3, #0]
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	336c      	adds	r3, #108	@ 0x6c
 8013df8:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013dfa:	e002      	b.n	8013e02 <tcp_rexmit+0x6a>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d011      	beq.n	8013e2e <tcp_rexmit+0x96>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	691b      	ldr	r3, [r3, #16]
 8013e10:	685b      	ldr	r3, [r3, #4]
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7f6 ff43 	bl	800ac9e <lwip_htonl>
 8013e18:	4604      	mov	r4, r0
 8013e1a:	68bb      	ldr	r3, [r7, #8]
 8013e1c:	691b      	ldr	r3, [r3, #16]
 8013e1e:	685b      	ldr	r3, [r3, #4]
 8013e20:	4618      	mov	r0, r3
 8013e22:	f7f6 ff3c 	bl	800ac9e <lwip_htonl>
 8013e26:	4603      	mov	r3, r0
 8013e28:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	dbe6      	blt.n	8013dfc <tcp_rexmit+0x64>
  }
  seg->next = *cur_seg;
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	68ba      	ldr	r2, [r7, #8]
 8013e3a:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d103      	bne.n	8013e4c <tcp_rexmit+0xb4>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2200      	movs	r2, #0
 8013e48:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013e52:	2bff      	cmp	r3, #255	@ 0xff
 8013e54:	d007      	beq.n	8013e66 <tcp_rexmit+0xce>
    ++pcb->nrtx;
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8013e5c:	3301      	adds	r3, #1
 8013e5e:	b2da      	uxtb	r2, r3
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2200      	movs	r2, #0
 8013e6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8013e6c:	2300      	movs	r3, #0
}
 8013e6e:	4618      	mov	r0, r3
 8013e70:	3714      	adds	r7, #20
 8013e72:	46bd      	mov	sp, r7
 8013e74:	bd90      	pop	{r4, r7, pc}
 8013e76:	bf00      	nop
 8013e78:	080200b0 	.word	0x080200b0
 8013e7c:	08020cf4 	.word	0x08020cf4
 8013e80:	08020104 	.word	0x08020104
 8013e84:	08020d0c 	.word	0x08020d0c

08013e88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013e88:	b5b0      	push	{r4, r5, r7, lr}
 8013e8a:	b082      	sub	sp, #8
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d109      	bne.n	8013eaa <tcp_rexmit_fast+0x22>
 8013e96:	4b3e      	ldr	r3, [pc, #248]	@ (8013f90 <tcp_rexmit_fast+0x108>)
 8013e98:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8013e9c:	493d      	ldr	r1, [pc, #244]	@ (8013f94 <tcp_rexmit_fast+0x10c>)
 8013e9e:	483e      	ldr	r0, [pc, #248]	@ (8013f98 <tcp_rexmit_fast+0x110>)
 8013ea0:	f007 fc42 	bl	801b728 <iprintf>
 8013ea4:	2000      	movs	r0, #0
 8013ea6:	f007 fb69 	bl	801b57c <fflush>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d069      	beq.n	8013f86 <tcp_rexmit_fast+0xfe>
 8013eb2:	687b      	ldr	r3, [r7, #4]
 8013eb4:	8b5b      	ldrh	r3, [r3, #26]
 8013eb6:	f003 0304 	and.w	r3, r3, #4
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d163      	bne.n	8013f86 <tcp_rexmit_fast+0xfe>
    /* This is fast retransmit. Retransmit the first unacked segment. */
    LWIP_DEBUGF(TCP_FR_DEBUG,
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8013ec4:	461d      	mov	r5, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013ece:	691b      	ldr	r3, [r3, #16]
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	f7f6 fee3 	bl	800ac9e <lwip_htonl>
 8013ed8:	4603      	mov	r3, r0
 8013eda:	4622      	mov	r2, r4
 8013edc:	4629      	mov	r1, r5
 8013ede:	482f      	ldr	r0, [pc, #188]	@ (8013f9c <tcp_rexmit_fast+0x114>)
 8013ee0:	f007 fc22 	bl	801b728 <iprintf>
 8013ee4:	2000      	movs	r0, #0
 8013ee6:	f007 fb49 	bl	801b57c <fflush>
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8013eea:	6878      	ldr	r0, [r7, #4]
 8013eec:	f7ff ff54 	bl	8013d98 <tcp_rexmit>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d147      	bne.n	8013f86 <tcp_rexmit_fast+0xfe>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8013f02:	4293      	cmp	r3, r2
 8013f04:	bf28      	it	cs
 8013f06:	4613      	movcs	r3, r2
 8013f08:	b29b      	uxth	r3, r3
 8013f0a:	0fda      	lsrs	r2, r3, #31
 8013f0c:	4413      	add	r3, r2
 8013f0e:	105b      	asrs	r3, r3, #1
 8013f10:	b29a      	uxth	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013f1e:	461a      	mov	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f24:	005b      	lsls	r3, r3, #1
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d215      	bcs.n	8013f56 <tcp_rexmit_fast+0xce>
        LWIP_DEBUGF(TCP_FR_DEBUG,
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8013f30:	4619      	mov	r1, r3
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	b29b      	uxth	r3, r3
 8013f3a:	461a      	mov	r2, r3
 8013f3c:	4818      	ldr	r0, [pc, #96]	@ (8013fa0 <tcp_rexmit_fast+0x118>)
 8013f3e:	f007 fbf3 	bl	801b728 <iprintf>
 8013f42:	2000      	movs	r0, #0
 8013f44:	f007 fb1a 	bl	801b57c <fflush>
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f4c:	005b      	lsls	r3, r3, #1
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013f60:	4619      	mov	r1, r3
 8013f62:	0049      	lsls	r1, r1, #1
 8013f64:	440b      	add	r3, r1
 8013f66:	b29b      	uxth	r3, r3
 8013f68:	4413      	add	r3, r2
 8013f6a:	b29a      	uxth	r2, r3
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	8b5b      	ldrh	r3, [r3, #26]
 8013f76:	f043 0304 	orr.w	r3, r3, #4
 8013f7a:	b29a      	uxth	r2, r3
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	2200      	movs	r2, #0
 8013f84:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8013f86:	bf00      	nop
 8013f88:	3708      	adds	r7, #8
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8013f8e:	bf00      	nop
 8013f90:	080200b0 	.word	0x080200b0
 8013f94:	08020d1c 	.word	0x08020d1c
 8013f98:	08020104 	.word	0x08020104
 8013f9c:	08020d3c 	.word	0x08020d3c
 8013fa0:	08020d74 	.word	0x08020d74

08013fa4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013fa4:	b580      	push	{r7, lr}
 8013fa6:	b086      	sub	sp, #24
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	60f8      	str	r0, [r7, #12]
 8013fac:	607b      	str	r3, [r7, #4]
 8013fae:	460b      	mov	r3, r1
 8013fb0:	817b      	strh	r3, [r7, #10]
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8013fb6:	897a      	ldrh	r2, [r7, #10]
 8013fb8:	893b      	ldrh	r3, [r7, #8]
 8013fba:	4413      	add	r3, r2
 8013fbc:	b29b      	uxth	r3, r3
 8013fbe:	3314      	adds	r3, #20
 8013fc0:	b29b      	uxth	r3, r3
 8013fc2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	2022      	movs	r0, #34	@ 0x22
 8013fca:	f7f8 f941 	bl	800c250 <pbuf_alloc>
 8013fce:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d050      	beq.n	8014078 <tcp_output_alloc_header_common+0xd4>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8013fd6:	897b      	ldrh	r3, [r7, #10]
 8013fd8:	3313      	adds	r3, #19
 8013fda:	697a      	ldr	r2, [r7, #20]
 8013fdc:	8952      	ldrh	r2, [r2, #10]
 8013fde:	4293      	cmp	r3, r2
 8013fe0:	db09      	blt.n	8013ff6 <tcp_output_alloc_header_common+0x52>
 8013fe2:	4b28      	ldr	r3, [pc, #160]	@ (8014084 <tcp_output_alloc_header_common+0xe0>)
 8013fe4:	f240 7223 	movw	r2, #1827	@ 0x723
 8013fe8:	4927      	ldr	r1, [pc, #156]	@ (8014088 <tcp_output_alloc_header_common+0xe4>)
 8013fea:	4828      	ldr	r0, [pc, #160]	@ (801408c <tcp_output_alloc_header_common+0xe8>)
 8013fec:	f007 fb9c 	bl	801b728 <iprintf>
 8013ff0:	2000      	movs	r0, #0
 8013ff2:	f007 fac3 	bl	801b57c <fflush>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8013ff6:	697b      	ldr	r3, [r7, #20]
 8013ff8:	685b      	ldr	r3, [r3, #4]
 8013ffa:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8013ffc:	8c3b      	ldrh	r3, [r7, #32]
 8013ffe:	4618      	mov	r0, r3
 8014000:	f7f6 fe38 	bl	800ac74 <lwip_htons>
 8014004:	4603      	mov	r3, r0
 8014006:	461a      	mov	r2, r3
 8014008:	693b      	ldr	r3, [r7, #16]
 801400a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801400c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801400e:	4618      	mov	r0, r3
 8014010:	f7f6 fe30 	bl	800ac74 <lwip_htons>
 8014014:	4603      	mov	r3, r0
 8014016:	461a      	mov	r2, r3
 8014018:	693b      	ldr	r3, [r7, #16]
 801401a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	687a      	ldr	r2, [r7, #4]
 8014020:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014022:	68f8      	ldr	r0, [r7, #12]
 8014024:	f7f6 fe3b 	bl	800ac9e <lwip_htonl>
 8014028:	4602      	mov	r2, r0
 801402a:	693b      	ldr	r3, [r7, #16]
 801402c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801402e:	897b      	ldrh	r3, [r7, #10]
 8014030:	089b      	lsrs	r3, r3, #2
 8014032:	b29b      	uxth	r3, r3
 8014034:	3305      	adds	r3, #5
 8014036:	b29b      	uxth	r3, r3
 8014038:	031b      	lsls	r3, r3, #12
 801403a:	b29a      	uxth	r2, r3
 801403c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8014040:	b29b      	uxth	r3, r3
 8014042:	4313      	orrs	r3, r2
 8014044:	b29b      	uxth	r3, r3
 8014046:	4618      	mov	r0, r3
 8014048:	f7f6 fe14 	bl	800ac74 <lwip_htons>
 801404c:	4603      	mov	r3, r0
 801404e:	461a      	mov	r2, r3
 8014050:	693b      	ldr	r3, [r7, #16]
 8014052:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014054:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014056:	4618      	mov	r0, r3
 8014058:	f7f6 fe0c 	bl	800ac74 <lwip_htons>
 801405c:	4603      	mov	r3, r0
 801405e:	461a      	mov	r2, r3
 8014060:	693b      	ldr	r3, [r7, #16]
 8014062:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014064:	693b      	ldr	r3, [r7, #16]
 8014066:	2200      	movs	r2, #0
 8014068:	741a      	strb	r2, [r3, #16]
 801406a:	2200      	movs	r2, #0
 801406c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	2200      	movs	r2, #0
 8014072:	749a      	strb	r2, [r3, #18]
 8014074:	2200      	movs	r2, #0
 8014076:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014078:	697b      	ldr	r3, [r7, #20]
}
 801407a:	4618      	mov	r0, r3
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
 8014082:	bf00      	nop
 8014084:	080200b0 	.word	0x080200b0
 8014088:	08020dc0 	.word	0x08020dc0
 801408c:	08020104 	.word	0x08020104

08014090 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014090:	b5b0      	push	{r4, r5, r7, lr}
 8014092:	b08a      	sub	sp, #40	@ 0x28
 8014094:	af04      	add	r7, sp, #16
 8014096:	60f8      	str	r0, [r7, #12]
 8014098:	607b      	str	r3, [r7, #4]
 801409a:	460b      	mov	r3, r1
 801409c:	817b      	strh	r3, [r7, #10]
 801409e:	4613      	mov	r3, r2
 80140a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d109      	bne.n	80140bc <tcp_output_alloc_header+0x2c>
 80140a8:	4b16      	ldr	r3, [pc, #88]	@ (8014104 <tcp_output_alloc_header+0x74>)
 80140aa:	f240 7242 	movw	r2, #1858	@ 0x742
 80140ae:	4916      	ldr	r1, [pc, #88]	@ (8014108 <tcp_output_alloc_header+0x78>)
 80140b0:	4816      	ldr	r0, [pc, #88]	@ (801410c <tcp_output_alloc_header+0x7c>)
 80140b2:	f007 fb39 	bl	801b728 <iprintf>
 80140b6:	2000      	movs	r0, #0
 80140b8:	f007 fa60 	bl	801b57c <fflush>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	8adb      	ldrh	r3, [r3, #22]
 80140c4:	68fa      	ldr	r2, [r7, #12]
 80140c6:	8b12      	ldrh	r2, [r2, #24]
 80140c8:	68f9      	ldr	r1, [r7, #12]
 80140ca:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80140cc:	893d      	ldrh	r5, [r7, #8]
 80140ce:	897c      	ldrh	r4, [r7, #10]
 80140d0:	9103      	str	r1, [sp, #12]
 80140d2:	2110      	movs	r1, #16
 80140d4:	9102      	str	r1, [sp, #8]
 80140d6:	9201      	str	r2, [sp, #4]
 80140d8:	9300      	str	r3, [sp, #0]
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	462a      	mov	r2, r5
 80140de:	4621      	mov	r1, r4
 80140e0:	f7ff ff60 	bl	8013fa4 <tcp_output_alloc_header_common>
 80140e4:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	2b00      	cmp	r3, #0
 80140ea:	d006      	beq.n	80140fa <tcp_output_alloc_header+0x6a>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140f0:	68fa      	ldr	r2, [r7, #12]
 80140f2:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80140f4:	441a      	add	r2, r3
 80140f6:	68fb      	ldr	r3, [r7, #12]
 80140f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80140fa:	697b      	ldr	r3, [r7, #20]
}
 80140fc:	4618      	mov	r0, r3
 80140fe:	3718      	adds	r7, #24
 8014100:	46bd      	mov	sp, r7
 8014102:	bdb0      	pop	{r4, r5, r7, pc}
 8014104:	080200b0 	.word	0x080200b0
 8014108:	08020df0 	.word	0x08020df0
 801410c:	08020104 	.word	0x08020104

08014110 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014110:	b580      	push	{r7, lr}
 8014112:	b088      	sub	sp, #32
 8014114:	af00      	add	r7, sp, #0
 8014116:	60f8      	str	r0, [r7, #12]
 8014118:	60b9      	str	r1, [r7, #8]
 801411a:	4611      	mov	r1, r2
 801411c:	461a      	mov	r2, r3
 801411e:	460b      	mov	r3, r1
 8014120:	71fb      	strb	r3, [r7, #7]
 8014122:	4613      	mov	r3, r2
 8014124:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014126:	2300      	movs	r3, #0
 8014128:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	2b00      	cmp	r3, #0
 801412e:	d109      	bne.n	8014144 <tcp_output_fill_options+0x34>
 8014130:	4b15      	ldr	r3, [pc, #84]	@ (8014188 <tcp_output_fill_options+0x78>)
 8014132:	f240 7256 	movw	r2, #1878	@ 0x756
 8014136:	4915      	ldr	r1, [pc, #84]	@ (801418c <tcp_output_fill_options+0x7c>)
 8014138:	4815      	ldr	r0, [pc, #84]	@ (8014190 <tcp_output_fill_options+0x80>)
 801413a:	f007 faf5 	bl	801b728 <iprintf>
 801413e:	2000      	movs	r0, #0
 8014140:	f007 fa1c 	bl	801b57c <fflush>

  tcphdr = (struct tcp_hdr *)p->payload;
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801414a:	69bb      	ldr	r3, [r7, #24]
 801414c:	3314      	adds	r3, #20
 801414e:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8014150:	8bfb      	ldrh	r3, [r7, #30]
 8014152:	009b      	lsls	r3, r3, #2
 8014154:	461a      	mov	r2, r3
 8014156:	79fb      	ldrb	r3, [r7, #7]
 8014158:	009b      	lsls	r3, r3, #2
 801415a:	f003 0304 	and.w	r3, r3, #4
 801415e:	4413      	add	r3, r2
 8014160:	3314      	adds	r3, #20
 8014162:	69ba      	ldr	r2, [r7, #24]
 8014164:	4413      	add	r3, r2
 8014166:	697a      	ldr	r2, [r7, #20]
 8014168:	429a      	cmp	r2, r3
 801416a:	d009      	beq.n	8014180 <tcp_output_fill_options+0x70>
 801416c:	4b06      	ldr	r3, [pc, #24]	@ (8014188 <tcp_output_fill_options+0x78>)
 801416e:	f240 7275 	movw	r2, #1909	@ 0x775
 8014172:	4908      	ldr	r1, [pc, #32]	@ (8014194 <tcp_output_fill_options+0x84>)
 8014174:	4806      	ldr	r0, [pc, #24]	@ (8014190 <tcp_output_fill_options+0x80>)
 8014176:	f007 fad7 	bl	801b728 <iprintf>
 801417a:	2000      	movs	r0, #0
 801417c:	f007 f9fe 	bl	801b57c <fflush>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8014180:	bf00      	nop
 8014182:	3720      	adds	r7, #32
 8014184:	46bd      	mov	sp, r7
 8014186:	bd80      	pop	{r7, pc}
 8014188:	080200b0 	.word	0x080200b0
 801418c:	08020e18 	.word	0x08020e18
 8014190:	08020104 	.word	0x08020104
 8014194:	08020c5c 	.word	0x08020c5c

08014198 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8014198:	b580      	push	{r7, lr}
 801419a:	b08a      	sub	sp, #40	@ 0x28
 801419c:	af04      	add	r7, sp, #16
 801419e:	60f8      	str	r0, [r7, #12]
 80141a0:	60b9      	str	r1, [r7, #8]
 80141a2:	607a      	str	r2, [r7, #4]
 80141a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d109      	bne.n	80141c0 <tcp_output_control_segment+0x28>
 80141ac:	4b1d      	ldr	r3, [pc, #116]	@ (8014224 <tcp_output_control_segment+0x8c>)
 80141ae:	f240 7287 	movw	r2, #1927	@ 0x787
 80141b2:	491d      	ldr	r1, [pc, #116]	@ (8014228 <tcp_output_control_segment+0x90>)
 80141b4:	481d      	ldr	r0, [pc, #116]	@ (801422c <tcp_output_control_segment+0x94>)
 80141b6:	f007 fab7 	bl	801b728 <iprintf>
 80141ba:	2000      	movs	r0, #0
 80141bc:	f007 f9de 	bl	801b57c <fflush>

  netif = tcp_route(pcb, src, dst);
 80141c0:	683a      	ldr	r2, [r7, #0]
 80141c2:	6879      	ldr	r1, [r7, #4]
 80141c4:	68f8      	ldr	r0, [r7, #12]
 80141c6:	f7fd ffd7 	bl	8012178 <tcp_route>
 80141ca:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d102      	bne.n	80141d8 <tcp_output_control_segment+0x40>
    err = ERR_RTE;
 80141d2:	23fc      	movs	r3, #252	@ 0xfc
 80141d4:	75fb      	strb	r3, [r7, #23]
 80141d6:	e01c      	b.n	8014212 <tcp_output_control_segment+0x7a>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d006      	beq.n	80141ec <tcp_output_control_segment+0x54>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80141de:	68fb      	ldr	r3, [r7, #12]
 80141e0:	7adb      	ldrb	r3, [r3, #11]
 80141e2:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	7a9b      	ldrb	r3, [r3, #10]
 80141e8:	757b      	strb	r3, [r7, #21]
 80141ea:	e003      	b.n	80141f4 <tcp_output_control_segment+0x5c>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80141ec:	23ff      	movs	r3, #255	@ 0xff
 80141ee:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80141f0:	2300      	movs	r3, #0
 80141f2:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80141f4:	7dba      	ldrb	r2, [r7, #22]
 80141f6:	693b      	ldr	r3, [r7, #16]
 80141f8:	9302      	str	r3, [sp, #8]
 80141fa:	2306      	movs	r3, #6
 80141fc:	9301      	str	r3, [sp, #4]
 80141fe:	7d7b      	ldrb	r3, [r7, #21]
 8014200:	9300      	str	r3, [sp, #0]
 8014202:	4613      	mov	r3, r2
 8014204:	683a      	ldr	r2, [r7, #0]
 8014206:	6879      	ldr	r1, [r7, #4]
 8014208:	68b8      	ldr	r0, [r7, #8]
 801420a:	f005 fcb9 	bl	8019b80 <ip4_output_if>
 801420e:	4603      	mov	r3, r0
 8014210:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8014212:	68b8      	ldr	r0, [r7, #8]
 8014214:	f7f8 fb82 	bl	800c91c <pbuf_free>
  return err;
 8014218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801421c:	4618      	mov	r0, r3
 801421e:	3718      	adds	r7, #24
 8014220:	46bd      	mov	sp, r7
 8014222:	bd80      	pop	{r7, pc}
 8014224:	080200b0 	.word	0x080200b0
 8014228:	08020e40 	.word	0x08020e40
 801422c:	08020104 	.word	0x08020104

08014230 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8014230:	b590      	push	{r4, r7, lr}
 8014232:	b08b      	sub	sp, #44	@ 0x2c
 8014234:	af04      	add	r7, sp, #16
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	607a      	str	r2, [r7, #4]
 801423c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801423e:	683b      	ldr	r3, [r7, #0]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d109      	bne.n	8014258 <tcp_rst+0x28>
 8014244:	4b28      	ldr	r3, [pc, #160]	@ (80142e8 <tcp_rst+0xb8>)
 8014246:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 801424a:	4928      	ldr	r1, [pc, #160]	@ (80142ec <tcp_rst+0xbc>)
 801424c:	4828      	ldr	r0, [pc, #160]	@ (80142f0 <tcp_rst+0xc0>)
 801424e:	f007 fa6b 	bl	801b728 <iprintf>
 8014252:	2000      	movs	r0, #0
 8014254:	f007 f992 	bl	801b57c <fflush>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8014258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801425a:	2b00      	cmp	r3, #0
 801425c:	d109      	bne.n	8014272 <tcp_rst+0x42>
 801425e:	4b22      	ldr	r3, [pc, #136]	@ (80142e8 <tcp_rst+0xb8>)
 8014260:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8014264:	4923      	ldr	r1, [pc, #140]	@ (80142f4 <tcp_rst+0xc4>)
 8014266:	4822      	ldr	r0, [pc, #136]	@ (80142f0 <tcp_rst+0xc0>)
 8014268:	f007 fa5e 	bl	801b728 <iprintf>
 801426c:	2000      	movs	r0, #0
 801426e:	f007 f985 	bl	801b57c <fflush>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014272:	2300      	movs	r3, #0
 8014274:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8014276:	f246 0308 	movw	r3, #24584	@ 0x6008
 801427a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801427c:	7dfb      	ldrb	r3, [r7, #23]
 801427e:	b29c      	uxth	r4, r3
 8014280:	68b8      	ldr	r0, [r7, #8]
 8014282:	f7f6 fd0c 	bl	800ac9e <lwip_htonl>
 8014286:	4602      	mov	r2, r0
 8014288:	8abb      	ldrh	r3, [r7, #20]
 801428a:	9303      	str	r3, [sp, #12]
 801428c:	2314      	movs	r3, #20
 801428e:	9302      	str	r3, [sp, #8]
 8014290:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8014292:	9301      	str	r3, [sp, #4]
 8014294:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8014296:	9300      	str	r3, [sp, #0]
 8014298:	4613      	mov	r3, r2
 801429a:	2200      	movs	r2, #0
 801429c:	4621      	mov	r1, r4
 801429e:	6878      	ldr	r0, [r7, #4]
 80142a0:	f7ff fe80 	bl	8013fa4 <tcp_output_alloc_header_common>
 80142a4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80142a6:	693b      	ldr	r3, [r7, #16]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	d106      	bne.n	80142ba <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
 80142ac:	4812      	ldr	r0, [pc, #72]	@ (80142f8 <tcp_rst+0xc8>)
 80142ae:	f007 faab 	bl	801b808 <puts>
 80142b2:	2000      	movs	r0, #0
 80142b4:	f007 f962 	bl	801b57c <fflush>
    return;
 80142b8:	e013      	b.n	80142e2 <tcp_rst+0xb2>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80142ba:	7dfb      	ldrb	r3, [r7, #23]
 80142bc:	2200      	movs	r2, #0
 80142be:	6939      	ldr	r1, [r7, #16]
 80142c0:	68f8      	ldr	r0, [r7, #12]
 80142c2:	f7ff ff25 	bl	8014110 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80142c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80142c8:	683a      	ldr	r2, [r7, #0]
 80142ca:	6939      	ldr	r1, [r7, #16]
 80142cc:	68f8      	ldr	r0, [r7, #12]
 80142ce:	f7ff ff63 	bl	8014198 <tcp_output_control_segment>
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	68b9      	ldr	r1, [r7, #8]
 80142d6:	4809      	ldr	r0, [pc, #36]	@ (80142fc <tcp_rst+0xcc>)
 80142d8:	f007 fa26 	bl	801b728 <iprintf>
 80142dc:	2000      	movs	r0, #0
 80142de:	f007 f94d 	bl	801b57c <fflush>
}
 80142e2:	371c      	adds	r7, #28
 80142e4:	46bd      	mov	sp, r7
 80142e6:	bd90      	pop	{r4, r7, pc}
 80142e8:	080200b0 	.word	0x080200b0
 80142ec:	08020e6c 	.word	0x08020e6c
 80142f0:	08020104 	.word	0x08020104
 80142f4:	08020e88 	.word	0x08020e88
 80142f8:	08020ea4 	.word	0x08020ea4
 80142fc:	08020ed0 	.word	0x08020ed0

08014300 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8014300:	b590      	push	{r4, r7, lr}
 8014302:	b087      	sub	sp, #28
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8014308:	2300      	movs	r3, #0
 801430a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801430c:	2300      	movs	r3, #0
 801430e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d109      	bne.n	801432a <tcp_send_empty_ack+0x2a>
 8014316:	4b31      	ldr	r3, [pc, #196]	@ (80143dc <tcp_send_empty_ack+0xdc>)
 8014318:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801431c:	4930      	ldr	r1, [pc, #192]	@ (80143e0 <tcp_send_empty_ack+0xe0>)
 801431e:	4831      	ldr	r0, [pc, #196]	@ (80143e4 <tcp_send_empty_ack+0xe4>)
 8014320:	f007 fa02 	bl	801b728 <iprintf>
 8014324:	2000      	movs	r0, #0
 8014326:	f007 f929 	bl	801b57c <fflush>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801432a:	7dfb      	ldrb	r3, [r7, #23]
 801432c:	009b      	lsls	r3, r3, #2
 801432e:	b2db      	uxtb	r3, r3
 8014330:	f003 0304 	and.w	r3, r3, #4
 8014334:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8014336:	7d7b      	ldrb	r3, [r7, #21]
 8014338:	b29c      	uxth	r4, r3
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801433e:	4618      	mov	r0, r3
 8014340:	f7f6 fcad 	bl	800ac9e <lwip_htonl>
 8014344:	4603      	mov	r3, r0
 8014346:	2200      	movs	r2, #0
 8014348:	4621      	mov	r1, r4
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f7ff fea0 	bl	8014090 <tcp_output_alloc_header>
 8014350:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	2b00      	cmp	r3, #0
 8014356:	d10f      	bne.n	8014378 <tcp_send_empty_ack+0x78>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	8b5b      	ldrh	r3, [r3, #26]
 801435c:	f043 0303 	orr.w	r3, r3, #3
 8014360:	b29a      	uxth	r2, r3
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
 8014366:	4820      	ldr	r0, [pc, #128]	@ (80143e8 <tcp_send_empty_ack+0xe8>)
 8014368:	f007 fa4e 	bl	801b808 <puts>
 801436c:	2000      	movs	r0, #0
 801436e:	f007 f905 	bl	801b57c <fflush>
    return ERR_BUF;
 8014372:	f06f 0301 	mvn.w	r3, #1
 8014376:	e02c      	b.n	80143d2 <tcp_send_empty_ack+0xd2>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8014378:	7dbb      	ldrb	r3, [r7, #22]
 801437a:	7dfa      	ldrb	r2, [r7, #23]
 801437c:	6939      	ldr	r1, [r7, #16]
 801437e:	6878      	ldr	r0, [r7, #4]
 8014380:	f7ff fec6 	bl	8014110 <tcp_output_fill_options>

#if LWIP_TCP_TIMESTAMPS
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014388:	4619      	mov	r1, r3
 801438a:	4818      	ldr	r0, [pc, #96]	@ (80143ec <tcp_send_empty_ack+0xec>)
 801438c:	f007 f9cc 	bl	801b728 <iprintf>
 8014390:	2000      	movs	r0, #0
 8014392:	f007 f8f3 	bl	801b57c <fflush>
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	3304      	adds	r3, #4
 801439c:	6939      	ldr	r1, [r7, #16]
 801439e:	6878      	ldr	r0, [r7, #4]
 80143a0:	f7ff fefa 	bl	8014198 <tcp_output_control_segment>
 80143a4:	4603      	mov	r3, r0
 80143a6:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80143a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d007      	beq.n	80143c0 <tcp_send_empty_ack+0xc0>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	8b5b      	ldrh	r3, [r3, #26]
 80143b4:	f043 0303 	orr.w	r3, r3, #3
 80143b8:	b29a      	uxth	r2, r3
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	835a      	strh	r2, [r3, #26]
 80143be:	e006      	b.n	80143ce <tcp_send_empty_ack+0xce>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	8b5b      	ldrh	r3, [r3, #26]
 80143c4:	f023 0303 	bic.w	r3, r3, #3
 80143c8:	b29a      	uxth	r2, r3
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80143ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80143d2:	4618      	mov	r0, r3
 80143d4:	371c      	adds	r7, #28
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd90      	pop	{r4, r7, pc}
 80143da:	bf00      	nop
 80143dc:	080200b0 	.word	0x080200b0
 80143e0:	08020ef0 	.word	0x08020ef0
 80143e4:	08020104 	.word	0x08020104
 80143e8:	08020f10 	.word	0x08020f10
 80143ec:	08020f3c 	.word	0x08020f3c

080143f0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80143f0:	b590      	push	{r4, r7, lr}
 80143f2:	b089      	sub	sp, #36	@ 0x24
 80143f4:	af02      	add	r7, sp, #8
 80143f6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80143f8:	2300      	movs	r3, #0
 80143fa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d109      	bne.n	8014416 <tcp_keepalive+0x26>
 8014402:	4b3d      	ldr	r3, [pc, #244]	@ (80144f8 <tcp_keepalive+0x108>)
 8014404:	f640 0224 	movw	r2, #2084	@ 0x824
 8014408:	493c      	ldr	r1, [pc, #240]	@ (80144fc <tcp_keepalive+0x10c>)
 801440a:	483d      	ldr	r0, [pc, #244]	@ (8014500 <tcp_keepalive+0x110>)
 801440c:	f007 f98c 	bl	801b728 <iprintf>
 8014410:	2000      	movs	r0, #0
 8014412:	f007 f8b3 	bl	801b57c <fflush>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: sending KEEPALIVE probe to "));
 8014416:	483b      	ldr	r0, [pc, #236]	@ (8014504 <tcp_keepalive+0x114>)
 8014418:	f007 f986 	bl	801b728 <iprintf>
 801441c:	2000      	movs	r0, #0
 801441e:	f007 f8ad 	bl	801b57c <fflush>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	685b      	ldr	r3, [r3, #4]
 8014426:	b2db      	uxtb	r3, r3
 8014428:	4619      	mov	r1, r3
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	0a1b      	lsrs	r3, r3, #8
 8014430:	b2db      	uxtb	r3, r3
 8014432:	461a      	mov	r2, r3
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	685b      	ldr	r3, [r3, #4]
 8014438:	0c1b      	lsrs	r3, r3, #16
 801443a:	b2db      	uxtb	r3, r3
 801443c:	4618      	mov	r0, r3
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	685b      	ldr	r3, [r3, #4]
 8014442:	0e1b      	lsrs	r3, r3, #24
 8014444:	b2db      	uxtb	r3, r3
 8014446:	9300      	str	r3, [sp, #0]
 8014448:	4603      	mov	r3, r0
 801444a:	482f      	ldr	r0, [pc, #188]	@ (8014508 <tcp_keepalive+0x118>)
 801444c:	f007 f96c 	bl	801b728 <iprintf>
 8014450:	2000      	movs	r0, #0
 8014452:	f007 f893 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 8014456:	200a      	movs	r0, #10
 8014458:	f007 f978 	bl	801b74c <putchar>
 801445c:	2000      	movs	r0, #0
 801445e:	f007 f88d 	bl	801b57c <fflush>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
 8014462:	4b2a      	ldr	r3, [pc, #168]	@ (801450c <tcp_keepalive+0x11c>)
 8014464:	6819      	ldr	r1, [r3, #0]
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	6a1a      	ldr	r2, [r3, #32]
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8014470:	4827      	ldr	r0, [pc, #156]	@ (8014510 <tcp_keepalive+0x120>)
 8014472:	f007 f959 	bl	801b728 <iprintf>
 8014476:	2000      	movs	r0, #0
 8014478:	f007 f880 	bl	801b57c <fflush>
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801447c:	7dfb      	ldrb	r3, [r7, #23]
 801447e:	b29c      	uxth	r4, r3
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014484:	3b01      	subs	r3, #1
 8014486:	4618      	mov	r0, r3
 8014488:	f7f6 fc09 	bl	800ac9e <lwip_htonl>
 801448c:	4603      	mov	r3, r0
 801448e:	2200      	movs	r2, #0
 8014490:	4621      	mov	r1, r4
 8014492:	6878      	ldr	r0, [r7, #4]
 8014494:	f7ff fdfc 	bl	8014090 <tcp_output_alloc_header>
 8014498:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801449a:	693b      	ldr	r3, [r7, #16]
 801449c:	2b00      	cmp	r3, #0
 801449e:	d108      	bne.n	80144b2 <tcp_keepalive+0xc2>
    LWIP_DEBUGF(TCP_DEBUG,
 80144a0:	481c      	ldr	r0, [pc, #112]	@ (8014514 <tcp_keepalive+0x124>)
 80144a2:	f007 f9b1 	bl	801b808 <puts>
 80144a6:	2000      	movs	r0, #0
 80144a8:	f007 f868 	bl	801b57c <fflush>
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80144ac:	f04f 33ff 	mov.w	r3, #4294967295
 80144b0:	e01d      	b.n	80144ee <tcp_keepalive+0xfe>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80144b2:	7dfb      	ldrb	r3, [r7, #23]
 80144b4:	2200      	movs	r2, #0
 80144b6:	6939      	ldr	r1, [r7, #16]
 80144b8:	6878      	ldr	r0, [r7, #4]
 80144ba:	f7ff fe29 	bl	8014110 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	3304      	adds	r3, #4
 80144c4:	6939      	ldr	r1, [r7, #16]
 80144c6:	6878      	ldr	r0, [r7, #4]
 80144c8:	f7ff fe66 	bl	8014198 <tcp_output_control_segment>
 80144cc:	4603      	mov	r3, r0
 80144ce:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144d4:	1e59      	subs	r1, r3, #1
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80144da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144de:	480e      	ldr	r0, [pc, #56]	@ (8014518 <tcp_keepalive+0x128>)
 80144e0:	f007 f922 	bl	801b728 <iprintf>
 80144e4:	2000      	movs	r0, #0
 80144e6:	f007 f849 	bl	801b57c <fflush>
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80144ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	371c      	adds	r7, #28
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd90      	pop	{r4, r7, pc}
 80144f6:	bf00      	nop
 80144f8:	080200b0 	.word	0x080200b0
 80144fc:	08020f60 	.word	0x08020f60
 8014500:	08020104 	.word	0x08020104
 8014504:	08020f7c 	.word	0x08020f7c
 8014508:	08020fa8 	.word	0x08020fa8
 801450c:	20011d7c 	.word	0x20011d7c
 8014510:	08020fb8 	.word	0x08020fb8
 8014514:	08020ffc 	.word	0x08020ffc
 8014518:	08021030 	.word	0x08021030

0801451c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801451c:	b590      	push	{r4, r7, lr}
 801451e:	b08d      	sub	sp, #52	@ 0x34
 8014520:	af02      	add	r7, sp, #8
 8014522:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8014524:	2300      	movs	r3, #0
 8014526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2b00      	cmp	r3, #0
 801452e:	d109      	bne.n	8014544 <tcp_zero_window_probe+0x28>
 8014530:	4b71      	ldr	r3, [pc, #452]	@ (80146f8 <tcp_zero_window_probe+0x1dc>)
 8014532:	f640 024f 	movw	r2, #2127	@ 0x84f
 8014536:	4971      	ldr	r1, [pc, #452]	@ (80146fc <tcp_zero_window_probe+0x1e0>)
 8014538:	4871      	ldr	r0, [pc, #452]	@ (8014700 <tcp_zero_window_probe+0x1e4>)
 801453a:	f007 f8f5 	bl	801b728 <iprintf>
 801453e:	2000      	movs	r0, #0
 8014540:	f007 f81c 	bl	801b57c <fflush>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: sending ZERO WINDOW probe to "));
 8014544:	486f      	ldr	r0, [pc, #444]	@ (8014704 <tcp_zero_window_probe+0x1e8>)
 8014546:	f007 f8ef 	bl	801b728 <iprintf>
 801454a:	2000      	movs	r0, #0
 801454c:	f007 f816 	bl	801b57c <fflush>
  ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	685b      	ldr	r3, [r3, #4]
 8014554:	b2db      	uxtb	r3, r3
 8014556:	4619      	mov	r1, r3
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	685b      	ldr	r3, [r3, #4]
 801455c:	0a1b      	lsrs	r3, r3, #8
 801455e:	b2db      	uxtb	r3, r3
 8014560:	461a      	mov	r2, r3
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	685b      	ldr	r3, [r3, #4]
 8014566:	0c1b      	lsrs	r3, r3, #16
 8014568:	b2db      	uxtb	r3, r3
 801456a:	4618      	mov	r0, r3
 801456c:	687b      	ldr	r3, [r7, #4]
 801456e:	685b      	ldr	r3, [r3, #4]
 8014570:	0e1b      	lsrs	r3, r3, #24
 8014572:	b2db      	uxtb	r3, r3
 8014574:	9300      	str	r3, [sp, #0]
 8014576:	4603      	mov	r3, r0
 8014578:	4863      	ldr	r0, [pc, #396]	@ (8014708 <tcp_zero_window_probe+0x1ec>)
 801457a:	f007 f8d5 	bl	801b728 <iprintf>
 801457e:	2000      	movs	r0, #0
 8014580:	f006 fffc 	bl	801b57c <fflush>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));
 8014584:	200a      	movs	r0, #10
 8014586:	f007 f8e1 	bl	801b74c <putchar>
 801458a:	2000      	movs	r0, #0
 801458c:	f006 fff6 	bl	801b57c <fflush>

  LWIP_DEBUGF(TCP_DEBUG,
 8014590:	4b5e      	ldr	r3, [pc, #376]	@ (801470c <tcp_zero_window_probe+0x1f0>)
 8014592:	6819      	ldr	r1, [r3, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6a1a      	ldr	r2, [r3, #32]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 801459e:	485c      	ldr	r0, [pc, #368]	@ (8014710 <tcp_zero_window_probe+0x1f4>)
 80145a0:	f007 f8c2 	bl	801b728 <iprintf>
 80145a4:	2000      	movs	r0, #0
 80145a6:	f006 ffe9 	bl	801b57c <fflush>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80145ae:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80145b0:	6a3b      	ldr	r3, [r7, #32]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d101      	bne.n	80145ba <tcp_zero_window_probe+0x9e>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80145b6:	2300      	movs	r3, #0
 80145b8:	e099      	b.n	80146ee <tcp_zero_window_probe+0x1d2>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80145c0:	2bff      	cmp	r3, #255	@ 0xff
 80145c2:	d007      	beq.n	80145d4 <tcp_zero_window_probe+0xb8>
    ++pcb->persist_probe;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80145ca:	3301      	adds	r3, #1
 80145cc:	b2da      	uxtb	r2, r3
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80145d4:	6a3b      	ldr	r3, [r7, #32]
 80145d6:	691b      	ldr	r3, [r3, #16]
 80145d8:	899b      	ldrh	r3, [r3, #12]
 80145da:	b29b      	uxth	r3, r3
 80145dc:	4618      	mov	r0, r3
 80145de:	f7f6 fb49 	bl	800ac74 <lwip_htons>
 80145e2:	4603      	mov	r3, r0
 80145e4:	b2db      	uxtb	r3, r3
 80145e6:	f003 0301 	and.w	r3, r3, #1
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d005      	beq.n	80145fa <tcp_zero_window_probe+0xde>
 80145ee:	6a3b      	ldr	r3, [r7, #32]
 80145f0:	891b      	ldrh	r3, [r3, #8]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d101      	bne.n	80145fa <tcp_zero_window_probe+0xde>
 80145f6:	2301      	movs	r3, #1
 80145f8:	e000      	b.n	80145fc <tcp_zero_window_probe+0xe0>
 80145fa:	2300      	movs	r3, #0
 80145fc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80145fe:	7ffb      	ldrb	r3, [r7, #31]
 8014600:	2b00      	cmp	r3, #0
 8014602:	bf0c      	ite	eq
 8014604:	2301      	moveq	r3, #1
 8014606:	2300      	movne	r3, #0
 8014608:	b2db      	uxtb	r3, r3
 801460a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801460c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014610:	b299      	uxth	r1, r3
 8014612:	6a3b      	ldr	r3, [r7, #32]
 8014614:	691b      	ldr	r3, [r3, #16]
 8014616:	685b      	ldr	r3, [r3, #4]
 8014618:	8bba      	ldrh	r2, [r7, #28]
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f7ff fd38 	bl	8014090 <tcp_output_alloc_header>
 8014620:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8014622:	69bb      	ldr	r3, [r7, #24]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d108      	bne.n	801463a <tcp_zero_window_probe+0x11e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
 8014628:	483a      	ldr	r0, [pc, #232]	@ (8014714 <tcp_zero_window_probe+0x1f8>)
 801462a:	f007 f8ed 	bl	801b808 <puts>
 801462e:	2000      	movs	r0, #0
 8014630:	f006 ffa4 	bl	801b57c <fflush>
    return ERR_MEM;
 8014634:	f04f 33ff 	mov.w	r3, #4294967295
 8014638:	e059      	b.n	80146ee <tcp_zero_window_probe+0x1d2>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801463a:	69bb      	ldr	r3, [r7, #24]
 801463c:	685b      	ldr	r3, [r3, #4]
 801463e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8014640:	7ffb      	ldrb	r3, [r7, #31]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d011      	beq.n	801466a <tcp_zero_window_probe+0x14e>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8014646:	697b      	ldr	r3, [r7, #20]
 8014648:	899b      	ldrh	r3, [r3, #12]
 801464a:	b29b      	uxth	r3, r3
 801464c:	b21b      	sxth	r3, r3
 801464e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014652:	b21c      	sxth	r4, r3
 8014654:	2011      	movs	r0, #17
 8014656:	f7f6 fb0d 	bl	800ac74 <lwip_htons>
 801465a:	4603      	mov	r3, r0
 801465c:	b21b      	sxth	r3, r3
 801465e:	4323      	orrs	r3, r4
 8014660:	b21b      	sxth	r3, r3
 8014662:	b29a      	uxth	r2, r3
 8014664:	697b      	ldr	r3, [r7, #20]
 8014666:	819a      	strh	r2, [r3, #12]
 8014668:	e010      	b.n	801468c <tcp_zero_window_probe+0x170>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801466a:	69bb      	ldr	r3, [r7, #24]
 801466c:	685b      	ldr	r3, [r3, #4]
 801466e:	3314      	adds	r3, #20
 8014670:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8014672:	6a3b      	ldr	r3, [r7, #32]
 8014674:	6858      	ldr	r0, [r3, #4]
 8014676:	6a3b      	ldr	r3, [r7, #32]
 8014678:	685b      	ldr	r3, [r3, #4]
 801467a:	891a      	ldrh	r2, [r3, #8]
 801467c:	6a3b      	ldr	r3, [r7, #32]
 801467e:	891b      	ldrh	r3, [r3, #8]
 8014680:	1ad3      	subs	r3, r2, r3
 8014682:	b29b      	uxth	r3, r3
 8014684:	2201      	movs	r2, #1
 8014686:	6939      	ldr	r1, [r7, #16]
 8014688:	f7f8 fbb8 	bl	800cdfc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801468c:	6a3b      	ldr	r3, [r7, #32]
 801468e:	691b      	ldr	r3, [r3, #16]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	4618      	mov	r0, r3
 8014694:	f7f6 fb03 	bl	800ac9e <lwip_htonl>
 8014698:	4603      	mov	r3, r0
 801469a:	3301      	adds	r3, #1
 801469c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146a2:	68fb      	ldr	r3, [r7, #12]
 80146a4:	1ad3      	subs	r3, r2, r3
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	da02      	bge.n	80146b0 <tcp_zero_window_probe+0x194>
    pcb->snd_nxt = snd_nxt;
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	68fa      	ldr	r2, [r7, #12]
 80146ae:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80146b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80146b4:	2200      	movs	r2, #0
 80146b6:	69b9      	ldr	r1, [r7, #24]
 80146b8:	6878      	ldr	r0, [r7, #4]
 80146ba:	f7ff fd29 	bl	8014110 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80146be:	687a      	ldr	r2, [r7, #4]
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	3304      	adds	r3, #4
 80146c4:	69b9      	ldr	r1, [r7, #24]
 80146c6:	6878      	ldr	r0, [r7, #4]
 80146c8:	f7ff fd66 	bl	8014198 <tcp_output_control_segment>
 80146cc:	4603      	mov	r3, r0
 80146ce:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80146d4:	1e59      	subs	r1, r3, #1
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80146da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80146de:	480e      	ldr	r0, [pc, #56]	@ (8014718 <tcp_zero_window_probe+0x1fc>)
 80146e0:	f007 f822 	bl	801b728 <iprintf>
 80146e4:	2000      	movs	r0, #0
 80146e6:	f006 ff49 	bl	801b57c <fflush>
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80146ea:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80146ee:	4618      	mov	r0, r3
 80146f0:	372c      	adds	r7, #44	@ 0x2c
 80146f2:	46bd      	mov	sp, r7
 80146f4:	bd90      	pop	{r4, r7, pc}
 80146f6:	bf00      	nop
 80146f8:	080200b0 	.word	0x080200b0
 80146fc:	0802105c 	.word	0x0802105c
 8014700:	08020104 	.word	0x08020104
 8014704:	08021080 	.word	0x08021080
 8014708:	08020fa8 	.word	0x08020fa8
 801470c:	20011d7c 	.word	0x20011d7c
 8014710:	080210b8 	.word	0x080210b8
 8014714:	08021104 	.word	0x08021104
 8014718:	08021130 	.word	0x08021130

0801471c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801471c:	b580      	push	{r7, lr}
 801471e:	b082      	sub	sp, #8
 8014720:	af00      	add	r7, sp, #0
 8014722:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8014724:	f7f8 fc68 	bl	800cff8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8014728:	4b0b      	ldr	r3, [pc, #44]	@ (8014758 <tcpip_tcp_timer+0x3c>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d103      	bne.n	8014738 <tcpip_tcp_timer+0x1c>
 8014730:	4b0a      	ldr	r3, [pc, #40]	@ (801475c <tcpip_tcp_timer+0x40>)
 8014732:	681b      	ldr	r3, [r3, #0]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d006      	beq.n	8014746 <tcpip_tcp_timer+0x2a>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8014738:	4b09      	ldr	r3, [pc, #36]	@ (8014760 <tcpip_tcp_timer+0x44>)
 801473a:	2200      	movs	r2, #0
 801473c:	4909      	ldr	r1, [pc, #36]	@ (8014764 <tcpip_tcp_timer+0x48>)
 801473e:	20fa      	movs	r0, #250	@ 0xfa
 8014740:	f000 f924 	bl	801498c <sys_timeout_debug>
 8014744:	e003      	b.n	801474e <tcpip_tcp_timer+0x32>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8014746:	4b08      	ldr	r3, [pc, #32]	@ (8014768 <tcpip_tcp_timer+0x4c>)
 8014748:	2200      	movs	r2, #0
 801474a:	601a      	str	r2, [r3, #0]
  }
}
 801474c:	bf00      	nop
 801474e:	bf00      	nop
 8014750:	3708      	adds	r7, #8
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	20011d88 	.word	0x20011d88
 801475c:	20011d8c 	.word	0x20011d8c
 8014760:	080211a8 	.word	0x080211a8
 8014764:	0801471d 	.word	0x0801471d
 8014768:	20011dd8 	.word	0x20011dd8

0801476c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801476c:	b580      	push	{r7, lr}
 801476e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8014770:	4b0b      	ldr	r3, [pc, #44]	@ (80147a0 <tcp_timer_needed+0x34>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d110      	bne.n	801479a <tcp_timer_needed+0x2e>
 8014778:	4b0a      	ldr	r3, [pc, #40]	@ (80147a4 <tcp_timer_needed+0x38>)
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d103      	bne.n	8014788 <tcp_timer_needed+0x1c>
 8014780:	4b09      	ldr	r3, [pc, #36]	@ (80147a8 <tcp_timer_needed+0x3c>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	2b00      	cmp	r3, #0
 8014786:	d008      	beq.n	801479a <tcp_timer_needed+0x2e>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8014788:	4b05      	ldr	r3, [pc, #20]	@ (80147a0 <tcp_timer_needed+0x34>)
 801478a:	2201      	movs	r2, #1
 801478c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801478e:	4b07      	ldr	r3, [pc, #28]	@ (80147ac <tcp_timer_needed+0x40>)
 8014790:	2200      	movs	r2, #0
 8014792:	4907      	ldr	r1, [pc, #28]	@ (80147b0 <tcp_timer_needed+0x44>)
 8014794:	20fa      	movs	r0, #250	@ 0xfa
 8014796:	f000 f8f9 	bl	801498c <sys_timeout_debug>
  }
}
 801479a:	bf00      	nop
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	20011dd8 	.word	0x20011dd8
 80147a4:	20011d88 	.word	0x20011d88
 80147a8:	20011d8c 	.word	0x20011d8c
 80147ac:	080211a8 	.word	0x080211a8
 80147b0:	0801471d 	.word	0x0801471d

080147b4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b088      	sub	sp, #32
 80147b8:	af02      	add	r7, sp, #8
 80147ba:	60f8      	str	r0, [r7, #12]
 80147bc:	60b9      	str	r1, [r7, #8]
 80147be:	607a      	str	r2, [r7, #4]
 80147c0:	603b      	str	r3, [r7, #0]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80147c2:	200a      	movs	r0, #10
 80147c4:	f7f6 ffaa 	bl	800b71c <memp_malloc>
 80147c8:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80147ca:	693b      	ldr	r3, [r7, #16]
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d10c      	bne.n	80147ea <sys_timeout_abs+0x36>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d162      	bne.n	801489c <sys_timeout_abs+0xe8>
 80147d6:	4b33      	ldr	r3, [pc, #204]	@ (80148a4 <sys_timeout_abs+0xf0>)
 80147d8:	22be      	movs	r2, #190	@ 0xbe
 80147da:	4933      	ldr	r1, [pc, #204]	@ (80148a8 <sys_timeout_abs+0xf4>)
 80147dc:	4833      	ldr	r0, [pc, #204]	@ (80148ac <sys_timeout_abs+0xf8>)
 80147de:	f006 ffa3 	bl	801b728 <iprintf>
 80147e2:	2000      	movs	r0, #0
 80147e4:	f006 feca 	bl	801b57c <fflush>
    return;
 80147e8:	e058      	b.n	801489c <sys_timeout_abs+0xe8>
  }

  timeout->next = NULL;
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	2200      	movs	r2, #0
 80147ee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80147f0:	693b      	ldr	r3, [r7, #16]
 80147f2:	68ba      	ldr	r2, [r7, #8]
 80147f4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80147f6:	693b      	ldr	r3, [r7, #16]
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80147fc:	693b      	ldr	r3, [r7, #16]
 80147fe:	68fa      	ldr	r2, [r7, #12]
 8014800:	605a      	str	r2, [r3, #4]

#if LWIP_DEBUG_TIMERNAMES
  timeout->handler_name = handler_name;
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	683a      	ldr	r2, [r7, #0]
 8014806:	611a      	str	r2, [r3, #16]
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	9300      	str	r3, [sp, #0]
 801480c:	683b      	ldr	r3, [r7, #0]
 801480e:	68fa      	ldr	r2, [r7, #12]
 8014810:	6939      	ldr	r1, [r7, #16]
 8014812:	4827      	ldr	r0, [pc, #156]	@ (80148b0 <sys_timeout_abs+0xfc>)
 8014814:	f006 ff88 	bl	801b728 <iprintf>
 8014818:	2000      	movs	r0, #0
 801481a:	f006 feaf 	bl	801b57c <fflush>
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801481e:	4b25      	ldr	r3, [pc, #148]	@ (80148b4 <sys_timeout_abs+0x100>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d103      	bne.n	801482e <sys_timeout_abs+0x7a>
    next_timeout = timeout;
 8014826:	4a23      	ldr	r2, [pc, #140]	@ (80148b4 <sys_timeout_abs+0x100>)
 8014828:	693b      	ldr	r3, [r7, #16]
 801482a:	6013      	str	r3, [r2, #0]
    return;
 801482c:	e037      	b.n	801489e <sys_timeout_abs+0xea>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801482e:	693b      	ldr	r3, [r7, #16]
 8014830:	685a      	ldr	r2, [r3, #4]
 8014832:	4b20      	ldr	r3, [pc, #128]	@ (80148b4 <sys_timeout_abs+0x100>)
 8014834:	681b      	ldr	r3, [r3, #0]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	1ad3      	subs	r3, r2, r3
 801483a:	0fdb      	lsrs	r3, r3, #31
 801483c:	f003 0301 	and.w	r3, r3, #1
 8014840:	b2db      	uxtb	r3, r3
 8014842:	2b00      	cmp	r3, #0
 8014844:	d007      	beq.n	8014856 <sys_timeout_abs+0xa2>
    timeout->next = next_timeout;
 8014846:	4b1b      	ldr	r3, [pc, #108]	@ (80148b4 <sys_timeout_abs+0x100>)
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801484e:	4a19      	ldr	r2, [pc, #100]	@ (80148b4 <sys_timeout_abs+0x100>)
 8014850:	693b      	ldr	r3, [r7, #16]
 8014852:	6013      	str	r3, [r2, #0]
 8014854:	e023      	b.n	801489e <sys_timeout_abs+0xea>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8014856:	4b17      	ldr	r3, [pc, #92]	@ (80148b4 <sys_timeout_abs+0x100>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	617b      	str	r3, [r7, #20]
 801485c:	e01a      	b.n	8014894 <sys_timeout_abs+0xe0>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801485e:	697b      	ldr	r3, [r7, #20]
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d00b      	beq.n	801487e <sys_timeout_abs+0xca>
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	685a      	ldr	r2, [r3, #4]
 801486a:	697b      	ldr	r3, [r7, #20]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	685b      	ldr	r3, [r3, #4]
 8014870:	1ad3      	subs	r3, r2, r3
 8014872:	0fdb      	lsrs	r3, r3, #31
 8014874:	f003 0301 	and.w	r3, r3, #1
 8014878:	b2db      	uxtb	r3, r3
 801487a:	2b00      	cmp	r3, #0
 801487c:	d007      	beq.n	801488e <sys_timeout_abs+0xda>
        timeout->next = t->next;
 801487e:	697b      	ldr	r3, [r7, #20]
 8014880:	681a      	ldr	r2, [r3, #0]
 8014882:	693b      	ldr	r3, [r7, #16]
 8014884:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8014886:	697b      	ldr	r3, [r7, #20]
 8014888:	693a      	ldr	r2, [r7, #16]
 801488a:	601a      	str	r2, [r3, #0]
        break;
 801488c:	e007      	b.n	801489e <sys_timeout_abs+0xea>
    for (t = next_timeout; t != NULL; t = t->next) {
 801488e:	697b      	ldr	r3, [r7, #20]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	617b      	str	r3, [r7, #20]
 8014894:	697b      	ldr	r3, [r7, #20]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d1e1      	bne.n	801485e <sys_timeout_abs+0xaa>
 801489a:	e000      	b.n	801489e <sys_timeout_abs+0xea>
    return;
 801489c:	bf00      	nop
      }
    }
  }
}
 801489e:	3718      	adds	r7, #24
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd80      	pop	{r7, pc}
 80148a4:	080211b8 	.word	0x080211b8
 80148a8:	080211ec 	.word	0x080211ec
 80148ac:	0802122c 	.word	0x0802122c
 80148b0:	08021254 	.word	0x08021254
 80148b4:	20011dd0 	.word	0x20011dd0

080148b8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80148b8:	b580      	push	{r7, lr}
 80148ba:	b086      	sub	sp, #24
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
 80148c4:	697b      	ldr	r3, [r7, #20]
 80148c6:	689b      	ldr	r3, [r3, #8]
 80148c8:	4619      	mov	r1, r3
 80148ca:	4818      	ldr	r0, [pc, #96]	@ (801492c <lwip_cyclic_timer+0x74>)
 80148cc:	f006 ff2c 	bl	801b728 <iprintf>
 80148d0:	2000      	movs	r0, #0
 80148d2:	f006 fe53 	bl	801b57c <fflush>
#endif
  cyclic->handler();
 80148d6:	697b      	ldr	r3, [r7, #20]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	4798      	blx	r3

  now = sys_now();
 80148dc:	f7ef fb2a 	bl	8003f34 <sys_now>
 80148e0:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80148e2:	697b      	ldr	r3, [r7, #20]
 80148e4:	681a      	ldr	r2, [r3, #0]
 80148e6:	4b12      	ldr	r3, [pc, #72]	@ (8014930 <lwip_cyclic_timer+0x78>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	4413      	add	r3, r2
 80148ec:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80148ee:	68fa      	ldr	r2, [r7, #12]
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	1ad3      	subs	r3, r2, r3
 80148f4:	0fdb      	lsrs	r3, r3, #31
 80148f6:	f003 0301 	and.w	r3, r3, #1
 80148fa:	b2db      	uxtb	r3, r3
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d00a      	beq.n	8014916 <lwip_cyclic_timer+0x5e>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	18d0      	adds	r0, r2, r3
 8014908:	697b      	ldr	r3, [r7, #20]
 801490a:	689b      	ldr	r3, [r3, #8]
 801490c:	687a      	ldr	r2, [r7, #4]
 801490e:	4909      	ldr	r1, [pc, #36]	@ (8014934 <lwip_cyclic_timer+0x7c>)
 8014910:	f7ff ff50 	bl	80147b4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8014914:	e006      	b.n	8014924 <lwip_cyclic_timer+0x6c>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
 8014916:	697b      	ldr	r3, [r7, #20]
 8014918:	689b      	ldr	r3, [r3, #8]
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	4905      	ldr	r1, [pc, #20]	@ (8014934 <lwip_cyclic_timer+0x7c>)
 801491e:	68f8      	ldr	r0, [r7, #12]
 8014920:	f7ff ff48 	bl	80147b4 <sys_timeout_abs>
}
 8014924:	bf00      	nop
 8014926:	3718      	adds	r7, #24
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}
 801492c:	08021284 	.word	0x08021284
 8014930:	20011dd4 	.word	0x20011dd4
 8014934:	080148b9 	.word	0x080148b9

08014938 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8014938:	b580      	push	{r7, lr}
 801493a:	b082      	sub	sp, #8
 801493c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801493e:	2301      	movs	r3, #1
 8014940:	607b      	str	r3, [r7, #4]
 8014942:	e015      	b.n	8014970 <sys_timeouts_init+0x38>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8014944:	490e      	ldr	r1, [pc, #56]	@ (8014980 <sys_timeouts_init+0x48>)
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	4613      	mov	r3, r2
 801494a:	005b      	lsls	r3, r3, #1
 801494c:	4413      	add	r3, r2
 801494e:	009b      	lsls	r3, r3, #2
 8014950:	440b      	add	r3, r1
 8014952:	6818      	ldr	r0, [r3, #0]
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	4613      	mov	r3, r2
 8014958:	005b      	lsls	r3, r3, #1
 801495a:	4413      	add	r3, r2
 801495c:	009b      	lsls	r3, r3, #2
 801495e:	4a08      	ldr	r2, [pc, #32]	@ (8014980 <sys_timeouts_init+0x48>)
 8014960:	441a      	add	r2, r3
 8014962:	4b08      	ldr	r3, [pc, #32]	@ (8014984 <sys_timeouts_init+0x4c>)
 8014964:	4908      	ldr	r1, [pc, #32]	@ (8014988 <sys_timeouts_init+0x50>)
 8014966:	f000 f811 	bl	801498c <sys_timeout_debug>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	3301      	adds	r3, #1
 801496e:	607b      	str	r3, [r7, #4]
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	2b04      	cmp	r3, #4
 8014974:	d9e6      	bls.n	8014944 <sys_timeouts_init+0xc>
  }
}
 8014976:	bf00      	nop
 8014978:	bf00      	nop
 801497a:	3708      	adds	r7, #8
 801497c:	46bd      	mov	sp, r7
 801497e:	bd80      	pop	{r7, pc}
 8014980:	08025234 	.word	0x08025234
 8014984:	08021294 	.word	0x08021294
 8014988:	080148b9 	.word	0x080148b9

0801498c <sys_timeout_debug>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	60b9      	str	r1, [r7, #8]
 8014996:	607a      	str	r2, [r7, #4]
 8014998:	603b      	str	r3, [r7, #0]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80149a0:	d309      	bcc.n	80149b6 <sys_timeout_debug+0x2a>
 80149a2:	4b0d      	ldr	r3, [pc, #52]	@ (80149d8 <sys_timeout_debug+0x4c>)
 80149a4:	f240 1229 	movw	r2, #297	@ 0x129
 80149a8:	490c      	ldr	r1, [pc, #48]	@ (80149dc <sys_timeout_debug+0x50>)
 80149aa:	480d      	ldr	r0, [pc, #52]	@ (80149e0 <sys_timeout_debug+0x54>)
 80149ac:	f006 febc 	bl	801b728 <iprintf>
 80149b0:	2000      	movs	r0, #0
 80149b2:	f006 fde3 	bl	801b57c <fflush>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80149b6:	f7ef fabd 	bl	8003f34 <sys_now>
 80149ba:	4602      	mov	r2, r0
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	4413      	add	r3, r2
 80149c0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
 80149c2:	683b      	ldr	r3, [r7, #0]
 80149c4:	687a      	ldr	r2, [r7, #4]
 80149c6:	68b9      	ldr	r1, [r7, #8]
 80149c8:	6978      	ldr	r0, [r7, #20]
 80149ca:	f7ff fef3 	bl	80147b4 <sys_timeout_abs>
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
#endif
}
 80149ce:	bf00      	nop
 80149d0:	3718      	adds	r7, #24
 80149d2:	46bd      	mov	sp, r7
 80149d4:	bd80      	pop	{r7, pc}
 80149d6:	bf00      	nop
 80149d8:	080211b8 	.word	0x080211b8
 80149dc:	080212a8 	.word	0x080212a8
 80149e0:	0802122c 	.word	0x0802122c

080149e4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80149e4:	b590      	push	{r4, r7, lr}
 80149e6:	b085      	sub	sp, #20
 80149e8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80149ea:	f7ef faa3 	bl	8003f34 <sys_now>
 80149ee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 80149f0:	4b20      	ldr	r3, [pc, #128]	@ (8014a74 <sys_check_timeouts+0x90>)
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80149f6:	68bb      	ldr	r3, [r7, #8]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d035      	beq.n	8014a68 <sys_check_timeouts+0x84>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80149fc:	68bb      	ldr	r3, [r7, #8]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	68fa      	ldr	r2, [r7, #12]
 8014a02:	1ad3      	subs	r3, r2, r3
 8014a04:	0fdb      	lsrs	r3, r3, #31
 8014a06:	f003 0301 	and.w	r3, r3, #1
 8014a0a:	b2db      	uxtb	r3, r3
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d12d      	bne.n	8014a6c <sys_check_timeouts+0x88>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4a17      	ldr	r2, [pc, #92]	@ (8014a74 <sys_check_timeouts+0x90>)
 8014a16:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8014a18:	68bb      	ldr	r3, [r7, #8]
 8014a1a:	689b      	ldr	r3, [r3, #8]
 8014a1c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	68db      	ldr	r3, [r3, #12]
 8014a22:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8014a24:	68bb      	ldr	r3, [r7, #8]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	4a13      	ldr	r2, [pc, #76]	@ (8014a78 <sys_check_timeouts+0x94>)
 8014a2a:	6013      	str	r3, [r2, #0]
#if LWIP_DEBUG_TIMERNAMES
    if (handler != NULL) {
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d00f      	beq.n	8014a52 <sys_check_timeouts+0x6e>
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
 8014a32:	68bb      	ldr	r3, [r7, #8]
 8014a34:	691c      	ldr	r4, [r3, #16]
 8014a36:	f7ef fa7d 	bl	8003f34 <sys_now>
 8014a3a:	4602      	mov	r2, r0
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	685b      	ldr	r3, [r3, #4]
 8014a40:	1ad2      	subs	r2, r2, r3
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	4621      	mov	r1, r4
 8014a46:	480d      	ldr	r0, [pc, #52]	@ (8014a7c <sys_check_timeouts+0x98>)
 8014a48:	f006 fe6e 	bl	801b728 <iprintf>
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	f006 fd95 	bl	801b57c <fflush>
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8014a52:	68b9      	ldr	r1, [r7, #8]
 8014a54:	200a      	movs	r0, #10
 8014a56:	f7f6 fee3 	bl	800b820 <memp_free>
    if (handler != NULL) {
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d0c7      	beq.n	80149f0 <sys_check_timeouts+0xc>
      handler(arg);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	6838      	ldr	r0, [r7, #0]
 8014a64:	4798      	blx	r3
  do {
 8014a66:	e7c3      	b.n	80149f0 <sys_check_timeouts+0xc>
      return;
 8014a68:	bf00      	nop
 8014a6a:	e000      	b.n	8014a6e <sys_check_timeouts+0x8a>
      return;
 8014a6c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8014a6e:	3714      	adds	r7, #20
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bd90      	pop	{r4, r7, pc}
 8014a74:	20011dd0 	.word	0x20011dd0
 8014a78:	20011dd4 	.word	0x20011dd4
 8014a7c:	080212e0 	.word	0x080212e0

08014a80 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b082      	sub	sp, #8
 8014a84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8014a86:	4b17      	ldr	r3, [pc, #92]	@ (8014ae4 <sys_timeouts_sleeptime+0x64>)
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d102      	bne.n	8014a94 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8014a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8014a92:	e023      	b.n	8014adc <sys_timeouts_sleeptime+0x5c>
  }
  now = sys_now();
 8014a94:	f7ef fa4e 	bl	8003f34 <sys_now>
 8014a98:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8014a9a:	4b12      	ldr	r3, [pc, #72]	@ (8014ae4 <sys_timeouts_sleeptime+0x64>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	685a      	ldr	r2, [r3, #4]
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	1ad3      	subs	r3, r2, r3
 8014aa4:	0fdb      	lsrs	r3, r3, #31
 8014aa6:	f003 0301 	and.w	r3, r3, #1
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d001      	beq.n	8014ab4 <sys_timeouts_sleeptime+0x34>
    return 0;
 8014ab0:	2300      	movs	r3, #0
 8014ab2:	e013      	b.n	8014adc <sys_timeouts_sleeptime+0x5c>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8014ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8014ae4 <sys_timeouts_sleeptime+0x64>)
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	685a      	ldr	r2, [r3, #4]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	1ad3      	subs	r3, r2, r3
 8014abe:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	da09      	bge.n	8014ada <sys_timeouts_sleeptime+0x5a>
 8014ac6:	4b08      	ldr	r3, [pc, #32]	@ (8014ae8 <sys_timeouts_sleeptime+0x68>)
 8014ac8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8014acc:	4907      	ldr	r1, [pc, #28]	@ (8014aec <sys_timeouts_sleeptime+0x6c>)
 8014ace:	4808      	ldr	r0, [pc, #32]	@ (8014af0 <sys_timeouts_sleeptime+0x70>)
 8014ad0:	f006 fe2a 	bl	801b728 <iprintf>
 8014ad4:	2000      	movs	r0, #0
 8014ad6:	f006 fd51 	bl	801b57c <fflush>
    return ret;
 8014ada:	683b      	ldr	r3, [r7, #0]
  }
}
 8014adc:	4618      	mov	r0, r3
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}
 8014ae4:	20011dd0 	.word	0x20011dd0
 8014ae8:	080211b8 	.word	0x080211b8
 8014aec:	08021300 	.word	0x08021300
 8014af0:	0802122c 	.word	0x0802122c

08014af4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8014af4:	b580      	push	{r7, lr}
 8014af6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014af8:	f006 fc56 	bl	801b3a8 <rand>
 8014afc:	4603      	mov	r3, r0
 8014afe:	b29b      	uxth	r3, r3
 8014b00:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014b04:	b29b      	uxth	r3, r3
 8014b06:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8014b0a:	b29a      	uxth	r2, r3
 8014b0c:	4b01      	ldr	r3, [pc, #4]	@ (8014b14 <udp_init+0x20>)
 8014b0e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014b10:	bf00      	nop
 8014b12:	bd80      	pop	{r7, pc}
 8014b14:	20000070 	.word	0x20000070

08014b18 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8014b18:	b480      	push	{r7}
 8014b1a:	b083      	sub	sp, #12
 8014b1c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8014b22:	4b17      	ldr	r3, [pc, #92]	@ (8014b80 <udp_new_port+0x68>)
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	1c5a      	adds	r2, r3, #1
 8014b28:	b291      	uxth	r1, r2
 8014b2a:	4a15      	ldr	r2, [pc, #84]	@ (8014b80 <udp_new_port+0x68>)
 8014b2c:	8011      	strh	r1, [r2, #0]
 8014b2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b32:	4293      	cmp	r3, r2
 8014b34:	d103      	bne.n	8014b3e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8014b36:	4b12      	ldr	r3, [pc, #72]	@ (8014b80 <udp_new_port+0x68>)
 8014b38:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8014b3c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b3e:	4b11      	ldr	r3, [pc, #68]	@ (8014b84 <udp_new_port+0x6c>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	603b      	str	r3, [r7, #0]
 8014b44:	e011      	b.n	8014b6a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	8a5a      	ldrh	r2, [r3, #18]
 8014b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8014b80 <udp_new_port+0x68>)
 8014b4c:	881b      	ldrh	r3, [r3, #0]
 8014b4e:	429a      	cmp	r2, r3
 8014b50:	d108      	bne.n	8014b64 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8014b52:	88fb      	ldrh	r3, [r7, #6]
 8014b54:	3301      	adds	r3, #1
 8014b56:	80fb      	strh	r3, [r7, #6]
 8014b58:	88fb      	ldrh	r3, [r7, #6]
 8014b5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014b5e:	d3e0      	bcc.n	8014b22 <udp_new_port+0xa>
        return 0;
 8014b60:	2300      	movs	r3, #0
 8014b62:	e007      	b.n	8014b74 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	68db      	ldr	r3, [r3, #12]
 8014b68:	603b      	str	r3, [r7, #0]
 8014b6a:	683b      	ldr	r3, [r7, #0]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d1ea      	bne.n	8014b46 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8014b70:	4b03      	ldr	r3, [pc, #12]	@ (8014b80 <udp_new_port+0x68>)
 8014b72:	881b      	ldrh	r3, [r3, #0]
}
 8014b74:	4618      	mov	r0, r3
 8014b76:	370c      	adds	r7, #12
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7e:	4770      	bx	lr
 8014b80:	20000070 	.word	0x20000070
 8014b84:	20011ddc 	.word	0x20011ddc

08014b88 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8014b88:	b580      	push	{r7, lr}
 8014b8a:	b084      	sub	sp, #16
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	60f8      	str	r0, [r7, #12]
 8014b90:	60b9      	str	r1, [r7, #8]
 8014b92:	4613      	mov	r3, r2
 8014b94:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d108      	bne.n	8014bae <udp_input_local_match+0x26>
 8014b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8014c48 <udp_input_local_match+0xc0>)
 8014b9e:	2287      	movs	r2, #135	@ 0x87
 8014ba0:	492a      	ldr	r1, [pc, #168]	@ (8014c4c <udp_input_local_match+0xc4>)
 8014ba2:	482b      	ldr	r0, [pc, #172]	@ (8014c50 <udp_input_local_match+0xc8>)
 8014ba4:	f006 fdc0 	bl	801b728 <iprintf>
 8014ba8:	2000      	movs	r0, #0
 8014baa:	f006 fce7 	bl	801b57c <fflush>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d108      	bne.n	8014bc6 <udp_input_local_match+0x3e>
 8014bb4:	4b24      	ldr	r3, [pc, #144]	@ (8014c48 <udp_input_local_match+0xc0>)
 8014bb6:	2288      	movs	r2, #136	@ 0x88
 8014bb8:	4926      	ldr	r1, [pc, #152]	@ (8014c54 <udp_input_local_match+0xcc>)
 8014bba:	4825      	ldr	r0, [pc, #148]	@ (8014c50 <udp_input_local_match+0xc8>)
 8014bbc:	f006 fdb4 	bl	801b728 <iprintf>
 8014bc0:	2000      	movs	r0, #0
 8014bc2:	f006 fcdb 	bl	801b57c <fflush>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	7a1b      	ldrb	r3, [r3, #8]
 8014bca:	2b00      	cmp	r3, #0
 8014bcc:	d00b      	beq.n	8014be6 <udp_input_local_match+0x5e>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	7a1a      	ldrb	r2, [r3, #8]
 8014bd2:	4b21      	ldr	r3, [pc, #132]	@ (8014c58 <udp_input_local_match+0xd0>)
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014bda:	3301      	adds	r3, #1
 8014bdc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d001      	beq.n	8014be6 <udp_input_local_match+0x5e>
    return 0;
 8014be2:	2300      	movs	r3, #0
 8014be4:	e02b      	b.n	8014c3e <udp_input_local_match+0xb6>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8014be6:	79fb      	ldrb	r3, [r7, #7]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d018      	beq.n	8014c1e <udp_input_local_match+0x96>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d013      	beq.n	8014c1a <udp_input_local_match+0x92>
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d00f      	beq.n	8014c1a <udp_input_local_match+0x92>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014bfa:	4b17      	ldr	r3, [pc, #92]	@ (8014c58 <udp_input_local_match+0xd0>)
 8014bfc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8014bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c02:	d00a      	beq.n	8014c1a <udp_input_local_match+0x92>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8014c04:	68fb      	ldr	r3, [r7, #12]
 8014c06:	681a      	ldr	r2, [r3, #0]
 8014c08:	4b13      	ldr	r3, [pc, #76]	@ (8014c58 <udp_input_local_match+0xd0>)
 8014c0a:	695b      	ldr	r3, [r3, #20]
 8014c0c:	405a      	eors	r2, r3
 8014c0e:	68bb      	ldr	r3, [r7, #8]
 8014c10:	3308      	adds	r3, #8
 8014c12:	681b      	ldr	r3, [r3, #0]
 8014c14:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d110      	bne.n	8014c3c <udp_input_local_match+0xb4>
          return 1;
 8014c1a:	2301      	movs	r3, #1
 8014c1c:	e00f      	b.n	8014c3e <udp_input_local_match+0xb6>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014c1e:	68fb      	ldr	r3, [r7, #12]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d009      	beq.n	8014c38 <udp_input_local_match+0xb0>
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d005      	beq.n	8014c38 <udp_input_local_match+0xb0>
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	681a      	ldr	r2, [r3, #0]
 8014c30:	4b09      	ldr	r3, [pc, #36]	@ (8014c58 <udp_input_local_match+0xd0>)
 8014c32:	695b      	ldr	r3, [r3, #20]
 8014c34:	429a      	cmp	r2, r3
 8014c36:	d101      	bne.n	8014c3c <udp_input_local_match+0xb4>
        return 1;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	e000      	b.n	8014c3e <udp_input_local_match+0xb6>
      }
  }

  return 0;
 8014c3c:	2300      	movs	r3, #0
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3710      	adds	r7, #16
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	08021314 	.word	0x08021314
 8014c4c:	08021344 	.word	0x08021344
 8014c50:	08021368 	.word	0x08021368
 8014c54:	08021390 	.word	0x08021390
 8014c58:	2000c0e8 	.word	0x2000c0e8

08014c5c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8014c5c:	b590      	push	{r4, r7, lr}
 8014c5e:	b08d      	sub	sp, #52	@ 0x34
 8014c60:	af02      	add	r7, sp, #8
 8014c62:	6078      	str	r0, [r7, #4]
 8014c64:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8014c66:	2300      	movs	r3, #0
 8014c68:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d108      	bne.n	8014c82 <udp_input+0x26>
 8014c70:	4b8a      	ldr	r3, [pc, #552]	@ (8014e9c <udp_input+0x240>)
 8014c72:	22cf      	movs	r2, #207	@ 0xcf
 8014c74:	498a      	ldr	r1, [pc, #552]	@ (8014ea0 <udp_input+0x244>)
 8014c76:	488b      	ldr	r0, [pc, #556]	@ (8014ea4 <udp_input+0x248>)
 8014c78:	f006 fd56 	bl	801b728 <iprintf>
 8014c7c:	2000      	movs	r0, #0
 8014c7e:	f006 fc7d 	bl	801b57c <fflush>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d108      	bne.n	8014c9a <udp_input+0x3e>
 8014c88:	4b84      	ldr	r3, [pc, #528]	@ (8014e9c <udp_input+0x240>)
 8014c8a:	22d0      	movs	r2, #208	@ 0xd0
 8014c8c:	4986      	ldr	r1, [pc, #536]	@ (8014ea8 <udp_input+0x24c>)
 8014c8e:	4885      	ldr	r0, [pc, #532]	@ (8014ea4 <udp_input+0x248>)
 8014c90:	f006 fd4a 	bl	801b728 <iprintf>
 8014c94:	2000      	movs	r0, #0
 8014c96:	f006 fc71 	bl	801b57c <fflush>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	895b      	ldrh	r3, [r3, #10]
 8014c9e:	2b07      	cmp	r3, #7
 8014ca0:	d80c      	bhi.n	8014cbc <udp_input+0x60>
    /* drop short packets */
    LWIP_DEBUGF(UDP_DEBUG,
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	891b      	ldrh	r3, [r3, #8]
 8014ca6:	4619      	mov	r1, r3
 8014ca8:	4880      	ldr	r0, [pc, #512]	@ (8014eac <udp_input+0x250>)
 8014caa:	f006 fd3d 	bl	801b728 <iprintf>
 8014cae:	2000      	movs	r0, #0
 8014cb0:	f006 fc64 	bl	801b57c <fflush>
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f7f7 fe31 	bl	800c91c <pbuf_free>
    goto end;
 8014cba:	e1b7      	b.n	801502c <udp_input+0x3d0>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	685b      	ldr	r3, [r3, #4]
 8014cc0:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8014cc2:	4b7b      	ldr	r3, [pc, #492]	@ (8014eb0 <udp_input+0x254>)
 8014cc4:	695b      	ldr	r3, [r3, #20]
 8014cc6:	4a7a      	ldr	r2, [pc, #488]	@ (8014eb0 <udp_input+0x254>)
 8014cc8:	6812      	ldr	r2, [r2, #0]
 8014cca:	4611      	mov	r1, r2
 8014ccc:	4618      	mov	r0, r3
 8014cce:	f005 f94b 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8014cd2:	4603      	mov	r3, r0
 8014cd4:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	891b      	ldrh	r3, [r3, #8]
 8014cda:	4619      	mov	r1, r3
 8014cdc:	4875      	ldr	r0, [pc, #468]	@ (8014eb4 <udp_input+0x258>)
 8014cde:	f006 fd23 	bl	801b728 <iprintf>
 8014ce2:	2000      	movs	r0, #0
 8014ce4:	f006 fc4a 	bl	801b57c <fflush>

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	881b      	ldrh	r3, [r3, #0]
 8014cec:	b29b      	uxth	r3, r3
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7f5 ffc0 	bl	800ac74 <lwip_htons>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8014cf8:	697b      	ldr	r3, [r7, #20]
 8014cfa:	885b      	ldrh	r3, [r3, #2]
 8014cfc:	b29b      	uxth	r3, r3
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f7f5 ffb8 	bl	800ac74 <lwip_htons>
 8014d04:	4603      	mov	r3, r0
 8014d06:	81fb      	strh	r3, [r7, #14]

  udp_debug_print(udphdr);
 8014d08:	6978      	ldr	r0, [r7, #20]
 8014d0a:	f000 fdd9 	bl	80158c0 <udp_debug_print>

  /* print the UDP source and destination */
  LWIP_DEBUGF(UDP_DEBUG, ("udp ("));
 8014d0e:	486a      	ldr	r0, [pc, #424]	@ (8014eb8 <udp_input+0x25c>)
 8014d10:	f006 fd0a 	bl	801b728 <iprintf>
 8014d14:	2000      	movs	r0, #0
 8014d16:	f006 fc31 	bl	801b57c <fflush>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
 8014d1a:	4b65      	ldr	r3, [pc, #404]	@ (8014eb0 <udp_input+0x254>)
 8014d1c:	695b      	ldr	r3, [r3, #20]
 8014d1e:	b2db      	uxtb	r3, r3
 8014d20:	4619      	mov	r1, r3
 8014d22:	4b63      	ldr	r3, [pc, #396]	@ (8014eb0 <udp_input+0x254>)
 8014d24:	695b      	ldr	r3, [r3, #20]
 8014d26:	0a1b      	lsrs	r3, r3, #8
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	4b60      	ldr	r3, [pc, #384]	@ (8014eb0 <udp_input+0x254>)
 8014d2e:	695b      	ldr	r3, [r3, #20]
 8014d30:	0c1b      	lsrs	r3, r3, #16
 8014d32:	b2db      	uxtb	r3, r3
 8014d34:	4618      	mov	r0, r3
 8014d36:	4b5e      	ldr	r3, [pc, #376]	@ (8014eb0 <udp_input+0x254>)
 8014d38:	695b      	ldr	r3, [r3, #20]
 8014d3a:	0e1b      	lsrs	r3, r3, #24
 8014d3c:	b2db      	uxtb	r3, r3
 8014d3e:	9300      	str	r3, [sp, #0]
 8014d40:	4603      	mov	r3, r0
 8014d42:	485e      	ldr	r0, [pc, #376]	@ (8014ebc <udp_input+0x260>)
 8014d44:	f006 fcf0 	bl	801b728 <iprintf>
 8014d48:	2000      	movs	r0, #0
 8014d4a:	f006 fc17 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
 8014d4e:	697b      	ldr	r3, [r7, #20]
 8014d50:	885b      	ldrh	r3, [r3, #2]
 8014d52:	b29b      	uxth	r3, r3
 8014d54:	4618      	mov	r0, r3
 8014d56:	f7f5 ff8d 	bl	800ac74 <lwip_htons>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	4619      	mov	r1, r3
 8014d5e:	4858      	ldr	r0, [pc, #352]	@ (8014ec0 <udp_input+0x264>)
 8014d60:	f006 fce2 	bl	801b728 <iprintf>
 8014d64:	2000      	movs	r0, #0
 8014d66:	f006 fc09 	bl	801b57c <fflush>
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
 8014d6a:	4b51      	ldr	r3, [pc, #324]	@ (8014eb0 <udp_input+0x254>)
 8014d6c:	691b      	ldr	r3, [r3, #16]
 8014d6e:	b2db      	uxtb	r3, r3
 8014d70:	4619      	mov	r1, r3
 8014d72:	4b4f      	ldr	r3, [pc, #316]	@ (8014eb0 <udp_input+0x254>)
 8014d74:	691b      	ldr	r3, [r3, #16]
 8014d76:	0a1b      	lsrs	r3, r3, #8
 8014d78:	b2db      	uxtb	r3, r3
 8014d7a:	461a      	mov	r2, r3
 8014d7c:	4b4c      	ldr	r3, [pc, #304]	@ (8014eb0 <udp_input+0x254>)
 8014d7e:	691b      	ldr	r3, [r3, #16]
 8014d80:	0c1b      	lsrs	r3, r3, #16
 8014d82:	b2db      	uxtb	r3, r3
 8014d84:	4618      	mov	r0, r3
 8014d86:	4b4a      	ldr	r3, [pc, #296]	@ (8014eb0 <udp_input+0x254>)
 8014d88:	691b      	ldr	r3, [r3, #16]
 8014d8a:	0e1b      	lsrs	r3, r3, #24
 8014d8c:	b2db      	uxtb	r3, r3
 8014d8e:	9300      	str	r3, [sp, #0]
 8014d90:	4603      	mov	r3, r0
 8014d92:	484a      	ldr	r0, [pc, #296]	@ (8014ebc <udp_input+0x260>)
 8014d94:	f006 fcc8 	bl	801b728 <iprintf>
 8014d98:	2000      	movs	r0, #0
 8014d9a:	f006 fbef 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));
 8014d9e:	697b      	ldr	r3, [r7, #20]
 8014da0:	881b      	ldrh	r3, [r3, #0]
 8014da2:	b29b      	uxth	r3, r3
 8014da4:	4618      	mov	r0, r3
 8014da6:	f7f5 ff65 	bl	800ac74 <lwip_htons>
 8014daa:	4603      	mov	r3, r0
 8014dac:	4619      	mov	r1, r3
 8014dae:	4845      	ldr	r0, [pc, #276]	@ (8014ec4 <udp_input+0x268>)
 8014db0:	f006 fcba 	bl	801b728 <iprintf>
 8014db4:	2000      	movs	r0, #0
 8014db6:	f006 fbe1 	bl	801b57c <fflush>

  pcb = NULL;
 8014dba:	2300      	movs	r3, #0
 8014dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014dc6:	4b40      	ldr	r3, [pc, #256]	@ (8014ec8 <udp_input+0x26c>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8014dcc:	e0bb      	b.n	8014f46 <udp_input+0x2ea>
    /* print the PCB local and remote address */
    LWIP_DEBUGF(UDP_DEBUG, ("pcb ("));
 8014dce:	483f      	ldr	r0, [pc, #252]	@ (8014ecc <udp_input+0x270>)
 8014dd0:	f006 fcaa 	bl	801b728 <iprintf>
 8014dd4:	2000      	movs	r0, #0
 8014dd6:	f006 fbd1 	bl	801b57c <fflush>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->local_ip);
 8014dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	b2db      	uxtb	r3, r3
 8014de0:	4619      	mov	r1, r3
 8014de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014de4:	681b      	ldr	r3, [r3, #0]
 8014de6:	0a1b      	lsrs	r3, r3, #8
 8014de8:	b2db      	uxtb	r3, r3
 8014dea:	461a      	mov	r2, r3
 8014dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	0c1b      	lsrs	r3, r3, #16
 8014df2:	b2db      	uxtb	r3, r3
 8014df4:	4618      	mov	r0, r3
 8014df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	0e1b      	lsrs	r3, r3, #24
 8014dfc:	b2db      	uxtb	r3, r3
 8014dfe:	9300      	str	r3, [sp, #0]
 8014e00:	4603      	mov	r3, r0
 8014e02:	482e      	ldr	r0, [pc, #184]	@ (8014ebc <udp_input+0x260>)
 8014e04:	f006 fc90 	bl	801b728 <iprintf>
 8014e08:	2000      	movs	r0, #0
 8014e0a:	f006 fbb7 	bl	801b57c <fflush>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
 8014e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e10:	8a5b      	ldrh	r3, [r3, #18]
 8014e12:	4619      	mov	r1, r3
 8014e14:	482a      	ldr	r0, [pc, #168]	@ (8014ec0 <udp_input+0x264>)
 8014e16:	f006 fc87 	bl	801b728 <iprintf>
 8014e1a:	2000      	movs	r0, #0
 8014e1c:	f006 fbae 	bl	801b57c <fflush>
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
 8014e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e22:	685b      	ldr	r3, [r3, #4]
 8014e24:	b2db      	uxtb	r3, r3
 8014e26:	4619      	mov	r1, r3
 8014e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	0a1b      	lsrs	r3, r3, #8
 8014e2e:	b2db      	uxtb	r3, r3
 8014e30:	461a      	mov	r2, r3
 8014e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	0c1b      	lsrs	r3, r3, #16
 8014e38:	b2db      	uxtb	r3, r3
 8014e3a:	4618      	mov	r0, r3
 8014e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	0e1b      	lsrs	r3, r3, #24
 8014e42:	b2db      	uxtb	r3, r3
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	4603      	mov	r3, r0
 8014e48:	481c      	ldr	r0, [pc, #112]	@ (8014ebc <udp_input+0x260>)
 8014e4a:	f006 fc6d 	bl	801b728 <iprintf>
 8014e4e:	2000      	movs	r0, #0
 8014e50:	f006 fb94 	bl	801b57c <fflush>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));
 8014e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e56:	8a9b      	ldrh	r3, [r3, #20]
 8014e58:	4619      	mov	r1, r3
 8014e5a:	481a      	ldr	r0, [pc, #104]	@ (8014ec4 <udp_input+0x268>)
 8014e5c:	f006 fc64 	bl	801b728 <iprintf>
 8014e60:	2000      	movs	r0, #0
 8014e62:	f006 fb8b 	bl	801b57c <fflush>

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8014e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e68:	8a5b      	ldrh	r3, [r3, #18]
 8014e6a:	89fa      	ldrh	r2, [r7, #14]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d165      	bne.n	8014f3c <udp_input+0x2e0>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8014e70:	7cfb      	ldrb	r3, [r7, #19]
 8014e72:	461a      	mov	r2, r3
 8014e74:	6839      	ldr	r1, [r7, #0]
 8014e76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e78:	f7ff fe86 	bl	8014b88 <udp_input_local_match>
 8014e7c:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d05c      	beq.n	8014f3c <udp_input+0x2e0>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8014e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e84:	7c1b      	ldrb	r3, [r3, #16]
 8014e86:	f003 0304 	and.w	r3, r3, #4
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d138      	bne.n	8014f00 <udp_input+0x2a4>
        if (uncon_pcb == NULL) {
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d11d      	bne.n	8014ed0 <udp_input+0x274>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8014e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e96:	61fb      	str	r3, [r7, #28]
 8014e98:	e032      	b.n	8014f00 <udp_input+0x2a4>
 8014e9a:	bf00      	nop
 8014e9c:	08021314 	.word	0x08021314
 8014ea0:	080213b8 	.word	0x080213b8
 8014ea4:	08021368 	.word	0x08021368
 8014ea8:	080213d0 	.word	0x080213d0
 8014eac:	080213ec 	.word	0x080213ec
 8014eb0:	2000c0e8 	.word	0x2000c0e8
 8014eb4:	08021424 	.word	0x08021424
 8014eb8:	08021450 	.word	0x08021450
 8014ebc:	08021458 	.word	0x08021458
 8014ec0:	08021468 	.word	0x08021468
 8014ec4:	08021478 	.word	0x08021478
 8014ec8:	20011ddc 	.word	0x20011ddc
 8014ecc:	08021480 	.word	0x08021480
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8014ed0:	7cfb      	ldrb	r3, [r7, #19]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d014      	beq.n	8014f00 <udp_input+0x2a4>
 8014ed6:	4b57      	ldr	r3, [pc, #348]	@ (8015034 <udp_input+0x3d8>)
 8014ed8:	695b      	ldr	r3, [r3, #20]
 8014eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ede:	d10f      	bne.n	8014f00 <udp_input+0x2a4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8014ee0:	69fb      	ldr	r3, [r7, #28]
 8014ee2:	681a      	ldr	r2, [r3, #0]
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	3304      	adds	r3, #4
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d008      	beq.n	8014f00 <udp_input+0x2a4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8014eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ef0:	681a      	ldr	r2, [r3, #0]
 8014ef2:	683b      	ldr	r3, [r7, #0]
 8014ef4:	3304      	adds	r3, #4
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	429a      	cmp	r2, r3
 8014efa:	d101      	bne.n	8014f00 <udp_input+0x2a4>
              /* better match */
              uncon_pcb = pcb;
 8014efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014efe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8014f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f02:	8a9b      	ldrh	r3, [r3, #20]
 8014f04:	8a3a      	ldrh	r2, [r7, #16]
 8014f06:	429a      	cmp	r2, r3
 8014f08:	d118      	bne.n	8014f3c <udp_input+0x2e0>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f0c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d005      	beq.n	8014f1e <udp_input+0x2c2>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8014f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f14:	685a      	ldr	r2, [r3, #4]
 8014f16:	4b47      	ldr	r3, [pc, #284]	@ (8015034 <udp_input+0x3d8>)
 8014f18:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8014f1a:	429a      	cmp	r2, r3
 8014f1c:	d10e      	bne.n	8014f3c <udp_input+0x2e0>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8014f1e:	6a3b      	ldr	r3, [r7, #32]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d015      	beq.n	8014f50 <udp_input+0x2f4>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8014f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f26:	68da      	ldr	r2, [r3, #12]
 8014f28:	6a3b      	ldr	r3, [r7, #32]
 8014f2a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8014f2c:	4b42      	ldr	r3, [pc, #264]	@ (8015038 <udp_input+0x3dc>)
 8014f2e:	681a      	ldr	r2, [r3, #0]
 8014f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f32:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8014f34:	4a40      	ldr	r2, [pc, #256]	@ (8015038 <udp_input+0x3dc>)
 8014f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f38:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8014f3a:	e009      	b.n	8014f50 <udp_input+0x2f4>
      }
    }

    prev = pcb;
 8014f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f3e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8014f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8014f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	f47f af40 	bne.w	8014dce <udp_input+0x172>
 8014f4e:	e000      	b.n	8014f52 <udp_input+0x2f6>
        break;
 8014f50:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8014f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d101      	bne.n	8014f5c <udp_input+0x300>
    pcb = uncon_pcb;
 8014f58:	69fb      	ldr	r3, [r7, #28]
 8014f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8014f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	d002      	beq.n	8014f68 <udp_input+0x30c>
    for_us = 1;
 8014f62:	2301      	movs	r3, #1
 8014f64:	76fb      	strb	r3, [r7, #27]
 8014f66:	e00a      	b.n	8014f7e <udp_input+0x322>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8014f68:	683b      	ldr	r3, [r7, #0]
 8014f6a:	3304      	adds	r3, #4
 8014f6c:	681a      	ldr	r2, [r3, #0]
 8014f6e:	4b31      	ldr	r3, [pc, #196]	@ (8015034 <udp_input+0x3d8>)
 8014f70:	695b      	ldr	r3, [r3, #20]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	bf0c      	ite	eq
 8014f76:	2301      	moveq	r3, #1
 8014f78:	2300      	movne	r3, #0
 8014f7a:	b2db      	uxtb	r3, r3
 8014f7c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8014f7e:	7efb      	ldrb	r3, [r7, #27]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d050      	beq.n	8015026 <udp_input+0x3ca>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: calculating checksum\n"));
 8014f84:	482d      	ldr	r0, [pc, #180]	@ (801503c <udp_input+0x3e0>)
 8014f86:	f006 fc3f 	bl	801b808 <puts>
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	f006 faf6 	bl	801b57c <fflush>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8014f90:	2108      	movs	r1, #8
 8014f92:	6878      	ldr	r0, [r7, #4]
 8014f94:	f7f7 fc2a 	bl	800c7ec <pbuf_remove_header>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	d00d      	beq.n	8014fba <udp_input+0x35e>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8014f9e:	4b28      	ldr	r3, [pc, #160]	@ (8015040 <udp_input+0x3e4>)
 8014fa0:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8014fa4:	4927      	ldr	r1, [pc, #156]	@ (8015044 <udp_input+0x3e8>)
 8014fa6:	4828      	ldr	r0, [pc, #160]	@ (8015048 <udp_input+0x3ec>)
 8014fa8:	f006 fbbe 	bl	801b728 <iprintf>
 8014fac:	2000      	movs	r0, #0
 8014fae:	f006 fae5 	bl	801b57c <fflush>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7f7 fcb2 	bl	800c91c <pbuf_free>
      goto end;
 8014fb8:	e038      	b.n	801502c <udp_input+0x3d0>
    }

    if (pcb != NULL) {
 8014fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d012      	beq.n	8014fe6 <udp_input+0x38a>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8014fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc2:	699b      	ldr	r3, [r3, #24]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d00a      	beq.n	8014fde <udp_input+0x382>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8014fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fca:	699c      	ldr	r4, [r3, #24]
 8014fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fce:	69d8      	ldr	r0, [r3, #28]
 8014fd0:	8a3b      	ldrh	r3, [r7, #16]
 8014fd2:	9300      	str	r3, [sp, #0]
 8014fd4:	4b1d      	ldr	r3, [pc, #116]	@ (801504c <udp_input+0x3f0>)
 8014fd6:	687a      	ldr	r2, [r7, #4]
 8014fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014fda:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8014fdc:	e027      	b.n	801502e <udp_input+0x3d2>
        pbuf_free(p);
 8014fde:	6878      	ldr	r0, [r7, #4]
 8014fe0:	f7f7 fc9c 	bl	800c91c <pbuf_free>
        goto end;
 8014fe4:	e022      	b.n	801502c <udp_input+0x3d0>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_input: not for us.\n"));
 8014fe6:	481a      	ldr	r0, [pc, #104]	@ (8015050 <udp_input+0x3f4>)
 8014fe8:	f006 fc0e 	bl	801b808 <puts>
 8014fec:	2000      	movs	r0, #0
 8014fee:	f006 fac5 	bl	801b57c <fflush>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8014ff2:	7cfb      	ldrb	r3, [r7, #19]
 8014ff4:	2b00      	cmp	r3, #0
 8014ff6:	d112      	bne.n	801501e <udp_input+0x3c2>
 8014ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8015034 <udp_input+0x3d8>)
 8014ffa:	695b      	ldr	r3, [r3, #20]
 8014ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8015000:	2be0      	cmp	r3, #224	@ 0xe0
 8015002:	d00c      	beq.n	801501e <udp_input+0x3c2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8015004:	4b0b      	ldr	r3, [pc, #44]	@ (8015034 <udp_input+0x3d8>)
 8015006:	899b      	ldrh	r3, [r3, #12]
 8015008:	3308      	adds	r3, #8
 801500a:	b29b      	uxth	r3, r3
 801500c:	b21b      	sxth	r3, r3
 801500e:	4619      	mov	r1, r3
 8015010:	6878      	ldr	r0, [r7, #4]
 8015012:	f7f7 fc70 	bl	800c8f6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8015016:	2103      	movs	r1, #3
 8015018:	6878      	ldr	r0, [r7, #4]
 801501a:	f004 f9e1 	bl	80193e0 <icmp_dest_unreach>
      pbuf_free(p);
 801501e:	6878      	ldr	r0, [r7, #4]
 8015020:	f7f7 fc7c 	bl	800c91c <pbuf_free>
  return;
 8015024:	e003      	b.n	801502e <udp_input+0x3d2>
    pbuf_free(p);
 8015026:	6878      	ldr	r0, [r7, #4]
 8015028:	f7f7 fc78 	bl	800c91c <pbuf_free>
  return;
 801502c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801502e:	372c      	adds	r7, #44	@ 0x2c
 8015030:	46bd      	mov	sp, r7
 8015032:	bd90      	pop	{r4, r7, pc}
 8015034:	2000c0e8 	.word	0x2000c0e8
 8015038:	20011ddc 	.word	0x20011ddc
 801503c:	08021488 	.word	0x08021488
 8015040:	08021314 	.word	0x08021314
 8015044:	080214a8 	.word	0x080214a8
 8015048:	08021368 	.word	0x08021368
 801504c:	2000c0f8 	.word	0x2000c0f8
 8015050:	080214c4 	.word	0x080214c4

08015054 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b088      	sub	sp, #32
 8015058:	af02      	add	r7, sp, #8
 801505a:	60f8      	str	r0, [r7, #12]
 801505c:	60b9      	str	r1, [r7, #8]
 801505e:	607a      	str	r2, [r7, #4]
 8015060:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8015062:	68fb      	ldr	r3, [r7, #12]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d10c      	bne.n	8015082 <udp_sendto_if+0x2e>
 8015068:	4b34      	ldr	r3, [pc, #208]	@ (801513c <udp_sendto_if+0xe8>)
 801506a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801506e:	4934      	ldr	r1, [pc, #208]	@ (8015140 <udp_sendto_if+0xec>)
 8015070:	4834      	ldr	r0, [pc, #208]	@ (8015144 <udp_sendto_if+0xf0>)
 8015072:	f006 fb59 	bl	801b728 <iprintf>
 8015076:	2000      	movs	r0, #0
 8015078:	f006 fa80 	bl	801b57c <fflush>
 801507c:	f06f 030f 	mvn.w	r3, #15
 8015080:	e058      	b.n	8015134 <udp_sendto_if+0xe0>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	2b00      	cmp	r3, #0
 8015086:	d10c      	bne.n	80150a2 <udp_sendto_if+0x4e>
 8015088:	4b2c      	ldr	r3, [pc, #176]	@ (801513c <udp_sendto_if+0xe8>)
 801508a:	f240 2281 	movw	r2, #641	@ 0x281
 801508e:	492e      	ldr	r1, [pc, #184]	@ (8015148 <udp_sendto_if+0xf4>)
 8015090:	482c      	ldr	r0, [pc, #176]	@ (8015144 <udp_sendto_if+0xf0>)
 8015092:	f006 fb49 	bl	801b728 <iprintf>
 8015096:	2000      	movs	r0, #0
 8015098:	f006 fa70 	bl	801b57c <fflush>
 801509c:	f06f 030f 	mvn.w	r3, #15
 80150a0:	e048      	b.n	8015134 <udp_sendto_if+0xe0>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d10c      	bne.n	80150c2 <udp_sendto_if+0x6e>
 80150a8:	4b24      	ldr	r3, [pc, #144]	@ (801513c <udp_sendto_if+0xe8>)
 80150aa:	f240 2282 	movw	r2, #642	@ 0x282
 80150ae:	4927      	ldr	r1, [pc, #156]	@ (801514c <udp_sendto_if+0xf8>)
 80150b0:	4824      	ldr	r0, [pc, #144]	@ (8015144 <udp_sendto_if+0xf0>)
 80150b2:	f006 fb39 	bl	801b728 <iprintf>
 80150b6:	2000      	movs	r0, #0
 80150b8:	f006 fa60 	bl	801b57c <fflush>
 80150bc:	f06f 030f 	mvn.w	r3, #15
 80150c0:	e038      	b.n	8015134 <udp_sendto_if+0xe0>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80150c2:	6a3b      	ldr	r3, [r7, #32]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d10c      	bne.n	80150e2 <udp_sendto_if+0x8e>
 80150c8:	4b1c      	ldr	r3, [pc, #112]	@ (801513c <udp_sendto_if+0xe8>)
 80150ca:	f240 2283 	movw	r2, #643	@ 0x283
 80150ce:	4920      	ldr	r1, [pc, #128]	@ (8015150 <udp_sendto_if+0xfc>)
 80150d0:	481c      	ldr	r0, [pc, #112]	@ (8015144 <udp_sendto_if+0xf0>)
 80150d2:	f006 fb29 	bl	801b728 <iprintf>
 80150d6:	2000      	movs	r0, #0
 80150d8:	f006 fa50 	bl	801b57c <fflush>
 80150dc:	f06f 030f 	mvn.w	r3, #15
 80150e0:	e028      	b.n	8015134 <udp_sendto_if+0xe0>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	2b00      	cmp	r3, #0
 80150e6:	d009      	beq.n	80150fc <udp_sendto_if+0xa8>
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d005      	beq.n	80150fc <udp_sendto_if+0xa8>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80150f8:	2be0      	cmp	r3, #224	@ 0xe0
 80150fa:	d103      	bne.n	8015104 <udp_sendto_if+0xb0>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80150fc:	6a3b      	ldr	r3, [r7, #32]
 80150fe:	3304      	adds	r3, #4
 8015100:	617b      	str	r3, [r7, #20]
 8015102:	e00b      	b.n	801511c <udp_sendto_if+0xc8>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	681a      	ldr	r2, [r3, #0]
 8015108:	6a3b      	ldr	r3, [r7, #32]
 801510a:	3304      	adds	r3, #4
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	429a      	cmp	r2, r3
 8015110:	d002      	beq.n	8015118 <udp_sendto_if+0xc4>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8015112:	f06f 0303 	mvn.w	r3, #3
 8015116:	e00d      	b.n	8015134 <udp_sendto_if+0xe0>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801511c:	887a      	ldrh	r2, [r7, #2]
 801511e:	697b      	ldr	r3, [r7, #20]
 8015120:	9301      	str	r3, [sp, #4]
 8015122:	6a3b      	ldr	r3, [r7, #32]
 8015124:	9300      	str	r3, [sp, #0]
 8015126:	4613      	mov	r3, r2
 8015128:	687a      	ldr	r2, [r7, #4]
 801512a:	68b9      	ldr	r1, [r7, #8]
 801512c:	68f8      	ldr	r0, [r7, #12]
 801512e:	f000 f811 	bl	8015154 <udp_sendto_if_src>
 8015132:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8015134:	4618      	mov	r0, r3
 8015136:	3718      	adds	r7, #24
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	08021314 	.word	0x08021314
 8015140:	08021580 	.word	0x08021580
 8015144:	08021368 	.word	0x08021368
 8015148:	0802159c 	.word	0x0802159c
 801514c:	080215b8 	.word	0x080215b8
 8015150:	080215d8 	.word	0x080215d8

08015154 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8015154:	b580      	push	{r7, lr}
 8015156:	b08c      	sub	sp, #48	@ 0x30
 8015158:	af04      	add	r7, sp, #16
 801515a:	60f8      	str	r0, [r7, #12]
 801515c:	60b9      	str	r1, [r7, #8]
 801515e:	607a      	str	r2, [r7, #4]
 8015160:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d10c      	bne.n	8015182 <udp_sendto_if_src+0x2e>
 8015168:	4b90      	ldr	r3, [pc, #576]	@ (80153ac <udp_sendto_if_src+0x258>)
 801516a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801516e:	4990      	ldr	r1, [pc, #576]	@ (80153b0 <udp_sendto_if_src+0x25c>)
 8015170:	4890      	ldr	r0, [pc, #576]	@ (80153b4 <udp_sendto_if_src+0x260>)
 8015172:	f006 fad9 	bl	801b728 <iprintf>
 8015176:	2000      	movs	r0, #0
 8015178:	f006 fa00 	bl	801b57c <fflush>
 801517c:	f06f 030f 	mvn.w	r3, #15
 8015180:	e110      	b.n	80153a4 <udp_sendto_if_src+0x250>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8015182:	68bb      	ldr	r3, [r7, #8]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d10c      	bne.n	80151a2 <udp_sendto_if_src+0x4e>
 8015188:	4b88      	ldr	r3, [pc, #544]	@ (80153ac <udp_sendto_if_src+0x258>)
 801518a:	f240 22d2 	movw	r2, #722	@ 0x2d2
 801518e:	498a      	ldr	r1, [pc, #552]	@ (80153b8 <udp_sendto_if_src+0x264>)
 8015190:	4888      	ldr	r0, [pc, #544]	@ (80153b4 <udp_sendto_if_src+0x260>)
 8015192:	f006 fac9 	bl	801b728 <iprintf>
 8015196:	2000      	movs	r0, #0
 8015198:	f006 f9f0 	bl	801b57c <fflush>
 801519c:	f06f 030f 	mvn.w	r3, #15
 80151a0:	e100      	b.n	80153a4 <udp_sendto_if_src+0x250>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	2b00      	cmp	r3, #0
 80151a6:	d10c      	bne.n	80151c2 <udp_sendto_if_src+0x6e>
 80151a8:	4b80      	ldr	r3, [pc, #512]	@ (80153ac <udp_sendto_if_src+0x258>)
 80151aa:	f240 22d3 	movw	r2, #723	@ 0x2d3
 80151ae:	4983      	ldr	r1, [pc, #524]	@ (80153bc <udp_sendto_if_src+0x268>)
 80151b0:	4880      	ldr	r0, [pc, #512]	@ (80153b4 <udp_sendto_if_src+0x260>)
 80151b2:	f006 fab9 	bl	801b728 <iprintf>
 80151b6:	2000      	movs	r0, #0
 80151b8:	f006 f9e0 	bl	801b57c <fflush>
 80151bc:	f06f 030f 	mvn.w	r3, #15
 80151c0:	e0f0      	b.n	80153a4 <udp_sendto_if_src+0x250>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80151c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d10c      	bne.n	80151e2 <udp_sendto_if_src+0x8e>
 80151c8:	4b78      	ldr	r3, [pc, #480]	@ (80153ac <udp_sendto_if_src+0x258>)
 80151ca:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80151ce:	497c      	ldr	r1, [pc, #496]	@ (80153c0 <udp_sendto_if_src+0x26c>)
 80151d0:	4878      	ldr	r0, [pc, #480]	@ (80153b4 <udp_sendto_if_src+0x260>)
 80151d2:	f006 faa9 	bl	801b728 <iprintf>
 80151d6:	2000      	movs	r0, #0
 80151d8:	f006 f9d0 	bl	801b57c <fflush>
 80151dc:	f06f 030f 	mvn.w	r3, #15
 80151e0:	e0e0      	b.n	80153a4 <udp_sendto_if_src+0x250>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80151e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d10c      	bne.n	8015202 <udp_sendto_if_src+0xae>
 80151e8:	4b70      	ldr	r3, [pc, #448]	@ (80153ac <udp_sendto_if_src+0x258>)
 80151ea:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80151ee:	4975      	ldr	r1, [pc, #468]	@ (80153c4 <udp_sendto_if_src+0x270>)
 80151f0:	4870      	ldr	r0, [pc, #448]	@ (80153b4 <udp_sendto_if_src+0x260>)
 80151f2:	f006 fa99 	bl	801b728 <iprintf>
 80151f6:	2000      	movs	r0, #0
 80151f8:	f006 f9c0 	bl	801b57c <fflush>
 80151fc:	f06f 030f 	mvn.w	r3, #15
 8015200:	e0d0      	b.n	80153a4 <udp_sendto_if_src+0x250>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	8a5b      	ldrh	r3, [r3, #18]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d11b      	bne.n	8015242 <udp_sendto_if_src+0xee>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
 801520a:	486f      	ldr	r0, [pc, #444]	@ (80153c8 <udp_sendto_if_src+0x274>)
 801520c:	f006 fafc 	bl	801b808 <puts>
 8015210:	2000      	movs	r0, #0
 8015212:	f006 f9b3 	bl	801b57c <fflush>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015216:	68f9      	ldr	r1, [r7, #12]
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	8a5b      	ldrh	r3, [r3, #18]
 801521c:	461a      	mov	r2, r3
 801521e:	68f8      	ldr	r0, [r7, #12]
 8015220:	f000 f8e6 	bl	80153f0 <udp_bind>
 8015224:	4603      	mov	r3, r0
 8015226:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8015228:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d008      	beq.n	8015242 <udp_sendto_if_src+0xee>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
 8015230:	4866      	ldr	r0, [pc, #408]	@ (80153cc <udp_sendto_if_src+0x278>)
 8015232:	f006 fae9 	bl	801b808 <puts>
 8015236:	2000      	movs	r0, #0
 8015238:	f006 f9a0 	bl	801b57c <fflush>
      return err;
 801523c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015240:	e0b0      	b.n	80153a4 <udp_sendto_if_src+0x250>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	891b      	ldrh	r3, [r3, #8]
 8015246:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 801524a:	4293      	cmp	r3, r2
 801524c:	d902      	bls.n	8015254 <udp_sendto_if_src+0x100>
    return ERR_MEM;
 801524e:	f04f 33ff 	mov.w	r3, #4294967295
 8015252:	e0a7      	b.n	80153a4 <udp_sendto_if_src+0x250>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8015254:	2108      	movs	r1, #8
 8015256:	68b8      	ldr	r0, [r7, #8]
 8015258:	f7f7 fab8 	bl	800c7cc <pbuf_add_header>
 801525c:	4603      	mov	r3, r0
 801525e:	2b00      	cmp	r3, #0
 8015260:	d023      	beq.n	80152aa <udp_sendto_if_src+0x156>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8015262:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015266:	2108      	movs	r1, #8
 8015268:	2022      	movs	r0, #34	@ 0x22
 801526a:	f7f6 fff1 	bl	800c250 <pbuf_alloc>
 801526e:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8015270:	69fb      	ldr	r3, [r7, #28]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d108      	bne.n	8015288 <udp_sendto_if_src+0x134>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
 8015276:	4856      	ldr	r0, [pc, #344]	@ (80153d0 <udp_sendto_if_src+0x27c>)
 8015278:	f006 fac6 	bl	801b808 <puts>
 801527c:	2000      	movs	r0, #0
 801527e:	f006 f97d 	bl	801b57c <fflush>
      return ERR_MEM;
 8015282:	f04f 33ff 	mov.w	r3, #4294967295
 8015286:	e08d      	b.n	80153a4 <udp_sendto_if_src+0x250>
    }
    if (p->tot_len != 0) {
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	891b      	ldrh	r3, [r3, #8]
 801528c:	2b00      	cmp	r3, #0
 801528e:	d003      	beq.n	8015298 <udp_sendto_if_src+0x144>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8015290:	68b9      	ldr	r1, [r7, #8]
 8015292:	69f8      	ldr	r0, [r7, #28]
 8015294:	f7f7 fca2 	bl	800cbdc <pbuf_chain>
    }
    /* first pbuf q points to header pbuf */
    LWIP_DEBUGF(UDP_DEBUG,
 8015298:	68ba      	ldr	r2, [r7, #8]
 801529a:	69f9      	ldr	r1, [r7, #28]
 801529c:	484d      	ldr	r0, [pc, #308]	@ (80153d4 <udp_sendto_if_src+0x280>)
 801529e:	f006 fa43 	bl	801b728 <iprintf>
 80152a2:	2000      	movs	r0, #0
 80152a4:	f006 f96a 	bl	801b57c <fflush>
 80152a8:	e008      	b.n	80152bc <udp_sendto_if_src+0x168>
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80152aa:	68bb      	ldr	r3, [r7, #8]
 80152ac:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
 80152ae:	68b9      	ldr	r1, [r7, #8]
 80152b0:	4849      	ldr	r0, [pc, #292]	@ (80153d8 <udp_sendto_if_src+0x284>)
 80152b2:	f006 fa39 	bl	801b728 <iprintf>
 80152b6:	2000      	movs	r0, #0
 80152b8:	f006 f960 	bl	801b57c <fflush>
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80152bc:	69fb      	ldr	r3, [r7, #28]
 80152be:	895b      	ldrh	r3, [r3, #10]
 80152c0:	2b07      	cmp	r3, #7
 80152c2:	d809      	bhi.n	80152d8 <udp_sendto_if_src+0x184>
 80152c4:	4b39      	ldr	r3, [pc, #228]	@ (80153ac <udp_sendto_if_src+0x258>)
 80152c6:	f240 320d 	movw	r2, #781	@ 0x30d
 80152ca:	4944      	ldr	r1, [pc, #272]	@ (80153dc <udp_sendto_if_src+0x288>)
 80152cc:	4839      	ldr	r0, [pc, #228]	@ (80153b4 <udp_sendto_if_src+0x260>)
 80152ce:	f006 fa2b 	bl	801b728 <iprintf>
 80152d2:	2000      	movs	r0, #0
 80152d4:	f006 f952 	bl	801b57c <fflush>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80152d8:	69fb      	ldr	r3, [r7, #28]
 80152da:	685b      	ldr	r3, [r3, #4]
 80152dc:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	8a5b      	ldrh	r3, [r3, #18]
 80152e2:	4618      	mov	r0, r3
 80152e4:	f7f5 fcc6 	bl	800ac74 <lwip_htons>
 80152e8:	4603      	mov	r3, r0
 80152ea:	461a      	mov	r2, r3
 80152ec:	697b      	ldr	r3, [r7, #20]
 80152ee:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80152f0:	887b      	ldrh	r3, [r7, #2]
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7f5 fcbe 	bl	800ac74 <lwip_htons>
 80152f8:	4603      	mov	r3, r0
 80152fa:	461a      	mov	r2, r3
 80152fc:	697b      	ldr	r3, [r7, #20]
 80152fe:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8015300:	697b      	ldr	r3, [r7, #20]
 8015302:	2200      	movs	r2, #0
 8015304:	719a      	strb	r2, [r3, #6]
 8015306:	2200      	movs	r2, #0
 8015308:	71da      	strb	r2, [r3, #7]
  if (((pcb->flags & UDP_FLAGS_MULTICAST_LOOP) != 0) && ip_addr_ismulticast(dst_ip)) {
    q->flags |= PBUF_FLAG_MCASTLOOP;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: sending datagram of length %"U16_F"\n", q->tot_len));
 801530a:	69fb      	ldr	r3, [r7, #28]
 801530c:	891b      	ldrh	r3, [r3, #8]
 801530e:	4619      	mov	r1, r3
 8015310:	4833      	ldr	r0, [pc, #204]	@ (80153e0 <udp_sendto_if_src+0x28c>)
 8015312:	f006 fa09 	bl	801b728 <iprintf>
 8015316:	2000      	movs	r0, #0
 8015318:	f006 f930 	bl	801b57c <fflush>

    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
 801531c:	69fb      	ldr	r3, [r7, #28]
 801531e:	891b      	ldrh	r3, [r3, #8]
 8015320:	4619      	mov	r1, r3
 8015322:	4830      	ldr	r0, [pc, #192]	@ (80153e4 <udp_sendto_if_src+0x290>)
 8015324:	f006 fa00 	bl	801b728 <iprintf>
 8015328:	2000      	movs	r0, #0
 801532a:	f006 f927 	bl	801b57c <fflush>
    udphdr->len = lwip_htons(q->tot_len);
 801532e:	69fb      	ldr	r3, [r7, #28]
 8015330:	891b      	ldrh	r3, [r3, #8]
 8015332:	4618      	mov	r0, r3
 8015334:	f7f5 fc9e 	bl	800ac74 <lwip_htons>
 8015338:	4603      	mov	r3, r0
 801533a:	461a      	mov	r2, r3
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8015340:	2311      	movs	r3, #17
 8015342:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	7adb      	ldrb	r3, [r3, #11]
 8015348:	74bb      	strb	r3, [r7, #18]
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	88db      	ldrh	r3, [r3, #6]
 801534e:	b29b      	uxth	r3, r3
 8015350:	4619      	mov	r1, r3
 8015352:	4825      	ldr	r0, [pc, #148]	@ (80153e8 <udp_sendto_if_src+0x294>)
 8015354:	f006 f9e8 	bl	801b728 <iprintf>
 8015358:	2000      	movs	r0, #0
 801535a:	f006 f90f 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
 801535e:	7cfb      	ldrb	r3, [r7, #19]
 8015360:	4619      	mov	r1, r3
 8015362:	4822      	ldr	r0, [pc, #136]	@ (80153ec <udp_sendto_if_src+0x298>)
 8015364:	f006 f9e0 	bl	801b728 <iprintf>
 8015368:	2000      	movs	r0, #0
 801536a:	f006 f907 	bl	801b57c <fflush>
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801536e:	68fb      	ldr	r3, [r7, #12]
 8015370:	7a9b      	ldrb	r3, [r3, #10]
 8015372:	7cb9      	ldrb	r1, [r7, #18]
 8015374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015376:	9202      	str	r2, [sp, #8]
 8015378:	7cfa      	ldrb	r2, [r7, #19]
 801537a:	9201      	str	r2, [sp, #4]
 801537c:	9300      	str	r3, [sp, #0]
 801537e:	460b      	mov	r3, r1
 8015380:	687a      	ldr	r2, [r7, #4]
 8015382:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015384:	69f8      	ldr	r0, [r7, #28]
 8015386:	f004 fc25 	bl	8019bd4 <ip4_output_if_src>
 801538a:	4603      	mov	r3, r0
 801538c:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801538e:	69fa      	ldr	r2, [r7, #28]
 8015390:	68bb      	ldr	r3, [r7, #8]
 8015392:	429a      	cmp	r2, r3
 8015394:	d004      	beq.n	80153a0 <udp_sendto_if_src+0x24c>
    /* free the header pbuf */
    pbuf_free(q);
 8015396:	69f8      	ldr	r0, [r7, #28]
 8015398:	f7f7 fac0 	bl	800c91c <pbuf_free>
    q = NULL;
 801539c:	2300      	movs	r3, #0
 801539e:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80153a0:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3720      	adds	r7, #32
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	08021314 	.word	0x08021314
 80153b0:	080215f8 	.word	0x080215f8
 80153b4:	08021368 	.word	0x08021368
 80153b8:	08021618 	.word	0x08021618
 80153bc:	08021638 	.word	0x08021638
 80153c0:	0802165c 	.word	0x0802165c
 80153c4:	08021680 	.word	0x08021680
 80153c8:	080216a4 	.word	0x080216a4
 80153cc:	080216d4 	.word	0x080216d4
 80153d0:	080216f8 	.word	0x080216f8
 80153d4:	0802171c 	.word	0x0802171c
 80153d8:	08021754 	.word	0x08021754
 80153dc:	08021780 	.word	0x08021780
 80153e0:	080217b0 	.word	0x080217b0
 80153e4:	080217dc 	.word	0x080217dc
 80153e8:	08021800 	.word	0x08021800
 80153ec:	08021820 	.word	0x08021820

080153f0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b088      	sub	sp, #32
 80153f4:	af02      	add	r7, sp, #8
 80153f6:	60f8      	str	r0, [r7, #12]
 80153f8:	60b9      	str	r1, [r7, #8]
 80153fa:	4613      	mov	r3, r2
 80153fc:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d101      	bne.n	8015408 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8015404:	4b72      	ldr	r3, [pc, #456]	@ (80155d0 <udp_bind+0x1e0>)
 8015406:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d10c      	bne.n	8015428 <udp_bind+0x38>
 801540e:	4b71      	ldr	r3, [pc, #452]	@ (80155d4 <udp_bind+0x1e4>)
 8015410:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8015414:	4970      	ldr	r1, [pc, #448]	@ (80155d8 <udp_bind+0x1e8>)
 8015416:	4871      	ldr	r0, [pc, #452]	@ (80155dc <udp_bind+0x1ec>)
 8015418:	f006 f986 	bl	801b728 <iprintf>
 801541c:	2000      	movs	r0, #0
 801541e:	f006 f8ad 	bl	801b57c <fflush>
 8015422:	f06f 030f 	mvn.w	r3, #15
 8015426:	e0cf      	b.n	80155c8 <udp_bind+0x1d8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
 8015428:	486d      	ldr	r0, [pc, #436]	@ (80155e0 <udp_bind+0x1f0>)
 801542a:	f006 f97d 	bl	801b728 <iprintf>
 801542e:	2000      	movs	r0, #0
 8015430:	f006 f8a4 	bl	801b57c <fflush>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
 8015434:	68bb      	ldr	r3, [r7, #8]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d003      	beq.n	8015442 <udp_bind+0x52>
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	4619      	mov	r1, r3
 8015440:	e000      	b.n	8015444 <udp_bind+0x54>
 8015442:	2100      	movs	r1, #0
 8015444:	68bb      	ldr	r3, [r7, #8]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d004      	beq.n	8015454 <udp_bind+0x64>
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	3301      	adds	r3, #1
 801544e:	781b      	ldrb	r3, [r3, #0]
 8015450:	461a      	mov	r2, r3
 8015452:	e000      	b.n	8015456 <udp_bind+0x66>
 8015454:	2200      	movs	r2, #0
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d004      	beq.n	8015466 <udp_bind+0x76>
 801545c:	68bb      	ldr	r3, [r7, #8]
 801545e:	3302      	adds	r3, #2
 8015460:	781b      	ldrb	r3, [r3, #0]
 8015462:	4618      	mov	r0, r3
 8015464:	e000      	b.n	8015468 <udp_bind+0x78>
 8015466:	2000      	movs	r0, #0
 8015468:	68bb      	ldr	r3, [r7, #8]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d003      	beq.n	8015476 <udp_bind+0x86>
 801546e:	68bb      	ldr	r3, [r7, #8]
 8015470:	3303      	adds	r3, #3
 8015472:	781b      	ldrb	r3, [r3, #0]
 8015474:	e000      	b.n	8015478 <udp_bind+0x88>
 8015476:	2300      	movs	r3, #0
 8015478:	9300      	str	r3, [sp, #0]
 801547a:	4603      	mov	r3, r0
 801547c:	4859      	ldr	r0, [pc, #356]	@ (80155e4 <udp_bind+0x1f4>)
 801547e:	f006 f953 	bl	801b728 <iprintf>
 8015482:	2000      	movs	r0, #0
 8015484:	f006 f87a 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));
 8015488:	88fb      	ldrh	r3, [r7, #6]
 801548a:	4619      	mov	r1, r3
 801548c:	4856      	ldr	r0, [pc, #344]	@ (80155e8 <udp_bind+0x1f8>)
 801548e:	f006 f94b 	bl	801b728 <iprintf>
 8015492:	2000      	movs	r0, #0
 8015494:	f006 f872 	bl	801b57c <fflush>

  rebind = 0;
 8015498:	2300      	movs	r3, #0
 801549a:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801549c:	4b53      	ldr	r3, [pc, #332]	@ (80155ec <udp_bind+0x1fc>)
 801549e:	681b      	ldr	r3, [r3, #0]
 80154a0:	617b      	str	r3, [r7, #20]
 80154a2:	e009      	b.n	80154b8 <udp_bind+0xc8>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80154a4:	68fa      	ldr	r2, [r7, #12]
 80154a6:	697b      	ldr	r3, [r7, #20]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d102      	bne.n	80154b2 <udp_bind+0xc2>
      rebind = 1;
 80154ac:	2301      	movs	r3, #1
 80154ae:	74fb      	strb	r3, [r7, #19]
      break;
 80154b0:	e005      	b.n	80154be <udp_bind+0xce>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	68db      	ldr	r3, [r3, #12]
 80154b6:	617b      	str	r3, [r7, #20]
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d1f2      	bne.n	80154a4 <udp_bind+0xb4>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80154be:	88fb      	ldrh	r3, [r7, #6]
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d10f      	bne.n	80154e4 <udp_bind+0xf4>
    port = udp_new_port();
 80154c4:	f7ff fb28 	bl	8014b18 <udp_new_port>
 80154c8:	4603      	mov	r3, r0
 80154ca:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80154cc:	88fb      	ldrh	r3, [r7, #6]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d13a      	bne.n	8015548 <udp_bind+0x158>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
 80154d2:	4847      	ldr	r0, [pc, #284]	@ (80155f0 <udp_bind+0x200>)
 80154d4:	f006 f998 	bl	801b808 <puts>
 80154d8:	2000      	movs	r0, #0
 80154da:	f006 f84f 	bl	801b57c <fflush>
      return ERR_USE;
 80154de:	f06f 0307 	mvn.w	r3, #7
 80154e2:	e071      	b.n	80155c8 <udp_bind+0x1d8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80154e4:	4b41      	ldr	r3, [pc, #260]	@ (80155ec <udp_bind+0x1fc>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	617b      	str	r3, [r7, #20]
 80154ea:	e02a      	b.n	8015542 <udp_bind+0x152>
      if (pcb != ipcb) {
 80154ec:	68fa      	ldr	r2, [r7, #12]
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	429a      	cmp	r2, r3
 80154f2:	d023      	beq.n	801553c <udp_bind+0x14c>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	8a5b      	ldrh	r3, [r3, #18]
 80154f8:	88fa      	ldrh	r2, [r7, #6]
 80154fa:	429a      	cmp	r2, r3
 80154fc:	d11e      	bne.n	801553c <udp_bind+0x14c>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	681a      	ldr	r2, [r3, #0]
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8015506:	429a      	cmp	r2, r3
 8015508:	d00d      	beq.n	8015526 <udp_bind+0x136>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d00a      	beq.n	8015526 <udp_bind+0x136>
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	681b      	ldr	r3, [r3, #0]
 8015514:	2b00      	cmp	r3, #0
 8015516:	d006      	beq.n	8015526 <udp_bind+0x136>
              ip_addr_isany(&ipcb->local_ip))) {
 8015518:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801551a:	2b00      	cmp	r3, #0
 801551c:	d003      	beq.n	8015526 <udp_bind+0x136>
              ip_addr_isany(&ipcb->local_ip))) {
 801551e:	697b      	ldr	r3, [r7, #20]
 8015520:	681b      	ldr	r3, [r3, #0]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d10a      	bne.n	801553c <udp_bind+0x14c>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
 8015526:	88fb      	ldrh	r3, [r7, #6]
 8015528:	4619      	mov	r1, r3
 801552a:	4832      	ldr	r0, [pc, #200]	@ (80155f4 <udp_bind+0x204>)
 801552c:	f006 f8fc 	bl	801b728 <iprintf>
 8015530:	2000      	movs	r0, #0
 8015532:	f006 f823 	bl	801b57c <fflush>
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8015536:	f06f 0307 	mvn.w	r3, #7
 801553a:	e045      	b.n	80155c8 <udp_bind+0x1d8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	68db      	ldr	r3, [r3, #12]
 8015540:	617b      	str	r3, [r7, #20]
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d1d1      	bne.n	80154ec <udp_bind+0xfc>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d002      	beq.n	8015554 <udp_bind+0x164>
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	e000      	b.n	8015556 <udp_bind+0x166>
 8015554:	2300      	movs	r3, #0
 8015556:	68fa      	ldr	r2, [r7, #12]
 8015558:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	88fa      	ldrh	r2, [r7, #6]
 801555e:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8015560:	7cfb      	ldrb	r3, [r7, #19]
 8015562:	2b00      	cmp	r3, #0
 8015564:	d106      	bne.n	8015574 <udp_bind+0x184>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8015566:	4b21      	ldr	r3, [pc, #132]	@ (80155ec <udp_bind+0x1fc>)
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801556e:	4a1f      	ldr	r2, [pc, #124]	@ (80155ec <udp_bind+0x1fc>)
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
 8015574:	4820      	ldr	r0, [pc, #128]	@ (80155f8 <udp_bind+0x208>)
 8015576:	f006 f8d7 	bl	801b728 <iprintf>
 801557a:	2000      	movs	r0, #0
 801557c:	f005 fffe 	bl	801b57c <fflush>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	b2db      	uxtb	r3, r3
 8015586:	4619      	mov	r1, r3
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	0a1b      	lsrs	r3, r3, #8
 801558e:	b2db      	uxtb	r3, r3
 8015590:	461a      	mov	r2, r3
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	0c1b      	lsrs	r3, r3, #16
 8015598:	b2db      	uxtb	r3, r3
 801559a:	4618      	mov	r0, r3
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	0e1b      	lsrs	r3, r3, #24
 80155a2:	b2db      	uxtb	r3, r3
 80155a4:	9300      	str	r3, [sp, #0]
 80155a6:	4603      	mov	r3, r0
 80155a8:	480e      	ldr	r0, [pc, #56]	@ (80155e4 <udp_bind+0x1f4>)
 80155aa:	f006 f8bd 	bl	801b728 <iprintf>
 80155ae:	2000      	movs	r0, #0
 80155b0:	f005 ffe4 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	8a5b      	ldrh	r3, [r3, #18]
 80155b8:	4619      	mov	r1, r3
 80155ba:	4810      	ldr	r0, [pc, #64]	@ (80155fc <udp_bind+0x20c>)
 80155bc:	f006 f8b4 	bl	801b728 <iprintf>
 80155c0:	2000      	movs	r0, #0
 80155c2:	f005 ffdb 	bl	801b57c <fflush>
  return ERR_OK;
 80155c6:	2300      	movs	r3, #0
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3718      	adds	r7, #24
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}
 80155d0:	08025270 	.word	0x08025270
 80155d4:	08021314 	.word	0x08021314
 80155d8:	08021848 	.word	0x08021848
 80155dc:	08021368 	.word	0x08021368
 80155e0:	08021860 	.word	0x08021860
 80155e4:	08021458 	.word	0x08021458
 80155e8:	08021874 	.word	0x08021874
 80155ec:	20011ddc 	.word	0x20011ddc
 80155f0:	08021884 	.word	0x08021884
 80155f4:	080218a4 	.word	0x080218a4
 80155f8:	080218dc 	.word	0x080218dc
 80155fc:	080218f0 	.word	0x080218f0

08015600 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8015600:	b580      	push	{r7, lr}
 8015602:	b088      	sub	sp, #32
 8015604:	af02      	add	r7, sp, #8
 8015606:	60f8      	str	r0, [r7, #12]
 8015608:	60b9      	str	r1, [r7, #8]
 801560a:	4613      	mov	r3, r2
 801560c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d10c      	bne.n	801562e <udp_connect+0x2e>
 8015614:	4b44      	ldr	r3, [pc, #272]	@ (8015728 <udp_connect+0x128>)
 8015616:	f240 4235 	movw	r2, #1077	@ 0x435
 801561a:	4944      	ldr	r1, [pc, #272]	@ (801572c <udp_connect+0x12c>)
 801561c:	4844      	ldr	r0, [pc, #272]	@ (8015730 <udp_connect+0x130>)
 801561e:	f006 f883 	bl	801b728 <iprintf>
 8015622:	2000      	movs	r0, #0
 8015624:	f005 ffaa 	bl	801b57c <fflush>
 8015628:	f06f 030f 	mvn.w	r3, #15
 801562c:	e077      	b.n	801571e <udp_connect+0x11e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801562e:	68bb      	ldr	r3, [r7, #8]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d10c      	bne.n	801564e <udp_connect+0x4e>
 8015634:	4b3c      	ldr	r3, [pc, #240]	@ (8015728 <udp_connect+0x128>)
 8015636:	f240 4236 	movw	r2, #1078	@ 0x436
 801563a:	493e      	ldr	r1, [pc, #248]	@ (8015734 <udp_connect+0x134>)
 801563c:	483c      	ldr	r0, [pc, #240]	@ (8015730 <udp_connect+0x130>)
 801563e:	f006 f873 	bl	801b728 <iprintf>
 8015642:	2000      	movs	r0, #0
 8015644:	f005 ff9a 	bl	801b57c <fflush>
 8015648:	f06f 030f 	mvn.w	r3, #15
 801564c:	e067      	b.n	801571e <udp_connect+0x11e>

  if (pcb->local_port == 0) {
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	8a5b      	ldrh	r3, [r3, #18]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d10f      	bne.n	8015676 <udp_connect+0x76>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8015656:	68f9      	ldr	r1, [r7, #12]
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	8a5b      	ldrh	r3, [r3, #18]
 801565c:	461a      	mov	r2, r3
 801565e:	68f8      	ldr	r0, [r7, #12]
 8015660:	f7ff fec6 	bl	80153f0 <udp_bind>
 8015664:	4603      	mov	r3, r0
 8015666:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8015668:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d002      	beq.n	8015676 <udp_connect+0x76>
      return err;
 8015670:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015674:	e053      	b.n	801571e <udp_connect+0x11e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d002      	beq.n	8015682 <udp_connect+0x82>
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	e000      	b.n	8015684 <udp_connect+0x84>
 8015682:	2300      	movs	r3, #0
 8015684:	68fa      	ldr	r2, [r7, #12]
 8015686:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8015688:	68fb      	ldr	r3, [r7, #12]
 801568a:	88fa      	ldrh	r2, [r7, #6]
 801568c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	7c1b      	ldrb	r3, [r3, #16]
 8015692:	f043 0304 	orr.w	r3, r3, #4
 8015696:	b2da      	uxtb	r2, r3
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	741a      	strb	r2, [r3, #16]

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_connect: connected to "));
 801569c:	4826      	ldr	r0, [pc, #152]	@ (8015738 <udp_connect+0x138>)
 801569e:	f006 f843 	bl	801b728 <iprintf>
 80156a2:	2000      	movs	r0, #0
 80156a4:	f005 ff6a 	bl	801b57c <fflush>
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	b2db      	uxtb	r3, r3
 80156ae:	4619      	mov	r1, r3
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	0a1b      	lsrs	r3, r3, #8
 80156b6:	b2db      	uxtb	r3, r3
 80156b8:	461a      	mov	r2, r3
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	685b      	ldr	r3, [r3, #4]
 80156be:	0c1b      	lsrs	r3, r3, #16
 80156c0:	b2db      	uxtb	r3, r3
 80156c2:	4618      	mov	r0, r3
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	0e1b      	lsrs	r3, r3, #24
 80156ca:	b2db      	uxtb	r3, r3
 80156cc:	9300      	str	r3, [sp, #0]
 80156ce:	4603      	mov	r3, r0
 80156d0:	481a      	ldr	r0, [pc, #104]	@ (801573c <udp_connect+0x13c>)
 80156d2:	f006 f829 	bl	801b728 <iprintf>
 80156d6:	2000      	movs	r0, #0
 80156d8:	f005 ff50 	bl	801b57c <fflush>
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	8a9b      	ldrh	r3, [r3, #20]
 80156e0:	4619      	mov	r1, r3
 80156e2:	4817      	ldr	r0, [pc, #92]	@ (8015740 <udp_connect+0x140>)
 80156e4:	f006 f820 	bl	801b728 <iprintf>
 80156e8:	2000      	movs	r0, #0
 80156ea:	f005 ff47 	bl	801b57c <fflush>

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80156ee:	4b15      	ldr	r3, [pc, #84]	@ (8015744 <udp_connect+0x144>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	617b      	str	r3, [r7, #20]
 80156f4:	e008      	b.n	8015708 <udp_connect+0x108>
    if (pcb == ipcb) {
 80156f6:	68fa      	ldr	r2, [r7, #12]
 80156f8:	697b      	ldr	r3, [r7, #20]
 80156fa:	429a      	cmp	r2, r3
 80156fc:	d101      	bne.n	8015702 <udp_connect+0x102>
      /* already on the list, just return */
      return ERR_OK;
 80156fe:	2300      	movs	r3, #0
 8015700:	e00d      	b.n	801571e <udp_connect+0x11e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8015702:	697b      	ldr	r3, [r7, #20]
 8015704:	68db      	ldr	r3, [r3, #12]
 8015706:	617b      	str	r3, [r7, #20]
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	2b00      	cmp	r3, #0
 801570c:	d1f3      	bne.n	80156f6 <udp_connect+0xf6>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801570e:	4b0d      	ldr	r3, [pc, #52]	@ (8015744 <udp_connect+0x144>)
 8015710:	681a      	ldr	r2, [r3, #0]
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8015716:	4a0b      	ldr	r2, [pc, #44]	@ (8015744 <udp_connect+0x144>)
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801571c:	2300      	movs	r3, #0
}
 801571e:	4618      	mov	r0, r3
 8015720:	3718      	adds	r7, #24
 8015722:	46bd      	mov	sp, r7
 8015724:	bd80      	pop	{r7, pc}
 8015726:	bf00      	nop
 8015728:	08021314 	.word	0x08021314
 801572c:	08021900 	.word	0x08021900
 8015730:	08021368 	.word	0x08021368
 8015734:	0802191c 	.word	0x0802191c
 8015738:	08021938 	.word	0x08021938
 801573c:	08021458 	.word	0x08021458
 8015740:	080218f0 	.word	0x080218f0
 8015744:	20011ddc 	.word	0x20011ddc

08015748 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8015748:	b580      	push	{r7, lr}
 801574a:	b084      	sub	sp, #16
 801574c:	af00      	add	r7, sp, #0
 801574e:	60f8      	str	r0, [r7, #12]
 8015750:	60b9      	str	r1, [r7, #8]
 8015752:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d10a      	bne.n	8015770 <udp_recv+0x28>
 801575a:	4b0a      	ldr	r3, [pc, #40]	@ (8015784 <udp_recv+0x3c>)
 801575c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8015760:	4909      	ldr	r1, [pc, #36]	@ (8015788 <udp_recv+0x40>)
 8015762:	480a      	ldr	r0, [pc, #40]	@ (801578c <udp_recv+0x44>)
 8015764:	f005 ffe0 	bl	801b728 <iprintf>
 8015768:	2000      	movs	r0, #0
 801576a:	f005 ff07 	bl	801b57c <fflush>
 801576e:	e005      	b.n	801577c <udp_recv+0x34>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	68ba      	ldr	r2, [r7, #8]
 8015774:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8015776:	68fb      	ldr	r3, [r7, #12]
 8015778:	687a      	ldr	r2, [r7, #4]
 801577a:	61da      	str	r2, [r3, #28]
}
 801577c:	3710      	adds	r7, #16
 801577e:	46bd      	mov	sp, r7
 8015780:	bd80      	pop	{r7, pc}
 8015782:	bf00      	nop
 8015784:	08021314 	.word	0x08021314
 8015788:	08021970 	.word	0x08021970
 801578c:	08021368 	.word	0x08021368

08015790 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8015790:	b580      	push	{r7, lr}
 8015792:	b084      	sub	sp, #16
 8015794:	af00      	add	r7, sp, #0
 8015796:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8015798:	687b      	ldr	r3, [r7, #4]
 801579a:	2b00      	cmp	r3, #0
 801579c:	d10a      	bne.n	80157b4 <udp_remove+0x24>
 801579e:	4b1a      	ldr	r3, [pc, #104]	@ (8015808 <udp_remove+0x78>)
 80157a0:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 80157a4:	4919      	ldr	r1, [pc, #100]	@ (801580c <udp_remove+0x7c>)
 80157a6:	481a      	ldr	r0, [pc, #104]	@ (8015810 <udp_remove+0x80>)
 80157a8:	f005 ffbe 	bl	801b728 <iprintf>
 80157ac:	2000      	movs	r0, #0
 80157ae:	f005 fee5 	bl	801b57c <fflush>
 80157b2:	e026      	b.n	8015802 <udp_remove+0x72>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80157b4:	4b17      	ldr	r3, [pc, #92]	@ (8015814 <udp_remove+0x84>)
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	687a      	ldr	r2, [r7, #4]
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d105      	bne.n	80157ca <udp_remove+0x3a>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80157be:	4b15      	ldr	r3, [pc, #84]	@ (8015814 <udp_remove+0x84>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	4a13      	ldr	r2, [pc, #76]	@ (8015814 <udp_remove+0x84>)
 80157c6:	6013      	str	r3, [r2, #0]
 80157c8:	e017      	b.n	80157fa <udp_remove+0x6a>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80157ca:	4b12      	ldr	r3, [pc, #72]	@ (8015814 <udp_remove+0x84>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	60fb      	str	r3, [r7, #12]
 80157d0:	e010      	b.n	80157f4 <udp_remove+0x64>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	68db      	ldr	r3, [r3, #12]
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d009      	beq.n	80157ee <udp_remove+0x5e>
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	68db      	ldr	r3, [r3, #12]
 80157de:	687a      	ldr	r2, [r7, #4]
 80157e0:	429a      	cmp	r2, r3
 80157e2:	d104      	bne.n	80157ee <udp_remove+0x5e>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	68da      	ldr	r2, [r3, #12]
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	60da      	str	r2, [r3, #12]
        break;
 80157ec:	e005      	b.n	80157fa <udp_remove+0x6a>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	68db      	ldr	r3, [r3, #12]
 80157f2:	60fb      	str	r3, [r7, #12]
 80157f4:	68fb      	ldr	r3, [r7, #12]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d1eb      	bne.n	80157d2 <udp_remove+0x42>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80157fa:	6879      	ldr	r1, [r7, #4]
 80157fc:	2000      	movs	r0, #0
 80157fe:	f7f6 f80f 	bl	800b820 <memp_free>
}
 8015802:	3710      	adds	r7, #16
 8015804:	46bd      	mov	sp, r7
 8015806:	bd80      	pop	{r7, pc}
 8015808:	08021314 	.word	0x08021314
 801580c:	08021988 	.word	0x08021988
 8015810:	08021368 	.word	0x08021368
 8015814:	20011ddc 	.word	0x20011ddc

08015818 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8015818:	b580      	push	{r7, lr}
 801581a:	b082      	sub	sp, #8
 801581c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801581e:	2000      	movs	r0, #0
 8015820:	f7f5 ff7c 	bl	800b71c <memp_malloc>
 8015824:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	2b00      	cmp	r3, #0
 801582a:	d007      	beq.n	801583c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801582c:	2220      	movs	r2, #32
 801582e:	2100      	movs	r1, #0
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f006 f8d9 	bl	801b9e8 <memset>
    pcb->ttl = UDP_TTL;
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	22ff      	movs	r2, #255	@ 0xff
 801583a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801583c:	687b      	ldr	r3, [r7, #4]
}
 801583e:	4618      	mov	r0, r3
 8015840:	3708      	adds	r7, #8
 8015842:	46bd      	mov	sp, r7
 8015844:	bd80      	pop	{r7, pc}

08015846 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8015846:	b580      	push	{r7, lr}
 8015848:	b084      	sub	sp, #16
 801584a:	af00      	add	r7, sp, #0
 801584c:	4603      	mov	r3, r0
 801584e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8015850:	f7ff ffe2 	bl	8015818 <udp_new>
 8015854:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015856:	68fb      	ldr	r3, [r7, #12]
}
 8015858:	4618      	mov	r0, r3
 801585a:	3710      	adds	r7, #16
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}

08015860 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015860:	b480      	push	{r7}
 8015862:	b085      	sub	sp, #20
 8015864:	af00      	add	r7, sp, #0
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d01e      	beq.n	80158ae <udp_netif_ip_addr_changed+0x4e>
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d01a      	beq.n	80158ae <udp_netif_ip_addr_changed+0x4e>
 8015878:	683b      	ldr	r3, [r7, #0]
 801587a:	2b00      	cmp	r3, #0
 801587c:	d017      	beq.n	80158ae <udp_netif_ip_addr_changed+0x4e>
 801587e:	683b      	ldr	r3, [r7, #0]
 8015880:	681b      	ldr	r3, [r3, #0]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d013      	beq.n	80158ae <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8015886:	4b0d      	ldr	r3, [pc, #52]	@ (80158bc <udp_netif_ip_addr_changed+0x5c>)
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	60fb      	str	r3, [r7, #12]
 801588c:	e00c      	b.n	80158a8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	681a      	ldr	r2, [r3, #0]
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	429a      	cmp	r2, r3
 8015898:	d103      	bne.n	80158a2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801589a:	683b      	ldr	r3, [r7, #0]
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	68fb      	ldr	r3, [r7, #12]
 80158a0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	68db      	ldr	r3, [r3, #12]
 80158a6:	60fb      	str	r3, [r7, #12]
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d1ef      	bne.n	801588e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80158ae:	bf00      	nop
 80158b0:	3714      	adds	r7, #20
 80158b2:	46bd      	mov	sp, r7
 80158b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158b8:	4770      	bx	lr
 80158ba:	bf00      	nop
 80158bc:	20011ddc 	.word	0x20011ddc

080158c0 <udp_debug_print>:
 *
 * @param udphdr pointer to the udp header in memory.
 */
void
udp_debug_print(struct udp_hdr *udphdr)
{
 80158c0:	b590      	push	{r4, r7, lr}
 80158c2:	b083      	sub	sp, #12
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(UDP_DEBUG, ("UDP header:\n"));
 80158c8:	4824      	ldr	r0, [pc, #144]	@ (801595c <udp_debug_print+0x9c>)
 80158ca:	f005 ff9d 	bl	801b808 <puts>
 80158ce:	2000      	movs	r0, #0
 80158d0:	f005 fe54 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 80158d4:	4822      	ldr	r0, [pc, #136]	@ (8015960 <udp_debug_print+0xa0>)
 80158d6:	f005 ff97 	bl	801b808 <puts>
 80158da:	2000      	movs	r0, #0
 80158dc:	f005 fe4e 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     %5"U16_F"     | (src port, dest port)\n",
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	881b      	ldrh	r3, [r3, #0]
 80158e4:	b29b      	uxth	r3, r3
 80158e6:	4618      	mov	r0, r3
 80158e8:	f7f5 f9c4 	bl	800ac74 <lwip_htons>
 80158ec:	4603      	mov	r3, r0
 80158ee:	461c      	mov	r4, r3
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	885b      	ldrh	r3, [r3, #2]
 80158f4:	b29b      	uxth	r3, r3
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7f5 f9bc 	bl	800ac74 <lwip_htons>
 80158fc:	4603      	mov	r3, r0
 80158fe:	461a      	mov	r2, r3
 8015900:	4621      	mov	r1, r4
 8015902:	4818      	ldr	r0, [pc, #96]	@ (8015964 <udp_debug_print+0xa4>)
 8015904:	f005 ff10 	bl	801b728 <iprintf>
 8015908:	2000      	movs	r0, #0
 801590a:	f005 fe37 	bl	801b57c <fflush>
                          lwip_ntohs(udphdr->src), lwip_ntohs(udphdr->dest)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 801590e:	4814      	ldr	r0, [pc, #80]	@ (8015960 <udp_debug_print+0xa0>)
 8015910:	f005 ff7a 	bl	801b808 <puts>
 8015914:	2000      	movs	r0, #0
 8015916:	f005 fe31 	bl	801b57c <fflush>
  LWIP_DEBUGF(UDP_DEBUG, ("|     %5"U16_F"     |     0x%04"X16_F"    | (len, chksum)\n",
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	889b      	ldrh	r3, [r3, #4]
 801591e:	b29b      	uxth	r3, r3
 8015920:	4618      	mov	r0, r3
 8015922:	f7f5 f9a7 	bl	800ac74 <lwip_htons>
 8015926:	4603      	mov	r3, r0
 8015928:	461c      	mov	r4, r3
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	88db      	ldrh	r3, [r3, #6]
 801592e:	b29b      	uxth	r3, r3
 8015930:	4618      	mov	r0, r3
 8015932:	f7f5 f99f 	bl	800ac74 <lwip_htons>
 8015936:	4603      	mov	r3, r0
 8015938:	461a      	mov	r2, r3
 801593a:	4621      	mov	r1, r4
 801593c:	480a      	ldr	r0, [pc, #40]	@ (8015968 <udp_debug_print+0xa8>)
 801593e:	f005 fef3 	bl	801b728 <iprintf>
 8015942:	2000      	movs	r0, #0
 8015944:	f005 fe1a 	bl	801b57c <fflush>
                          lwip_ntohs(udphdr->len), lwip_ntohs(udphdr->chksum)));
  LWIP_DEBUGF(UDP_DEBUG, ("+-------------------------------+\n"));
 8015948:	4805      	ldr	r0, [pc, #20]	@ (8015960 <udp_debug_print+0xa0>)
 801594a:	f005 ff5d 	bl	801b808 <puts>
 801594e:	2000      	movs	r0, #0
 8015950:	f005 fe14 	bl	801b57c <fflush>
}
 8015954:	bf00      	nop
 8015956:	370c      	adds	r7, #12
 8015958:	46bd      	mov	sp, r7
 801595a:	bd90      	pop	{r4, r7, pc}
 801595c:	080219a0 	.word	0x080219a0
 8015960:	080219ac 	.word	0x080219ac
 8015964:	080219d0 	.word	0x080219d0
 8015968:	08021a08 	.word	0x08021a08

0801596c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801596c:	b580      	push	{r7, lr}
 801596e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8015970:	4b21      	ldr	r3, [pc, #132]	@ (80159f8 <dhcp_inc_pcb_refcount+0x8c>)
 8015972:	781b      	ldrb	r3, [r3, #0]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d136      	bne.n	80159e6 <dhcp_inc_pcb_refcount+0x7a>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8015978:	4b20      	ldr	r3, [pc, #128]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	2b00      	cmp	r3, #0
 801597e:	d008      	beq.n	8015992 <dhcp_inc_pcb_refcount+0x26>
 8015980:	4b1f      	ldr	r3, [pc, #124]	@ (8015a00 <dhcp_inc_pcb_refcount+0x94>)
 8015982:	22e5      	movs	r2, #229	@ 0xe5
 8015984:	491f      	ldr	r1, [pc, #124]	@ (8015a04 <dhcp_inc_pcb_refcount+0x98>)
 8015986:	4820      	ldr	r0, [pc, #128]	@ (8015a08 <dhcp_inc_pcb_refcount+0x9c>)
 8015988:	f005 fece 	bl	801b728 <iprintf>
 801598c:	2000      	movs	r0, #0
 801598e:	f005 fdf5 	bl	801b57c <fflush>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8015992:	f7ff ff41 	bl	8015818 <udp_new>
 8015996:	4603      	mov	r3, r0
 8015998:	4a18      	ldr	r2, [pc, #96]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 801599a:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801599c:	4b17      	ldr	r3, [pc, #92]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d102      	bne.n	80159aa <dhcp_inc_pcb_refcount+0x3e>
      return ERR_MEM;
 80159a4:	f04f 33ff 	mov.w	r3, #4294967295
 80159a8:	e024      	b.n	80159f4 <dhcp_inc_pcb_refcount+0x88>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80159aa:	4b14      	ldr	r3, [pc, #80]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	7a5a      	ldrb	r2, [r3, #9]
 80159b0:	4b12      	ldr	r3, [pc, #72]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	f042 0220 	orr.w	r2, r2, #32
 80159b8:	b2d2      	uxtb	r2, r2
 80159ba:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80159bc:	4b0f      	ldr	r3, [pc, #60]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	2244      	movs	r2, #68	@ 0x44
 80159c2:	4912      	ldr	r1, [pc, #72]	@ (8015a0c <dhcp_inc_pcb_refcount+0xa0>)
 80159c4:	4618      	mov	r0, r3
 80159c6:	f7ff fd13 	bl	80153f0 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80159ca:	4b0c      	ldr	r3, [pc, #48]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	2243      	movs	r2, #67	@ 0x43
 80159d0:	490e      	ldr	r1, [pc, #56]	@ (8015a0c <dhcp_inc_pcb_refcount+0xa0>)
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7ff fe14 	bl	8015600 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80159d8:	4b08      	ldr	r3, [pc, #32]	@ (80159fc <dhcp_inc_pcb_refcount+0x90>)
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2200      	movs	r2, #0
 80159de:	490c      	ldr	r1, [pc, #48]	@ (8015a10 <dhcp_inc_pcb_refcount+0xa4>)
 80159e0:	4618      	mov	r0, r3
 80159e2:	f7ff feb1 	bl	8015748 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80159e6:	4b04      	ldr	r3, [pc, #16]	@ (80159f8 <dhcp_inc_pcb_refcount+0x8c>)
 80159e8:	781b      	ldrb	r3, [r3, #0]
 80159ea:	3301      	adds	r3, #1
 80159ec:	b2da      	uxtb	r2, r3
 80159ee:	4b02      	ldr	r3, [pc, #8]	@ (80159f8 <dhcp_inc_pcb_refcount+0x8c>)
 80159f0:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80159f2:	2300      	movs	r3, #0
}
 80159f4:	4618      	mov	r0, r3
 80159f6:	bd80      	pop	{r7, pc}
 80159f8:	20011e0c 	.word	0x20011e0c
 80159fc:	20011e08 	.word	0x20011e08
 8015a00:	08021a3c 	.word	0x08021a3c
 8015a04:	08021a74 	.word	0x08021a74
 8015a08:	08021a9c 	.word	0x08021a9c
 8015a0c:	08025270 	.word	0x08025270
 8015a10:	08017911 	.word	0x08017911

08015a14 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8015a14:	b580      	push	{r7, lr}
 8015a16:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8015a18:	4b10      	ldr	r3, [pc, #64]	@ (8015a5c <dhcp_dec_pcb_refcount+0x48>)
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d108      	bne.n	8015a32 <dhcp_dec_pcb_refcount+0x1e>
 8015a20:	4b0f      	ldr	r3, [pc, #60]	@ (8015a60 <dhcp_dec_pcb_refcount+0x4c>)
 8015a22:	22ff      	movs	r2, #255	@ 0xff
 8015a24:	490f      	ldr	r1, [pc, #60]	@ (8015a64 <dhcp_dec_pcb_refcount+0x50>)
 8015a26:	4810      	ldr	r0, [pc, #64]	@ (8015a68 <dhcp_dec_pcb_refcount+0x54>)
 8015a28:	f005 fe7e 	bl	801b728 <iprintf>
 8015a2c:	2000      	movs	r0, #0
 8015a2e:	f005 fda5 	bl	801b57c <fflush>
  dhcp_pcb_refcount--;
 8015a32:	4b0a      	ldr	r3, [pc, #40]	@ (8015a5c <dhcp_dec_pcb_refcount+0x48>)
 8015a34:	781b      	ldrb	r3, [r3, #0]
 8015a36:	3b01      	subs	r3, #1
 8015a38:	b2da      	uxtb	r2, r3
 8015a3a:	4b08      	ldr	r3, [pc, #32]	@ (8015a5c <dhcp_dec_pcb_refcount+0x48>)
 8015a3c:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8015a3e:	4b07      	ldr	r3, [pc, #28]	@ (8015a5c <dhcp_dec_pcb_refcount+0x48>)
 8015a40:	781b      	ldrb	r3, [r3, #0]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d107      	bne.n	8015a56 <dhcp_dec_pcb_refcount+0x42>
    udp_remove(dhcp_pcb);
 8015a46:	4b09      	ldr	r3, [pc, #36]	@ (8015a6c <dhcp_dec_pcb_refcount+0x58>)
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7ff fea0 	bl	8015790 <udp_remove>
    dhcp_pcb = NULL;
 8015a50:	4b06      	ldr	r3, [pc, #24]	@ (8015a6c <dhcp_dec_pcb_refcount+0x58>)
 8015a52:	2200      	movs	r2, #0
 8015a54:	601a      	str	r2, [r3, #0]
  }
}
 8015a56:	bf00      	nop
 8015a58:	bd80      	pop	{r7, pc}
 8015a5a:	bf00      	nop
 8015a5c:	20011e0c 	.word	0x20011e0c
 8015a60:	08021a3c 	.word	0x08021a3c
 8015a64:	08021ac4 	.word	0x08021ac4
 8015a68:	08021a9c 	.word	0x08021a9c
 8015a6c:	20011e08 	.word	0x20011e08

08015a70 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8015a70:	b580      	push	{r7, lr}
 8015a72:	b086      	sub	sp, #24
 8015a74:	af02      	add	r7, sp, #8
 8015a76:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a7c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8015a84:	461a      	mov	r2, r3
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015a8c:	4619      	mov	r1, r3
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015a94:	9300      	str	r3, [sp, #0]
 8015a96:	460b      	mov	r3, r1
 8015a98:	6879      	ldr	r1, [r7, #4]
 8015a9a:	480b      	ldr	r0, [pc, #44]	@ (8015ac8 <dhcp_handle_nak+0x58>)
 8015a9c:	f005 fe44 	bl	801b728 <iprintf>
 8015aa0:	2000      	movs	r0, #0
 8015aa2:	f005 fd6b 	bl	801b57c <fflush>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8015aa6:	210c      	movs	r1, #12
 8015aa8:	68f8      	ldr	r0, [r7, #12]
 8015aaa:	f001 fb0f 	bl	80170cc <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8015aae:	4b07      	ldr	r3, [pc, #28]	@ (8015acc <dhcp_handle_nak+0x5c>)
 8015ab0:	4a06      	ldr	r2, [pc, #24]	@ (8015acc <dhcp_handle_nak+0x5c>)
 8015ab2:	4906      	ldr	r1, [pc, #24]	@ (8015acc <dhcp_handle_nak+0x5c>)
 8015ab4:	6878      	ldr	r0, [r7, #4]
 8015ab6:	f7f6 f96f 	bl	800bd98 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 fddc 	bl	8016678 <dhcp_discover>
}
 8015ac0:	bf00      	nop
 8015ac2:	3710      	adds	r7, #16
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	08021ae8 	.word	0x08021ae8
 8015acc:	08025270 	.word	0x08025270

08015ad0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b084      	sub	sp, #16
 8015ad4:	af00      	add	r7, sp, #0
 8015ad6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015adc:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8015ae4:	461a      	mov	r2, r3
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015aec:	6879      	ldr	r1, [r7, #4]
 8015aee:	4821      	ldr	r0, [pc, #132]	@ (8015b74 <dhcp_check+0xa4>)
 8015af0:	f005 fe1a 	bl	801b728 <iprintf>
 8015af4:	2000      	movs	r0, #0
 8015af6:	f005 fd41 	bl	801b57c <fflush>
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8015afa:	2108      	movs	r1, #8
 8015afc:	68f8      	ldr	r0, [r7, #12]
 8015afe:	f001 fae5 	bl	80170cc <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8015b02:	68fb      	ldr	r3, [r7, #12]
 8015b04:	331c      	adds	r3, #28
 8015b06:	2200      	movs	r2, #0
 8015b08:	4619      	mov	r1, r3
 8015b0a:	6878      	ldr	r0, [r7, #4]
 8015b0c:	f003 f880 	bl	8018c10 <etharp_query>
 8015b10:	4603      	mov	r3, r0
 8015b12:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8015b14:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015b18:	2b00      	cmp	r3, #0
 8015b1a:	d005      	beq.n	8015b28 <dhcp_check+0x58>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
 8015b1c:	4816      	ldr	r0, [pc, #88]	@ (8015b78 <dhcp_check+0xa8>)
 8015b1e:	f005 fe73 	bl	801b808 <puts>
 8015b22:	2000      	movs	r0, #0
 8015b24:	f005 fd2a 	bl	801b57c <fflush>
  }
  if (dhcp->tries < 255) {
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	799b      	ldrb	r3, [r3, #6]
 8015b2c:	2bff      	cmp	r3, #255	@ 0xff
 8015b2e:	d005      	beq.n	8015b3c <dhcp_check+0x6c>
    dhcp->tries++;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	799b      	ldrb	r3, [r3, #6]
 8015b34:	3301      	adds	r3, #1
 8015b36:	b2da      	uxtb	r2, r3
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8015b3c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015b40:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015b42:	893b      	ldrh	r3, [r7, #8]
 8015b44:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015b48:	4a0c      	ldr	r2, [pc, #48]	@ (8015b7c <dhcp_check+0xac>)
 8015b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8015b4e:	1152      	asrs	r2, r2, #5
 8015b50:	17db      	asrs	r3, r3, #31
 8015b52:	1ad3      	subs	r3, r2, r3
 8015b54:	b29a      	uxth	r2, r3
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
 8015b5a:	893b      	ldrh	r3, [r7, #8]
 8015b5c:	4619      	mov	r1, r3
 8015b5e:	4808      	ldr	r0, [pc, #32]	@ (8015b80 <dhcp_check+0xb0>)
 8015b60:	f005 fde2 	bl	801b728 <iprintf>
 8015b64:	2000      	movs	r0, #0
 8015b66:	f005 fd09 	bl	801b57c <fflush>
}
 8015b6a:	bf00      	nop
 8015b6c:	3710      	adds	r7, #16
 8015b6e:	46bd      	mov	sp, r7
 8015b70:	bd80      	pop	{r7, pc}
 8015b72:	bf00      	nop
 8015b74:	08021b0c 	.word	0x08021b0c
 8015b78:	08021b28 	.word	0x08021b28
 8015b7c:	10624dd3 	.word	0x10624dd3
 8015b80:	08021b50 	.word	0x08021b50

08015b84 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8015b84:	b580      	push	{r7, lr}
 8015b86:	b086      	sub	sp, #24
 8015b88:	af02      	add	r7, sp, #8
 8015b8a:	6078      	str	r0, [r7, #4]
 8015b8c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b92:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8015b9a:	461a      	mov	r2, r3
 8015b9c:	687b      	ldr	r3, [r7, #4]
 8015b9e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015ba2:	4619      	mov	r1, r3
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015baa:	9300      	str	r3, [sp, #0]
 8015bac:	460b      	mov	r3, r1
 8015bae:	6879      	ldr	r1, [r7, #4]
 8015bb0:	481c      	ldr	r0, [pc, #112]	@ (8015c24 <dhcp_handle_offer+0xa0>)
 8015bb2:	f005 fdb9 	bl	801b728 <iprintf>
 8015bb6:	2000      	movs	r0, #0
 8015bb8:	f005 fce0 	bl	801b57c <fflush>
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8015bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8015c28 <dhcp_handle_offer+0xa4>)
 8015bbe:	789b      	ldrb	r3, [r3, #2]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d024      	beq.n	8015c0e <dhcp_handle_offer+0x8a>
    dhcp->request_timeout = 0; /* stop timer */
 8015bc4:	68fb      	ldr	r3, [r7, #12]
 8015bc6:	2200      	movs	r2, #0
 8015bc8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8015bca:	4b18      	ldr	r3, [pc, #96]	@ (8015c2c <dhcp_handle_offer+0xa8>)
 8015bcc:	689b      	ldr	r3, [r3, #8]
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7f5 f865 	bl	800ac9e <lwip_htonl>
 8015bd4:	4602      	mov	r2, r0
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
 8015bda:	68fb      	ldr	r3, [r7, #12]
 8015bdc:	699b      	ldr	r3, [r3, #24]
 8015bde:	4619      	mov	r1, r3
 8015be0:	4813      	ldr	r0, [pc, #76]	@ (8015c30 <dhcp_handle_offer+0xac>)
 8015be2:	f005 fda1 	bl	801b728 <iprintf>
 8015be6:	2000      	movs	r0, #0
 8015be8:	f005 fcc8 	bl	801b57c <fflush>
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	691a      	ldr	r2, [r3, #16]
 8015bf0:	68fb      	ldr	r3, [r7, #12]
 8015bf2:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	69db      	ldr	r3, [r3, #28]
 8015bf8:	4619      	mov	r1, r3
 8015bfa:	480e      	ldr	r0, [pc, #56]	@ (8015c34 <dhcp_handle_offer+0xb0>)
 8015bfc:	f005 fd94 	bl	801b728 <iprintf>
 8015c00:	2000      	movs	r0, #0
 8015c02:	f005 fcbb 	bl	801b57c <fflush>
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8015c06:	6878      	ldr	r0, [r7, #4]
 8015c08:	f000 f818 	bl	8015c3c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8015c0c:	e006      	b.n	8015c1c <dhcp_handle_offer+0x98>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8015c0e:	6879      	ldr	r1, [r7, #4]
 8015c10:	4809      	ldr	r0, [pc, #36]	@ (8015c38 <dhcp_handle_offer+0xb4>)
 8015c12:	f005 fd89 	bl	801b728 <iprintf>
 8015c16:	2000      	movs	r0, #0
 8015c18:	f005 fcb0 	bl	801b57c <fflush>
}
 8015c1c:	bf00      	nop
 8015c1e:	3710      	adds	r7, #16
 8015c20:	46bd      	mov	sp, r7
 8015c22:	bd80      	pop	{r7, pc}
 8015c24:	08021b80 	.word	0x08021b80
 8015c28:	20011e00 	.word	0x20011e00
 8015c2c:	20011de0 	.word	0x20011de0
 8015c30:	08021ba8 	.word	0x08021ba8
 8015c34:	08021bd0 	.word	0x08021bd0
 8015c38:	08021bf8 	.word	0x08021bf8

08015c3c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8015c3c:	b5b0      	push	{r4, r5, r7, lr}
 8015c3e:	b08a      	sub	sp, #40	@ 0x28
 8015c40:	af02      	add	r7, sp, #8
 8015c42:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d10c      	bne.n	8015c64 <dhcp_select+0x28>
 8015c4a:	4b88      	ldr	r3, [pc, #544]	@ (8015e6c <dhcp_select+0x230>)
 8015c4c:	f240 1277 	movw	r2, #375	@ 0x177
 8015c50:	4987      	ldr	r1, [pc, #540]	@ (8015e70 <dhcp_select+0x234>)
 8015c52:	4888      	ldr	r0, [pc, #544]	@ (8015e74 <dhcp_select+0x238>)
 8015c54:	f005 fd68 	bl	801b728 <iprintf>
 8015c58:	2000      	movs	r0, #0
 8015c5a:	f005 fc8f 	bl	801b57c <fflush>
 8015c5e:	f06f 030f 	mvn.w	r3, #15
 8015c62:	e0fe      	b.n	8015e62 <dhcp_select+0x226>
  dhcp = netif_dhcp_data(netif);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c68:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8015c6a:	69bb      	ldr	r3, [r7, #24]
 8015c6c:	2b00      	cmp	r3, #0
 8015c6e:	d10c      	bne.n	8015c8a <dhcp_select+0x4e>
 8015c70:	4b7e      	ldr	r3, [pc, #504]	@ (8015e6c <dhcp_select+0x230>)
 8015c72:	f240 1279 	movw	r2, #377	@ 0x179
 8015c76:	4980      	ldr	r1, [pc, #512]	@ (8015e78 <dhcp_select+0x23c>)
 8015c78:	487e      	ldr	r0, [pc, #504]	@ (8015e74 <dhcp_select+0x238>)
 8015c7a:	f005 fd55 	bl	801b728 <iprintf>
 8015c7e:	2000      	movs	r0, #0
 8015c80:	f005 fc7c 	bl	801b57c <fflush>
 8015c84:	f06f 0305 	mvn.w	r3, #5
 8015c88:	e0eb      	b.n	8015e62 <dhcp_select+0x226>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8015c90:	461a      	mov	r2, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8015c98:	4619      	mov	r1, r3
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8015ca0:	9300      	str	r3, [sp, #0]
 8015ca2:	460b      	mov	r3, r1
 8015ca4:	6879      	ldr	r1, [r7, #4]
 8015ca6:	4875      	ldr	r0, [pc, #468]	@ (8015e7c <dhcp_select+0x240>)
 8015ca8:	f005 fd3e 	bl	801b728 <iprintf>
 8015cac:	2000      	movs	r0, #0
 8015cae:	f005 fc65 	bl	801b57c <fflush>
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8015cb2:	2101      	movs	r1, #1
 8015cb4:	69b8      	ldr	r0, [r7, #24]
 8015cb6:	f001 fa09 	bl	80170cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8015cba:	f107 030c 	add.w	r3, r7, #12
 8015cbe:	2203      	movs	r2, #3
 8015cc0:	69b9      	ldr	r1, [r7, #24]
 8015cc2:	6878      	ldr	r0, [r7, #4]
 8015cc4:	f001 ff8c 	bl	8017be0 <dhcp_create_msg>
 8015cc8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8015cca:	697b      	ldr	r3, [r7, #20]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	f000 808b 	beq.w	8015de8 <dhcp_select+0x1ac>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8015cd2:	697b      	ldr	r3, [r7, #20]
 8015cd4:	685b      	ldr	r3, [r3, #4]
 8015cd6:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8015cd8:	89b8      	ldrh	r0, [r7, #12]
 8015cda:	693b      	ldr	r3, [r7, #16]
 8015cdc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015ce0:	2302      	movs	r3, #2
 8015ce2:	2239      	movs	r2, #57	@ 0x39
 8015ce4:	f001 fa0c 	bl	8017100 <dhcp_option>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8015cec:	89b8      	ldrh	r0, [r7, #12]
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8015cf8:	461a      	mov	r2, r3
 8015cfa:	f001 fa61 	bl	80171c0 <dhcp_option_short>
 8015cfe:	4603      	mov	r3, r0
 8015d00:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8015d02:	89b8      	ldrh	r0, [r7, #12]
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015d0a:	2304      	movs	r3, #4
 8015d0c:	2232      	movs	r2, #50	@ 0x32
 8015d0e:	f001 f9f7 	bl	8017100 <dhcp_option>
 8015d12:	4603      	mov	r3, r0
 8015d14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8015d16:	89bc      	ldrh	r4, [r7, #12]
 8015d18:	693b      	ldr	r3, [r7, #16]
 8015d1a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015d1e:	69bb      	ldr	r3, [r7, #24]
 8015d20:	69db      	ldr	r3, [r3, #28]
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7f4 ffbb 	bl	800ac9e <lwip_htonl>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	461a      	mov	r2, r3
 8015d2c:	4629      	mov	r1, r5
 8015d2e:	4620      	mov	r0, r4
 8015d30:	f001 fa7c 	bl	801722c <dhcp_option_long>
 8015d34:	4603      	mov	r3, r0
 8015d36:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8015d38:	89b8      	ldrh	r0, [r7, #12]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015d40:	2304      	movs	r3, #4
 8015d42:	2236      	movs	r2, #54	@ 0x36
 8015d44:	f001 f9dc 	bl	8017100 <dhcp_option>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8015d4c:	89bc      	ldrh	r4, [r7, #12]
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8015d54:	69bb      	ldr	r3, [r7, #24]
 8015d56:	699b      	ldr	r3, [r3, #24]
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7f4 ffa0 	bl	800ac9e <lwip_htonl>
 8015d5e:	4603      	mov	r3, r0
 8015d60:	461a      	mov	r2, r3
 8015d62:	4629      	mov	r1, r5
 8015d64:	4620      	mov	r0, r4
 8015d66:	f001 fa61 	bl	801722c <dhcp_option_long>
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8015d6e:	89b8      	ldrh	r0, [r7, #12]
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015d76:	2303      	movs	r3, #3
 8015d78:	2237      	movs	r2, #55	@ 0x37
 8015d7a:	f001 f9c1 	bl	8017100 <dhcp_option>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015d82:	2300      	movs	r3, #0
 8015d84:	77bb      	strb	r3, [r7, #30]
 8015d86:	e00e      	b.n	8015da6 <dhcp_select+0x16a>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8015d88:	89b8      	ldrh	r0, [r7, #12]
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8015d90:	7fbb      	ldrb	r3, [r7, #30]
 8015d92:	4a3b      	ldr	r2, [pc, #236]	@ (8015e80 <dhcp_select+0x244>)
 8015d94:	5cd3      	ldrb	r3, [r2, r3]
 8015d96:	461a      	mov	r2, r3
 8015d98:	f001 f9ea 	bl	8017170 <dhcp_option_byte>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8015da0:	7fbb      	ldrb	r3, [r7, #30]
 8015da2:	3301      	adds	r3, #1
 8015da4:	77bb      	strb	r3, [r7, #30]
 8015da6:	7fbb      	ldrb	r3, [r7, #30]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d9ed      	bls.n	8015d88 <dhcp_select+0x14c>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8015dac:	89b8      	ldrh	r0, [r7, #12]
 8015dae:	693b      	ldr	r3, [r7, #16]
 8015db0:	33f0      	adds	r3, #240	@ 0xf0
 8015db2:	697a      	ldr	r2, [r7, #20]
 8015db4:	4619      	mov	r1, r3
 8015db6:	f002 f805 	bl	8017dc4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8015dba:	4b32      	ldr	r3, [pc, #200]	@ (8015e84 <dhcp_select+0x248>)
 8015dbc:	6818      	ldr	r0, [r3, #0]
 8015dbe:	4b32      	ldr	r3, [pc, #200]	@ (8015e88 <dhcp_select+0x24c>)
 8015dc0:	9301      	str	r3, [sp, #4]
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	9300      	str	r3, [sp, #0]
 8015dc6:	2343      	movs	r3, #67	@ 0x43
 8015dc8:	4a30      	ldr	r2, [pc, #192]	@ (8015e8c <dhcp_select+0x250>)
 8015dca:	6979      	ldr	r1, [r7, #20]
 8015dcc:	f7ff f9c2 	bl	8015154 <udp_sendto_if_src>
 8015dd0:	4603      	mov	r3, r0
 8015dd2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8015dd4:	6978      	ldr	r0, [r7, #20]
 8015dd6:	f7f6 fda1 	bl	800c91c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
 8015dda:	482d      	ldr	r0, [pc, #180]	@ (8015e90 <dhcp_select+0x254>)
 8015ddc:	f005 fd14 	bl	801b808 <puts>
 8015de0:	2000      	movs	r0, #0
 8015de2:	f005 fbcb 	bl	801b57c <fflush>
 8015de6:	e007      	b.n	8015df8 <dhcp_select+0x1bc>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
 8015de8:	482a      	ldr	r0, [pc, #168]	@ (8015e94 <dhcp_select+0x258>)
 8015dea:	f005 fd0d 	bl	801b808 <puts>
 8015dee:	2000      	movs	r0, #0
 8015df0:	f005 fbc4 	bl	801b57c <fflush>
    result = ERR_MEM;
 8015df4:	23ff      	movs	r3, #255	@ 0xff
 8015df6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8015df8:	69bb      	ldr	r3, [r7, #24]
 8015dfa:	799b      	ldrb	r3, [r3, #6]
 8015dfc:	2bff      	cmp	r3, #255	@ 0xff
 8015dfe:	d005      	beq.n	8015e0c <dhcp_select+0x1d0>
    dhcp->tries++;
 8015e00:	69bb      	ldr	r3, [r7, #24]
 8015e02:	799b      	ldrb	r3, [r3, #6]
 8015e04:	3301      	adds	r3, #1
 8015e06:	b2da      	uxtb	r2, r3
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8015e0c:	69bb      	ldr	r3, [r7, #24]
 8015e0e:	799b      	ldrb	r3, [r3, #6]
 8015e10:	2b05      	cmp	r3, #5
 8015e12:	d80d      	bhi.n	8015e30 <dhcp_select+0x1f4>
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	799b      	ldrb	r3, [r3, #6]
 8015e18:	461a      	mov	r2, r3
 8015e1a:	2301      	movs	r3, #1
 8015e1c:	4093      	lsls	r3, r2
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	461a      	mov	r2, r3
 8015e22:	0152      	lsls	r2, r2, #5
 8015e24:	1ad2      	subs	r2, r2, r3
 8015e26:	0092      	lsls	r2, r2, #2
 8015e28:	4413      	add	r3, r2
 8015e2a:	00db      	lsls	r3, r3, #3
 8015e2c:	b29b      	uxth	r3, r3
 8015e2e:	e001      	b.n	8015e34 <dhcp_select+0x1f8>
 8015e30:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8015e34:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8015e36:	89fb      	ldrh	r3, [r7, #14]
 8015e38:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8015e3c:	4a16      	ldr	r2, [pc, #88]	@ (8015e98 <dhcp_select+0x25c>)
 8015e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8015e42:	1152      	asrs	r2, r2, #5
 8015e44:	17db      	asrs	r3, r3, #31
 8015e46:	1ad3      	subs	r3, r2, r3
 8015e48:	b29a      	uxth	r2, r3
 8015e4a:	69bb      	ldr	r3, [r7, #24]
 8015e4c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
 8015e4e:	89fb      	ldrh	r3, [r7, #14]
 8015e50:	4619      	mov	r1, r3
 8015e52:	4812      	ldr	r0, [pc, #72]	@ (8015e9c <dhcp_select+0x260>)
 8015e54:	f005 fc68 	bl	801b728 <iprintf>
 8015e58:	2000      	movs	r0, #0
 8015e5a:	f005 fb8f 	bl	801b57c <fflush>
  return result;
 8015e5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3720      	adds	r7, #32
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bdb0      	pop	{r4, r5, r7, pc}
 8015e6a:	bf00      	nop
 8015e6c:	08021a3c 	.word	0x08021a3c
 8015e70:	08021c2c 	.word	0x08021c2c
 8015e74:	08021a9c 	.word	0x08021a9c
 8015e78:	08021c48 	.word	0x08021c48
 8015e7c:	08021c64 	.word	0x08021c64
 8015e80:	20000074 	.word	0x20000074
 8015e84:	20011e08 	.word	0x20011e08
 8015e88:	08025270 	.word	0x08025270
 8015e8c:	08025274 	.word	0x08025274
 8015e90:	08021c84 	.word	0x08021c84
 8015e94:	08021c9c 	.word	0x08021c9c
 8015e98:	10624dd3 	.word	0x10624dd3
 8015e9c:	08021ccc 	.word	0x08021ccc

08015ea0 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b082      	sub	sp, #8
 8015ea4:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
 8015ea6:	4833      	ldr	r0, [pc, #204]	@ (8015f74 <dhcp_coarse_tmr+0xd4>)
 8015ea8:	f005 fcae 	bl	801b808 <puts>
 8015eac:	2000      	movs	r0, #0
 8015eae:	f005 fb65 	bl	801b57c <fflush>
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8015eb2:	4b31      	ldr	r3, [pc, #196]	@ (8015f78 <dhcp_coarse_tmr+0xd8>)
 8015eb4:	681b      	ldr	r3, [r3, #0]
 8015eb6:	607b      	str	r3, [r7, #4]
 8015eb8:	e054      	b.n	8015f64 <dhcp_coarse_tmr+0xc4>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ebe:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d04b      	beq.n	8015f5e <dhcp_coarse_tmr+0xbe>
 8015ec6:	683b      	ldr	r3, [r7, #0]
 8015ec8:	795b      	ldrb	r3, [r3, #5]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d047      	beq.n	8015f5e <dhcp_coarse_tmr+0xbe>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8015ece:	683b      	ldr	r3, [r7, #0]
 8015ed0:	8a9b      	ldrh	r3, [r3, #20]
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d018      	beq.n	8015f08 <dhcp_coarse_tmr+0x68>
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	8a5b      	ldrh	r3, [r3, #18]
 8015eda:	3301      	adds	r3, #1
 8015edc:	b29a      	uxth	r2, r3
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	825a      	strh	r2, [r3, #18]
 8015ee2:	683b      	ldr	r3, [r7, #0]
 8015ee4:	8a5a      	ldrh	r2, [r3, #18]
 8015ee6:	683b      	ldr	r3, [r7, #0]
 8015ee8:	8a9b      	ldrh	r3, [r3, #20]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	d10c      	bne.n	8015f08 <dhcp_coarse_tmr+0x68>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
 8015eee:	4823      	ldr	r0, [pc, #140]	@ (8015f7c <dhcp_coarse_tmr+0xdc>)
 8015ef0:	f005 fc8a 	bl	801b808 <puts>
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	f005 fb41 	bl	801b57c <fflush>
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8015efa:	6878      	ldr	r0, [r7, #4]
 8015efc:	f001 f834 	bl	8016f68 <dhcp_release_and_stop>
        dhcp_start(netif);
 8015f00:	6878      	ldr	r0, [r7, #4]
 8015f02:	f000 f9cd 	bl	80162a0 <dhcp_start>
 8015f06:	e02a      	b.n	8015f5e <dhcp_coarse_tmr+0xbe>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8015f08:	683b      	ldr	r3, [r7, #0]
 8015f0a:	8a1b      	ldrh	r3, [r3, #16]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d011      	beq.n	8015f34 <dhcp_coarse_tmr+0x94>
 8015f10:	683b      	ldr	r3, [r7, #0]
 8015f12:	8a1b      	ldrh	r3, [r3, #16]
 8015f14:	1e5a      	subs	r2, r3, #1
 8015f16:	b291      	uxth	r1, r2
 8015f18:	683a      	ldr	r2, [r7, #0]
 8015f1a:	8211      	strh	r1, [r2, #16]
 8015f1c:	2b01      	cmp	r3, #1
 8015f1e:	d109      	bne.n	8015f34 <dhcp_coarse_tmr+0x94>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
 8015f20:	4817      	ldr	r0, [pc, #92]	@ (8015f80 <dhcp_coarse_tmr+0xe0>)
 8015f22:	f005 fc71 	bl	801b808 <puts>
 8015f26:	2000      	movs	r0, #0
 8015f28:	f005 fb28 	bl	801b57c <fflush>
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8015f2c:	6878      	ldr	r0, [r7, #4]
 8015f2e:	f000 f915 	bl	801615c <dhcp_t2_timeout>
 8015f32:	e014      	b.n	8015f5e <dhcp_coarse_tmr+0xbe>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	89db      	ldrh	r3, [r3, #14]
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d010      	beq.n	8015f5e <dhcp_coarse_tmr+0xbe>
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	89db      	ldrh	r3, [r3, #14]
 8015f40:	1e5a      	subs	r2, r3, #1
 8015f42:	b291      	uxth	r1, r2
 8015f44:	683a      	ldr	r2, [r7, #0]
 8015f46:	81d1      	strh	r1, [r2, #14]
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d108      	bne.n	8015f5e <dhcp_coarse_tmr+0xbe>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
 8015f4c:	480d      	ldr	r0, [pc, #52]	@ (8015f84 <dhcp_coarse_tmr+0xe4>)
 8015f4e:	f005 fc5b 	bl	801b808 <puts>
 8015f52:	2000      	movs	r0, #0
 8015f54:	f005 fb12 	bl	801b57c <fflush>
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f000 f8c1 	bl	80160e0 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	607b      	str	r3, [r7, #4]
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d1a7      	bne.n	8015eba <dhcp_coarse_tmr+0x1a>
      }
    }
  }
}
 8015f6a:	bf00      	nop
 8015f6c:	bf00      	nop
 8015f6e:	3708      	adds	r7, #8
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}
 8015f74:	08021cfc 	.word	0x08021cfc
 8015f78:	20011d70 	.word	0x20011d70
 8015f7c:	08021d10 	.word	0x08021d10
 8015f80:	08021d30 	.word	0x08021d30
 8015f84:	08021d50 	.word	0x08021d50

08015f88 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8015f8e:	4b19      	ldr	r3, [pc, #100]	@ (8015ff4 <dhcp_fine_tmr+0x6c>)
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	607b      	str	r3, [r7, #4]
 8015f94:	e026      	b.n	8015fe4 <dhcp_fine_tmr+0x5c>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f9a:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8015f9c:	683b      	ldr	r3, [r7, #0]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d01d      	beq.n	8015fde <dhcp_fine_tmr+0x56>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	891b      	ldrh	r3, [r3, #8]
 8015fa6:	2b01      	cmp	r3, #1
 8015fa8:	d906      	bls.n	8015fb8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	891b      	ldrh	r3, [r3, #8]
 8015fae:	3b01      	subs	r3, #1
 8015fb0:	b29a      	uxth	r2, r3
 8015fb2:	683b      	ldr	r3, [r7, #0]
 8015fb4:	811a      	strh	r2, [r3, #8]
 8015fb6:	e012      	b.n	8015fde <dhcp_fine_tmr+0x56>
      } else if (dhcp->request_timeout == 1) {
 8015fb8:	683b      	ldr	r3, [r7, #0]
 8015fba:	891b      	ldrh	r3, [r3, #8]
 8015fbc:	2b01      	cmp	r3, #1
 8015fbe:	d10e      	bne.n	8015fde <dhcp_fine_tmr+0x56>
        dhcp->request_timeout--;
 8015fc0:	683b      	ldr	r3, [r7, #0]
 8015fc2:	891b      	ldrh	r3, [r3, #8]
 8015fc4:	3b01      	subs	r3, #1
 8015fc6:	b29a      	uxth	r2, r3
 8015fc8:	683b      	ldr	r3, [r7, #0]
 8015fca:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
 8015fcc:	480a      	ldr	r0, [pc, #40]	@ (8015ff8 <dhcp_fine_tmr+0x70>)
 8015fce:	f005 fc1b 	bl	801b808 <puts>
 8015fd2:	2000      	movs	r0, #0
 8015fd4:	f005 fad2 	bl	801b57c <fflush>
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f000 f80f 	bl	8015ffc <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	607b      	str	r3, [r7, #4]
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d1d5      	bne.n	8015f96 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8015fea:	bf00      	nop
 8015fec:	bf00      	nop
 8015fee:	3708      	adds	r7, #8
 8015ff0:	46bd      	mov	sp, r7
 8015ff2:	bd80      	pop	{r7, pc}
 8015ff4:	20011d70 	.word	0x20011d70
 8015ff8:	08021d70 	.word	0x08021d70

08015ffc <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b084      	sub	sp, #16
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016008:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
 801600a:	4830      	ldr	r0, [pc, #192]	@ (80160cc <dhcp_timeout+0xd0>)
 801600c:	f005 fbfc 	bl	801b808 <puts>
 8016010:	2000      	movs	r0, #0
 8016012:	f005 fab3 	bl	801b57c <fflush>
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8016016:	68fb      	ldr	r3, [r7, #12]
 8016018:	795b      	ldrb	r3, [r3, #5]
 801601a:	2b0c      	cmp	r3, #12
 801601c:	d003      	beq.n	8016026 <dhcp_timeout+0x2a>
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	795b      	ldrb	r3, [r3, #5]
 8016022:	2b06      	cmp	r3, #6
 8016024:	d109      	bne.n	801603a <dhcp_timeout+0x3e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
 8016026:	482a      	ldr	r0, [pc, #168]	@ (80160d0 <dhcp_timeout+0xd4>)
 8016028:	f005 fbee 	bl	801b808 <puts>
 801602c:	2000      	movs	r0, #0
 801602e:	f005 faa5 	bl	801b57c <fflush>
    dhcp_discover(netif);
 8016032:	6878      	ldr	r0, [r7, #4]
 8016034:	f000 fb20 	bl	8016678 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8016038:	e043      	b.n	80160c2 <dhcp_timeout+0xc6>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801603a:	68fb      	ldr	r3, [r7, #12]
 801603c:	795b      	ldrb	r3, [r3, #5]
 801603e:	2b01      	cmp	r3, #1
 8016040:	d11a      	bne.n	8016078 <dhcp_timeout+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, DHCP request timed out\n"));
 8016042:	4824      	ldr	r0, [pc, #144]	@ (80160d4 <dhcp_timeout+0xd8>)
 8016044:	f005 fbe0 	bl	801b808 <puts>
 8016048:	2000      	movs	r0, #0
 801604a:	f005 fa97 	bl	801b57c <fflush>
    if (dhcp->tries <= 5) {
 801604e:	68fb      	ldr	r3, [r7, #12]
 8016050:	799b      	ldrb	r3, [r3, #6]
 8016052:	2b05      	cmp	r3, #5
 8016054:	d803      	bhi.n	801605e <dhcp_timeout+0x62>
      dhcp_select(netif);
 8016056:	6878      	ldr	r0, [r7, #4]
 8016058:	f7ff fdf0 	bl	8015c3c <dhcp_select>
}
 801605c:	e031      	b.n	80160c2 <dhcp_timeout+0xc6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): REQUESTING, releasing, restarting\n"));
 801605e:	481e      	ldr	r0, [pc, #120]	@ (80160d8 <dhcp_timeout+0xdc>)
 8016060:	f005 fbd2 	bl	801b808 <puts>
 8016064:	2000      	movs	r0, #0
 8016066:	f005 fa89 	bl	801b57c <fflush>
      dhcp_release_and_stop(netif);
 801606a:	6878      	ldr	r0, [r7, #4]
 801606c:	f000 ff7c 	bl	8016f68 <dhcp_release_and_stop>
      dhcp_start(netif);
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f000 f915 	bl	80162a0 <dhcp_start>
}
 8016076:	e024      	b.n	80160c2 <dhcp_timeout+0xc6>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	795b      	ldrb	r3, [r3, #5]
 801607c:	2b08      	cmp	r3, #8
 801607e:	d111      	bne.n	80160a4 <dhcp_timeout+0xa8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_timeout(): CHECKING, ARP request timed out\n"));
 8016080:	4816      	ldr	r0, [pc, #88]	@ (80160dc <dhcp_timeout+0xe0>)
 8016082:	f005 fbc1 	bl	801b808 <puts>
 8016086:	2000      	movs	r0, #0
 8016088:	f005 fa78 	bl	801b57c <fflush>
    if (dhcp->tries <= 1) {
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	799b      	ldrb	r3, [r3, #6]
 8016090:	2b01      	cmp	r3, #1
 8016092:	d803      	bhi.n	801609c <dhcp_timeout+0xa0>
      dhcp_check(netif);
 8016094:	6878      	ldr	r0, [r7, #4]
 8016096:	f7ff fd1b 	bl	8015ad0 <dhcp_check>
}
 801609a:	e012      	b.n	80160c2 <dhcp_timeout+0xc6>
      dhcp_bind(netif);
 801609c:	6878      	ldr	r0, [r7, #4]
 801609e:	f000 fbc9 	bl	8016834 <dhcp_bind>
}
 80160a2:	e00e      	b.n	80160c2 <dhcp_timeout+0xc6>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	795b      	ldrb	r3, [r3, #5]
 80160a8:	2b03      	cmp	r3, #3
 80160aa:	d10a      	bne.n	80160c2 <dhcp_timeout+0xc6>
    if (dhcp->tries < REBOOT_TRIES) {
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	799b      	ldrb	r3, [r3, #6]
 80160b0:	2b01      	cmp	r3, #1
 80160b2:	d803      	bhi.n	80160bc <dhcp_timeout+0xc0>
      dhcp_reboot(netif);
 80160b4:	6878      	ldr	r0, [r7, #4]
 80160b6:	f000 fe81 	bl	8016dbc <dhcp_reboot>
}
 80160ba:	e002      	b.n	80160c2 <dhcp_timeout+0xc6>
      dhcp_discover(netif);
 80160bc:	6878      	ldr	r0, [r7, #4]
 80160be:	f000 fadb 	bl	8016678 <dhcp_discover>
}
 80160c2:	bf00      	nop
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	08021d94 	.word	0x08021d94
 80160d0:	08021da4 	.word	0x08021da4
 80160d4:	08021dcc 	.word	0x08021dcc
 80160d8:	08021e00 	.word	0x08021e00
 80160dc:	08021e34 	.word	0x08021e34

080160e0 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b084      	sub	sp, #16
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80160ec:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
 80160ee:	4819      	ldr	r0, [pc, #100]	@ (8016154 <dhcp_t1_timeout+0x74>)
 80160f0:	f005 fb8a 	bl	801b808 <puts>
 80160f4:	2000      	movs	r0, #0
 80160f6:	f005 fa41 	bl	801b57c <fflush>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	795b      	ldrb	r3, [r3, #5]
 80160fe:	2b01      	cmp	r3, #1
 8016100:	d007      	beq.n	8016112 <dhcp_t1_timeout+0x32>
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	795b      	ldrb	r3, [r3, #5]
 8016106:	2b0a      	cmp	r3, #10
 8016108:	d003      	beq.n	8016112 <dhcp_t1_timeout+0x32>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801610e:	2b05      	cmp	r3, #5
 8016110:	d11c      	bne.n	801614c <dhcp_t1_timeout+0x6c>
    /* just retry to renew - note that the rebind timer (t2) will
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 8016112:	4811      	ldr	r0, [pc, #68]	@ (8016158 <dhcp_t1_timeout+0x78>)
 8016114:	f005 fb78 	bl	801b808 <puts>
 8016118:	2000      	movs	r0, #0
 801611a:	f005 fa2f 	bl	801b57c <fflush>
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f000 fcd4 	bl	8016acc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	899b      	ldrh	r3, [r3, #12]
 8016128:	461a      	mov	r2, r3
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	8a5b      	ldrh	r3, [r3, #18]
 801612e:	1ad3      	subs	r3, r2, r3
 8016130:	2b01      	cmp	r3, #1
 8016132:	dd0b      	ble.n	801614c <dhcp_t1_timeout+0x6c>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	899b      	ldrh	r3, [r3, #12]
 8016138:	461a      	mov	r2, r3
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	8a5b      	ldrh	r3, [r3, #18]
 801613e:	1ad3      	subs	r3, r2, r3
 8016140:	0fda      	lsrs	r2, r3, #31
 8016142:	4413      	add	r3, r2
 8016144:	105b      	asrs	r3, r3, #1
 8016146:	b29a      	uxth	r2, r3
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801614c:	bf00      	nop
 801614e:	3710      	adds	r7, #16
 8016150:	46bd      	mov	sp, r7
 8016152:	bd80      	pop	{r7, pc}
 8016154:	08021e64 	.word	0x08021e64
 8016158:	08021e78 	.word	0x08021e78

0801615c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801615c:	b580      	push	{r7, lr}
 801615e:	b084      	sub	sp, #16
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016168:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
 801616a:	481b      	ldr	r0, [pc, #108]	@ (80161d8 <dhcp_t2_timeout+0x7c>)
 801616c:	f005 fb4c 	bl	801b808 <puts>
 8016170:	2000      	movs	r0, #0
 8016172:	f005 fa03 	bl	801b57c <fflush>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	795b      	ldrb	r3, [r3, #5]
 801617a:	2b01      	cmp	r3, #1
 801617c:	d00b      	beq.n	8016196 <dhcp_t2_timeout+0x3a>
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	795b      	ldrb	r3, [r3, #5]
 8016182:	2b0a      	cmp	r3, #10
 8016184:	d007      	beq.n	8016196 <dhcp_t2_timeout+0x3a>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801618a:	2b05      	cmp	r3, #5
 801618c:	d003      	beq.n	8016196 <dhcp_t2_timeout+0x3a>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	795b      	ldrb	r3, [r3, #5]
 8016192:	2b04      	cmp	r3, #4
 8016194:	d11c      	bne.n	80161d0 <dhcp_t2_timeout+0x74>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
 8016196:	4811      	ldr	r0, [pc, #68]	@ (80161dc <dhcp_t2_timeout+0x80>)
 8016198:	f005 fb36 	bl	801b808 <puts>
 801619c:	2000      	movs	r0, #0
 801619e:	f005 f9ed 	bl	801b57c <fflush>
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80161a2:	6878      	ldr	r0, [r7, #4]
 80161a4:	f000 fd4e 	bl	8016c44 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80161a8:	68fb      	ldr	r3, [r7, #12]
 80161aa:	8a9b      	ldrh	r3, [r3, #20]
 80161ac:	461a      	mov	r2, r3
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	8a5b      	ldrh	r3, [r3, #18]
 80161b2:	1ad3      	subs	r3, r2, r3
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	dd0b      	ble.n	80161d0 <dhcp_t2_timeout+0x74>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	8a9b      	ldrh	r3, [r3, #20]
 80161bc:	461a      	mov	r2, r3
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	8a5b      	ldrh	r3, [r3, #18]
 80161c2:	1ad3      	subs	r3, r2, r3
 80161c4:	0fda      	lsrs	r2, r3, #31
 80161c6:	4413      	add	r3, r2
 80161c8:	105b      	asrs	r3, r3, #1
 80161ca:	b29a      	uxth	r2, r3
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80161d0:	bf00      	nop
 80161d2:	3710      	adds	r7, #16
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	08021e98 	.word	0x08021e98
 80161dc:	08021eac 	.word	0x08021eac

080161e0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b084      	sub	sp, #16
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161ee:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2200      	movs	r2, #0
 80161f4:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80161f6:	68fb      	ldr	r3, [r7, #12]
 80161f8:	2200      	movs	r2, #0
 80161fa:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80161fc:	4b26      	ldr	r3, [pc, #152]	@ (8016298 <dhcp_handle_ack+0xb8>)
 80161fe:	78db      	ldrb	r3, [r3, #3]
 8016200:	2b00      	cmp	r3, #0
 8016202:	d003      	beq.n	801620c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8016204:	4b25      	ldr	r3, [pc, #148]	@ (801629c <dhcp_handle_ack+0xbc>)
 8016206:	68da      	ldr	r2, [r3, #12]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801620c:	4b22      	ldr	r3, [pc, #136]	@ (8016298 <dhcp_handle_ack+0xb8>)
 801620e:	791b      	ldrb	r3, [r3, #4]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d004      	beq.n	801621e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8016214:	4b21      	ldr	r3, [pc, #132]	@ (801629c <dhcp_handle_ack+0xbc>)
 8016216:	691a      	ldr	r2, [r3, #16]
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	62da      	str	r2, [r3, #44]	@ 0x2c
 801621c:	e004      	b.n	8016228 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016222:	085a      	lsrs	r2, r3, #1
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8016228:	4b1b      	ldr	r3, [pc, #108]	@ (8016298 <dhcp_handle_ack+0xb8>)
 801622a:	795b      	ldrb	r3, [r3, #5]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d004      	beq.n	801623a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8016230:	4b1a      	ldr	r3, [pc, #104]	@ (801629c <dhcp_handle_ack+0xbc>)
 8016232:	695a      	ldr	r2, [r3, #20]
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	631a      	str	r2, [r3, #48]	@ 0x30
 8016238:	e007      	b.n	801624a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801623e:	4613      	mov	r3, r2
 8016240:	00db      	lsls	r3, r3, #3
 8016242:	1a9b      	subs	r3, r3, r2
 8016244:	08da      	lsrs	r2, r3, #3
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	691a      	ldr	r2, [r3, #16]
 801624e:	68fb      	ldr	r3, [r7, #12]
 8016250:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8016252:	4b11      	ldr	r3, [pc, #68]	@ (8016298 <dhcp_handle_ack+0xb8>)
 8016254:	799b      	ldrb	r3, [r3, #6]
 8016256:	2b00      	cmp	r3, #0
 8016258:	d00b      	beq.n	8016272 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801625a:	4b10      	ldr	r3, [pc, #64]	@ (801629c <dhcp_handle_ack+0xbc>)
 801625c:	699b      	ldr	r3, [r3, #24]
 801625e:	4618      	mov	r0, r3
 8016260:	f7f4 fd1d 	bl	800ac9e <lwip_htonl>
 8016264:	4602      	mov	r2, r0
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	2201      	movs	r2, #1
 801626e:	71da      	strb	r2, [r3, #7]
 8016270:	e002      	b.n	8016278 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	2200      	movs	r2, #0
 8016276:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8016278:	4b07      	ldr	r3, [pc, #28]	@ (8016298 <dhcp_handle_ack+0xb8>)
 801627a:	79db      	ldrb	r3, [r3, #7]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d007      	beq.n	8016290 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8016280:	4b06      	ldr	r3, [pc, #24]	@ (801629c <dhcp_handle_ack+0xbc>)
 8016282:	69db      	ldr	r3, [r3, #28]
 8016284:	4618      	mov	r0, r3
 8016286:	f7f4 fd0a 	bl	800ac9e <lwip_htonl>
 801628a:	4602      	mov	r2, r0
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8016290:	bf00      	nop
 8016292:	3710      	adds	r7, #16
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}
 8016298:	20011e00 	.word	0x20011e00
 801629c:	20011de0 	.word	0x20011de0

080162a0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80162a0:	b580      	push	{r7, lr}
 80162a2:	b086      	sub	sp, #24
 80162a4:	af02      	add	r7, sp, #8
 80162a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d10c      	bne.n	80162c8 <dhcp_start+0x28>
 80162ae:	4b56      	ldr	r3, [pc, #344]	@ (8016408 <dhcp_start+0x168>)
 80162b0:	f240 22e7 	movw	r2, #743	@ 0x2e7
 80162b4:	4955      	ldr	r1, [pc, #340]	@ (801640c <dhcp_start+0x16c>)
 80162b6:	4856      	ldr	r0, [pc, #344]	@ (8016410 <dhcp_start+0x170>)
 80162b8:	f005 fa36 	bl	801b728 <iprintf>
 80162bc:	2000      	movs	r0, #0
 80162be:	f005 f95d 	bl	801b57c <fflush>
 80162c2:	f06f 030f 	mvn.w	r3, #15
 80162c6:	e09b      	b.n	8016400 <dhcp_start+0x160>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80162ce:	f003 0301 	and.w	r3, r3, #1
 80162d2:	2b00      	cmp	r3, #0
 80162d4:	d10c      	bne.n	80162f0 <dhcp_start+0x50>
 80162d6:	4b4c      	ldr	r3, [pc, #304]	@ (8016408 <dhcp_start+0x168>)
 80162d8:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80162dc:	494d      	ldr	r1, [pc, #308]	@ (8016414 <dhcp_start+0x174>)
 80162de:	484c      	ldr	r0, [pc, #304]	@ (8016410 <dhcp_start+0x170>)
 80162e0:	f005 fa22 	bl	801b728 <iprintf>
 80162e4:	2000      	movs	r0, #0
 80162e6:	f005 f949 	bl	801b57c <fflush>
 80162ea:	f06f 030f 	mvn.w	r3, #15
 80162ee:	e087      	b.n	8016400 <dhcp_start+0x160>
  dhcp = netif_dhcp_data(netif);
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162f4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80162fc:	461a      	mov	r2, r3
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8016304:	4619      	mov	r1, r3
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801630c:	9300      	str	r3, [sp, #0]
 801630e:	460b      	mov	r3, r1
 8016310:	6879      	ldr	r1, [r7, #4]
 8016312:	4841      	ldr	r0, [pc, #260]	@ (8016418 <dhcp_start+0x178>)
 8016314:	f005 fa08 	bl	801b728 <iprintf>
 8016318:	2000      	movs	r0, #0
 801631a:	f005 f92f 	bl	801b57c <fflush>

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016322:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8016326:	d208      	bcs.n	801633a <dhcp_start+0x9a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
 8016328:	483c      	ldr	r0, [pc, #240]	@ (801641c <dhcp_start+0x17c>)
 801632a:	f005 fa6d 	bl	801b808 <puts>
 801632e:	2000      	movs	r0, #0
 8016330:	f005 f924 	bl	801b57c <fflush>
    return ERR_MEM;
 8016334:	f04f 33ff 	mov.w	r3, #4294967295
 8016338:	e062      	b.n	8016400 <dhcp_start+0x160>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d11f      	bne.n	8016380 <dhcp_start+0xe0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
 8016340:	4837      	ldr	r0, [pc, #220]	@ (8016420 <dhcp_start+0x180>)
 8016342:	f005 fa61 	bl	801b808 <puts>
 8016346:	2000      	movs	r0, #0
 8016348:	f005 f918 	bl	801b57c <fflush>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801634c:	2034      	movs	r0, #52	@ 0x34
 801634e:	f7f5 f817 	bl	800b380 <mem_malloc>
 8016352:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	2b00      	cmp	r3, #0
 8016358:	d108      	bne.n	801636c <dhcp_start+0xcc>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
 801635a:	4832      	ldr	r0, [pc, #200]	@ (8016424 <dhcp_start+0x184>)
 801635c:	f005 fa54 	bl	801b808 <puts>
 8016360:	2000      	movs	r0, #0
 8016362:	f005 f90b 	bl	801b57c <fflush>
      return ERR_MEM;
 8016366:	f04f 33ff 	mov.w	r3, #4294967295
 801636a:	e049      	b.n	8016400 <dhcp_start+0x160>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	68fa      	ldr	r2, [r7, #12]
 8016370:	625a      	str	r2, [r3, #36]	@ 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8016372:	482d      	ldr	r0, [pc, #180]	@ (8016428 <dhcp_start+0x188>)
 8016374:	f005 f9d8 	bl	801b728 <iprintf>
 8016378:	2000      	movs	r0, #0
 801637a:	f005 f8ff 	bl	801b57c <fflush>
 801637e:	e00b      	b.n	8016398 <dhcp_start+0xf8>
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
 8016380:	482a      	ldr	r0, [pc, #168]	@ (801642c <dhcp_start+0x18c>)
 8016382:	f005 fa41 	bl	801b808 <puts>
 8016386:	2000      	movs	r0, #0
 8016388:	f005 f8f8 	bl	801b57c <fflush>

    if (dhcp->pcb_allocated != 0) {
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	791b      	ldrb	r3, [r3, #4]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d001      	beq.n	8016398 <dhcp_start+0xf8>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8016394:	f7ff fb3e 	bl	8015a14 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8016398:	2234      	movs	r2, #52	@ 0x34
 801639a:	2100      	movs	r1, #0
 801639c:	68f8      	ldr	r0, [r7, #12]
 801639e:	f005 fb23 	bl	801b9e8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));
 80163a2:	4823      	ldr	r0, [pc, #140]	@ (8016430 <dhcp_start+0x190>)
 80163a4:	f005 fa30 	bl	801b808 <puts>
 80163a8:	2000      	movs	r0, #0
 80163aa:	f005 f8e7 	bl	801b57c <fflush>

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80163ae:	f7ff fadd 	bl	801596c <dhcp_inc_pcb_refcount>
 80163b2:	4603      	mov	r3, r0
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d002      	beq.n	80163be <dhcp_start+0x11e>
    return ERR_MEM;
 80163b8:	f04f 33ff 	mov.w	r3, #4294967295
 80163bc:	e020      	b.n	8016400 <dhcp_start+0x160>
  }
  dhcp->pcb_allocated = 1;
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	2201      	movs	r2, #1
 80163c2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80163ca:	f003 0304 	and.w	r3, r3, #4
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d105      	bne.n	80163de <dhcp_start+0x13e>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80163d2:	2102      	movs	r1, #2
 80163d4:	68f8      	ldr	r0, [r7, #12]
 80163d6:	f000 fe79 	bl	80170cc <dhcp_set_state>
    return ERR_OK;
 80163da:	2300      	movs	r3, #0
 80163dc:	e010      	b.n	8016400 <dhcp_start+0x160>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80163de:	6878      	ldr	r0, [r7, #4]
 80163e0:	f000 f94a 	bl	8016678 <dhcp_discover>
 80163e4:	4603      	mov	r3, r0
 80163e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80163e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d005      	beq.n	80163fc <dhcp_start+0x15c>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f000 fdb9 	bl	8016f68 <dhcp_release_and_stop>
    return ERR_MEM;
 80163f6:	f04f 33ff 	mov.w	r3, #4294967295
 80163fa:	e001      	b.n	8016400 <dhcp_start+0x160>
  }
  return result;
 80163fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016400:	4618      	mov	r0, r3
 8016402:	3710      	adds	r7, #16
 8016404:	46bd      	mov	sp, r7
 8016406:	bd80      	pop	{r7, pc}
 8016408:	08021a3c 	.word	0x08021a3c
 801640c:	08021ecc 	.word	0x08021ecc
 8016410:	08021a9c 	.word	0x08021a9c
 8016414:	08021f10 	.word	0x08021f10
 8016418:	08021f34 	.word	0x08021f34
 801641c:	08021f54 	.word	0x08021f54
 8016420:	08021f94 	.word	0x08021f94
 8016424:	08021fbc 	.word	0x08021fbc
 8016428:	08021fe4 	.word	0x08021fe4
 801642c:	08022004 	.word	0x08022004
 8016430:	08022030 	.word	0x08022030

08016434 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8016434:	b580      	push	{r7, lr}
 8016436:	b084      	sub	sp, #16
 8016438:	af00      	add	r7, sp, #0
 801643a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016440:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	2b00      	cmp	r3, #0
 8016446:	d028      	beq.n	801649a <dhcp_network_changed+0x66>
    return;
  }
  switch (dhcp->state) {
 8016448:	68fb      	ldr	r3, [r7, #12]
 801644a:	795b      	ldrb	r3, [r3, #5]
 801644c:	2b0a      	cmp	r3, #10
 801644e:	d008      	beq.n	8016462 <dhcp_network_changed+0x2e>
 8016450:	2b0a      	cmp	r3, #10
 8016452:	dc0d      	bgt.n	8016470 <dhcp_network_changed+0x3c>
 8016454:	2b00      	cmp	r3, #0
 8016456:	d022      	beq.n	801649e <dhcp_network_changed+0x6a>
 8016458:	2b00      	cmp	r3, #0
 801645a:	db09      	blt.n	8016470 <dhcp_network_changed+0x3c>
 801645c:	3b03      	subs	r3, #3
 801645e:	2b02      	cmp	r3, #2
 8016460:	d806      	bhi.n	8016470 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	2200      	movs	r2, #0
 8016466:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8016468:	6878      	ldr	r0, [r7, #4]
 801646a:	f000 fca7 	bl	8016dbc <dhcp_reboot>
      break;
 801646e:	e017      	b.n	80164a0 <dhcp_network_changed+0x6c>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	795b      	ldrb	r3, [r3, #5]
 8016474:	2b0c      	cmp	r3, #12
 8016476:	d909      	bls.n	801648c <dhcp_network_changed+0x58>
 8016478:	4b0b      	ldr	r3, [pc, #44]	@ (80164a8 <dhcp_network_changed+0x74>)
 801647a:	f240 326d 	movw	r2, #877	@ 0x36d
 801647e:	490b      	ldr	r1, [pc, #44]	@ (80164ac <dhcp_network_changed+0x78>)
 8016480:	480b      	ldr	r0, [pc, #44]	@ (80164b0 <dhcp_network_changed+0x7c>)
 8016482:	f005 f951 	bl	801b728 <iprintf>
 8016486:	2000      	movs	r0, #0
 8016488:	f005 f878 	bl	801b57c <fflush>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801648c:	68fb      	ldr	r3, [r7, #12]
 801648e:	2200      	movs	r2, #0
 8016490:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f000 f8f0 	bl	8016678 <dhcp_discover>
      break;
 8016498:	e002      	b.n	80164a0 <dhcp_network_changed+0x6c>
    return;
 801649a:	bf00      	nop
 801649c:	e000      	b.n	80164a0 <dhcp_network_changed+0x6c>
      break;
 801649e:	bf00      	nop
  }
}
 80164a0:	3710      	adds	r7, #16
 80164a2:	46bd      	mov	sp, r7
 80164a4:	bd80      	pop	{r7, pc}
 80164a6:	bf00      	nop
 80164a8:	08021a3c 	.word	0x08021a3c
 80164ac:	080220a4 	.word	0x080220a4
 80164b0:	08021a9c 	.word	0x08021a9c

080164b4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80164b4:	b580      	push	{r7, lr}
 80164b6:	b084      	sub	sp, #16
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
 80164bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d10a      	bne.n	80164da <dhcp_arp_reply+0x26>
 80164c4:	4b1a      	ldr	r3, [pc, #104]	@ (8016530 <dhcp_arp_reply+0x7c>)
 80164c6:	f240 328b 	movw	r2, #907	@ 0x38b
 80164ca:	491a      	ldr	r1, [pc, #104]	@ (8016534 <dhcp_arp_reply+0x80>)
 80164cc:	481a      	ldr	r0, [pc, #104]	@ (8016538 <dhcp_arp_reply+0x84>)
 80164ce:	f005 f92b 	bl	801b728 <iprintf>
 80164d2:	2000      	movs	r0, #0
 80164d4:	f005 f852 	bl	801b57c <fflush>
 80164d8:	e027      	b.n	801652a <dhcp_arp_reply+0x76>
  dhcp = netif_dhcp_data(netif);
 80164da:	687b      	ldr	r3, [r7, #4]
 80164dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80164de:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
 80164e0:	4816      	ldr	r0, [pc, #88]	@ (801653c <dhcp_arp_reply+0x88>)
 80164e2:	f005 f991 	bl	801b808 <puts>
 80164e6:	2000      	movs	r0, #0
 80164e8:	f005 f848 	bl	801b57c <fflush>
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80164ec:	68fb      	ldr	r3, [r7, #12]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d01b      	beq.n	801652a <dhcp_arp_reply+0x76>
 80164f2:	68fb      	ldr	r3, [r7, #12]
 80164f4:	795b      	ldrb	r3, [r3, #5]
 80164f6:	2b08      	cmp	r3, #8
 80164f8:	d117      	bne.n	801652a <dhcp_arp_reply+0x76>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
 80164fa:	683b      	ldr	r3, [r7, #0]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	4619      	mov	r1, r3
 8016500:	480f      	ldr	r0, [pc, #60]	@ (8016540 <dhcp_arp_reply+0x8c>)
 8016502:	f005 f911 	bl	801b728 <iprintf>
 8016506:	2000      	movs	r0, #0
 8016508:	f005 f838 	bl	801b57c <fflush>
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	681a      	ldr	r2, [r3, #0]
 8016510:	68fb      	ldr	r3, [r7, #12]
 8016512:	69db      	ldr	r3, [r3, #28]
 8016514:	429a      	cmp	r2, r3
 8016516:	d108      	bne.n	801652a <dhcp_arp_reply+0x76>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
 8016518:	480a      	ldr	r0, [pc, #40]	@ (8016544 <dhcp_arp_reply+0x90>)
 801651a:	f005 f975 	bl	801b808 <puts>
 801651e:	2000      	movs	r0, #0
 8016520:	f005 f82c 	bl	801b57c <fflush>
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8016524:	6878      	ldr	r0, [r7, #4]
 8016526:	f000 f80f 	bl	8016548 <dhcp_decline>
    }
  }
}
 801652a:	3710      	adds	r7, #16
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}
 8016530:	08021a3c 	.word	0x08021a3c
 8016534:	08021ecc 	.word	0x08021ecc
 8016538:	08021a9c 	.word	0x08021a9c
 801653c:	080220b8 	.word	0x080220b8
 8016540:	080220cc 	.word	0x080220cc
 8016544:	08022100 	.word	0x08022100

08016548 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8016548:	b5b0      	push	{r4, r5, r7, lr}
 801654a:	b08a      	sub	sp, #40	@ 0x28
 801654c:	af02      	add	r7, sp, #8
 801654e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016554:	61bb      	str	r3, [r7, #24]
  err_t result;
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
 8016556:	4840      	ldr	r0, [pc, #256]	@ (8016658 <dhcp_decline+0x110>)
 8016558:	f005 f956 	bl	801b808 <puts>
 801655c:	2000      	movs	r0, #0
 801655e:	f005 f80d 	bl	801b57c <fflush>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8016562:	210c      	movs	r1, #12
 8016564:	69b8      	ldr	r0, [r7, #24]
 8016566:	f000 fdb1 	bl	80170cc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801656a:	f107 030c 	add.w	r3, r7, #12
 801656e:	2204      	movs	r2, #4
 8016570:	69b9      	ldr	r1, [r7, #24]
 8016572:	6878      	ldr	r0, [r7, #4]
 8016574:	f001 fb34 	bl	8017be0 <dhcp_create_msg>
 8016578:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801657a:	697b      	ldr	r3, [r7, #20]
 801657c:	2b00      	cmp	r3, #0
 801657e:	d03b      	beq.n	80165f8 <dhcp_decline+0xb0>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016580:	697b      	ldr	r3, [r7, #20]
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016586:	89b8      	ldrh	r0, [r7, #12]
 8016588:	693b      	ldr	r3, [r7, #16]
 801658a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801658e:	2304      	movs	r3, #4
 8016590:	2232      	movs	r2, #50	@ 0x32
 8016592:	f000 fdb5 	bl	8017100 <dhcp_option>
 8016596:	4603      	mov	r3, r0
 8016598:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801659a:	89bc      	ldrh	r4, [r7, #12]
 801659c:	693b      	ldr	r3, [r7, #16]
 801659e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80165a2:	69bb      	ldr	r3, [r7, #24]
 80165a4:	69db      	ldr	r3, [r3, #28]
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7f4 fb79 	bl	800ac9e <lwip_htonl>
 80165ac:	4603      	mov	r3, r0
 80165ae:	461a      	mov	r2, r3
 80165b0:	4629      	mov	r1, r5
 80165b2:	4620      	mov	r0, r4
 80165b4:	f000 fe3a 	bl	801722c <dhcp_option_long>
 80165b8:	4603      	mov	r3, r0
 80165ba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80165bc:	89b8      	ldrh	r0, [r7, #12]
 80165be:	693b      	ldr	r3, [r7, #16]
 80165c0:	33f0      	adds	r3, #240	@ 0xf0
 80165c2:	697a      	ldr	r2, [r7, #20]
 80165c4:	4619      	mov	r1, r3
 80165c6:	f001 fbfd 	bl	8017dc4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80165ca:	4b24      	ldr	r3, [pc, #144]	@ (801665c <dhcp_decline+0x114>)
 80165cc:	6818      	ldr	r0, [r3, #0]
 80165ce:	4b24      	ldr	r3, [pc, #144]	@ (8016660 <dhcp_decline+0x118>)
 80165d0:	9301      	str	r3, [sp, #4]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	9300      	str	r3, [sp, #0]
 80165d6:	2343      	movs	r3, #67	@ 0x43
 80165d8:	4a22      	ldr	r2, [pc, #136]	@ (8016664 <dhcp_decline+0x11c>)
 80165da:	6979      	ldr	r1, [r7, #20]
 80165dc:	f7fe fdba 	bl	8015154 <udp_sendto_if_src>
 80165e0:	4603      	mov	r3, r0
 80165e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80165e4:	6978      	ldr	r0, [r7, #20]
 80165e6:	f7f6 f999 	bl	800c91c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
 80165ea:	481f      	ldr	r0, [pc, #124]	@ (8016668 <dhcp_decline+0x120>)
 80165ec:	f005 f90c 	bl	801b808 <puts>
 80165f0:	2000      	movs	r0, #0
 80165f2:	f004 ffc3 	bl	801b57c <fflush>
 80165f6:	e007      	b.n	8016608 <dhcp_decline+0xc0>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 80165f8:	481c      	ldr	r0, [pc, #112]	@ (801666c <dhcp_decline+0x124>)
 80165fa:	f005 f905 	bl	801b808 <puts>
 80165fe:	2000      	movs	r0, #0
 8016600:	f004 ffbc 	bl	801b57c <fflush>
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8016604:	23ff      	movs	r3, #255	@ 0xff
 8016606:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016608:	69bb      	ldr	r3, [r7, #24]
 801660a:	799b      	ldrb	r3, [r3, #6]
 801660c:	2bff      	cmp	r3, #255	@ 0xff
 801660e:	d005      	beq.n	801661c <dhcp_decline+0xd4>
    dhcp->tries++;
 8016610:	69bb      	ldr	r3, [r7, #24]
 8016612:	799b      	ldrb	r3, [r3, #6]
 8016614:	3301      	adds	r3, #1
 8016616:	b2da      	uxtb	r2, r3
 8016618:	69bb      	ldr	r3, [r7, #24]
 801661a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801661c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016620:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016622:	89fb      	ldrh	r3, [r7, #14]
 8016624:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016628:	4a11      	ldr	r2, [pc, #68]	@ (8016670 <dhcp_decline+0x128>)
 801662a:	fb82 1203 	smull	r1, r2, r2, r3
 801662e:	1152      	asrs	r2, r2, #5
 8016630:	17db      	asrs	r3, r3, #31
 8016632:	1ad3      	subs	r3, r2, r3
 8016634:	b29a      	uxth	r2, r3
 8016636:	69bb      	ldr	r3, [r7, #24]
 8016638:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
 801663a:	89fb      	ldrh	r3, [r7, #14]
 801663c:	4619      	mov	r1, r3
 801663e:	480d      	ldr	r0, [pc, #52]	@ (8016674 <dhcp_decline+0x12c>)
 8016640:	f005 f872 	bl	801b728 <iprintf>
 8016644:	2000      	movs	r0, #0
 8016646:	f004 ff99 	bl	801b57c <fflush>
  return result;
 801664a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801664e:	4618      	mov	r0, r3
 8016650:	3720      	adds	r7, #32
 8016652:	46bd      	mov	sp, r7
 8016654:	bdb0      	pop	{r4, r5, r7, pc}
 8016656:	bf00      	nop
 8016658:	08022144 	.word	0x08022144
 801665c:	20011e08 	.word	0x20011e08
 8016660:	08025270 	.word	0x08025270
 8016664:	08025274 	.word	0x08025274
 8016668:	08022154 	.word	0x08022154
 801666c:	08022170 	.word	0x08022170
 8016670:	10624dd3 	.word	0x10624dd3
 8016674:	080221a0 	.word	0x080221a0

08016678 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8016678:	b580      	push	{r7, lr}
 801667a:	b08a      	sub	sp, #40	@ 0x28
 801667c:	af02      	add	r7, sp, #8
 801667e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016684:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8016686:	2300      	movs	r3, #0
 8016688:	75fb      	strb	r3, [r7, #23]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
 801668a:	485e      	ldr	r0, [pc, #376]	@ (8016804 <dhcp_discover+0x18c>)
 801668c:	f005 f8bc 	bl	801b808 <puts>
 8016690:	2000      	movs	r0, #0
 8016692:	f004 ff73 	bl	801b57c <fflush>

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8016696:	69bb      	ldr	r3, [r7, #24]
 8016698:	2200      	movs	r2, #0
 801669a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801669c:	2106      	movs	r1, #6
 801669e:	69b8      	ldr	r0, [r7, #24]
 80166a0:	f000 fd14 	bl	80170cc <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80166a4:	f107 0308 	add.w	r3, r7, #8
 80166a8:	2201      	movs	r2, #1
 80166aa:	69b9      	ldr	r1, [r7, #24]
 80166ac:	6878      	ldr	r0, [r7, #4]
 80166ae:	f001 fa97 	bl	8017be0 <dhcp_create_msg>
 80166b2:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80166b4:	693b      	ldr	r3, [r7, #16]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d064      	beq.n	8016784 <dhcp_discover+0x10c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80166ba:	693b      	ldr	r3, [r7, #16]
 80166bc:	685b      	ldr	r3, [r3, #4]
 80166be:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));
 80166c0:	4851      	ldr	r0, [pc, #324]	@ (8016808 <dhcp_discover+0x190>)
 80166c2:	f005 f8a1 	bl	801b808 <puts>
 80166c6:	2000      	movs	r0, #0
 80166c8:	f004 ff58 	bl	801b57c <fflush>

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80166cc:	8938      	ldrh	r0, [r7, #8]
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80166d4:	2302      	movs	r3, #2
 80166d6:	2239      	movs	r2, #57	@ 0x39
 80166d8:	f000 fd12 	bl	8017100 <dhcp_option>
 80166dc:	4603      	mov	r3, r0
 80166de:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80166e0:	8938      	ldrh	r0, [r7, #8]
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80166ec:	461a      	mov	r2, r3
 80166ee:	f000 fd67 	bl	80171c0 <dhcp_option_short>
 80166f2:	4603      	mov	r3, r0
 80166f4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80166f6:	8938      	ldrh	r0, [r7, #8]
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80166fe:	2303      	movs	r3, #3
 8016700:	2237      	movs	r2, #55	@ 0x37
 8016702:	f000 fcfd 	bl	8017100 <dhcp_option>
 8016706:	4603      	mov	r3, r0
 8016708:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801670a:	2300      	movs	r3, #0
 801670c:	77fb      	strb	r3, [r7, #31]
 801670e:	e00e      	b.n	801672e <dhcp_discover+0xb6>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016710:	8938      	ldrh	r0, [r7, #8]
 8016712:	68fb      	ldr	r3, [r7, #12]
 8016714:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016718:	7ffb      	ldrb	r3, [r7, #31]
 801671a:	4a3c      	ldr	r2, [pc, #240]	@ (801680c <dhcp_discover+0x194>)
 801671c:	5cd3      	ldrb	r3, [r2, r3]
 801671e:	461a      	mov	r2, r3
 8016720:	f000 fd26 	bl	8017170 <dhcp_option_byte>
 8016724:	4603      	mov	r3, r0
 8016726:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016728:	7ffb      	ldrb	r3, [r7, #31]
 801672a:	3301      	adds	r3, #1
 801672c:	77fb      	strb	r3, [r7, #31]
 801672e:	7ffb      	ldrb	r3, [r7, #31]
 8016730:	2b02      	cmp	r3, #2
 8016732:	d9ed      	bls.n	8016710 <dhcp_discover+0x98>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016734:	8938      	ldrh	r0, [r7, #8]
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	33f0      	adds	r3, #240	@ 0xf0
 801673a:	693a      	ldr	r2, [r7, #16]
 801673c:	4619      	mov	r1, r3
 801673e:	f001 fb41 	bl	8017dc4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
 8016742:	4833      	ldr	r0, [pc, #204]	@ (8016810 <dhcp_discover+0x198>)
 8016744:	f005 f860 	bl	801b808 <puts>
 8016748:	2000      	movs	r0, #0
 801674a:	f004 ff17 	bl	801b57c <fflush>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801674e:	4b31      	ldr	r3, [pc, #196]	@ (8016814 <dhcp_discover+0x19c>)
 8016750:	6818      	ldr	r0, [r3, #0]
 8016752:	4b31      	ldr	r3, [pc, #196]	@ (8016818 <dhcp_discover+0x1a0>)
 8016754:	9301      	str	r3, [sp, #4]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	9300      	str	r3, [sp, #0]
 801675a:	2343      	movs	r3, #67	@ 0x43
 801675c:	4a2f      	ldr	r2, [pc, #188]	@ (801681c <dhcp_discover+0x1a4>)
 801675e:	6939      	ldr	r1, [r7, #16]
 8016760:	f7fe fcf8 	bl	8015154 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
 8016764:	482e      	ldr	r0, [pc, #184]	@ (8016820 <dhcp_discover+0x1a8>)
 8016766:	f005 f84f 	bl	801b808 <puts>
 801676a:	2000      	movs	r0, #0
 801676c:	f004 ff06 	bl	801b57c <fflush>
    pbuf_free(p_out);
 8016770:	6938      	ldr	r0, [r7, #16]
 8016772:	f7f6 f8d3 	bl	800c91c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
 8016776:	482b      	ldr	r0, [pc, #172]	@ (8016824 <dhcp_discover+0x1ac>)
 8016778:	f005 f846 	bl	801b808 <puts>
 801677c:	2000      	movs	r0, #0
 801677e:	f004 fefd 	bl	801b57c <fflush>
 8016782:	e005      	b.n	8016790 <dhcp_discover+0x118>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
 8016784:	4828      	ldr	r0, [pc, #160]	@ (8016828 <dhcp_discover+0x1b0>)
 8016786:	f005 f83f 	bl	801b808 <puts>
 801678a:	2000      	movs	r0, #0
 801678c:	f004 fef6 	bl	801b57c <fflush>
  }
  if (dhcp->tries < 255) {
 8016790:	69bb      	ldr	r3, [r7, #24]
 8016792:	799b      	ldrb	r3, [r3, #6]
 8016794:	2bff      	cmp	r3, #255	@ 0xff
 8016796:	d005      	beq.n	80167a4 <dhcp_discover+0x12c>
    dhcp->tries++;
 8016798:	69bb      	ldr	r3, [r7, #24]
 801679a:	799b      	ldrb	r3, [r3, #6]
 801679c:	3301      	adds	r3, #1
 801679e:	b2da      	uxtb	r2, r3
 80167a0:	69bb      	ldr	r3, [r7, #24]
 80167a2:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80167a4:	69bb      	ldr	r3, [r7, #24]
 80167a6:	799b      	ldrb	r3, [r3, #6]
 80167a8:	2b05      	cmp	r3, #5
 80167aa:	d80d      	bhi.n	80167c8 <dhcp_discover+0x150>
 80167ac:	69bb      	ldr	r3, [r7, #24]
 80167ae:	799b      	ldrb	r3, [r3, #6]
 80167b0:	461a      	mov	r2, r3
 80167b2:	2301      	movs	r3, #1
 80167b4:	4093      	lsls	r3, r2
 80167b6:	b29b      	uxth	r3, r3
 80167b8:	461a      	mov	r2, r3
 80167ba:	0152      	lsls	r2, r2, #5
 80167bc:	1ad2      	subs	r2, r2, r3
 80167be:	0092      	lsls	r2, r2, #2
 80167c0:	4413      	add	r3, r2
 80167c2:	00db      	lsls	r3, r3, #3
 80167c4:	b29b      	uxth	r3, r3
 80167c6:	e001      	b.n	80167cc <dhcp_discover+0x154>
 80167c8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80167cc:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80167ce:	897b      	ldrh	r3, [r7, #10]
 80167d0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80167d4:	4a15      	ldr	r2, [pc, #84]	@ (801682c <dhcp_discover+0x1b4>)
 80167d6:	fb82 1203 	smull	r1, r2, r2, r3
 80167da:	1152      	asrs	r2, r2, #5
 80167dc:	17db      	asrs	r3, r3, #31
 80167de:	1ad3      	subs	r3, r2, r3
 80167e0:	b29a      	uxth	r2, r3
 80167e2:	69bb      	ldr	r3, [r7, #24]
 80167e4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
 80167e6:	897b      	ldrh	r3, [r7, #10]
 80167e8:	4619      	mov	r1, r3
 80167ea:	4811      	ldr	r0, [pc, #68]	@ (8016830 <dhcp_discover+0x1b8>)
 80167ec:	f004 ff9c 	bl	801b728 <iprintf>
 80167f0:	2000      	movs	r0, #0
 80167f2:	f004 fec3 	bl	801b57c <fflush>
  return result;
 80167f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3720      	adds	r7, #32
 80167fe:	46bd      	mov	sp, r7
 8016800:	bd80      	pop	{r7, pc}
 8016802:	bf00      	nop
 8016804:	080221d0 	.word	0x080221d0
 8016808:	080221e0 	.word	0x080221e0
 801680c:	20000074 	.word	0x20000074
 8016810:	08022200 	.word	0x08022200
 8016814:	20011e08 	.word	0x20011e08
 8016818:	08025270 	.word	0x08025270
 801681c:	08025274 	.word	0x08025274
 8016820:	08022250 	.word	0x08022250
 8016824:	08022270 	.word	0x08022270
 8016828:	0802228c 	.word	0x0802228c
 801682c:	10624dd3 	.word	0x10624dd3
 8016830:	080222bc 	.word	0x080222bc

08016834 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b08a      	sub	sp, #40	@ 0x28
 8016838:	af02      	add	r7, sp, #8
 801683a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d10a      	bne.n	8016858 <dhcp_bind+0x24>
 8016842:	4b97      	ldr	r3, [pc, #604]	@ (8016aa0 <dhcp_bind+0x26c>)
 8016844:	f240 4215 	movw	r2, #1045	@ 0x415
 8016848:	4996      	ldr	r1, [pc, #600]	@ (8016aa4 <dhcp_bind+0x270>)
 801684a:	4897      	ldr	r0, [pc, #604]	@ (8016aa8 <dhcp_bind+0x274>)
 801684c:	f004 ff6c 	bl	801b728 <iprintf>
 8016850:	2000      	movs	r0, #0
 8016852:	f004 fe93 	bl	801b57c <fflush>
 8016856:	e11f      	b.n	8016a98 <dhcp_bind+0x264>
  dhcp = netif_dhcp_data(netif);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801685c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801685e:	69bb      	ldr	r3, [r7, #24]
 8016860:	2b00      	cmp	r3, #0
 8016862:	d10a      	bne.n	801687a <dhcp_bind+0x46>
 8016864:	4b8e      	ldr	r3, [pc, #568]	@ (8016aa0 <dhcp_bind+0x26c>)
 8016866:	f240 4217 	movw	r2, #1047	@ 0x417
 801686a:	4990      	ldr	r1, [pc, #576]	@ (8016aac <dhcp_bind+0x278>)
 801686c:	488e      	ldr	r0, [pc, #568]	@ (8016aa8 <dhcp_bind+0x274>)
 801686e:	f004 ff5b 	bl	801b728 <iprintf>
 8016872:	2000      	movs	r0, #0
 8016874:	f004 fe82 	bl	801b57c <fflush>
 8016878:	e10e      	b.n	8016a98 <dhcp_bind+0x264>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8016880:	461a      	mov	r2, r3
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8016888:	4619      	mov	r1, r3
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8016890:	9300      	str	r3, [sp, #0]
 8016892:	460b      	mov	r3, r1
 8016894:	6879      	ldr	r1, [r7, #4]
 8016896:	4886      	ldr	r0, [pc, #536]	@ (8016ab0 <dhcp_bind+0x27c>)
 8016898:	f004 ff46 	bl	801b728 <iprintf>
 801689c:	2000      	movs	r0, #0
 801689e:	f004 fe6d 	bl	801b57c <fflush>

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80168a2:	69bb      	ldr	r3, [r7, #24]
 80168a4:	2200      	movs	r2, #0
 80168a6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80168a8:	69bb      	ldr	r3, [r7, #24]
 80168aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168b0:	d02f      	beq.n	8016912 <dhcp_bind+0xde>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
 80168b2:	69bb      	ldr	r3, [r7, #24]
 80168b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168b6:	4619      	mov	r1, r3
 80168b8:	487e      	ldr	r0, [pc, #504]	@ (8016ab4 <dhcp_bind+0x280>)
 80168ba:	f004 ff35 	bl	801b728 <iprintf>
 80168be:	2000      	movs	r0, #0
 80168c0:	f004 fe5c 	bl	801b57c <fflush>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80168c4:	69bb      	ldr	r3, [r7, #24]
 80168c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168c8:	331e      	adds	r3, #30
 80168ca:	4a7b      	ldr	r2, [pc, #492]	@ (8016ab8 <dhcp_bind+0x284>)
 80168cc:	fba2 2303 	umull	r2, r3, r2, r3
 80168d0:	095b      	lsrs	r3, r3, #5
 80168d2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80168d4:	69fb      	ldr	r3, [r7, #28]
 80168d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80168da:	d302      	bcc.n	80168e2 <dhcp_bind+0xae>
      timeout = 0xffff;
 80168dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80168e0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80168e2:	69fb      	ldr	r3, [r7, #28]
 80168e4:	b29a      	uxth	r2, r3
 80168e6:	69bb      	ldr	r3, [r7, #24]
 80168e8:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80168ea:	69bb      	ldr	r3, [r7, #24]
 80168ec:	8a9b      	ldrh	r3, [r3, #20]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d102      	bne.n	80168f8 <dhcp_bind+0xc4>
      dhcp->t0_timeout = 1;
 80168f2:	69bb      	ldr	r3, [r7, #24]
 80168f4:	2201      	movs	r2, #1
 80168f6:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
 80168f8:	69bb      	ldr	r3, [r7, #24]
 80168fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016900:	fb02 f303 	mul.w	r3, r2, r3
 8016904:	4619      	mov	r1, r3
 8016906:	486d      	ldr	r0, [pc, #436]	@ (8016abc <dhcp_bind+0x288>)
 8016908:	f004 ff0e 	bl	801b728 <iprintf>
 801690c:	2000      	movs	r0, #0
 801690e:	f004 fe35 	bl	801b57c <fflush>
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8016912:	69bb      	ldr	r3, [r7, #24]
 8016914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801691a:	d033      	beq.n	8016984 <dhcp_bind+0x150>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
 801691c:	69bb      	ldr	r3, [r7, #24]
 801691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016920:	4619      	mov	r1, r3
 8016922:	4867      	ldr	r0, [pc, #412]	@ (8016ac0 <dhcp_bind+0x28c>)
 8016924:	f004 ff00 	bl	801b728 <iprintf>
 8016928:	2000      	movs	r0, #0
 801692a:	f004 fe27 	bl	801b57c <fflush>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801692e:	69bb      	ldr	r3, [r7, #24]
 8016930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016932:	331e      	adds	r3, #30
 8016934:	4a60      	ldr	r2, [pc, #384]	@ (8016ab8 <dhcp_bind+0x284>)
 8016936:	fba2 2303 	umull	r2, r3, r2, r3
 801693a:	095b      	lsrs	r3, r3, #5
 801693c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016944:	d302      	bcc.n	801694c <dhcp_bind+0x118>
      timeout = 0xffff;
 8016946:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801694a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801694c:	69fb      	ldr	r3, [r7, #28]
 801694e:	b29a      	uxth	r2, r3
 8016950:	69bb      	ldr	r3, [r7, #24]
 8016952:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8016954:	69bb      	ldr	r3, [r7, #24]
 8016956:	895b      	ldrh	r3, [r3, #10]
 8016958:	2b00      	cmp	r3, #0
 801695a:	d102      	bne.n	8016962 <dhcp_bind+0x12e>
      dhcp->t1_timeout = 1;
 801695c:	69bb      	ldr	r3, [r7, #24]
 801695e:	2201      	movs	r2, #1
 8016960:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
 8016962:	69bb      	ldr	r3, [r7, #24]
 8016964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016966:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801696a:	fb02 f303 	mul.w	r3, r2, r3
 801696e:	4619      	mov	r1, r3
 8016970:	4852      	ldr	r0, [pc, #328]	@ (8016abc <dhcp_bind+0x288>)
 8016972:	f004 fed9 	bl	801b728 <iprintf>
 8016976:	2000      	movs	r0, #0
 8016978:	f004 fe00 	bl	801b57c <fflush>
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801697c:	69bb      	ldr	r3, [r7, #24]
 801697e:	895a      	ldrh	r2, [r3, #10]
 8016980:	69bb      	ldr	r3, [r7, #24]
 8016982:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8016984:	69bb      	ldr	r3, [r7, #24]
 8016986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016988:	f1b3 3fff 	cmp.w	r3, #4294967295
 801698c:	d033      	beq.n	80169f6 <dhcp_bind+0x1c2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
 801698e:	69bb      	ldr	r3, [r7, #24]
 8016990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016992:	4619      	mov	r1, r3
 8016994:	484b      	ldr	r0, [pc, #300]	@ (8016ac4 <dhcp_bind+0x290>)
 8016996:	f004 fec7 	bl	801b728 <iprintf>
 801699a:	2000      	movs	r0, #0
 801699c:	f004 fdee 	bl	801b57c <fflush>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80169a0:	69bb      	ldr	r3, [r7, #24]
 80169a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169a4:	331e      	adds	r3, #30
 80169a6:	4a44      	ldr	r2, [pc, #272]	@ (8016ab8 <dhcp_bind+0x284>)
 80169a8:	fba2 2303 	umull	r2, r3, r2, r3
 80169ac:	095b      	lsrs	r3, r3, #5
 80169ae:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80169b0:	69fb      	ldr	r3, [r7, #28]
 80169b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80169b6:	d302      	bcc.n	80169be <dhcp_bind+0x18a>
      timeout = 0xffff;
 80169b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80169bc:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80169be:	69fb      	ldr	r3, [r7, #28]
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	69bb      	ldr	r3, [r7, #24]
 80169c4:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80169c6:	69bb      	ldr	r3, [r7, #24]
 80169c8:	899b      	ldrh	r3, [r3, #12]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d102      	bne.n	80169d4 <dhcp_bind+0x1a0>
      dhcp->t2_timeout = 1;
 80169ce:	69bb      	ldr	r3, [r7, #24]
 80169d0:	2201      	movs	r2, #1
 80169d2:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
 80169d4:	69bb      	ldr	r3, [r7, #24]
 80169d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80169d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80169dc:	fb02 f303 	mul.w	r3, r2, r3
 80169e0:	4619      	mov	r1, r3
 80169e2:	4836      	ldr	r0, [pc, #216]	@ (8016abc <dhcp_bind+0x288>)
 80169e4:	f004 fea0 	bl	801b728 <iprintf>
 80169e8:	2000      	movs	r0, #0
 80169ea:	f004 fdc7 	bl	801b57c <fflush>
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80169ee:	69bb      	ldr	r3, [r7, #24]
 80169f0:	899a      	ldrh	r2, [r3, #12]
 80169f2:	69bb      	ldr	r3, [r7, #24]
 80169f4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80169f6:	69bb      	ldr	r3, [r7, #24]
 80169f8:	895a      	ldrh	r2, [r3, #10]
 80169fa:	69bb      	ldr	r3, [r7, #24]
 80169fc:	899b      	ldrh	r3, [r3, #12]
 80169fe:	429a      	cmp	r2, r3
 8016a00:	d306      	bcc.n	8016a10 <dhcp_bind+0x1dc>
 8016a02:	69bb      	ldr	r3, [r7, #24]
 8016a04:	899b      	ldrh	r3, [r3, #12]
 8016a06:	2b00      	cmp	r3, #0
 8016a08:	d002      	beq.n	8016a10 <dhcp_bind+0x1dc>
    dhcp->t1_timeout = 0;
 8016a0a:	69bb      	ldr	r3, [r7, #24]
 8016a0c:	2200      	movs	r2, #0
 8016a0e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8016a10:	69bb      	ldr	r3, [r7, #24]
 8016a12:	79db      	ldrb	r3, [r3, #7]
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d003      	beq.n	8016a20 <dhcp_bind+0x1ec>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8016a18:	69bb      	ldr	r3, [r7, #24]
 8016a1a:	6a1b      	ldr	r3, [r3, #32]
 8016a1c:	613b      	str	r3, [r7, #16]
 8016a1e:	e014      	b.n	8016a4a <dhcp_bind+0x216>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8016a20:	69bb      	ldr	r3, [r7, #24]
 8016a22:	331c      	adds	r3, #28
 8016a24:	781b      	ldrb	r3, [r3, #0]
 8016a26:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8016a28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	db02      	blt.n	8016a36 <dhcp_bind+0x202>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8016a30:	23ff      	movs	r3, #255	@ 0xff
 8016a32:	613b      	str	r3, [r7, #16]
 8016a34:	e009      	b.n	8016a4a <dhcp_bind+0x216>
    } else if (first_octet >= 192) {
 8016a36:	7dfb      	ldrb	r3, [r7, #23]
 8016a38:	2bbf      	cmp	r3, #191	@ 0xbf
 8016a3a:	d903      	bls.n	8016a44 <dhcp_bind+0x210>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8016a3c:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8016a40:	613b      	str	r3, [r7, #16]
 8016a42:	e002      	b.n	8016a4a <dhcp_bind+0x216>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8016a44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016a48:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8016a4a:	69bb      	ldr	r3, [r7, #24]
 8016a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a4e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d108      	bne.n	8016a68 <dhcp_bind+0x234>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8016a56:	69bb      	ldr	r3, [r7, #24]
 8016a58:	69da      	ldr	r2, [r3, #28]
 8016a5a:	693b      	ldr	r3, [r7, #16]
 8016a5c:	4013      	ands	r3, r2
 8016a5e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8016a60:	68fb      	ldr	r3, [r7, #12]
 8016a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8016a66:	60fb      	str	r3, [r7, #12]
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
 8016a68:	69bb      	ldr	r3, [r7, #24]
 8016a6a:	69d9      	ldr	r1, [r3, #28]
 8016a6c:	693a      	ldr	r2, [r7, #16]
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	4815      	ldr	r0, [pc, #84]	@ (8016ac8 <dhcp_bind+0x294>)
 8016a72:	f004 fe59 	bl	801b728 <iprintf>
 8016a76:	2000      	movs	r0, #0
 8016a78:	f004 fd80 	bl	801b57c <fflush>
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8016a7c:	210a      	movs	r1, #10
 8016a7e:	69b8      	ldr	r0, [r7, #24]
 8016a80:	f000 fb24 	bl	80170cc <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8016a84:	69bb      	ldr	r3, [r7, #24]
 8016a86:	f103 011c 	add.w	r1, r3, #28
 8016a8a:	f107 030c 	add.w	r3, r7, #12
 8016a8e:	f107 0210 	add.w	r2, r7, #16
 8016a92:	6878      	ldr	r0, [r7, #4]
 8016a94:	f7f5 f980 	bl	800bd98 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8016a98:	3720      	adds	r7, #32
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	08021a3c 	.word	0x08021a3c
 8016aa4:	080222ec 	.word	0x080222ec
 8016aa8:	08021a9c 	.word	0x08021a9c
 8016aac:	08022308 	.word	0x08022308
 8016ab0:	08022320 	.word	0x08022320
 8016ab4:	08022340 	.word	0x08022340
 8016ab8:	88888889 	.word	0x88888889
 8016abc:	08022368 	.word	0x08022368
 8016ac0:	08022394 	.word	0x08022394
 8016ac4:	080223bc 	.word	0x080223bc
 8016ac8:	080223e4 	.word	0x080223e4

08016acc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8016acc:	b580      	push	{r7, lr}
 8016ace:	b08a      	sub	sp, #40	@ 0x28
 8016ad0:	af02      	add	r7, sp, #8
 8016ad2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ad8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
 8016ada:	4853      	ldr	r0, [pc, #332]	@ (8016c28 <dhcp_renew+0x15c>)
 8016adc:	f004 fe94 	bl	801b808 <puts>
 8016ae0:	2000      	movs	r0, #0
 8016ae2:	f004 fd4b 	bl	801b57c <fflush>
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8016ae6:	2105      	movs	r1, #5
 8016ae8:	69b8      	ldr	r0, [r7, #24]
 8016aea:	f000 faef 	bl	80170cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016aee:	f107 030c 	add.w	r3, r7, #12
 8016af2:	2203      	movs	r2, #3
 8016af4:	69b9      	ldr	r1, [r7, #24]
 8016af6:	6878      	ldr	r0, [r7, #4]
 8016af8:	f001 f872 	bl	8017be0 <dhcp_create_msg>
 8016afc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016afe:	697b      	ldr	r3, [r7, #20]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d054      	beq.n	8016bae <dhcp_renew+0xe2>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016b04:	697b      	ldr	r3, [r7, #20]
 8016b06:	685b      	ldr	r3, [r3, #4]
 8016b08:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016b0a:	89b8      	ldrh	r0, [r7, #12]
 8016b0c:	693b      	ldr	r3, [r7, #16]
 8016b0e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b12:	2302      	movs	r3, #2
 8016b14:	2239      	movs	r2, #57	@ 0x39
 8016b16:	f000 faf3 	bl	8017100 <dhcp_option>
 8016b1a:	4603      	mov	r3, r0
 8016b1c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016b1e:	89b8      	ldrh	r0, [r7, #12]
 8016b20:	693b      	ldr	r3, [r7, #16]
 8016b22:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	f000 fb48 	bl	80171c0 <dhcp_option_short>
 8016b30:	4603      	mov	r3, r0
 8016b32:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016b34:	89b8      	ldrh	r0, [r7, #12]
 8016b36:	693b      	ldr	r3, [r7, #16]
 8016b38:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b3c:	2303      	movs	r3, #3
 8016b3e:	2237      	movs	r2, #55	@ 0x37
 8016b40:	f000 fade 	bl	8017100 <dhcp_option>
 8016b44:	4603      	mov	r3, r0
 8016b46:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b48:	2300      	movs	r3, #0
 8016b4a:	77bb      	strb	r3, [r7, #30]
 8016b4c:	e00e      	b.n	8016b6c <dhcp_renew+0xa0>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016b4e:	89b8      	ldrh	r0, [r7, #12]
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016b56:	7fbb      	ldrb	r3, [r7, #30]
 8016b58:	4a34      	ldr	r2, [pc, #208]	@ (8016c2c <dhcp_renew+0x160>)
 8016b5a:	5cd3      	ldrb	r3, [r2, r3]
 8016b5c:	461a      	mov	r2, r3
 8016b5e:	f000 fb07 	bl	8017170 <dhcp_option_byte>
 8016b62:	4603      	mov	r3, r0
 8016b64:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016b66:	7fbb      	ldrb	r3, [r7, #30]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	77bb      	strb	r3, [r7, #30]
 8016b6c:	7fbb      	ldrb	r3, [r7, #30]
 8016b6e:	2b02      	cmp	r3, #2
 8016b70:	d9ed      	bls.n	8016b4e <dhcp_renew+0x82>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016b72:	89b8      	ldrh	r0, [r7, #12]
 8016b74:	693b      	ldr	r3, [r7, #16]
 8016b76:	33f0      	adds	r3, #240	@ 0xf0
 8016b78:	697a      	ldr	r2, [r7, #20]
 8016b7a:	4619      	mov	r1, r3
 8016b7c:	f001 f922 	bl	8017dc4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016b80:	4b2b      	ldr	r3, [pc, #172]	@ (8016c30 <dhcp_renew+0x164>)
 8016b82:	6818      	ldr	r0, [r3, #0]
 8016b84:	69bb      	ldr	r3, [r7, #24]
 8016b86:	f103 0218 	add.w	r2, r3, #24
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	9300      	str	r3, [sp, #0]
 8016b8e:	2343      	movs	r3, #67	@ 0x43
 8016b90:	6979      	ldr	r1, [r7, #20]
 8016b92:	f7fe fa5f 	bl	8015054 <udp_sendto_if>
 8016b96:	4603      	mov	r3, r0
 8016b98:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016b9a:	6978      	ldr	r0, [r7, #20]
 8016b9c:	f7f5 febe 	bl	800c91c <pbuf_free>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
 8016ba0:	4824      	ldr	r0, [pc, #144]	@ (8016c34 <dhcp_renew+0x168>)
 8016ba2:	f004 fe31 	bl	801b808 <puts>
 8016ba6:	2000      	movs	r0, #0
 8016ba8:	f004 fce8 	bl	801b57c <fflush>
 8016bac:	e007      	b.n	8016bbe <dhcp_renew+0xf2>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
 8016bae:	4822      	ldr	r0, [pc, #136]	@ (8016c38 <dhcp_renew+0x16c>)
 8016bb0:	f004 fe2a 	bl	801b808 <puts>
 8016bb4:	2000      	movs	r0, #0
 8016bb6:	f004 fce1 	bl	801b57c <fflush>
    result = ERR_MEM;
 8016bba:	23ff      	movs	r3, #255	@ 0xff
 8016bbc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016bbe:	69bb      	ldr	r3, [r7, #24]
 8016bc0:	799b      	ldrb	r3, [r3, #6]
 8016bc2:	2bff      	cmp	r3, #255	@ 0xff
 8016bc4:	d005      	beq.n	8016bd2 <dhcp_renew+0x106>
    dhcp->tries++;
 8016bc6:	69bb      	ldr	r3, [r7, #24]
 8016bc8:	799b      	ldrb	r3, [r3, #6]
 8016bca:	3301      	adds	r3, #1
 8016bcc:	b2da      	uxtb	r2, r3
 8016bce:	69bb      	ldr	r3, [r7, #24]
 8016bd0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8016bd2:	69bb      	ldr	r3, [r7, #24]
 8016bd4:	799b      	ldrb	r3, [r3, #6]
 8016bd6:	2b09      	cmp	r3, #9
 8016bd8:	d809      	bhi.n	8016bee <dhcp_renew+0x122>
 8016bda:	69bb      	ldr	r3, [r7, #24]
 8016bdc:	799b      	ldrb	r3, [r3, #6]
 8016bde:	461a      	mov	r2, r3
 8016be0:	0152      	lsls	r2, r2, #5
 8016be2:	1ad2      	subs	r2, r2, r3
 8016be4:	0092      	lsls	r2, r2, #2
 8016be6:	4413      	add	r3, r2
 8016be8:	011b      	lsls	r3, r3, #4
 8016bea:	b29b      	uxth	r3, r3
 8016bec:	e001      	b.n	8016bf2 <dhcp_renew+0x126>
 8016bee:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8016bf2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016bf4:	89fb      	ldrh	r3, [r7, #14]
 8016bf6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016bfa:	4a10      	ldr	r2, [pc, #64]	@ (8016c3c <dhcp_renew+0x170>)
 8016bfc:	fb82 1203 	smull	r1, r2, r2, r3
 8016c00:	1152      	asrs	r2, r2, #5
 8016c02:	17db      	asrs	r3, r3, #31
 8016c04:	1ad3      	subs	r3, r2, r3
 8016c06:	b29a      	uxth	r2, r3
 8016c08:	69bb      	ldr	r3, [r7, #24]
 8016c0a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
 8016c0c:	89fb      	ldrh	r3, [r7, #14]
 8016c0e:	4619      	mov	r1, r3
 8016c10:	480b      	ldr	r0, [pc, #44]	@ (8016c40 <dhcp_renew+0x174>)
 8016c12:	f004 fd89 	bl	801b728 <iprintf>
 8016c16:	2000      	movs	r0, #0
 8016c18:	f004 fcb0 	bl	801b57c <fflush>
  return result;
 8016c1c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016c20:	4618      	mov	r0, r3
 8016c22:	3720      	adds	r7, #32
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}
 8016c28:	08022418 	.word	0x08022418
 8016c2c:	20000074 	.word	0x20000074
 8016c30:	20011e08 	.word	0x20011e08
 8016c34:	08022428 	.word	0x08022428
 8016c38:	08022440 	.word	0x08022440
 8016c3c:	10624dd3 	.word	0x10624dd3
 8016c40:	0802246c 	.word	0x0802246c

08016c44 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8016c44:	b580      	push	{r7, lr}
 8016c46:	b08a      	sub	sp, #40	@ 0x28
 8016c48:	af02      	add	r7, sp, #8
 8016c4a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c50:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
 8016c52:	4852      	ldr	r0, [pc, #328]	@ (8016d9c <dhcp_rebind+0x158>)
 8016c54:	f004 fdd8 	bl	801b808 <puts>
 8016c58:	2000      	movs	r0, #0
 8016c5a:	f004 fc8f 	bl	801b57c <fflush>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8016c5e:	2104      	movs	r1, #4
 8016c60:	69b8      	ldr	r0, [r7, #24]
 8016c62:	f000 fa33 	bl	80170cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016c66:	f107 030c 	add.w	r3, r7, #12
 8016c6a:	2203      	movs	r2, #3
 8016c6c:	69b9      	ldr	r1, [r7, #24]
 8016c6e:	6878      	ldr	r0, [r7, #4]
 8016c70:	f000 ffb6 	bl	8017be0 <dhcp_create_msg>
 8016c74:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d052      	beq.n	8016d22 <dhcp_rebind+0xde>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	685b      	ldr	r3, [r3, #4]
 8016c80:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016c82:	89b8      	ldrh	r0, [r7, #12]
 8016c84:	693b      	ldr	r3, [r7, #16]
 8016c86:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016c8a:	2302      	movs	r3, #2
 8016c8c:	2239      	movs	r2, #57	@ 0x39
 8016c8e:	f000 fa37 	bl	8017100 <dhcp_option>
 8016c92:	4603      	mov	r3, r0
 8016c94:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8016c96:	89b8      	ldrh	r0, [r7, #12]
 8016c98:	693b      	ldr	r3, [r7, #16]
 8016c9a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8016ca2:	461a      	mov	r2, r3
 8016ca4:	f000 fa8c 	bl	80171c0 <dhcp_option_short>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016cac:	89b8      	ldrh	r0, [r7, #12]
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016cb4:	2303      	movs	r3, #3
 8016cb6:	2237      	movs	r2, #55	@ 0x37
 8016cb8:	f000 fa22 	bl	8017100 <dhcp_option>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	77bb      	strb	r3, [r7, #30]
 8016cc4:	e00e      	b.n	8016ce4 <dhcp_rebind+0xa0>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016cc6:	89b8      	ldrh	r0, [r7, #12]
 8016cc8:	693b      	ldr	r3, [r7, #16]
 8016cca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016cce:	7fbb      	ldrb	r3, [r7, #30]
 8016cd0:	4a33      	ldr	r2, [pc, #204]	@ (8016da0 <dhcp_rebind+0x15c>)
 8016cd2:	5cd3      	ldrb	r3, [r2, r3]
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	f000 fa4b 	bl	8017170 <dhcp_option_byte>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016cde:	7fbb      	ldrb	r3, [r7, #30]
 8016ce0:	3301      	adds	r3, #1
 8016ce2:	77bb      	strb	r3, [r7, #30]
 8016ce4:	7fbb      	ldrb	r3, [r7, #30]
 8016ce6:	2b02      	cmp	r3, #2
 8016ce8:	d9ed      	bls.n	8016cc6 <dhcp_rebind+0x82>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016cea:	89b8      	ldrh	r0, [r7, #12]
 8016cec:	693b      	ldr	r3, [r7, #16]
 8016cee:	33f0      	adds	r3, #240	@ 0xf0
 8016cf0:	697a      	ldr	r2, [r7, #20]
 8016cf2:	4619      	mov	r1, r3
 8016cf4:	f001 f866 	bl	8017dc4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016cf8:	4b2a      	ldr	r3, [pc, #168]	@ (8016da4 <dhcp_rebind+0x160>)
 8016cfa:	6818      	ldr	r0, [r3, #0]
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	9300      	str	r3, [sp, #0]
 8016d00:	2343      	movs	r3, #67	@ 0x43
 8016d02:	4a29      	ldr	r2, [pc, #164]	@ (8016da8 <dhcp_rebind+0x164>)
 8016d04:	6979      	ldr	r1, [r7, #20]
 8016d06:	f7fe f9a5 	bl	8015054 <udp_sendto_if>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016d0e:	6978      	ldr	r0, [r7, #20]
 8016d10:	f7f5 fe04 	bl	800c91c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
 8016d14:	4825      	ldr	r0, [pc, #148]	@ (8016dac <dhcp_rebind+0x168>)
 8016d16:	f004 fd77 	bl	801b808 <puts>
 8016d1a:	2000      	movs	r0, #0
 8016d1c:	f004 fc2e 	bl	801b57c <fflush>
 8016d20:	e007      	b.n	8016d32 <dhcp_rebind+0xee>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
 8016d22:	4823      	ldr	r0, [pc, #140]	@ (8016db0 <dhcp_rebind+0x16c>)
 8016d24:	f004 fd70 	bl	801b808 <puts>
 8016d28:	2000      	movs	r0, #0
 8016d2a:	f004 fc27 	bl	801b57c <fflush>
    result = ERR_MEM;
 8016d2e:	23ff      	movs	r3, #255	@ 0xff
 8016d30:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016d32:	69bb      	ldr	r3, [r7, #24]
 8016d34:	799b      	ldrb	r3, [r3, #6]
 8016d36:	2bff      	cmp	r3, #255	@ 0xff
 8016d38:	d005      	beq.n	8016d46 <dhcp_rebind+0x102>
    dhcp->tries++;
 8016d3a:	69bb      	ldr	r3, [r7, #24]
 8016d3c:	799b      	ldrb	r3, [r3, #6]
 8016d3e:	3301      	adds	r3, #1
 8016d40:	b2da      	uxtb	r2, r3
 8016d42:	69bb      	ldr	r3, [r7, #24]
 8016d44:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016d46:	69bb      	ldr	r3, [r7, #24]
 8016d48:	799b      	ldrb	r3, [r3, #6]
 8016d4a:	2b09      	cmp	r3, #9
 8016d4c:	d809      	bhi.n	8016d62 <dhcp_rebind+0x11e>
 8016d4e:	69bb      	ldr	r3, [r7, #24]
 8016d50:	799b      	ldrb	r3, [r3, #6]
 8016d52:	461a      	mov	r2, r3
 8016d54:	0152      	lsls	r2, r2, #5
 8016d56:	1ad2      	subs	r2, r2, r3
 8016d58:	0092      	lsls	r2, r2, #2
 8016d5a:	4413      	add	r3, r2
 8016d5c:	00db      	lsls	r3, r3, #3
 8016d5e:	b29b      	uxth	r3, r3
 8016d60:	e001      	b.n	8016d66 <dhcp_rebind+0x122>
 8016d62:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016d66:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016d68:	89fb      	ldrh	r3, [r7, #14]
 8016d6a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016d6e:	4a11      	ldr	r2, [pc, #68]	@ (8016db4 <dhcp_rebind+0x170>)
 8016d70:	fb82 1203 	smull	r1, r2, r2, r3
 8016d74:	1152      	asrs	r2, r2, #5
 8016d76:	17db      	asrs	r3, r3, #31
 8016d78:	1ad3      	subs	r3, r2, r3
 8016d7a:	b29a      	uxth	r2, r3
 8016d7c:	69bb      	ldr	r3, [r7, #24]
 8016d7e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
 8016d80:	89fb      	ldrh	r3, [r7, #14]
 8016d82:	4619      	mov	r1, r3
 8016d84:	480c      	ldr	r0, [pc, #48]	@ (8016db8 <dhcp_rebind+0x174>)
 8016d86:	f004 fccf 	bl	801b728 <iprintf>
 8016d8a:	2000      	movs	r0, #0
 8016d8c:	f004 fbf6 	bl	801b57c <fflush>
  return result;
 8016d90:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	3720      	adds	r7, #32
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	bd80      	pop	{r7, pc}
 8016d9c:	0802249c 	.word	0x0802249c
 8016da0:	20000074 	.word	0x20000074
 8016da4:	20011e08 	.word	0x20011e08
 8016da8:	08025274 	.word	0x08025274
 8016dac:	080224ac 	.word	0x080224ac
 8016db0:	080224c4 	.word	0x080224c4
 8016db4:	10624dd3 	.word	0x10624dd3
 8016db8:	080224f4 	.word	0x080224f4

08016dbc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8016dbc:	b5b0      	push	{r4, r5, r7, lr}
 8016dbe:	b08a      	sub	sp, #40	@ 0x28
 8016dc0:	af02      	add	r7, sp, #8
 8016dc2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016dc8:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
 8016dca:	485f      	ldr	r0, [pc, #380]	@ (8016f48 <dhcp_reboot+0x18c>)
 8016dcc:	f004 fd1c 	bl	801b808 <puts>
 8016dd0:	2000      	movs	r0, #0
 8016dd2:	f004 fbd3 	bl	801b57c <fflush>
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8016dd6:	2103      	movs	r1, #3
 8016dd8:	69b8      	ldr	r0, [r7, #24]
 8016dda:	f000 f977 	bl	80170cc <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8016dde:	f107 030c 	add.w	r3, r7, #12
 8016de2:	2203      	movs	r2, #3
 8016de4:	69b9      	ldr	r1, [r7, #24]
 8016de6:	6878      	ldr	r0, [r7, #4]
 8016de8:	f000 fefa 	bl	8017be0 <dhcp_create_msg>
 8016dec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	d06c      	beq.n	8016ece <dhcp_reboot+0x112>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	685b      	ldr	r3, [r3, #4]
 8016df8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8016dfa:	89b8      	ldrh	r0, [r7, #12]
 8016dfc:	693b      	ldr	r3, [r7, #16]
 8016dfe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016e02:	2302      	movs	r3, #2
 8016e04:	2239      	movs	r2, #57	@ 0x39
 8016e06:	f000 f97b 	bl	8017100 <dhcp_option>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8016e0e:	89b8      	ldrh	r0, [r7, #12]
 8016e10:	693b      	ldr	r3, [r7, #16]
 8016e12:	33f0      	adds	r3, #240	@ 0xf0
 8016e14:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8016e18:	4619      	mov	r1, r3
 8016e1a:	f000 f9d1 	bl	80171c0 <dhcp_option_short>
 8016e1e:	4603      	mov	r3, r0
 8016e20:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8016e22:	89b8      	ldrh	r0, [r7, #12]
 8016e24:	693b      	ldr	r3, [r7, #16]
 8016e26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016e2a:	2304      	movs	r3, #4
 8016e2c:	2232      	movs	r2, #50	@ 0x32
 8016e2e:	f000 f967 	bl	8017100 <dhcp_option>
 8016e32:	4603      	mov	r3, r0
 8016e34:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8016e36:	89bc      	ldrh	r4, [r7, #12]
 8016e38:	693b      	ldr	r3, [r7, #16]
 8016e3a:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8016e3e:	69bb      	ldr	r3, [r7, #24]
 8016e40:	69db      	ldr	r3, [r3, #28]
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7f3 ff2b 	bl	800ac9e <lwip_htonl>
 8016e48:	4603      	mov	r3, r0
 8016e4a:	461a      	mov	r2, r3
 8016e4c:	4629      	mov	r1, r5
 8016e4e:	4620      	mov	r0, r4
 8016e50:	f000 f9ec 	bl	801722c <dhcp_option_long>
 8016e54:	4603      	mov	r3, r0
 8016e56:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8016e58:	89b8      	ldrh	r0, [r7, #12]
 8016e5a:	693b      	ldr	r3, [r7, #16]
 8016e5c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016e60:	2303      	movs	r3, #3
 8016e62:	2237      	movs	r2, #55	@ 0x37
 8016e64:	f000 f94c 	bl	8017100 <dhcp_option>
 8016e68:	4603      	mov	r3, r0
 8016e6a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	77bb      	strb	r3, [r7, #30]
 8016e70:	e00e      	b.n	8016e90 <dhcp_reboot+0xd4>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8016e72:	89b8      	ldrh	r0, [r7, #12]
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8016e7a:	7fbb      	ldrb	r3, [r7, #30]
 8016e7c:	4a33      	ldr	r2, [pc, #204]	@ (8016f4c <dhcp_reboot+0x190>)
 8016e7e:	5cd3      	ldrb	r3, [r2, r3]
 8016e80:	461a      	mov	r2, r3
 8016e82:	f000 f975 	bl	8017170 <dhcp_option_byte>
 8016e86:	4603      	mov	r3, r0
 8016e88:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8016e8a:	7fbb      	ldrb	r3, [r7, #30]
 8016e8c:	3301      	adds	r3, #1
 8016e8e:	77bb      	strb	r3, [r7, #30]
 8016e90:	7fbb      	ldrb	r3, [r7, #30]
 8016e92:	2b02      	cmp	r3, #2
 8016e94:	d9ed      	bls.n	8016e72 <dhcp_reboot+0xb6>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8016e96:	89b8      	ldrh	r0, [r7, #12]
 8016e98:	693b      	ldr	r3, [r7, #16]
 8016e9a:	33f0      	adds	r3, #240	@ 0xf0
 8016e9c:	697a      	ldr	r2, [r7, #20]
 8016e9e:	4619      	mov	r1, r3
 8016ea0:	f000 ff90 	bl	8017dc4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8016ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8016f50 <dhcp_reboot+0x194>)
 8016ea6:	6818      	ldr	r0, [r3, #0]
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	9300      	str	r3, [sp, #0]
 8016eac:	2343      	movs	r3, #67	@ 0x43
 8016eae:	4a29      	ldr	r2, [pc, #164]	@ (8016f54 <dhcp_reboot+0x198>)
 8016eb0:	6979      	ldr	r1, [r7, #20]
 8016eb2:	f7fe f8cf 	bl	8015054 <udp_sendto_if>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8016eba:	6978      	ldr	r0, [r7, #20]
 8016ebc:	f7f5 fd2e 	bl	800c91c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
 8016ec0:	4825      	ldr	r0, [pc, #148]	@ (8016f58 <dhcp_reboot+0x19c>)
 8016ec2:	f004 fca1 	bl	801b808 <puts>
 8016ec6:	2000      	movs	r0, #0
 8016ec8:	f004 fb58 	bl	801b57c <fflush>
 8016ecc:	e007      	b.n	8016ede <dhcp_reboot+0x122>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
 8016ece:	4823      	ldr	r0, [pc, #140]	@ (8016f5c <dhcp_reboot+0x1a0>)
 8016ed0:	f004 fc9a 	bl	801b808 <puts>
 8016ed4:	2000      	movs	r0, #0
 8016ed6:	f004 fb51 	bl	801b57c <fflush>
    result = ERR_MEM;
 8016eda:	23ff      	movs	r3, #255	@ 0xff
 8016edc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8016ede:	69bb      	ldr	r3, [r7, #24]
 8016ee0:	799b      	ldrb	r3, [r3, #6]
 8016ee2:	2bff      	cmp	r3, #255	@ 0xff
 8016ee4:	d005      	beq.n	8016ef2 <dhcp_reboot+0x136>
    dhcp->tries++;
 8016ee6:	69bb      	ldr	r3, [r7, #24]
 8016ee8:	799b      	ldrb	r3, [r3, #6]
 8016eea:	3301      	adds	r3, #1
 8016eec:	b2da      	uxtb	r2, r3
 8016eee:	69bb      	ldr	r3, [r7, #24]
 8016ef0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8016ef2:	69bb      	ldr	r3, [r7, #24]
 8016ef4:	799b      	ldrb	r3, [r3, #6]
 8016ef6:	2b09      	cmp	r3, #9
 8016ef8:	d809      	bhi.n	8016f0e <dhcp_reboot+0x152>
 8016efa:	69bb      	ldr	r3, [r7, #24]
 8016efc:	799b      	ldrb	r3, [r3, #6]
 8016efe:	461a      	mov	r2, r3
 8016f00:	0152      	lsls	r2, r2, #5
 8016f02:	1ad2      	subs	r2, r2, r3
 8016f04:	0092      	lsls	r2, r2, #2
 8016f06:	4413      	add	r3, r2
 8016f08:	00db      	lsls	r3, r3, #3
 8016f0a:	b29b      	uxth	r3, r3
 8016f0c:	e001      	b.n	8016f12 <dhcp_reboot+0x156>
 8016f0e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8016f12:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8016f14:	89fb      	ldrh	r3, [r7, #14]
 8016f16:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8016f1a:	4a11      	ldr	r2, [pc, #68]	@ (8016f60 <dhcp_reboot+0x1a4>)
 8016f1c:	fb82 1203 	smull	r1, r2, r2, r3
 8016f20:	1152      	asrs	r2, r2, #5
 8016f22:	17db      	asrs	r3, r3, #31
 8016f24:	1ad3      	subs	r3, r2, r3
 8016f26:	b29a      	uxth	r2, r3
 8016f28:	69bb      	ldr	r3, [r7, #24]
 8016f2a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
 8016f2c:	89fb      	ldrh	r3, [r7, #14]
 8016f2e:	4619      	mov	r1, r3
 8016f30:	480c      	ldr	r0, [pc, #48]	@ (8016f64 <dhcp_reboot+0x1a8>)
 8016f32:	f004 fbf9 	bl	801b728 <iprintf>
 8016f36:	2000      	movs	r0, #0
 8016f38:	f004 fb20 	bl	801b57c <fflush>
  return result;
 8016f3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016f40:	4618      	mov	r0, r3
 8016f42:	3720      	adds	r7, #32
 8016f44:	46bd      	mov	sp, r7
 8016f46:	bdb0      	pop	{r4, r5, r7, pc}
 8016f48:	08022524 	.word	0x08022524
 8016f4c:	20000074 	.word	0x20000074
 8016f50:	20011e08 	.word	0x20011e08
 8016f54:	08025274 	.word	0x08025274
 8016f58:	08022534 	.word	0x08022534
 8016f5c:	0802254c 	.word	0x0802254c
 8016f60:	10624dd3 	.word	0x10624dd3
 8016f64:	0802257c 	.word	0x0802257c

08016f68 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8016f68:	b5b0      	push	{r4, r5, r7, lr}
 8016f6a:	b08a      	sub	sp, #40	@ 0x28
 8016f6c:	af02      	add	r7, sp, #8
 8016f6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f74:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
 8016f76:	4850      	ldr	r0, [pc, #320]	@ (80170b8 <dhcp_release_and_stop+0x150>)
 8016f78:	f004 fc46 	bl	801b808 <puts>
 8016f7c:	2000      	movs	r0, #0
 8016f7e:	f004 fafd 	bl	801b57c <fflush>
  if (dhcp == NULL) {
 8016f82:	69fb      	ldr	r3, [r7, #28]
 8016f84:	2b00      	cmp	r3, #0
 8016f86:	f000 8091 	beq.w	80170ac <dhcp_release_and_stop+0x144>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8016f8a:	69fb      	ldr	r3, [r7, #28]
 8016f8c:	795b      	ldrb	r3, [r3, #5]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	f000 808e 	beq.w	80170b0 <dhcp_release_and_stop+0x148>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8016f94:	69fb      	ldr	r3, [r7, #28]
 8016f96:	699b      	ldr	r3, [r3, #24]
 8016f98:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8016f9a:	69fb      	ldr	r3, [r7, #28]
 8016f9c:	2200      	movs	r2, #0
 8016f9e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8016fa0:	69fb      	ldr	r3, [r7, #28]
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8016fa6:	69fb      	ldr	r3, [r7, #28]
 8016fa8:	2200      	movs	r2, #0
 8016faa:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8016fac:	69fb      	ldr	r3, [r7, #28]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8016fb2:	69fb      	ldr	r3, [r7, #28]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	631a      	str	r2, [r3, #48]	@ 0x30
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016fbc:	69fb      	ldr	r3, [r7, #28]
 8016fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8016fc0:	69fb      	ldr	r3, [r7, #28]
 8016fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016fc4:	69fb      	ldr	r3, [r7, #28]
 8016fc6:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8016fc8:	69fb      	ldr	r3, [r7, #28]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	829a      	strh	r2, [r3, #20]
 8016fce:	69fb      	ldr	r3, [r7, #28]
 8016fd0:	8a9a      	ldrh	r2, [r3, #20]
 8016fd2:	69fb      	ldr	r3, [r7, #28]
 8016fd4:	825a      	strh	r2, [r3, #18]
 8016fd6:	69fb      	ldr	r3, [r7, #28]
 8016fd8:	8a5a      	ldrh	r2, [r3, #18]
 8016fda:	69fb      	ldr	r3, [r7, #28]
 8016fdc:	821a      	strh	r2, [r3, #16]
 8016fde:	69fb      	ldr	r3, [r7, #28]
 8016fe0:	8a1a      	ldrh	r2, [r3, #16]
 8016fe2:	69fb      	ldr	r3, [r7, #28]
 8016fe4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8016fe6:	6878      	ldr	r0, [r7, #4]
 8016fe8:	f000 ff1a 	bl	8017e20 <dhcp_supplied_address>
 8016fec:	4603      	mov	r3, r0
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d048      	beq.n	8017084 <dhcp_release_and_stop+0x11c>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8016ff2:	f107 030e 	add.w	r3, r7, #14
 8016ff6:	2207      	movs	r2, #7
 8016ff8:	69f9      	ldr	r1, [r7, #28]
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f000 fdf0 	bl	8017be0 <dhcp_create_msg>
 8017000:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8017002:	69bb      	ldr	r3, [r7, #24]
 8017004:	2b00      	cmp	r3, #0
 8017006:	d037      	beq.n	8017078 <dhcp_release_and_stop+0x110>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8017008:	69bb      	ldr	r3, [r7, #24]
 801700a:	685b      	ldr	r3, [r3, #4]
 801700c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801700e:	89f8      	ldrh	r0, [r7, #14]
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017016:	2304      	movs	r3, #4
 8017018:	2236      	movs	r2, #54	@ 0x36
 801701a:	f000 f871 	bl	8017100 <dhcp_option>
 801701e:	4603      	mov	r3, r0
 8017020:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8017022:	89fc      	ldrh	r4, [r7, #14]
 8017024:	697b      	ldr	r3, [r7, #20]
 8017026:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801702a:	693b      	ldr	r3, [r7, #16]
 801702c:	4618      	mov	r0, r3
 801702e:	f7f3 fe36 	bl	800ac9e <lwip_htonl>
 8017032:	4603      	mov	r3, r0
 8017034:	461a      	mov	r2, r3
 8017036:	4629      	mov	r1, r5
 8017038:	4620      	mov	r0, r4
 801703a:	f000 f8f7 	bl	801722c <dhcp_option_long>
 801703e:	4603      	mov	r3, r0
 8017040:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8017042:	89f8      	ldrh	r0, [r7, #14]
 8017044:	697b      	ldr	r3, [r7, #20]
 8017046:	33f0      	adds	r3, #240	@ 0xf0
 8017048:	69ba      	ldr	r2, [r7, #24]
 801704a:	4619      	mov	r1, r3
 801704c:	f000 feba 	bl	8017dc4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8017050:	4b1a      	ldr	r3, [pc, #104]	@ (80170bc <dhcp_release_and_stop+0x154>)
 8017052:	6818      	ldr	r0, [r3, #0]
 8017054:	f107 0210 	add.w	r2, r7, #16
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	9300      	str	r3, [sp, #0]
 801705c:	2343      	movs	r3, #67	@ 0x43
 801705e:	69b9      	ldr	r1, [r7, #24]
 8017060:	f7fd fff8 	bl	8015054 <udp_sendto_if>
      pbuf_free(p_out);
 8017064:	69b8      	ldr	r0, [r7, #24]
 8017066:	f7f5 fc59 	bl	800c91c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_release: RELEASED, DHCP_STATE_OFF\n"));
 801706a:	4815      	ldr	r0, [pc, #84]	@ (80170c0 <dhcp_release_and_stop+0x158>)
 801706c:	f004 fbcc 	bl	801b808 <puts>
 8017070:	2000      	movs	r0, #0
 8017072:	f004 fa83 	bl	801b57c <fflush>
 8017076:	e005      	b.n	8017084 <dhcp_release_and_stop+0x11c>
    } else {
      /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
 8017078:	4812      	ldr	r0, [pc, #72]	@ (80170c4 <dhcp_release_and_stop+0x15c>)
 801707a:	f004 fbc5 	bl	801b808 <puts>
 801707e:	2000      	movs	r0, #0
 8017080:	f004 fa7c 	bl	801b57c <fflush>
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8017084:	4b10      	ldr	r3, [pc, #64]	@ (80170c8 <dhcp_release_and_stop+0x160>)
 8017086:	4a10      	ldr	r2, [pc, #64]	@ (80170c8 <dhcp_release_and_stop+0x160>)
 8017088:	490f      	ldr	r1, [pc, #60]	@ (80170c8 <dhcp_release_and_stop+0x160>)
 801708a:	6878      	ldr	r0, [r7, #4]
 801708c:	f7f4 fe84 	bl	800bd98 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8017090:	2100      	movs	r1, #0
 8017092:	69f8      	ldr	r0, [r7, #28]
 8017094:	f000 f81a 	bl	80170cc <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8017098:	69fb      	ldr	r3, [r7, #28]
 801709a:	791b      	ldrb	r3, [r3, #4]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d008      	beq.n	80170b2 <dhcp_release_and_stop+0x14a>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80170a0:	f7fe fcb8 	bl	8015a14 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80170a4:	69fb      	ldr	r3, [r7, #28]
 80170a6:	2200      	movs	r2, #0
 80170a8:	711a      	strb	r2, [r3, #4]
 80170aa:	e002      	b.n	80170b2 <dhcp_release_and_stop+0x14a>
    return;
 80170ac:	bf00      	nop
 80170ae:	e000      	b.n	80170b2 <dhcp_release_and_stop+0x14a>
    return;
 80170b0:	bf00      	nop
  }
}
 80170b2:	3720      	adds	r7, #32
 80170b4:	46bd      	mov	sp, r7
 80170b6:	bdb0      	pop	{r4, r5, r7, pc}
 80170b8:	080225ac 	.word	0x080225ac
 80170bc:	20011e08 	.word	0x20011e08
 80170c0:	080225c4 	.word	0x080225c4
 80170c4:	080225ec 	.word	0x080225ec
 80170c8:	08025270 	.word	0x08025270

080170cc <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80170cc:	b480      	push	{r7}
 80170ce:	b083      	sub	sp, #12
 80170d0:	af00      	add	r7, sp, #0
 80170d2:	6078      	str	r0, [r7, #4]
 80170d4:	460b      	mov	r3, r1
 80170d6:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80170d8:	687b      	ldr	r3, [r7, #4]
 80170da:	795b      	ldrb	r3, [r3, #5]
 80170dc:	78fa      	ldrb	r2, [r7, #3]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d008      	beq.n	80170f4 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	78fa      	ldrb	r2, [r7, #3]
 80170e6:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2200      	movs	r2, #0
 80170ec:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2200      	movs	r2, #0
 80170f2:	811a      	strh	r2, [r3, #8]
  }
}
 80170f4:	bf00      	nop
 80170f6:	370c      	adds	r7, #12
 80170f8:	46bd      	mov	sp, r7
 80170fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170fe:	4770      	bx	lr

08017100 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b082      	sub	sp, #8
 8017104:	af00      	add	r7, sp, #0
 8017106:	6039      	str	r1, [r7, #0]
 8017108:	4611      	mov	r1, r2
 801710a:	461a      	mov	r2, r3
 801710c:	4603      	mov	r3, r0
 801710e:	80fb      	strh	r3, [r7, #6]
 8017110:	460b      	mov	r3, r1
 8017112:	717b      	strb	r3, [r7, #5]
 8017114:	4613      	mov	r3, r2
 8017116:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8017118:	88fa      	ldrh	r2, [r7, #6]
 801711a:	793b      	ldrb	r3, [r7, #4]
 801711c:	4413      	add	r3, r2
 801711e:	3302      	adds	r3, #2
 8017120:	2b44      	cmp	r3, #68	@ 0x44
 8017122:	d909      	bls.n	8017138 <dhcp_option+0x38>
 8017124:	4b0f      	ldr	r3, [pc, #60]	@ (8017164 <dhcp_option+0x64>)
 8017126:	f240 529a 	movw	r2, #1434	@ 0x59a
 801712a:	490f      	ldr	r1, [pc, #60]	@ (8017168 <dhcp_option+0x68>)
 801712c:	480f      	ldr	r0, [pc, #60]	@ (801716c <dhcp_option+0x6c>)
 801712e:	f004 fafb 	bl	801b728 <iprintf>
 8017132:	2000      	movs	r0, #0
 8017134:	f004 fa22 	bl	801b57c <fflush>
  options[options_out_len++] = option_type;
 8017138:	88fb      	ldrh	r3, [r7, #6]
 801713a:	1c5a      	adds	r2, r3, #1
 801713c:	80fa      	strh	r2, [r7, #6]
 801713e:	461a      	mov	r2, r3
 8017140:	683b      	ldr	r3, [r7, #0]
 8017142:	4413      	add	r3, r2
 8017144:	797a      	ldrb	r2, [r7, #5]
 8017146:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8017148:	88fb      	ldrh	r3, [r7, #6]
 801714a:	1c5a      	adds	r2, r3, #1
 801714c:	80fa      	strh	r2, [r7, #6]
 801714e:	461a      	mov	r2, r3
 8017150:	683b      	ldr	r3, [r7, #0]
 8017152:	4413      	add	r3, r2
 8017154:	793a      	ldrb	r2, [r7, #4]
 8017156:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017158:	88fb      	ldrh	r3, [r7, #6]
}
 801715a:	4618      	mov	r0, r3
 801715c:	3708      	adds	r7, #8
 801715e:	46bd      	mov	sp, r7
 8017160:	bd80      	pop	{r7, pc}
 8017162:	bf00      	nop
 8017164:	08021a3c 	.word	0x08021a3c
 8017168:	0802261c 	.word	0x0802261c
 801716c:	08021a9c 	.word	0x08021a9c

08017170 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
 8017176:	4603      	mov	r3, r0
 8017178:	6039      	str	r1, [r7, #0]
 801717a:	80fb      	strh	r3, [r7, #6]
 801717c:	4613      	mov	r3, r2
 801717e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8017180:	88fb      	ldrh	r3, [r7, #6]
 8017182:	2b43      	cmp	r3, #67	@ 0x43
 8017184:	d909      	bls.n	801719a <dhcp_option_byte+0x2a>
 8017186:	4b0b      	ldr	r3, [pc, #44]	@ (80171b4 <dhcp_option_byte+0x44>)
 8017188:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 801718c:	490a      	ldr	r1, [pc, #40]	@ (80171b8 <dhcp_option_byte+0x48>)
 801718e:	480b      	ldr	r0, [pc, #44]	@ (80171bc <dhcp_option_byte+0x4c>)
 8017190:	f004 faca 	bl	801b728 <iprintf>
 8017194:	2000      	movs	r0, #0
 8017196:	f004 f9f1 	bl	801b57c <fflush>
  options[options_out_len++] = value;
 801719a:	88fb      	ldrh	r3, [r7, #6]
 801719c:	1c5a      	adds	r2, r3, #1
 801719e:	80fa      	strh	r2, [r7, #6]
 80171a0:	461a      	mov	r2, r3
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	4413      	add	r3, r2
 80171a6:	797a      	ldrb	r2, [r7, #5]
 80171a8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80171aa:	88fb      	ldrh	r3, [r7, #6]
}
 80171ac:	4618      	mov	r0, r3
 80171ae:	3708      	adds	r7, #8
 80171b0:	46bd      	mov	sp, r7
 80171b2:	bd80      	pop	{r7, pc}
 80171b4:	08021a3c 	.word	0x08021a3c
 80171b8:	08022660 	.word	0x08022660
 80171bc:	08021a9c 	.word	0x08021a9c

080171c0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80171c0:	b580      	push	{r7, lr}
 80171c2:	b082      	sub	sp, #8
 80171c4:	af00      	add	r7, sp, #0
 80171c6:	4603      	mov	r3, r0
 80171c8:	6039      	str	r1, [r7, #0]
 80171ca:	80fb      	strh	r3, [r7, #6]
 80171cc:	4613      	mov	r3, r2
 80171ce:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80171d0:	88fb      	ldrh	r3, [r7, #6]
 80171d2:	3302      	adds	r3, #2
 80171d4:	2b44      	cmp	r3, #68	@ 0x44
 80171d6:	d909      	bls.n	80171ec <dhcp_option_short+0x2c>
 80171d8:	4b11      	ldr	r3, [pc, #68]	@ (8017220 <dhcp_option_short+0x60>)
 80171da:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 80171de:	4911      	ldr	r1, [pc, #68]	@ (8017224 <dhcp_option_short+0x64>)
 80171e0:	4811      	ldr	r0, [pc, #68]	@ (8017228 <dhcp_option_short+0x68>)
 80171e2:	f004 faa1 	bl	801b728 <iprintf>
 80171e6:	2000      	movs	r0, #0
 80171e8:	f004 f9c8 	bl	801b57c <fflush>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80171ec:	88bb      	ldrh	r3, [r7, #4]
 80171ee:	0a1b      	lsrs	r3, r3, #8
 80171f0:	b29a      	uxth	r2, r3
 80171f2:	88fb      	ldrh	r3, [r7, #6]
 80171f4:	1c59      	adds	r1, r3, #1
 80171f6:	80f9      	strh	r1, [r7, #6]
 80171f8:	4619      	mov	r1, r3
 80171fa:	683b      	ldr	r3, [r7, #0]
 80171fc:	440b      	add	r3, r1
 80171fe:	b2d2      	uxtb	r2, r2
 8017200:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8017202:	88fb      	ldrh	r3, [r7, #6]
 8017204:	1c5a      	adds	r2, r3, #1
 8017206:	80fa      	strh	r2, [r7, #6]
 8017208:	461a      	mov	r2, r3
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	4413      	add	r3, r2
 801720e:	88ba      	ldrh	r2, [r7, #4]
 8017210:	b2d2      	uxtb	r2, r2
 8017212:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8017214:	88fb      	ldrh	r3, [r7, #6]
}
 8017216:	4618      	mov	r0, r3
 8017218:	3708      	adds	r7, #8
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop
 8017220:	08021a3c 	.word	0x08021a3c
 8017224:	08022698 	.word	0x08022698
 8017228:	08021a9c 	.word	0x08021a9c

0801722c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b084      	sub	sp, #16
 8017230:	af00      	add	r7, sp, #0
 8017232:	4603      	mov	r3, r0
 8017234:	60b9      	str	r1, [r7, #8]
 8017236:	607a      	str	r2, [r7, #4]
 8017238:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801723a:	89fb      	ldrh	r3, [r7, #14]
 801723c:	3304      	adds	r3, #4
 801723e:	2b44      	cmp	r3, #68	@ 0x44
 8017240:	d909      	bls.n	8017256 <dhcp_option_long+0x2a>
 8017242:	4b1b      	ldr	r3, [pc, #108]	@ (80172b0 <dhcp_option_long+0x84>)
 8017244:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8017248:	491a      	ldr	r1, [pc, #104]	@ (80172b4 <dhcp_option_long+0x88>)
 801724a:	481b      	ldr	r0, [pc, #108]	@ (80172b8 <dhcp_option_long+0x8c>)
 801724c:	f004 fa6c 	bl	801b728 <iprintf>
 8017250:	2000      	movs	r0, #0
 8017252:	f004 f993 	bl	801b57c <fflush>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	0e1a      	lsrs	r2, r3, #24
 801725a:	89fb      	ldrh	r3, [r7, #14]
 801725c:	1c59      	adds	r1, r3, #1
 801725e:	81f9      	strh	r1, [r7, #14]
 8017260:	4619      	mov	r1, r3
 8017262:	68bb      	ldr	r3, [r7, #8]
 8017264:	440b      	add	r3, r1
 8017266:	b2d2      	uxtb	r2, r2
 8017268:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	0c1a      	lsrs	r2, r3, #16
 801726e:	89fb      	ldrh	r3, [r7, #14]
 8017270:	1c59      	adds	r1, r3, #1
 8017272:	81f9      	strh	r1, [r7, #14]
 8017274:	4619      	mov	r1, r3
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	440b      	add	r3, r1
 801727a:	b2d2      	uxtb	r2, r2
 801727c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	0a1a      	lsrs	r2, r3, #8
 8017282:	89fb      	ldrh	r3, [r7, #14]
 8017284:	1c59      	adds	r1, r3, #1
 8017286:	81f9      	strh	r1, [r7, #14]
 8017288:	4619      	mov	r1, r3
 801728a:	68bb      	ldr	r3, [r7, #8]
 801728c:	440b      	add	r3, r1
 801728e:	b2d2      	uxtb	r2, r2
 8017290:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8017292:	89fb      	ldrh	r3, [r7, #14]
 8017294:	1c5a      	adds	r2, r3, #1
 8017296:	81fa      	strh	r2, [r7, #14]
 8017298:	461a      	mov	r2, r3
 801729a:	68bb      	ldr	r3, [r7, #8]
 801729c:	4413      	add	r3, r2
 801729e:	687a      	ldr	r2, [r7, #4]
 80172a0:	b2d2      	uxtb	r2, r2
 80172a2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80172a4:	89fb      	ldrh	r3, [r7, #14]
}
 80172a6:	4618      	mov	r0, r3
 80172a8:	3710      	adds	r7, #16
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}
 80172ae:	bf00      	nop
 80172b0:	08021a3c 	.word	0x08021a3c
 80172b4:	080226d4 	.word	0x080226d4
 80172b8:	08021a9c 	.word	0x08021a9c

080172bc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 80172bc:	b580      	push	{r7, lr}
 80172be:	b090      	sub	sp, #64	@ 0x40
 80172c0:	af00      	add	r7, sp, #0
 80172c2:	6078      	str	r0, [r7, #4]
 80172c4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80172c6:	2300      	movs	r3, #0
 80172c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 80172ca:	2300      	movs	r3, #0
 80172cc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80172ce:	2208      	movs	r2, #8
 80172d0:	2100      	movs	r1, #0
 80172d2:	48b6      	ldr	r0, [pc, #728]	@ (80175ac <dhcp_parse_reply+0x2f0>)
 80172d4:	f004 fb88 	bl	801b9e8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	895b      	ldrh	r3, [r3, #10]
 80172dc:	2b2b      	cmp	r3, #43	@ 0x2b
 80172de:	d802      	bhi.n	80172e6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80172e0:	f06f 0301 	mvn.w	r3, #1
 80172e4:	e309      	b.n	80178fa <dhcp_parse_reply+0x63e>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	685b      	ldr	r3, [r3, #4]
 80172ea:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80172ec:	23f0      	movs	r3, #240	@ 0xf0
 80172ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	891b      	ldrh	r3, [r3, #8]
 80172f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 80172fa:	e00c      	b.n	8017316 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 80172fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80172fe:	895b      	ldrh	r3, [r3, #10]
 8017300:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017302:	1ad3      	subs	r3, r2, r3
 8017304:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8017306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017308:	895b      	ldrh	r3, [r3, #10]
 801730a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801730c:	1ad3      	subs	r3, r2, r3
 801730e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8017310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8017316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017318:	2b00      	cmp	r3, #0
 801731a:	d004      	beq.n	8017326 <dhcp_parse_reply+0x6a>
 801731c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801731e:	895b      	ldrh	r3, [r3, #10]
 8017320:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8017322:	429a      	cmp	r2, r3
 8017324:	d2ea      	bcs.n	80172fc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8017326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017328:	2b00      	cmp	r3, #0
 801732a:	d102      	bne.n	8017332 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801732c:	f06f 0301 	mvn.w	r3, #1
 8017330:	e2e3      	b.n	80178fa <dhcp_parse_reply+0x63e>
  }
  offset = options_idx;
 8017332:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8017334:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8017336:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017338:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801733a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801733c:	685b      	ldr	r3, [r3, #4]
 801733e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017340:	e269      	b.n	8017816 <dhcp_parse_reply+0x55a>
    u8_t op = options[offset];
 8017342:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017344:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017346:	4413      	add	r3, r2
 8017348:	781b      	ldrb	r3, [r3, #0]
 801734a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801734c:	2300      	movs	r3, #0
 801734e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8017352:	f04f 33ff 	mov.w	r3, #4294967295
 8017356:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8017358:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801735a:	3302      	adds	r3, #2
 801735c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801735e:	8bfa      	ldrh	r2, [r7, #30]
 8017360:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017362:	429a      	cmp	r2, r3
 8017364:	d202      	bcs.n	801736c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8017366:	f06f 0301 	mvn.w	r3, #1
 801736a:	e2c6      	b.n	80178fa <dhcp_parse_reply+0x63e>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801736c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801736e:	3301      	adds	r3, #1
 8017370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017372:	8952      	ldrh	r2, [r2, #10]
 8017374:	4293      	cmp	r3, r2
 8017376:	da07      	bge.n	8017388 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8017378:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801737a:	3301      	adds	r3, #1
 801737c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801737e:	4413      	add	r3, r2
 8017380:	781b      	ldrb	r3, [r3, #0]
 8017382:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017386:	e00b      	b.n	80173a0 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8017388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d004      	beq.n	801739a <dhcp_parse_reply+0xde>
 8017390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	685b      	ldr	r3, [r3, #4]
 8017396:	781b      	ldrb	r3, [r3, #0]
 8017398:	e000      	b.n	801739c <dhcp_parse_reply+0xe0>
 801739a:	2300      	movs	r3, #0
 801739c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 80173a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80173a4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 80173a8:	7dfb      	ldrb	r3, [r7, #23]
 80173aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80173ac:	f200 8148 	bhi.w	8017640 <dhcp_parse_reply+0x384>
 80173b0:	a201      	add	r2, pc, #4	@ (adr r2, 80173b8 <dhcp_parse_reply+0xfc>)
 80173b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80173b6:	bf00      	nop
 80173b8:	080174a9 	.word	0x080174a9
 80173bc:	080174b9 	.word	0x080174b9
 80173c0:	08017641 	.word	0x08017641
 80173c4:	080174e1 	.word	0x080174e1
 80173c8:	08017641 	.word	0x08017641
 80173cc:	08017641 	.word	0x08017641
 80173d0:	08017641 	.word	0x08017641
 80173d4:	08017641 	.word	0x08017641
 80173d8:	08017641 	.word	0x08017641
 80173dc:	08017641 	.word	0x08017641
 80173e0:	08017641 	.word	0x08017641
 80173e4:	08017641 	.word	0x08017641
 80173e8:	08017641 	.word	0x08017641
 80173ec:	08017641 	.word	0x08017641
 80173f0:	08017641 	.word	0x08017641
 80173f4:	08017641 	.word	0x08017641
 80173f8:	08017641 	.word	0x08017641
 80173fc:	08017641 	.word	0x08017641
 8017400:	08017641 	.word	0x08017641
 8017404:	08017641 	.word	0x08017641
 8017408:	08017641 	.word	0x08017641
 801740c:	08017641 	.word	0x08017641
 8017410:	08017641 	.word	0x08017641
 8017414:	08017641 	.word	0x08017641
 8017418:	08017641 	.word	0x08017641
 801741c:	08017641 	.word	0x08017641
 8017420:	08017641 	.word	0x08017641
 8017424:	08017641 	.word	0x08017641
 8017428:	08017641 	.word	0x08017641
 801742c:	08017641 	.word	0x08017641
 8017430:	08017641 	.word	0x08017641
 8017434:	08017641 	.word	0x08017641
 8017438:	08017641 	.word	0x08017641
 801743c:	08017641 	.word	0x08017641
 8017440:	08017641 	.word	0x08017641
 8017444:	08017641 	.word	0x08017641
 8017448:	08017641 	.word	0x08017641
 801744c:	08017641 	.word	0x08017641
 8017450:	08017641 	.word	0x08017641
 8017454:	08017641 	.word	0x08017641
 8017458:	08017641 	.word	0x08017641
 801745c:	08017641 	.word	0x08017641
 8017460:	08017641 	.word	0x08017641
 8017464:	08017641 	.word	0x08017641
 8017468:	08017641 	.word	0x08017641
 801746c:	08017641 	.word	0x08017641
 8017470:	08017641 	.word	0x08017641
 8017474:	08017641 	.word	0x08017641
 8017478:	08017641 	.word	0x08017641
 801747c:	08017641 	.word	0x08017641
 8017480:	08017641 	.word	0x08017641
 8017484:	08017513 	.word	0x08017513
 8017488:	0801753b 	.word	0x0801753b
 801748c:	08017583 	.word	0x08017583
 8017490:	080175c9 	.word	0x080175c9
 8017494:	08017641 	.word	0x08017641
 8017498:	08017641 	.word	0x08017641
 801749c:	08017641 	.word	0x08017641
 80174a0:	080175f1 	.word	0x080175f1
 80174a4:	08017619 	.word	0x08017619
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 80174a8:	2300      	movs	r3, #0
 80174aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80174ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80174b2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 80174b6:	e0cf      	b.n	8017658 <dhcp_parse_reply+0x39c>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80174b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80174bc:	2b04      	cmp	r3, #4
 80174be:	d00c      	beq.n	80174da <dhcp_parse_reply+0x21e>
 80174c0:	4b3b      	ldr	r3, [pc, #236]	@ (80175b0 <dhcp_parse_reply+0x2f4>)
 80174c2:	f240 622e 	movw	r2, #1582	@ 0x62e
 80174c6:	493b      	ldr	r1, [pc, #236]	@ (80175b4 <dhcp_parse_reply+0x2f8>)
 80174c8:	483b      	ldr	r0, [pc, #236]	@ (80175b8 <dhcp_parse_reply+0x2fc>)
 80174ca:	f004 f92d 	bl	801b728 <iprintf>
 80174ce:	2000      	movs	r0, #0
 80174d0:	f004 f854 	bl	801b57c <fflush>
 80174d4:	f06f 0305 	mvn.w	r3, #5
 80174d8:	e20f      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80174da:	2306      	movs	r3, #6
 80174dc:	623b      	str	r3, [r7, #32]
        break;
 80174de:	e0bb      	b.n	8017658 <dhcp_parse_reply+0x39c>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80174e0:	2304      	movs	r3, #4
 80174e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80174e6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80174ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80174ee:	429a      	cmp	r2, r3
 80174f0:	d20c      	bcs.n	801750c <dhcp_parse_reply+0x250>
 80174f2:	4b2f      	ldr	r3, [pc, #188]	@ (80175b0 <dhcp_parse_reply+0x2f4>)
 80174f4:	f240 6233 	movw	r2, #1587	@ 0x633
 80174f8:	4930      	ldr	r1, [pc, #192]	@ (80175bc <dhcp_parse_reply+0x300>)
 80174fa:	482f      	ldr	r0, [pc, #188]	@ (80175b8 <dhcp_parse_reply+0x2fc>)
 80174fc:	f004 f914 	bl	801b728 <iprintf>
 8017500:	2000      	movs	r0, #0
 8017502:	f004 f83b 	bl	801b57c <fflush>
 8017506:	f06f 0305 	mvn.w	r3, #5
 801750a:	e1f6      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801750c:	2307      	movs	r3, #7
 801750e:	623b      	str	r3, [r7, #32]
        break;
 8017510:	e0a2      	b.n	8017658 <dhcp_parse_reply+0x39c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017512:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017516:	2b04      	cmp	r3, #4
 8017518:	d00c      	beq.n	8017534 <dhcp_parse_reply+0x278>
 801751a:	4b25      	ldr	r3, [pc, #148]	@ (80175b0 <dhcp_parse_reply+0x2f4>)
 801751c:	f240 6241 	movw	r2, #1601	@ 0x641
 8017520:	4924      	ldr	r1, [pc, #144]	@ (80175b4 <dhcp_parse_reply+0x2f8>)
 8017522:	4825      	ldr	r0, [pc, #148]	@ (80175b8 <dhcp_parse_reply+0x2fc>)
 8017524:	f004 f900 	bl	801b728 <iprintf>
 8017528:	2000      	movs	r0, #0
 801752a:	f004 f827 	bl	801b57c <fflush>
 801752e:	f06f 0305 	mvn.w	r3, #5
 8017532:	e1e2      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8017534:	2303      	movs	r3, #3
 8017536:	623b      	str	r3, [r7, #32]
        break;
 8017538:	e08e      	b.n	8017658 <dhcp_parse_reply+0x39c>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801753a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801753e:	2b01      	cmp	r3, #1
 8017540:	d00c      	beq.n	801755c <dhcp_parse_reply+0x2a0>
 8017542:	4b1b      	ldr	r3, [pc, #108]	@ (80175b0 <dhcp_parse_reply+0x2f4>)
 8017544:	f240 624f 	movw	r2, #1615	@ 0x64f
 8017548:	491d      	ldr	r1, [pc, #116]	@ (80175c0 <dhcp_parse_reply+0x304>)
 801754a:	481b      	ldr	r0, [pc, #108]	@ (80175b8 <dhcp_parse_reply+0x2fc>)
 801754c:	f004 f8ec 	bl	801b728 <iprintf>
 8017550:	2000      	movs	r0, #0
 8017552:	f004 f813 	bl	801b57c <fflush>
 8017556:	f06f 0305 	mvn.w	r3, #5
 801755a:	e1ce      	b.n	80178fa <dhcp_parse_reply+0x63e>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801755c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801755e:	2bf0      	cmp	r3, #240	@ 0xf0
 8017560:	d00c      	beq.n	801757c <dhcp_parse_reply+0x2c0>
 8017562:	4b13      	ldr	r3, [pc, #76]	@ (80175b0 <dhcp_parse_reply+0x2f4>)
 8017564:	f240 6251 	movw	r2, #1617	@ 0x651
 8017568:	4916      	ldr	r1, [pc, #88]	@ (80175c4 <dhcp_parse_reply+0x308>)
 801756a:	4813      	ldr	r0, [pc, #76]	@ (80175b8 <dhcp_parse_reply+0x2fc>)
 801756c:	f004 f8dc 	bl	801b728 <iprintf>
 8017570:	2000      	movs	r0, #0
 8017572:	f004 f803 	bl	801b57c <fflush>
 8017576:	f06f 0305 	mvn.w	r3, #5
 801757a:	e1be      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801757c:	2300      	movs	r3, #0
 801757e:	623b      	str	r3, [r7, #32]
        break;
 8017580:	e06a      	b.n	8017658 <dhcp_parse_reply+0x39c>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8017582:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017586:	2b01      	cmp	r3, #1
 8017588:	d00c      	beq.n	80175a4 <dhcp_parse_reply+0x2e8>
 801758a:	4b09      	ldr	r3, [pc, #36]	@ (80175b0 <dhcp_parse_reply+0x2f4>)
 801758c:	f240 6255 	movw	r2, #1621	@ 0x655
 8017590:	490b      	ldr	r1, [pc, #44]	@ (80175c0 <dhcp_parse_reply+0x304>)
 8017592:	4809      	ldr	r0, [pc, #36]	@ (80175b8 <dhcp_parse_reply+0x2fc>)
 8017594:	f004 f8c8 	bl	801b728 <iprintf>
 8017598:	2000      	movs	r0, #0
 801759a:	f003 ffef 	bl	801b57c <fflush>
 801759e:	f06f 0305 	mvn.w	r3, #5
 80175a2:	e1aa      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 80175a4:	2301      	movs	r3, #1
 80175a6:	623b      	str	r3, [r7, #32]
        break;
 80175a8:	e056      	b.n	8017658 <dhcp_parse_reply+0x39c>
 80175aa:	bf00      	nop
 80175ac:	20011e00 	.word	0x20011e00
 80175b0:	08021a3c 	.word	0x08021a3c
 80175b4:	08022710 	.word	0x08022710
 80175b8:	08021a9c 	.word	0x08021a9c
 80175bc:	0802271c 	.word	0x0802271c
 80175c0:	08022730 	.word	0x08022730
 80175c4:	0802273c 	.word	0x0802273c
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80175c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175cc:	2b04      	cmp	r3, #4
 80175ce:	d00c      	beq.n	80175ea <dhcp_parse_reply+0x32e>
 80175d0:	4ba3      	ldr	r3, [pc, #652]	@ (8017860 <dhcp_parse_reply+0x5a4>)
 80175d2:	f240 6259 	movw	r2, #1625	@ 0x659
 80175d6:	49a3      	ldr	r1, [pc, #652]	@ (8017864 <dhcp_parse_reply+0x5a8>)
 80175d8:	48a3      	ldr	r0, [pc, #652]	@ (8017868 <dhcp_parse_reply+0x5ac>)
 80175da:	f004 f8a5 	bl	801b728 <iprintf>
 80175de:	2000      	movs	r0, #0
 80175e0:	f003 ffcc 	bl	801b57c <fflush>
 80175e4:	f06f 0305 	mvn.w	r3, #5
 80175e8:	e187      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80175ea:	2302      	movs	r3, #2
 80175ec:	623b      	str	r3, [r7, #32]
        break;
 80175ee:	e033      	b.n	8017658 <dhcp_parse_reply+0x39c>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80175f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175f4:	2b04      	cmp	r3, #4
 80175f6:	d00c      	beq.n	8017612 <dhcp_parse_reply+0x356>
 80175f8:	4b99      	ldr	r3, [pc, #612]	@ (8017860 <dhcp_parse_reply+0x5a4>)
 80175fa:	f240 625d 	movw	r2, #1629	@ 0x65d
 80175fe:	4999      	ldr	r1, [pc, #612]	@ (8017864 <dhcp_parse_reply+0x5a8>)
 8017600:	4899      	ldr	r0, [pc, #612]	@ (8017868 <dhcp_parse_reply+0x5ac>)
 8017602:	f004 f891 	bl	801b728 <iprintf>
 8017606:	2000      	movs	r0, #0
 8017608:	f003 ffb8 	bl	801b57c <fflush>
 801760c:	f06f 0305 	mvn.w	r3, #5
 8017610:	e173      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_T1;
 8017612:	2304      	movs	r3, #4
 8017614:	623b      	str	r3, [r7, #32]
        break;
 8017616:	e01f      	b.n	8017658 <dhcp_parse_reply+0x39c>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8017618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801761c:	2b04      	cmp	r3, #4
 801761e:	d00c      	beq.n	801763a <dhcp_parse_reply+0x37e>
 8017620:	4b8f      	ldr	r3, [pc, #572]	@ (8017860 <dhcp_parse_reply+0x5a4>)
 8017622:	f240 6261 	movw	r2, #1633	@ 0x661
 8017626:	498f      	ldr	r1, [pc, #572]	@ (8017864 <dhcp_parse_reply+0x5a8>)
 8017628:	488f      	ldr	r0, [pc, #572]	@ (8017868 <dhcp_parse_reply+0x5ac>)
 801762a:	f004 f87d 	bl	801b728 <iprintf>
 801762e:	2000      	movs	r0, #0
 8017630:	f003 ffa4 	bl	801b57c <fflush>
 8017634:	f06f 0305 	mvn.w	r3, #5
 8017638:	e15f      	b.n	80178fa <dhcp_parse_reply+0x63e>
        decode_idx = DHCP_OPTION_IDX_T2;
 801763a:	2305      	movs	r3, #5
 801763c:	623b      	str	r3, [r7, #32]
        break;
 801763e:	e00b      	b.n	8017658 <dhcp_parse_reply+0x39c>
      default:
        decode_len = 0;
 8017640:	2300      	movs	r3, #0
 8017642:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
 8017646:	7dfb      	ldrb	r3, [r7, #23]
 8017648:	4619      	mov	r1, r3
 801764a:	4888      	ldr	r0, [pc, #544]	@ (801786c <dhcp_parse_reply+0x5b0>)
 801764c:	f004 f86c 	bl	801b728 <iprintf>
 8017650:	2000      	movs	r0, #0
 8017652:	f003 ff93 	bl	801b57c <fflush>
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8017656:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8017658:	7dfb      	ldrb	r3, [r7, #23]
 801765a:	2b00      	cmp	r3, #0
 801765c:	d103      	bne.n	8017666 <dhcp_parse_reply+0x3aa>
      offset++;
 801765e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017660:	3301      	adds	r3, #1
 8017662:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8017664:	e0aa      	b.n	80177bc <dhcp_parse_reply+0x500>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8017666:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8017668:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801766c:	4413      	add	r3, r2
 801766e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8017672:	4293      	cmp	r3, r2
 8017674:	dd02      	ble.n	801767c <dhcp_parse_reply+0x3c0>
        /* overflow */
        return ERR_BUF;
 8017676:	f06f 0301 	mvn.w	r3, #1
 801767a:	e13e      	b.n	80178fa <dhcp_parse_reply+0x63e>
      }
      offset = (u16_t)(offset + len + 2);
 801767c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017680:	b29a      	uxth	r2, r3
 8017682:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017684:	4413      	add	r3, r2
 8017686:	b29b      	uxth	r3, r3
 8017688:	3302      	adds	r3, #2
 801768a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801768c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017690:	2b00      	cmp	r3, #0
 8017692:	f000 8093 	beq.w	80177bc <dhcp_parse_reply+0x500>
        u32_t value = 0;
 8017696:	2300      	movs	r3, #0
 8017698:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801769a:	6a3b      	ldr	r3, [r7, #32]
 801769c:	2b00      	cmp	r3, #0
 801769e:	db02      	blt.n	80176a6 <dhcp_parse_reply+0x3ea>
 80176a0:	6a3b      	ldr	r3, [r7, #32]
 80176a2:	2b07      	cmp	r3, #7
 80176a4:	dd09      	ble.n	80176ba <dhcp_parse_reply+0x3fe>
 80176a6:	4b6e      	ldr	r3, [pc, #440]	@ (8017860 <dhcp_parse_reply+0x5a4>)
 80176a8:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 80176ac:	4970      	ldr	r1, [pc, #448]	@ (8017870 <dhcp_parse_reply+0x5b4>)
 80176ae:	486e      	ldr	r0, [pc, #440]	@ (8017868 <dhcp_parse_reply+0x5ac>)
 80176b0:	f004 f83a 	bl	801b728 <iprintf>
 80176b4:	2000      	movs	r0, #0
 80176b6:	f003 ff61 	bl	801b57c <fflush>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80176ba:	4a6e      	ldr	r2, [pc, #440]	@ (8017874 <dhcp_parse_reply+0x5b8>)
 80176bc:	6a3b      	ldr	r3, [r7, #32]
 80176be:	4413      	add	r3, r2
 80176c0:	781b      	ldrb	r3, [r3, #0]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d17a      	bne.n	80177bc <dhcp_parse_reply+0x500>
          copy_len = LWIP_MIN(decode_len, 4);
 80176c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80176ca:	2b04      	cmp	r3, #4
 80176cc:	bf28      	it	cs
 80176ce:	2304      	movcs	r3, #4
 80176d0:	b2db      	uxtb	r3, r3
 80176d2:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80176d4:	8bfb      	ldrh	r3, [r7, #30]
 80176d6:	8aba      	ldrh	r2, [r7, #20]
 80176d8:	f107 0108 	add.w	r1, r7, #8
 80176dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80176de:	f7f5 fb8d 	bl	800cdfc <pbuf_copy_partial>
 80176e2:	4603      	mov	r3, r0
 80176e4:	461a      	mov	r2, r3
 80176e6:	8abb      	ldrh	r3, [r7, #20]
 80176e8:	4293      	cmp	r3, r2
 80176ea:	d002      	beq.n	80176f2 <dhcp_parse_reply+0x436>
            return ERR_BUF;
 80176ec:	f06f 0301 	mvn.w	r3, #1
 80176f0:	e103      	b.n	80178fa <dhcp_parse_reply+0x63e>
          }
          if (decode_len > 4) {
 80176f2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80176f6:	2b04      	cmp	r3, #4
 80176f8:	d936      	bls.n	8017768 <dhcp_parse_reply+0x4ac>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80176fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80176fe:	f003 0303 	and.w	r3, r3, #3
 8017702:	b2db      	uxtb	r3, r3
 8017704:	2b00      	cmp	r3, #0
 8017706:	d00c      	beq.n	8017722 <dhcp_parse_reply+0x466>
 8017708:	4b55      	ldr	r3, [pc, #340]	@ (8017860 <dhcp_parse_reply+0x5a4>)
 801770a:	f240 6281 	movw	r2, #1665	@ 0x681
 801770e:	495a      	ldr	r1, [pc, #360]	@ (8017878 <dhcp_parse_reply+0x5bc>)
 8017710:	4855      	ldr	r0, [pc, #340]	@ (8017868 <dhcp_parse_reply+0x5ac>)
 8017712:	f004 f809 	bl	801b728 <iprintf>
 8017716:	2000      	movs	r0, #0
 8017718:	f003 ff30 	bl	801b57c <fflush>
 801771c:	f06f 0305 	mvn.w	r3, #5
 8017720:	e0eb      	b.n	80178fa <dhcp_parse_reply+0x63e>
            dhcp_got_option(dhcp, decode_idx);
 8017722:	4a54      	ldr	r2, [pc, #336]	@ (8017874 <dhcp_parse_reply+0x5b8>)
 8017724:	6a3b      	ldr	r3, [r7, #32]
 8017726:	4413      	add	r3, r2
 8017728:	2201      	movs	r2, #1
 801772a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801772c:	68bb      	ldr	r3, [r7, #8]
 801772e:	4618      	mov	r0, r3
 8017730:	f7f3 fab5 	bl	800ac9e <lwip_htonl>
 8017734:	4602      	mov	r2, r0
 8017736:	4951      	ldr	r1, [pc, #324]	@ (801787c <dhcp_parse_reply+0x5c0>)
 8017738:	6a3b      	ldr	r3, [r7, #32]
 801773a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801773e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017742:	3b04      	subs	r3, #4
 8017744:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8017748:	8bfb      	ldrh	r3, [r7, #30]
 801774a:	3304      	adds	r3, #4
 801774c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801774e:	8a7a      	ldrh	r2, [r7, #18]
 8017750:	8bfb      	ldrh	r3, [r7, #30]
 8017752:	429a      	cmp	r2, r3
 8017754:	d202      	bcs.n	801775c <dhcp_parse_reply+0x4a0>
              /* overflow */
              return ERR_BUF;
 8017756:	f06f 0301 	mvn.w	r3, #1
 801775a:	e0ce      	b.n	80178fa <dhcp_parse_reply+0x63e>
            }
            val_offset = next_val_offset;
 801775c:	8a7b      	ldrh	r3, [r7, #18]
 801775e:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8017760:	6a3b      	ldr	r3, [r7, #32]
 8017762:	3301      	adds	r3, #1
 8017764:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8017766:	e798      	b.n	801769a <dhcp_parse_reply+0x3de>
          } else if (decode_len == 4) {
 8017768:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801776c:	2b04      	cmp	r3, #4
 801776e:	d106      	bne.n	801777e <dhcp_parse_reply+0x4c2>
            value = lwip_ntohl(value);
 8017770:	68bb      	ldr	r3, [r7, #8]
 8017772:	4618      	mov	r0, r3
 8017774:	f7f3 fa93 	bl	800ac9e <lwip_htonl>
 8017778:	4603      	mov	r3, r0
 801777a:	60bb      	str	r3, [r7, #8]
 801777c:	e014      	b.n	80177a8 <dhcp_parse_reply+0x4ec>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801777e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8017782:	2b01      	cmp	r3, #1
 8017784:	d00c      	beq.n	80177a0 <dhcp_parse_reply+0x4e4>
 8017786:	4b36      	ldr	r3, [pc, #216]	@ (8017860 <dhcp_parse_reply+0x5a4>)
 8017788:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801778c:	493c      	ldr	r1, [pc, #240]	@ (8017880 <dhcp_parse_reply+0x5c4>)
 801778e:	4836      	ldr	r0, [pc, #216]	@ (8017868 <dhcp_parse_reply+0x5ac>)
 8017790:	f003 ffca 	bl	801b728 <iprintf>
 8017794:	2000      	movs	r0, #0
 8017796:	f003 fef1 	bl	801b57c <fflush>
 801779a:	f06f 0305 	mvn.w	r3, #5
 801779e:	e0ac      	b.n	80178fa <dhcp_parse_reply+0x63e>
            value = ((u8_t *)&value)[0];
 80177a0:	f107 0308 	add.w	r3, r7, #8
 80177a4:	781b      	ldrb	r3, [r3, #0]
 80177a6:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80177a8:	4a32      	ldr	r2, [pc, #200]	@ (8017874 <dhcp_parse_reply+0x5b8>)
 80177aa:	6a3b      	ldr	r3, [r7, #32]
 80177ac:	4413      	add	r3, r2
 80177ae:	2201      	movs	r2, #1
 80177b0:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80177b2:	68ba      	ldr	r2, [r7, #8]
 80177b4:	4931      	ldr	r1, [pc, #196]	@ (801787c <dhcp_parse_reply+0x5c0>)
 80177b6:	6a3b      	ldr	r3, [r7, #32]
 80177b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80177bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177be:	895b      	ldrh	r3, [r3, #10]
 80177c0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80177c2:	429a      	cmp	r2, r3
 80177c4:	d327      	bcc.n	8017816 <dhcp_parse_reply+0x55a>
      offset = (u16_t)(offset - q->len);
 80177c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177c8:	895b      	ldrh	r3, [r3, #10]
 80177ca:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80177cc:	1ad3      	subs	r3, r2, r3
 80177ce:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80177d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177d2:	895b      	ldrh	r3, [r3, #10]
 80177d4:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80177d6:	1ad3      	subs	r3, r2, r3
 80177d8:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 80177da:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80177dc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80177de:	429a      	cmp	r2, r3
 80177e0:	d216      	bcs.n	8017810 <dhcp_parse_reply+0x554>
        q = q->next;
 80177e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177e4:	681b      	ldr	r3, [r3, #0]
 80177e6:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80177e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80177ea:	2b00      	cmp	r3, #0
 80177ec:	d10c      	bne.n	8017808 <dhcp_parse_reply+0x54c>
 80177ee:	4b1c      	ldr	r3, [pc, #112]	@ (8017860 <dhcp_parse_reply+0x5a4>)
 80177f0:	f240 629d 	movw	r2, #1693	@ 0x69d
 80177f4:	4923      	ldr	r1, [pc, #140]	@ (8017884 <dhcp_parse_reply+0x5c8>)
 80177f6:	481c      	ldr	r0, [pc, #112]	@ (8017868 <dhcp_parse_reply+0x5ac>)
 80177f8:	f003 ff96 	bl	801b728 <iprintf>
 80177fc:	2000      	movs	r0, #0
 80177fe:	f003 febd 	bl	801b57c <fflush>
 8017802:	f06f 0305 	mvn.w	r3, #5
 8017806:	e078      	b.n	80178fa <dhcp_parse_reply+0x63e>
        options = (u8_t *)q->payload;
 8017808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801780e:	e002      	b.n	8017816 <dhcp_parse_reply+0x55a>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8017810:	f06f 0301 	mvn.w	r3, #1
 8017814:	e071      	b.n	80178fa <dhcp_parse_reply+0x63e>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8017816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017818:	2b00      	cmp	r3, #0
 801781a:	d00a      	beq.n	8017832 <dhcp_parse_reply+0x576>
 801781c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801781e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017820:	429a      	cmp	r2, r3
 8017822:	d206      	bcs.n	8017832 <dhcp_parse_reply+0x576>
 8017824:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8017826:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8017828:	4413      	add	r3, r2
 801782a:	781b      	ldrb	r3, [r3, #0]
 801782c:	2bff      	cmp	r3, #255	@ 0xff
 801782e:	f47f ad88 	bne.w	8017342 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8017832:	4b10      	ldr	r3, [pc, #64]	@ (8017874 <dhcp_parse_reply+0x5b8>)
 8017834:	781b      	ldrb	r3, [r3, #0]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d04a      	beq.n	80178d0 <dhcp_parse_reply+0x614>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801783a:	4b10      	ldr	r3, [pc, #64]	@ (801787c <dhcp_parse_reply+0x5c0>)
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8017840:	4b0c      	ldr	r3, [pc, #48]	@ (8017874 <dhcp_parse_reply+0x5b8>)
 8017842:	2200      	movs	r2, #0
 8017844:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8017846:	68fb      	ldr	r3, [r7, #12]
 8017848:	2b01      	cmp	r3, #1
 801784a:	d11f      	bne.n	801788c <dhcp_parse_reply+0x5d0>
      parse_file_as_options = 1;
 801784c:	2301      	movs	r3, #1
 801784e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
 8017850:	480d      	ldr	r0, [pc, #52]	@ (8017888 <dhcp_parse_reply+0x5cc>)
 8017852:	f003 ffd9 	bl	801b808 <puts>
 8017856:	2000      	movs	r0, #0
 8017858:	f003 fe90 	bl	801b57c <fflush>
 801785c:	e038      	b.n	80178d0 <dhcp_parse_reply+0x614>
 801785e:	bf00      	nop
 8017860:	08021a3c 	.word	0x08021a3c
 8017864:	08022710 	.word	0x08022710
 8017868:	08021a9c 	.word	0x08021a9c
 801786c:	08022754 	.word	0x08022754
 8017870:	08022774 	.word	0x08022774
 8017874:	20011e00 	.word	0x20011e00
 8017878:	08022788 	.word	0x08022788
 801787c:	20011de0 	.word	0x20011de0
 8017880:	080227a0 	.word	0x080227a0
 8017884:	080227b4 	.word	0x080227b4
 8017888:	080227c8 	.word	0x080227c8
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	2b02      	cmp	r3, #2
 8017890:	d108      	bne.n	80178a4 <dhcp_parse_reply+0x5e8>
      parse_sname_as_options = 1;
 8017892:	2301      	movs	r3, #1
 8017894:	62bb      	str	r3, [r7, #40]	@ 0x28
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
 8017896:	481b      	ldr	r0, [pc, #108]	@ (8017904 <dhcp_parse_reply+0x648>)
 8017898:	f003 ffb6 	bl	801b808 <puts>
 801789c:	2000      	movs	r0, #0
 801789e:	f003 fe6d 	bl	801b57c <fflush>
 80178a2:	e015      	b.n	80178d0 <dhcp_parse_reply+0x614>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 80178a4:	68fb      	ldr	r3, [r7, #12]
 80178a6:	2b03      	cmp	r3, #3
 80178a8:	d10a      	bne.n	80178c0 <dhcp_parse_reply+0x604>
      parse_sname_as_options = 1;
 80178aa:	2301      	movs	r3, #1
 80178ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 80178ae:	2301      	movs	r3, #1
 80178b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
 80178b2:	4815      	ldr	r0, [pc, #84]	@ (8017908 <dhcp_parse_reply+0x64c>)
 80178b4:	f003 ffa8 	bl	801b808 <puts>
 80178b8:	2000      	movs	r0, #0
 80178ba:	f003 fe5f 	bl	801b57c <fflush>
 80178be:	e007      	b.n	80178d0 <dhcp_parse_reply+0x614>
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	4619      	mov	r1, r3
 80178c4:	4811      	ldr	r0, [pc, #68]	@ (801790c <dhcp_parse_reply+0x650>)
 80178c6:	f003 ff2f 	bl	801b728 <iprintf>
 80178ca:	2000      	movs	r0, #0
 80178cc:	f003 fe56 	bl	801b57c <fflush>
    }
  }
  if (parse_file_as_options) {
 80178d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d006      	beq.n	80178e4 <dhcp_parse_reply+0x628>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 80178d6:	2300      	movs	r3, #0
 80178d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 80178da:	236c      	movs	r3, #108	@ 0x6c
 80178dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80178de:	23ec      	movs	r3, #236	@ 0xec
 80178e0:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80178e2:	e508      	b.n	80172f6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80178e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d006      	beq.n	80178f8 <dhcp_parse_reply+0x63c>
    parse_sname_as_options = 0;
 80178ea:	2300      	movs	r3, #0
 80178ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 80178ee:	232c      	movs	r3, #44	@ 0x2c
 80178f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80178f2:	236c      	movs	r3, #108	@ 0x6c
 80178f4:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 80178f6:	e4fe      	b.n	80172f6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80178f8:	2300      	movs	r3, #0
}
 80178fa:	4618      	mov	r0, r3
 80178fc:	3740      	adds	r7, #64	@ 0x40
 80178fe:	46bd      	mov	sp, r7
 8017900:	bd80      	pop	{r7, pc}
 8017902:	bf00      	nop
 8017904:	080227e0 	.word	0x080227e0
 8017908:	080227f8 	.word	0x080227f8
 801790c:	08022818 	.word	0x08022818

08017910 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017910:	b590      	push	{r4, r7, lr}
 8017912:	b08f      	sub	sp, #60	@ 0x3c
 8017914:	af04      	add	r7, sp, #16
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
 801791c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801791e:	4ba0      	ldr	r3, [pc, #640]	@ (8017ba0 <dhcp_recv+0x290>)
 8017920:	685b      	ldr	r3, [r3, #4]
 8017922:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8017924:	6a3b      	ldr	r3, [r7, #32]
 8017926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017928:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	685b      	ldr	r3, [r3, #4]
 801792e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8017930:	69fb      	ldr	r3, [r7, #28]
 8017932:	2b00      	cmp	r3, #0
 8017934:	f000 8129 	beq.w	8017b8a <dhcp_recv+0x27a>
 8017938:	69fb      	ldr	r3, [r7, #28]
 801793a:	791b      	ldrb	r3, [r3, #4]
 801793c:	2b00      	cmp	r3, #0
 801793e:	f000 8124 	beq.w	8017b8a <dhcp_recv+0x27a>
    goto free_pbuf_and_return;
  }

  LWIP_ASSERT("invalid server address type", IP_IS_V4(addr));

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_recv(pbuf = %p) from DHCP server %"U16_F".%"U16_F".%"U16_F".%"U16_F" port %"U16_F"\n", (void *)p,
 8017942:	683b      	ldr	r3, [r7, #0]
 8017944:	781b      	ldrb	r3, [r3, #0]
 8017946:	4618      	mov	r0, r3
 8017948:	683b      	ldr	r3, [r7, #0]
 801794a:	3301      	adds	r3, #1
 801794c:	781b      	ldrb	r3, [r3, #0]
 801794e:	461c      	mov	r4, r3
 8017950:	683b      	ldr	r3, [r7, #0]
 8017952:	3302      	adds	r3, #2
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	461a      	mov	r2, r3
 8017958:	683b      	ldr	r3, [r7, #0]
 801795a:	3303      	adds	r3, #3
 801795c:	781b      	ldrb	r3, [r3, #0]
 801795e:	4619      	mov	r1, r3
 8017960:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8017962:	9302      	str	r3, [sp, #8]
 8017964:	9101      	str	r1, [sp, #4]
 8017966:	9200      	str	r2, [sp, #0]
 8017968:	4623      	mov	r3, r4
 801796a:	4602      	mov	r2, r0
 801796c:	6879      	ldr	r1, [r7, #4]
 801796e:	488d      	ldr	r0, [pc, #564]	@ (8017ba4 <dhcp_recv+0x294>)
 8017970:	f003 feda 	bl	801b728 <iprintf>
 8017974:	2000      	movs	r0, #0
 8017976:	f003 fe01 	bl	801b57c <fflush>
              ip4_addr1_16(ip_2_ip4(addr)), ip4_addr2_16(ip_2_ip4(addr)), ip4_addr3_16(ip_2_ip4(addr)), ip4_addr4_16(ip_2_ip4(addr)), port));
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->len = %"U16_F"\n", p->len));
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	895b      	ldrh	r3, [r3, #10]
 801797e:	4619      	mov	r1, r3
 8017980:	4889      	ldr	r0, [pc, #548]	@ (8017ba8 <dhcp_recv+0x298>)
 8017982:	f003 fed1 	bl	801b728 <iprintf>
 8017986:	2000      	movs	r0, #0
 8017988:	f003 fdf8 	bl	801b57c <fflush>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("pbuf->tot_len = %"U16_F"\n", p->tot_len));
 801798c:	687b      	ldr	r3, [r7, #4]
 801798e:	891b      	ldrh	r3, [r3, #8]
 8017990:	4619      	mov	r1, r3
 8017992:	4886      	ldr	r0, [pc, #536]	@ (8017bac <dhcp_recv+0x29c>)
 8017994:	f003 fec8 	bl	801b728 <iprintf>
 8017998:	2000      	movs	r0, #0
 801799a:	f003 fdef 	bl	801b57c <fflush>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	895b      	ldrh	r3, [r3, #10]
 80179a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80179a4:	d806      	bhi.n	80179b4 <dhcp_recv+0xa4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
 80179a6:	4882      	ldr	r0, [pc, #520]	@ (8017bb0 <dhcp_recv+0x2a0>)
 80179a8:	f003 ff2e 	bl	801b808 <puts>
 80179ac:	2000      	movs	r0, #0
 80179ae:	f003 fde5 	bl	801b57c <fflush>
    goto free_pbuf_and_return;
 80179b2:	e0ed      	b.n	8017b90 <dhcp_recv+0x280>
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80179b4:	69bb      	ldr	r3, [r7, #24]
 80179b6:	781b      	ldrb	r3, [r3, #0]
 80179b8:	2b02      	cmp	r3, #2
 80179ba:	d009      	beq.n	80179d0 <dhcp_recv+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
 80179bc:	69bb      	ldr	r3, [r7, #24]
 80179be:	781b      	ldrb	r3, [r3, #0]
 80179c0:	4619      	mov	r1, r3
 80179c2:	487c      	ldr	r0, [pc, #496]	@ (8017bb4 <dhcp_recv+0x2a4>)
 80179c4:	f003 feb0 	bl	801b728 <iprintf>
 80179c8:	2000      	movs	r0, #0
 80179ca:	f003 fdd7 	bl	801b57c <fflush>
    goto free_pbuf_and_return;
 80179ce:	e0df      	b.n	8017b90 <dhcp_recv+0x280>
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80179d0:	2300      	movs	r3, #0
 80179d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80179d6:	e02b      	b.n	8017a30 <dhcp_recv+0x120>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80179d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179dc:	6a3a      	ldr	r2, [r7, #32]
 80179de:	4413      	add	r3, r2
 80179e0:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80179e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179e8:	69b9      	ldr	r1, [r7, #24]
 80179ea:	440b      	add	r3, r1
 80179ec:	7f1b      	ldrb	r3, [r3, #28]
 80179ee:	429a      	cmp	r2, r3
 80179f0:	d019      	beq.n	8017a26 <dhcp_recv+0x116>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 80179f2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80179f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179fa:	6a3a      	ldr	r2, [r7, #32]
 80179fc:	4413      	add	r3, r2
 80179fe:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8017a02:	461c      	mov	r4, r3
 8017a04:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8017a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a0c:	69ba      	ldr	r2, [r7, #24]
 8017a0e:	4413      	add	r3, r2
 8017a10:	7f1b      	ldrb	r3, [r3, #28]
 8017a12:	9300      	str	r3, [sp, #0]
 8017a14:	4603      	mov	r3, r0
 8017a16:	4622      	mov	r2, r4
 8017a18:	4867      	ldr	r0, [pc, #412]	@ (8017bb8 <dhcp_recv+0x2a8>)
 8017a1a:	f003 fe85 	bl	801b728 <iprintf>
 8017a1e:	2000      	movs	r0, #0
 8017a20:	f003 fdac 	bl	801b57c <fflush>
                  ("netif->hwaddr[%"U16_F"]==%02"X16_F" != reply_msg->chaddr[%"U16_F"]==%02"X16_F"\n",
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
 8017a24:	e0b4      	b.n	8017b90 <dhcp_recv+0x280>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017a26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a2a:	3301      	adds	r3, #1
 8017a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8017a30:	6a3b      	ldr	r3, [r7, #32]
 8017a32:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8017a36:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8017a3a:	429a      	cmp	r2, r3
 8017a3c:	d203      	bcs.n	8017a46 <dhcp_recv+0x136>
 8017a3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017a42:	2b05      	cmp	r3, #5
 8017a44:	d9c8      	bls.n	80179d8 <dhcp_recv+0xc8>
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8017a46:	69bb      	ldr	r3, [r7, #24]
 8017a48:	685b      	ldr	r3, [r3, #4]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7f3 f927 	bl	800ac9e <lwip_htonl>
 8017a50:	4602      	mov	r2, r0
 8017a52:	69fb      	ldr	r3, [r7, #28]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	429a      	cmp	r2, r3
 8017a58:	d00f      	beq.n	8017a7a <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8017a5a:	69bb      	ldr	r3, [r7, #24]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7f3 f91d 	bl	800ac9e <lwip_htonl>
 8017a64:	4601      	mov	r1, r0
 8017a66:	69fb      	ldr	r3, [r7, #28]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	461a      	mov	r2, r3
 8017a6c:	4853      	ldr	r0, [pc, #332]	@ (8017bbc <dhcp_recv+0x2ac>)
 8017a6e:	f003 fe5b 	bl	801b728 <iprintf>
 8017a72:	2000      	movs	r0, #0
 8017a74:	f003 fd82 	bl	801b57c <fflush>
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
 8017a78:	e08a      	b.n	8017b90 <dhcp_recv+0x280>
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8017a7a:	69f9      	ldr	r1, [r7, #28]
 8017a7c:	6878      	ldr	r0, [r7, #4]
 8017a7e:	f7ff fc1d 	bl	80172bc <dhcp_parse_reply>
 8017a82:	4603      	mov	r3, r0
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d006      	beq.n	8017a96 <dhcp_recv+0x186>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8017a88:	484d      	ldr	r0, [pc, #308]	@ (8017bc0 <dhcp_recv+0x2b0>)
 8017a8a:	f003 febd 	bl	801b808 <puts>
 8017a8e:	2000      	movs	r0, #0
 8017a90:	f003 fd74 	bl	801b57c <fflush>
                ("problem unfolding DHCP message - too short on memory?\n"));
    goto free_pbuf_and_return;
 8017a94:	e07c      	b.n	8017b90 <dhcp_recv+0x280>
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
 8017a96:	484b      	ldr	r0, [pc, #300]	@ (8017bc4 <dhcp_recv+0x2b4>)
 8017a98:	f003 feb6 	bl	801b808 <puts>
 8017a9c:	2000      	movs	r0, #0
 8017a9e:	f003 fd6d 	bl	801b57c <fflush>
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8017aa2:	4b49      	ldr	r3, [pc, #292]	@ (8017bc8 <dhcp_recv+0x2b8>)
 8017aa4:	785b      	ldrb	r3, [r3, #1]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d106      	bne.n	8017ab8 <dhcp_recv+0x1a8>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
 8017aaa:	4848      	ldr	r0, [pc, #288]	@ (8017bcc <dhcp_recv+0x2bc>)
 8017aac:	f003 feac 	bl	801b808 <puts>
 8017ab0:	2000      	movs	r0, #0
 8017ab2:	f003 fd63 	bl	801b57c <fflush>
    goto free_pbuf_and_return;
 8017ab6:	e06b      	b.n	8017b90 <dhcp_recv+0x280>
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	685b      	ldr	r3, [r3, #4]
 8017abc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8017abe:	4b44      	ldr	r3, [pc, #272]	@ (8017bd0 <dhcp_recv+0x2c0>)
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8017ac4:	7cfb      	ldrb	r3, [r7, #19]
 8017ac6:	2b05      	cmp	r3, #5
 8017ac8:	d130      	bne.n	8017b2c <dhcp_recv+0x21c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
 8017aca:	4842      	ldr	r0, [pc, #264]	@ (8017bd4 <dhcp_recv+0x2c4>)
 8017acc:	f003 fe9c 	bl	801b808 <puts>
 8017ad0:	2000      	movs	r0, #0
 8017ad2:	f003 fd53 	bl	801b57c <fflush>
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8017ad6:	69fb      	ldr	r3, [r7, #28]
 8017ad8:	795b      	ldrb	r3, [r3, #5]
 8017ada:	2b01      	cmp	r3, #1
 8017adc:	d112      	bne.n	8017b04 <dhcp_recv+0x1f4>
      dhcp_handle_ack(netif, msg_in);
 8017ade:	6979      	ldr	r1, [r7, #20]
 8017ae0:	6a38      	ldr	r0, [r7, #32]
 8017ae2:	f7fe fb7d 	bl	80161e0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8017ae6:	6a3b      	ldr	r3, [r7, #32]
 8017ae8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8017aec:	f003 0308 	and.w	r3, r3, #8
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	d003      	beq.n	8017afc <dhcp_recv+0x1ec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8017af4:	6a38      	ldr	r0, [r7, #32]
 8017af6:	f7fd ffeb 	bl	8015ad0 <dhcp_check>
 8017afa:	e049      	b.n	8017b90 <dhcp_recv+0x280>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8017afc:	6a38      	ldr	r0, [r7, #32]
 8017afe:	f7fe fe99 	bl	8016834 <dhcp_bind>
 8017b02:	e045      	b.n	8017b90 <dhcp_recv+0x280>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017b04:	69fb      	ldr	r3, [r7, #28]
 8017b06:	795b      	ldrb	r3, [r3, #5]
 8017b08:	2b03      	cmp	r3, #3
 8017b0a:	d007      	beq.n	8017b1c <dhcp_recv+0x20c>
 8017b0c:	69fb      	ldr	r3, [r7, #28]
 8017b0e:	795b      	ldrb	r3, [r3, #5]
 8017b10:	2b04      	cmp	r3, #4
 8017b12:	d003      	beq.n	8017b1c <dhcp_recv+0x20c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8017b14:	69fb      	ldr	r3, [r7, #28]
 8017b16:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8017b18:	2b05      	cmp	r3, #5
 8017b1a:	d139      	bne.n	8017b90 <dhcp_recv+0x280>
      dhcp_handle_ack(netif, msg_in);
 8017b1c:	6979      	ldr	r1, [r7, #20]
 8017b1e:	6a38      	ldr	r0, [r7, #32]
 8017b20:	f7fe fb5e 	bl	80161e0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8017b24:	6a38      	ldr	r0, [r7, #32]
 8017b26:	f7fe fe85 	bl	8016834 <dhcp_bind>
 8017b2a:	e031      	b.n	8017b90 <dhcp_recv+0x280>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8017b2c:	7cfb      	ldrb	r3, [r7, #19]
 8017b2e:	2b06      	cmp	r3, #6
 8017b30:	d119      	bne.n	8017b66 <dhcp_recv+0x256>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017b32:	69fb      	ldr	r3, [r7, #28]
 8017b34:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8017b36:	2b03      	cmp	r3, #3
 8017b38:	d00b      	beq.n	8017b52 <dhcp_recv+0x242>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017b3a:	69fb      	ldr	r3, [r7, #28]
 8017b3c:	795b      	ldrb	r3, [r3, #5]
 8017b3e:	2b01      	cmp	r3, #1
 8017b40:	d007      	beq.n	8017b52 <dhcp_recv+0x242>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017b42:	69fb      	ldr	r3, [r7, #28]
 8017b44:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8017b46:	2b04      	cmp	r3, #4
 8017b48:	d003      	beq.n	8017b52 <dhcp_recv+0x242>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8017b4a:	69fb      	ldr	r3, [r7, #28]
 8017b4c:	795b      	ldrb	r3, [r3, #5]
 8017b4e:	2b05      	cmp	r3, #5
 8017b50:	d109      	bne.n	8017b66 <dhcp_recv+0x256>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
 8017b52:	4821      	ldr	r0, [pc, #132]	@ (8017bd8 <dhcp_recv+0x2c8>)
 8017b54:	f003 fe58 	bl	801b808 <puts>
 8017b58:	2000      	movs	r0, #0
 8017b5a:	f003 fd0f 	bl	801b57c <fflush>
    dhcp_handle_nak(netif);
 8017b5e:	6a38      	ldr	r0, [r7, #32]
 8017b60:	f7fd ff86 	bl	8015a70 <dhcp_handle_nak>
 8017b64:	e014      	b.n	8017b90 <dhcp_recv+0x280>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8017b66:	7cfb      	ldrb	r3, [r7, #19]
 8017b68:	2b02      	cmp	r3, #2
 8017b6a:	d110      	bne.n	8017b8e <dhcp_recv+0x27e>
 8017b6c:	69fb      	ldr	r3, [r7, #28]
 8017b6e:	795b      	ldrb	r3, [r3, #5]
 8017b70:	2b06      	cmp	r3, #6
 8017b72:	d10c      	bne.n	8017b8e <dhcp_recv+0x27e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
 8017b74:	4819      	ldr	r0, [pc, #100]	@ (8017bdc <dhcp_recv+0x2cc>)
 8017b76:	f003 fe47 	bl	801b808 <puts>
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	f003 fcfe 	bl	801b57c <fflush>
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8017b80:	6979      	ldr	r1, [r7, #20]
 8017b82:	6a38      	ldr	r0, [r7, #32]
 8017b84:	f7fd fffe 	bl	8015b84 <dhcp_handle_offer>
 8017b88:	e002      	b.n	8017b90 <dhcp_recv+0x280>
    goto free_pbuf_and_return;
 8017b8a:	bf00      	nop
 8017b8c:	e000      	b.n	8017b90 <dhcp_recv+0x280>
  }

free_pbuf_and_return:
 8017b8e:	bf00      	nop
  pbuf_free(p);
 8017b90:	6878      	ldr	r0, [r7, #4]
 8017b92:	f7f4 fec3 	bl	800c91c <pbuf_free>
}
 8017b96:	bf00      	nop
 8017b98:	372c      	adds	r7, #44	@ 0x2c
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd90      	pop	{r4, r7, pc}
 8017b9e:	bf00      	nop
 8017ba0:	2000c0e8 	.word	0x2000c0e8
 8017ba4:	08022838 	.word	0x08022838
 8017ba8:	08022878 	.word	0x08022878
 8017bac:	0802288c 	.word	0x0802288c
 8017bb0:	080228a4 	.word	0x080228a4
 8017bb4:	080228cc 	.word	0x080228cc
 8017bb8:	080228f4 	.word	0x080228f4
 8017bbc:	08022930 	.word	0x08022930
 8017bc0:	08022970 	.word	0x08022970
 8017bc4:	080229a8 	.word	0x080229a8
 8017bc8:	20011e00 	.word	0x20011e00
 8017bcc:	080229cc 	.word	0x080229cc
 8017bd0:	20011de0 	.word	0x20011de0
 8017bd4:	080229f8 	.word	0x080229f8
 8017bd8:	08022a0c 	.word	0x08022a0c
 8017bdc:	08022a20 	.word	0x08022a20

08017be0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b088      	sub	sp, #32
 8017be4:	af00      	add	r7, sp, #0
 8017be6:	60f8      	str	r0, [r7, #12]
 8017be8:	60b9      	str	r1, [r7, #8]
 8017bea:	603b      	str	r3, [r7, #0]
 8017bec:	4613      	mov	r3, r2
 8017bee:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d10b      	bne.n	8017c0e <dhcp_create_msg+0x2e>
 8017bf6:	4b6b      	ldr	r3, [pc, #428]	@ (8017da4 <dhcp_create_msg+0x1c4>)
 8017bf8:	f240 7269 	movw	r2, #1897	@ 0x769
 8017bfc:	496a      	ldr	r1, [pc, #424]	@ (8017da8 <dhcp_create_msg+0x1c8>)
 8017bfe:	486b      	ldr	r0, [pc, #428]	@ (8017dac <dhcp_create_msg+0x1cc>)
 8017c00:	f003 fd92 	bl	801b728 <iprintf>
 8017c04:	2000      	movs	r0, #0
 8017c06:	f003 fcb9 	bl	801b57c <fflush>
 8017c0a:	2300      	movs	r3, #0
 8017c0c:	e0c6      	b.n	8017d9c <dhcp_create_msg+0x1bc>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8017c0e:	68bb      	ldr	r3, [r7, #8]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d10b      	bne.n	8017c2c <dhcp_create_msg+0x4c>
 8017c14:	4b63      	ldr	r3, [pc, #396]	@ (8017da4 <dhcp_create_msg+0x1c4>)
 8017c16:	f240 726a 	movw	r2, #1898	@ 0x76a
 8017c1a:	4965      	ldr	r1, [pc, #404]	@ (8017db0 <dhcp_create_msg+0x1d0>)
 8017c1c:	4863      	ldr	r0, [pc, #396]	@ (8017dac <dhcp_create_msg+0x1cc>)
 8017c1e:	f003 fd83 	bl	801b728 <iprintf>
 8017c22:	2000      	movs	r0, #0
 8017c24:	f003 fcaa 	bl	801b57c <fflush>
 8017c28:	2300      	movs	r3, #0
 8017c2a:	e0b7      	b.n	8017d9c <dhcp_create_msg+0x1bc>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8017c2c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017c30:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8017c34:	2036      	movs	r0, #54	@ 0x36
 8017c36:	f7f4 fb0b 	bl	800c250 <pbuf_alloc>
 8017c3a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8017c3c:	69bb      	ldr	r3, [r7, #24]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d107      	bne.n	8017c52 <dhcp_create_msg+0x72>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8017c42:	485c      	ldr	r0, [pc, #368]	@ (8017db4 <dhcp_create_msg+0x1d4>)
 8017c44:	f003 fde0 	bl	801b808 <puts>
 8017c48:	2000      	movs	r0, #0
 8017c4a:	f003 fc97 	bl	801b57c <fflush>
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	e0a4      	b.n	8017d9c <dhcp_create_msg+0x1bc>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8017c52:	69bb      	ldr	r3, [r7, #24]
 8017c54:	895b      	ldrh	r3, [r3, #10]
 8017c56:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 8017c5a:	d209      	bcs.n	8017c70 <dhcp_create_msg+0x90>
 8017c5c:	4b51      	ldr	r3, [pc, #324]	@ (8017da4 <dhcp_create_msg+0x1c4>)
 8017c5e:	f240 7271 	movw	r2, #1905	@ 0x771
 8017c62:	4955      	ldr	r1, [pc, #340]	@ (8017db8 <dhcp_create_msg+0x1d8>)
 8017c64:	4851      	ldr	r0, [pc, #324]	@ (8017dac <dhcp_create_msg+0x1cc>)
 8017c66:	f003 fd5f 	bl	801b728 <iprintf>
 8017c6a:	2000      	movs	r0, #0
 8017c6c:	f003 fc86 	bl	801b57c <fflush>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8017c70:	79fb      	ldrb	r3, [r7, #7]
 8017c72:	2b03      	cmp	r3, #3
 8017c74:	d103      	bne.n	8017c7e <dhcp_create_msg+0x9e>
 8017c76:	68bb      	ldr	r3, [r7, #8]
 8017c78:	795b      	ldrb	r3, [r3, #5]
 8017c7a:	2b03      	cmp	r3, #3
 8017c7c:	d10d      	bne.n	8017c9a <dhcp_create_msg+0xba>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8017c7e:	68bb      	ldr	r3, [r7, #8]
 8017c80:	799b      	ldrb	r3, [r3, #6]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d105      	bne.n	8017c92 <dhcp_create_msg+0xb2>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8017c86:	f003 fb8f 	bl	801b3a8 <rand>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	4b4b      	ldr	r3, [pc, #300]	@ (8017dbc <dhcp_create_msg+0x1dc>)
 8017c90:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8017c92:	4b4a      	ldr	r3, [pc, #296]	@ (8017dbc <dhcp_create_msg+0x1dc>)
 8017c94:	681a      	ldr	r2, [r3, #0]
 8017c96:	68bb      	ldr	r3, [r7, #8]
 8017c98:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
 8017c9a:	4b48      	ldr	r3, [pc, #288]	@ (8017dbc <dhcp_create_msg+0x1dc>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	4619      	mov	r1, r3
 8017ca0:	4847      	ldr	r0, [pc, #284]	@ (8017dc0 <dhcp_create_msg+0x1e0>)
 8017ca2:	f003 fd41 	bl	801b728 <iprintf>
 8017ca6:	2000      	movs	r0, #0
 8017ca8:	f003 fc68 	bl	801b57c <fflush>
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8017cac:	69bb      	ldr	r3, [r7, #24]
 8017cae:	685b      	ldr	r3, [r3, #4]
 8017cb0:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8017cb2:	f44f 729a 	mov.w	r2, #308	@ 0x134
 8017cb6:	2100      	movs	r1, #0
 8017cb8:	6978      	ldr	r0, [r7, #20]
 8017cba:	f003 fe95 	bl	801b9e8 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8017cbe:	697b      	ldr	r3, [r7, #20]
 8017cc0:	2201      	movs	r2, #1
 8017cc2:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8017cc4:	697b      	ldr	r3, [r7, #20]
 8017cc6:	2201      	movs	r2, #1
 8017cc8:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 8017cd0:	697b      	ldr	r3, [r7, #20]
 8017cd2:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8017cd4:	68bb      	ldr	r3, [r7, #8]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	4618      	mov	r0, r3
 8017cda:	f7f2 ffe0 	bl	800ac9e <lwip_htonl>
 8017cde:	4602      	mov	r2, r0
 8017ce0:	697b      	ldr	r3, [r7, #20]
 8017ce2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8017ce4:	79fb      	ldrb	r3, [r7, #7]
 8017ce6:	2b08      	cmp	r3, #8
 8017ce8:	d010      	beq.n	8017d0c <dhcp_create_msg+0x12c>
 8017cea:	79fb      	ldrb	r3, [r7, #7]
 8017cec:	2b04      	cmp	r3, #4
 8017cee:	d00d      	beq.n	8017d0c <dhcp_create_msg+0x12c>
 8017cf0:	79fb      	ldrb	r3, [r7, #7]
 8017cf2:	2b07      	cmp	r3, #7
 8017cf4:	d00a      	beq.n	8017d0c <dhcp_create_msg+0x12c>
 8017cf6:	79fb      	ldrb	r3, [r7, #7]
 8017cf8:	2b03      	cmp	r3, #3
 8017cfa:	d10c      	bne.n	8017d16 <dhcp_create_msg+0x136>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017cfc:	68bb      	ldr	r3, [r7, #8]
 8017cfe:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8017d00:	2b05      	cmp	r3, #5
 8017d02:	d003      	beq.n	8017d0c <dhcp_create_msg+0x12c>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8017d04:	68bb      	ldr	r3, [r7, #8]
 8017d06:	795b      	ldrb	r3, [r3, #5]
 8017d08:	2b04      	cmp	r3, #4
 8017d0a:	d104      	bne.n	8017d16 <dhcp_create_msg+0x136>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	3304      	adds	r3, #4
 8017d10:	681a      	ldr	r2, [r3, #0]
 8017d12:	697b      	ldr	r3, [r7, #20]
 8017d14:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017d16:	2300      	movs	r3, #0
 8017d18:	83fb      	strh	r3, [r7, #30]
 8017d1a:	e00c      	b.n	8017d36 <dhcp_create_msg+0x156>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8017d1c:	8bfa      	ldrh	r2, [r7, #30]
 8017d1e:	8bfb      	ldrh	r3, [r7, #30]
 8017d20:	68f9      	ldr	r1, [r7, #12]
 8017d22:	440a      	add	r2, r1
 8017d24:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 8017d28:	697a      	ldr	r2, [r7, #20]
 8017d2a:	4413      	add	r3, r2
 8017d2c:	460a      	mov	r2, r1
 8017d2e:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8017d30:	8bfb      	ldrh	r3, [r7, #30]
 8017d32:	3301      	adds	r3, #1
 8017d34:	83fb      	strh	r3, [r7, #30]
 8017d36:	8bfb      	ldrh	r3, [r7, #30]
 8017d38:	2b05      	cmp	r3, #5
 8017d3a:	d9ef      	bls.n	8017d1c <dhcp_create_msg+0x13c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8017d3c:	697b      	ldr	r3, [r7, #20]
 8017d3e:	2200      	movs	r2, #0
 8017d40:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017d44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8017d48:	2200      	movs	r2, #0
 8017d4a:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 8017d4e:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 8017d52:	2200      	movs	r2, #0
 8017d54:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 8017d58:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 8017d62:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8017d66:	697b      	ldr	r3, [r7, #20]
 8017d68:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	2235      	movs	r2, #53	@ 0x35
 8017d70:	2000      	movs	r0, #0
 8017d72:	f7ff f9c5 	bl	8017100 <dhcp_option>
 8017d76:	4603      	mov	r3, r0
 8017d78:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8017d7a:	697b      	ldr	r3, [r7, #20]
 8017d7c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8017d80:	79fa      	ldrb	r2, [r7, #7]
 8017d82:	8a7b      	ldrh	r3, [r7, #18]
 8017d84:	4618      	mov	r0, r3
 8017d86:	f7ff f9f3 	bl	8017170 <dhcp_option_byte>
 8017d8a:	4603      	mov	r3, r0
 8017d8c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8017d8e:	683b      	ldr	r3, [r7, #0]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d002      	beq.n	8017d9a <dhcp_create_msg+0x1ba>
    *options_out_len = options_out_len_loc;
 8017d94:	683b      	ldr	r3, [r7, #0]
 8017d96:	8a7a      	ldrh	r2, [r7, #18]
 8017d98:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8017d9a:	69bb      	ldr	r3, [r7, #24]
}
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	3720      	adds	r7, #32
 8017da0:	46bd      	mov	sp, r7
 8017da2:	bd80      	pop	{r7, pc}
 8017da4:	08021a3c 	.word	0x08021a3c
 8017da8:	08022a54 	.word	0x08022a54
 8017dac:	08021a9c 	.word	0x08021a9c
 8017db0:	08022a74 	.word	0x08022a74
 8017db4:	08022a94 	.word	0x08022a94
 8017db8:	08022ac0 	.word	0x08022ac0
 8017dbc:	20011e10 	.word	0x20011e10
 8017dc0:	08022b00 	.word	0x08022b00

08017dc4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8017dc4:	b580      	push	{r7, lr}
 8017dc6:	b084      	sub	sp, #16
 8017dc8:	af00      	add	r7, sp, #0
 8017dca:	4603      	mov	r3, r0
 8017dcc:	60b9      	str	r1, [r7, #8]
 8017dce:	607a      	str	r2, [r7, #4]
 8017dd0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8017dd2:	89fb      	ldrh	r3, [r7, #14]
 8017dd4:	1c5a      	adds	r2, r3, #1
 8017dd6:	81fa      	strh	r2, [r7, #14]
 8017dd8:	461a      	mov	r2, r3
 8017dda:	68bb      	ldr	r3, [r7, #8]
 8017ddc:	4413      	add	r3, r2
 8017dde:	22ff      	movs	r2, #255	@ 0xff
 8017de0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017de2:	e007      	b.n	8017df4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8017de4:	89fb      	ldrh	r3, [r7, #14]
 8017de6:	1c5a      	adds	r2, r3, #1
 8017de8:	81fa      	strh	r2, [r7, #14]
 8017dea:	461a      	mov	r2, r3
 8017dec:	68bb      	ldr	r3, [r7, #8]
 8017dee:	4413      	add	r3, r2
 8017df0:	2200      	movs	r2, #0
 8017df2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8017df4:	89fb      	ldrh	r3, [r7, #14]
 8017df6:	2b43      	cmp	r3, #67	@ 0x43
 8017df8:	d904      	bls.n	8017e04 <dhcp_option_trailer+0x40>
 8017dfa:	89fb      	ldrh	r3, [r7, #14]
 8017dfc:	f003 0303 	and.w	r3, r3, #3
 8017e00:	2b00      	cmp	r3, #0
 8017e02:	d002      	beq.n	8017e0a <dhcp_option_trailer+0x46>
 8017e04:	89fb      	ldrh	r3, [r7, #14]
 8017e06:	2b43      	cmp	r3, #67	@ 0x43
 8017e08:	d9ec      	bls.n	8017de4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8017e0a:	89fb      	ldrh	r3, [r7, #14]
 8017e0c:	33f0      	adds	r3, #240	@ 0xf0
 8017e0e:	b29b      	uxth	r3, r3
 8017e10:	4619      	mov	r1, r3
 8017e12:	6878      	ldr	r0, [r7, #4]
 8017e14:	f7f4 fbc6 	bl	800c5a4 <pbuf_realloc>
}
 8017e18:	bf00      	nop
 8017e1a:	3710      	adds	r7, #16
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	bd80      	pop	{r7, pc}

08017e20 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8017e20:	b480      	push	{r7}
 8017e22:	b085      	sub	sp, #20
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d017      	beq.n	8017e5e <dhcp_supplied_address+0x3e>
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d013      	beq.n	8017e5e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017e3a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	795b      	ldrb	r3, [r3, #5]
 8017e40:	2b0a      	cmp	r3, #10
 8017e42:	d007      	beq.n	8017e54 <dhcp_supplied_address+0x34>
 8017e44:	68fb      	ldr	r3, [r7, #12]
 8017e46:	795b      	ldrb	r3, [r3, #5]
 8017e48:	2b05      	cmp	r3, #5
 8017e4a:	d003      	beq.n	8017e54 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8017e50:	2b04      	cmp	r3, #4
 8017e52:	d101      	bne.n	8017e58 <dhcp_supplied_address+0x38>
 8017e54:	2301      	movs	r3, #1
 8017e56:	e000      	b.n	8017e5a <dhcp_supplied_address+0x3a>
 8017e58:	2300      	movs	r3, #0
 8017e5a:	b2db      	uxtb	r3, r3
 8017e5c:	e000      	b.n	8017e60 <dhcp_supplied_address+0x40>
  }
  return 0;
 8017e5e:	2300      	movs	r3, #0
}
 8017e60:	4618      	mov	r0, r3
 8017e62:	3714      	adds	r7, #20
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b082      	sub	sp, #8
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017e74:	4935      	ldr	r1, [pc, #212]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017e76:	687a      	ldr	r2, [r7, #4]
 8017e78:	4613      	mov	r3, r2
 8017e7a:	005b      	lsls	r3, r3, #1
 8017e7c:	4413      	add	r3, r2
 8017e7e:	00db      	lsls	r3, r3, #3
 8017e80:	440b      	add	r3, r1
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d026      	beq.n	8017ed6 <etharp_free_entry+0x6a>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	b29b      	uxth	r3, r3
 8017e8c:	4618      	mov	r0, r3
 8017e8e:	492f      	ldr	r1, [pc, #188]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017e90:	687a      	ldr	r2, [r7, #4]
 8017e92:	4613      	mov	r3, r2
 8017e94:	005b      	lsls	r3, r3, #1
 8017e96:	4413      	add	r3, r2
 8017e98:	00db      	lsls	r3, r3, #3
 8017e9a:	440b      	add	r3, r1
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	461a      	mov	r2, r3
 8017ea0:	4601      	mov	r1, r0
 8017ea2:	482b      	ldr	r0, [pc, #172]	@ (8017f50 <etharp_free_entry+0xe4>)
 8017ea4:	f003 fc40 	bl	801b728 <iprintf>
 8017ea8:	2000      	movs	r0, #0
 8017eaa:	f003 fb67 	bl	801b57c <fflush>
    free_etharp_q(arp_table[i].q);
 8017eae:	4927      	ldr	r1, [pc, #156]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017eb0:	687a      	ldr	r2, [r7, #4]
 8017eb2:	4613      	mov	r3, r2
 8017eb4:	005b      	lsls	r3, r3, #1
 8017eb6:	4413      	add	r3, r2
 8017eb8:	00db      	lsls	r3, r3, #3
 8017eba:	440b      	add	r3, r1
 8017ebc:	681b      	ldr	r3, [r3, #0]
 8017ebe:	4618      	mov	r0, r3
 8017ec0:	f7f4 fd2c 	bl	800c91c <pbuf_free>
    arp_table[i].q = NULL;
 8017ec4:	4921      	ldr	r1, [pc, #132]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017ec6:	687a      	ldr	r2, [r7, #4]
 8017ec8:	4613      	mov	r3, r2
 8017eca:	005b      	lsls	r3, r3, #1
 8017ecc:	4413      	add	r3, r2
 8017ece:	00db      	lsls	r3, r3, #3
 8017ed0:	440b      	add	r3, r1
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017ed6:	491d      	ldr	r1, [pc, #116]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017ed8:	687a      	ldr	r2, [r7, #4]
 8017eda:	4613      	mov	r3, r2
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	4413      	add	r3, r2
 8017ee0:	00db      	lsls	r3, r3, #3
 8017ee2:	440b      	add	r3, r1
 8017ee4:	3314      	adds	r3, #20
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	701a      	strb	r2, [r3, #0]
#ifdef LWIP_DEBUG
  /* for debugging, clean out the complete entry */
  arp_table[i].ctime = 0;
 8017eea:	4918      	ldr	r1, [pc, #96]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017eec:	687a      	ldr	r2, [r7, #4]
 8017eee:	4613      	mov	r3, r2
 8017ef0:	005b      	lsls	r3, r3, #1
 8017ef2:	4413      	add	r3, r2
 8017ef4:	00db      	lsls	r3, r3, #3
 8017ef6:	440b      	add	r3, r1
 8017ef8:	3312      	adds	r3, #18
 8017efa:	2200      	movs	r2, #0
 8017efc:	801a      	strh	r2, [r3, #0]
  arp_table[i].netif = NULL;
 8017efe:	4913      	ldr	r1, [pc, #76]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017f00:	687a      	ldr	r2, [r7, #4]
 8017f02:	4613      	mov	r3, r2
 8017f04:	005b      	lsls	r3, r3, #1
 8017f06:	4413      	add	r3, r2
 8017f08:	00db      	lsls	r3, r3, #3
 8017f0a:	440b      	add	r3, r1
 8017f0c:	3308      	adds	r3, #8
 8017f0e:	2200      	movs	r2, #0
 8017f10:	601a      	str	r2, [r3, #0]
  ip4_addr_set_zero(&arp_table[i].ipaddr);
 8017f12:	490e      	ldr	r1, [pc, #56]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017f14:	687a      	ldr	r2, [r7, #4]
 8017f16:	4613      	mov	r3, r2
 8017f18:	005b      	lsls	r3, r3, #1
 8017f1a:	4413      	add	r3, r2
 8017f1c:	00db      	lsls	r3, r3, #3
 8017f1e:	440b      	add	r3, r1
 8017f20:	3304      	adds	r3, #4
 8017f22:	2200      	movs	r2, #0
 8017f24:	601a      	str	r2, [r3, #0]
  arp_table[i].ethaddr = ethzero;
 8017f26:	4909      	ldr	r1, [pc, #36]	@ (8017f4c <etharp_free_entry+0xe0>)
 8017f28:	687a      	ldr	r2, [r7, #4]
 8017f2a:	4613      	mov	r3, r2
 8017f2c:	005b      	lsls	r3, r3, #1
 8017f2e:	4413      	add	r3, r2
 8017f30:	00db      	lsls	r3, r3, #3
 8017f32:	440b      	add	r3, r1
 8017f34:	3308      	adds	r3, #8
 8017f36:	4a07      	ldr	r2, [pc, #28]	@ (8017f54 <etharp_free_entry+0xe8>)
 8017f38:	3304      	adds	r3, #4
 8017f3a:	6810      	ldr	r0, [r2, #0]
 8017f3c:	6018      	str	r0, [r3, #0]
 8017f3e:	8892      	ldrh	r2, [r2, #4]
 8017f40:	809a      	strh	r2, [r3, #4]
#endif /* LWIP_DEBUG */
}
 8017f42:	bf00      	nop
 8017f44:	3708      	adds	r7, #8
 8017f46:	46bd      	mov	sp, r7
 8017f48:	bd80      	pop	{r7, pc}
 8017f4a:	bf00      	nop
 8017f4c:	20011e14 	.word	0x20011e14
 8017f50:	08022b1c 	.word	0x08022b1c
 8017f54:	08025280 	.word	0x08025280

08017f58 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017f58:	b580      	push	{r7, lr}
 8017f5a:	b082      	sub	sp, #8
 8017f5c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
 8017f5e:	485f      	ldr	r0, [pc, #380]	@ (80180dc <etharp_tmr+0x184>)
 8017f60:	f003 fc52 	bl	801b808 <puts>
 8017f64:	2000      	movs	r0, #0
 8017f66:	f003 fb09 	bl	801b57c <fflush>
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017f6a:	2300      	movs	r3, #0
 8017f6c:	607b      	str	r3, [r7, #4]
 8017f6e:	e0ac      	b.n	80180ca <etharp_tmr+0x172>
    u8_t state = arp_table[i].state;
 8017f70:	495b      	ldr	r1, [pc, #364]	@ (80180e0 <etharp_tmr+0x188>)
 8017f72:	687a      	ldr	r2, [r7, #4]
 8017f74:	4613      	mov	r3, r2
 8017f76:	005b      	lsls	r3, r3, #1
 8017f78:	4413      	add	r3, r2
 8017f7a:	00db      	lsls	r3, r3, #3
 8017f7c:	440b      	add	r3, r1
 8017f7e:	3314      	adds	r3, #20
 8017f80:	781b      	ldrb	r3, [r3, #0]
 8017f82:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017f84:	78fb      	ldrb	r3, [r7, #3]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	f000 809c 	beq.w	80180c4 <etharp_tmr+0x16c>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8017f8c:	4954      	ldr	r1, [pc, #336]	@ (80180e0 <etharp_tmr+0x188>)
 8017f8e:	687a      	ldr	r2, [r7, #4]
 8017f90:	4613      	mov	r3, r2
 8017f92:	005b      	lsls	r3, r3, #1
 8017f94:	4413      	add	r3, r2
 8017f96:	00db      	lsls	r3, r3, #3
 8017f98:	440b      	add	r3, r1
 8017f9a:	3312      	adds	r3, #18
 8017f9c:	881b      	ldrh	r3, [r3, #0]
 8017f9e:	3301      	adds	r3, #1
 8017fa0:	b298      	uxth	r0, r3
 8017fa2:	494f      	ldr	r1, [pc, #316]	@ (80180e0 <etharp_tmr+0x188>)
 8017fa4:	687a      	ldr	r2, [r7, #4]
 8017fa6:	4613      	mov	r3, r2
 8017fa8:	005b      	lsls	r3, r3, #1
 8017faa:	4413      	add	r3, r2
 8017fac:	00db      	lsls	r3, r3, #3
 8017fae:	440b      	add	r3, r1
 8017fb0:	3312      	adds	r3, #18
 8017fb2:	4602      	mov	r2, r0
 8017fb4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017fb6:	494a      	ldr	r1, [pc, #296]	@ (80180e0 <etharp_tmr+0x188>)
 8017fb8:	687a      	ldr	r2, [r7, #4]
 8017fba:	4613      	mov	r3, r2
 8017fbc:	005b      	lsls	r3, r3, #1
 8017fbe:	4413      	add	r3, r2
 8017fc0:	00db      	lsls	r3, r3, #3
 8017fc2:	440b      	add	r3, r1
 8017fc4:	3312      	adds	r3, #18
 8017fc6:	881b      	ldrh	r3, [r3, #0]
 8017fc8:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8017fcc:	d215      	bcs.n	8017ffa <etharp_tmr+0xa2>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017fce:	4944      	ldr	r1, [pc, #272]	@ (80180e0 <etharp_tmr+0x188>)
 8017fd0:	687a      	ldr	r2, [r7, #4]
 8017fd2:	4613      	mov	r3, r2
 8017fd4:	005b      	lsls	r3, r3, #1
 8017fd6:	4413      	add	r3, r2
 8017fd8:	00db      	lsls	r3, r3, #3
 8017fda:	440b      	add	r3, r1
 8017fdc:	3314      	adds	r3, #20
 8017fde:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017fe0:	2b01      	cmp	r3, #1
 8017fe2:	d124      	bne.n	801802e <etharp_tmr+0xd6>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017fe4:	493e      	ldr	r1, [pc, #248]	@ (80180e0 <etharp_tmr+0x188>)
 8017fe6:	687a      	ldr	r2, [r7, #4]
 8017fe8:	4613      	mov	r3, r2
 8017fea:	005b      	lsls	r3, r3, #1
 8017fec:	4413      	add	r3, r2
 8017fee:	00db      	lsls	r3, r3, #3
 8017ff0:	440b      	add	r3, r1
 8017ff2:	3312      	adds	r3, #18
 8017ff4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017ff6:	2b04      	cmp	r3, #4
 8017ff8:	d919      	bls.n	801802e <etharp_tmr+0xd6>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
 8017ffa:	4939      	ldr	r1, [pc, #228]	@ (80180e0 <etharp_tmr+0x188>)
 8017ffc:	687a      	ldr	r2, [r7, #4]
 8017ffe:	4613      	mov	r3, r2
 8018000:	005b      	lsls	r3, r3, #1
 8018002:	4413      	add	r3, r2
 8018004:	00db      	lsls	r3, r3, #3
 8018006:	440b      	add	r3, r1
 8018008:	3314      	adds	r3, #20
 801800a:	781b      	ldrb	r3, [r3, #0]
 801800c:	2b01      	cmp	r3, #1
 801800e:	d901      	bls.n	8018014 <etharp_tmr+0xbc>
 8018010:	4b34      	ldr	r3, [pc, #208]	@ (80180e4 <etharp_tmr+0x18c>)
 8018012:	e000      	b.n	8018016 <etharp_tmr+0xbe>
 8018014:	4b34      	ldr	r3, [pc, #208]	@ (80180e8 <etharp_tmr+0x190>)
 8018016:	687a      	ldr	r2, [r7, #4]
 8018018:	4619      	mov	r1, r3
 801801a:	4834      	ldr	r0, [pc, #208]	@ (80180ec <etharp_tmr+0x194>)
 801801c:	f003 fb84 	bl	801b728 <iprintf>
 8018020:	2000      	movs	r0, #0
 8018022:	f003 faab 	bl	801b57c <fflush>
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018026:	6878      	ldr	r0, [r7, #4]
 8018028:	f7ff ff20 	bl	8017e6c <etharp_free_entry>
 801802c:	e04a      	b.n	80180c4 <etharp_tmr+0x16c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801802e:	492c      	ldr	r1, [pc, #176]	@ (80180e0 <etharp_tmr+0x188>)
 8018030:	687a      	ldr	r2, [r7, #4]
 8018032:	4613      	mov	r3, r2
 8018034:	005b      	lsls	r3, r3, #1
 8018036:	4413      	add	r3, r2
 8018038:	00db      	lsls	r3, r3, #3
 801803a:	440b      	add	r3, r1
 801803c:	3314      	adds	r3, #20
 801803e:	781b      	ldrb	r3, [r3, #0]
 8018040:	2b03      	cmp	r3, #3
 8018042:	d10a      	bne.n	801805a <etharp_tmr+0x102>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018044:	4926      	ldr	r1, [pc, #152]	@ (80180e0 <etharp_tmr+0x188>)
 8018046:	687a      	ldr	r2, [r7, #4]
 8018048:	4613      	mov	r3, r2
 801804a:	005b      	lsls	r3, r3, #1
 801804c:	4413      	add	r3, r2
 801804e:	00db      	lsls	r3, r3, #3
 8018050:	440b      	add	r3, r1
 8018052:	3314      	adds	r3, #20
 8018054:	2204      	movs	r2, #4
 8018056:	701a      	strb	r2, [r3, #0]
 8018058:	e034      	b.n	80180c4 <etharp_tmr+0x16c>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801805a:	4921      	ldr	r1, [pc, #132]	@ (80180e0 <etharp_tmr+0x188>)
 801805c:	687a      	ldr	r2, [r7, #4]
 801805e:	4613      	mov	r3, r2
 8018060:	005b      	lsls	r3, r3, #1
 8018062:	4413      	add	r3, r2
 8018064:	00db      	lsls	r3, r3, #3
 8018066:	440b      	add	r3, r1
 8018068:	3314      	adds	r3, #20
 801806a:	781b      	ldrb	r3, [r3, #0]
 801806c:	2b04      	cmp	r3, #4
 801806e:	d10a      	bne.n	8018086 <etharp_tmr+0x12e>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018070:	491b      	ldr	r1, [pc, #108]	@ (80180e0 <etharp_tmr+0x188>)
 8018072:	687a      	ldr	r2, [r7, #4]
 8018074:	4613      	mov	r3, r2
 8018076:	005b      	lsls	r3, r3, #1
 8018078:	4413      	add	r3, r2
 801807a:	00db      	lsls	r3, r3, #3
 801807c:	440b      	add	r3, r1
 801807e:	3314      	adds	r3, #20
 8018080:	2202      	movs	r2, #2
 8018082:	701a      	strb	r2, [r3, #0]
 8018084:	e01e      	b.n	80180c4 <etharp_tmr+0x16c>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018086:	4916      	ldr	r1, [pc, #88]	@ (80180e0 <etharp_tmr+0x188>)
 8018088:	687a      	ldr	r2, [r7, #4]
 801808a:	4613      	mov	r3, r2
 801808c:	005b      	lsls	r3, r3, #1
 801808e:	4413      	add	r3, r2
 8018090:	00db      	lsls	r3, r3, #3
 8018092:	440b      	add	r3, r1
 8018094:	3314      	adds	r3, #20
 8018096:	781b      	ldrb	r3, [r3, #0]
 8018098:	2b01      	cmp	r3, #1
 801809a:	d113      	bne.n	80180c4 <etharp_tmr+0x16c>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801809c:	4910      	ldr	r1, [pc, #64]	@ (80180e0 <etharp_tmr+0x188>)
 801809e:	687a      	ldr	r2, [r7, #4]
 80180a0:	4613      	mov	r3, r2
 80180a2:	005b      	lsls	r3, r3, #1
 80180a4:	4413      	add	r3, r2
 80180a6:	00db      	lsls	r3, r3, #3
 80180a8:	440b      	add	r3, r1
 80180aa:	3308      	adds	r3, #8
 80180ac:	6818      	ldr	r0, [r3, #0]
 80180ae:	687a      	ldr	r2, [r7, #4]
 80180b0:	4613      	mov	r3, r2
 80180b2:	005b      	lsls	r3, r3, #1
 80180b4:	4413      	add	r3, r2
 80180b6:	00db      	lsls	r3, r3, #3
 80180b8:	4a09      	ldr	r2, [pc, #36]	@ (80180e0 <etharp_tmr+0x188>)
 80180ba:	4413      	add	r3, r2
 80180bc:	3304      	adds	r3, #4
 80180be:	4619      	mov	r1, r3
 80180c0:	f000 fff2 	bl	80190a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	3301      	adds	r3, #1
 80180c8:	607b      	str	r3, [r7, #4]
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	2b09      	cmp	r3, #9
 80180ce:	f77f af4f 	ble.w	8017f70 <etharp_tmr+0x18>
      }
    }
  }
}
 80180d2:	bf00      	nop
 80180d4:	bf00      	nop
 80180d6:	3708      	adds	r7, #8
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	08022b54 	.word	0x08022b54
 80180e0:	20011e14 	.word	0x20011e14
 80180e4:	08022b64 	.word	0x08022b64
 80180e8:	08022b6c 	.word	0x08022b6c
 80180ec:	08022b74 	.word	0x08022b74

080180f0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80180f0:	b580      	push	{r7, lr}
 80180f2:	b08a      	sub	sp, #40	@ 0x28
 80180f4:	af00      	add	r7, sp, #0
 80180f6:	60f8      	str	r0, [r7, #12]
 80180f8:	460b      	mov	r3, r1
 80180fa:	607a      	str	r2, [r7, #4]
 80180fc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80180fe:	230a      	movs	r3, #10
 8018100:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8018102:	230a      	movs	r3, #10
 8018104:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018106:	230a      	movs	r3, #10
 8018108:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801810a:	2300      	movs	r3, #0
 801810c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801810e:	230a      	movs	r3, #10
 8018110:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018112:	2300      	movs	r3, #0
 8018114:	83bb      	strh	r3, [r7, #28]
 8018116:	2300      	movs	r3, #0
 8018118:	837b      	strh	r3, [r7, #26]
 801811a:	2300      	movs	r3, #0
 801811c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801811e:	2300      	movs	r3, #0
 8018120:	843b      	strh	r3, [r7, #32]
 8018122:	e0c3      	b.n	80182ac <etharp_find_entry+0x1bc>
    u8_t state = arp_table[i].state;
 8018124:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018128:	49a2      	ldr	r1, [pc, #648]	@ (80183b4 <etharp_find_entry+0x2c4>)
 801812a:	4613      	mov	r3, r2
 801812c:	005b      	lsls	r3, r3, #1
 801812e:	4413      	add	r3, r2
 8018130:	00db      	lsls	r3, r3, #3
 8018132:	440b      	add	r3, r1
 8018134:	3314      	adds	r3, #20
 8018136:	781b      	ldrb	r3, [r3, #0]
 8018138:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801813a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801813e:	2b0a      	cmp	r3, #10
 8018140:	d10e      	bne.n	8018160 <etharp_find_entry+0x70>
 8018142:	7dfb      	ldrb	r3, [r7, #23]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d10b      	bne.n	8018160 <etharp_find_entry+0x70>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
 8018148:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801814c:	4619      	mov	r1, r3
 801814e:	489a      	ldr	r0, [pc, #616]	@ (80183b8 <etharp_find_entry+0x2c8>)
 8018150:	f003 faea 	bl	801b728 <iprintf>
 8018154:	2000      	movs	r0, #0
 8018156:	f003 fa11 	bl	801b57c <fflush>
      /* remember first empty entry */
      empty = i;
 801815a:	8c3b      	ldrh	r3, [r7, #32]
 801815c:	847b      	strh	r3, [r7, #34]	@ 0x22
 801815e:	e0a1      	b.n	80182a4 <etharp_find_entry+0x1b4>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018160:	7dfb      	ldrb	r3, [r7, #23]
 8018162:	2b00      	cmp	r3, #0
 8018164:	f000 809e 	beq.w	80182a4 <etharp_find_entry+0x1b4>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018168:	7dfb      	ldrb	r3, [r7, #23]
 801816a:	2b01      	cmp	r3, #1
 801816c:	d00c      	beq.n	8018188 <etharp_find_entry+0x98>
 801816e:	7dfb      	ldrb	r3, [r7, #23]
 8018170:	2b01      	cmp	r3, #1
 8018172:	d809      	bhi.n	8018188 <etharp_find_entry+0x98>
 8018174:	4b91      	ldr	r3, [pc, #580]	@ (80183bc <etharp_find_entry+0x2cc>)
 8018176:	f240 1223 	movw	r2, #291	@ 0x123
 801817a:	4991      	ldr	r1, [pc, #580]	@ (80183c0 <etharp_find_entry+0x2d0>)
 801817c:	4891      	ldr	r0, [pc, #580]	@ (80183c4 <etharp_find_entry+0x2d4>)
 801817e:	f003 fad3 	bl	801b728 <iprintf>
 8018182:	2000      	movs	r0, #0
 8018184:	f003 f9fa 	bl	801b57c <fflush>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	2b00      	cmp	r3, #0
 801818c:	d029      	beq.n	80181e2 <etharp_find_entry+0xf2>
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	6819      	ldr	r1, [r3, #0]
 8018192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018196:	4887      	ldr	r0, [pc, #540]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018198:	4613      	mov	r3, r2
 801819a:	005b      	lsls	r3, r3, #1
 801819c:	4413      	add	r3, r2
 801819e:	00db      	lsls	r3, r3, #3
 80181a0:	4403      	add	r3, r0
 80181a2:	3304      	adds	r3, #4
 80181a4:	681b      	ldr	r3, [r3, #0]
 80181a6:	4299      	cmp	r1, r3
 80181a8:	d11b      	bne.n	80181e2 <etharp_find_entry+0xf2>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d00c      	beq.n	80181ca <etharp_find_entry+0xda>
 80181b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181b4:	497f      	ldr	r1, [pc, #508]	@ (80183b4 <etharp_find_entry+0x2c4>)
 80181b6:	4613      	mov	r3, r2
 80181b8:	005b      	lsls	r3, r3, #1
 80181ba:	4413      	add	r3, r2
 80181bc:	00db      	lsls	r3, r3, #3
 80181be:	440b      	add	r3, r1
 80181c0:	3308      	adds	r3, #8
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	687a      	ldr	r2, [r7, #4]
 80181c6:	429a      	cmp	r2, r3
 80181c8:	d10b      	bne.n	80181e2 <etharp_find_entry+0xf2>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
 80181ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80181ce:	4619      	mov	r1, r3
 80181d0:	487d      	ldr	r0, [pc, #500]	@ (80183c8 <etharp_find_entry+0x2d8>)
 80181d2:	f003 faa9 	bl	801b728 <iprintf>
 80181d6:	2000      	movs	r0, #0
 80181d8:	f003 f9d0 	bl	801b57c <fflush>
        /* found exact IP address match, simply bail out */
        return i;
 80181dc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80181e0:	e160      	b.n	80184a4 <etharp_find_entry+0x3b4>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80181e2:	7dfb      	ldrb	r3, [r7, #23]
 80181e4:	2b01      	cmp	r3, #1
 80181e6:	d140      	bne.n	801826a <etharp_find_entry+0x17a>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80181e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80181ec:	4971      	ldr	r1, [pc, #452]	@ (80183b4 <etharp_find_entry+0x2c4>)
 80181ee:	4613      	mov	r3, r2
 80181f0:	005b      	lsls	r3, r3, #1
 80181f2:	4413      	add	r3, r2
 80181f4:	00db      	lsls	r3, r3, #3
 80181f6:	440b      	add	r3, r1
 80181f8:	681b      	ldr	r3, [r3, #0]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d01a      	beq.n	8018234 <etharp_find_entry+0x144>
          if (arp_table[i].ctime >= age_queue) {
 80181fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018202:	496c      	ldr	r1, [pc, #432]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018204:	4613      	mov	r3, r2
 8018206:	005b      	lsls	r3, r3, #1
 8018208:	4413      	add	r3, r2
 801820a:	00db      	lsls	r3, r3, #3
 801820c:	440b      	add	r3, r1
 801820e:	3312      	adds	r3, #18
 8018210:	881b      	ldrh	r3, [r3, #0]
 8018212:	8bba      	ldrh	r2, [r7, #28]
 8018214:	429a      	cmp	r2, r3
 8018216:	d845      	bhi.n	80182a4 <etharp_find_entry+0x1b4>
            old_queue = i;
 8018218:	8c3b      	ldrh	r3, [r7, #32]
 801821a:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801821c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018220:	4964      	ldr	r1, [pc, #400]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018222:	4613      	mov	r3, r2
 8018224:	005b      	lsls	r3, r3, #1
 8018226:	4413      	add	r3, r2
 8018228:	00db      	lsls	r3, r3, #3
 801822a:	440b      	add	r3, r1
 801822c:	3312      	adds	r3, #18
 801822e:	881b      	ldrh	r3, [r3, #0]
 8018230:	83bb      	strh	r3, [r7, #28]
 8018232:	e037      	b.n	80182a4 <etharp_find_entry+0x1b4>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018234:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018238:	495e      	ldr	r1, [pc, #376]	@ (80183b4 <etharp_find_entry+0x2c4>)
 801823a:	4613      	mov	r3, r2
 801823c:	005b      	lsls	r3, r3, #1
 801823e:	4413      	add	r3, r2
 8018240:	00db      	lsls	r3, r3, #3
 8018242:	440b      	add	r3, r1
 8018244:	3312      	adds	r3, #18
 8018246:	881b      	ldrh	r3, [r3, #0]
 8018248:	8b7a      	ldrh	r2, [r7, #26]
 801824a:	429a      	cmp	r2, r3
 801824c:	d82a      	bhi.n	80182a4 <etharp_find_entry+0x1b4>
            old_pending = i;
 801824e:	8c3b      	ldrh	r3, [r7, #32]
 8018250:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 8018252:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018256:	4957      	ldr	r1, [pc, #348]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018258:	4613      	mov	r3, r2
 801825a:	005b      	lsls	r3, r3, #1
 801825c:	4413      	add	r3, r2
 801825e:	00db      	lsls	r3, r3, #3
 8018260:	440b      	add	r3, r1
 8018262:	3312      	adds	r3, #18
 8018264:	881b      	ldrh	r3, [r3, #0]
 8018266:	837b      	strh	r3, [r7, #26]
 8018268:	e01c      	b.n	80182a4 <etharp_find_entry+0x1b4>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801826a:	7dfb      	ldrb	r3, [r7, #23]
 801826c:	2b01      	cmp	r3, #1
 801826e:	d919      	bls.n	80182a4 <etharp_find_entry+0x1b4>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018270:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018274:	494f      	ldr	r1, [pc, #316]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018276:	4613      	mov	r3, r2
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	4413      	add	r3, r2
 801827c:	00db      	lsls	r3, r3, #3
 801827e:	440b      	add	r3, r1
 8018280:	3312      	adds	r3, #18
 8018282:	881b      	ldrh	r3, [r3, #0]
 8018284:	8b3a      	ldrh	r2, [r7, #24]
 8018286:	429a      	cmp	r2, r3
 8018288:	d80c      	bhi.n	80182a4 <etharp_find_entry+0x1b4>
            old_stable = i;
 801828a:	8c3b      	ldrh	r3, [r7, #32]
 801828c:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801828e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018292:	4948      	ldr	r1, [pc, #288]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018294:	4613      	mov	r3, r2
 8018296:	005b      	lsls	r3, r3, #1
 8018298:	4413      	add	r3, r2
 801829a:	00db      	lsls	r3, r3, #3
 801829c:	440b      	add	r3, r1
 801829e:	3312      	adds	r3, #18
 80182a0:	881b      	ldrh	r3, [r3, #0]
 80182a2:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80182a4:	8c3b      	ldrh	r3, [r7, #32]
 80182a6:	3301      	adds	r3, #1
 80182a8:	b29b      	uxth	r3, r3
 80182aa:	843b      	strh	r3, [r7, #32]
 80182ac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182b0:	2b09      	cmp	r3, #9
 80182b2:	f77f af37 	ble.w	8018124 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80182b6:	7afb      	ldrb	r3, [r7, #11]
 80182b8:	f003 0302 	and.w	r3, r3, #2
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d108      	bne.n	80182d2 <etharp_find_entry+0x1e2>
 80182c0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80182c4:	2b0a      	cmp	r3, #10
 80182c6:	d10d      	bne.n	80182e4 <etharp_find_entry+0x1f4>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80182c8:	7afb      	ldrb	r3, [r7, #11]
 80182ca:	f003 0301 	and.w	r3, r3, #1
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d108      	bne.n	80182e4 <etharp_find_entry+0x1f4>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
 80182d2:	483e      	ldr	r0, [pc, #248]	@ (80183cc <etharp_find_entry+0x2dc>)
 80182d4:	f003 fa98 	bl	801b808 <puts>
 80182d8:	2000      	movs	r0, #0
 80182da:	f003 f94f 	bl	801b57c <fflush>
    return (s16_t)ERR_MEM;
 80182de:	f04f 33ff 	mov.w	r3, #4294967295
 80182e2:	e0df      	b.n	80184a4 <etharp_find_entry+0x3b4>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80182e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80182e8:	2b09      	cmp	r3, #9
 80182ea:	dc0b      	bgt.n	8018304 <etharp_find_entry+0x214>
    i = empty;
 80182ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80182ee:	843b      	strh	r3, [r7, #32]
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
 80182f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80182f4:	4619      	mov	r1, r3
 80182f6:	4836      	ldr	r0, [pc, #216]	@ (80183d0 <etharp_find_entry+0x2e0>)
 80182f8:	f003 fa16 	bl	801b728 <iprintf>
 80182fc:	2000      	movs	r0, #0
 80182fe:	f003 f93d 	bl	801b57c <fflush>
 8018302:	e084      	b.n	801840e <etharp_find_entry+0x31e>
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018304:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8018308:	2b09      	cmp	r3, #9
 801830a:	dc20      	bgt.n	801834e <etharp_find_entry+0x25e>
      /* recycle oldest stable*/
      i = old_stable;
 801830c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801830e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
 8018310:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018314:	4619      	mov	r1, r3
 8018316:	482f      	ldr	r0, [pc, #188]	@ (80183d4 <etharp_find_entry+0x2e4>)
 8018318:	f003 fa06 	bl	801b728 <iprintf>
 801831c:	2000      	movs	r0, #0
 801831e:	f003 f92d 	bl	801b57c <fflush>
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018322:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018326:	4923      	ldr	r1, [pc, #140]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018328:	4613      	mov	r3, r2
 801832a:	005b      	lsls	r3, r3, #1
 801832c:	4413      	add	r3, r2
 801832e:	00db      	lsls	r3, r3, #3
 8018330:	440b      	add	r3, r1
 8018332:	681b      	ldr	r3, [r3, #0]
 8018334:	2b00      	cmp	r3, #0
 8018336:	d057      	beq.n	80183e8 <etharp_find_entry+0x2f8>
 8018338:	4b20      	ldr	r3, [pc, #128]	@ (80183bc <etharp_find_entry+0x2cc>)
 801833a:	f240 126d 	movw	r2, #365	@ 0x16d
 801833e:	4926      	ldr	r1, [pc, #152]	@ (80183d8 <etharp_find_entry+0x2e8>)
 8018340:	4820      	ldr	r0, [pc, #128]	@ (80183c4 <etharp_find_entry+0x2d4>)
 8018342:	f003 f9f1 	bl	801b728 <iprintf>
 8018346:	2000      	movs	r0, #0
 8018348:	f003 f918 	bl	801b57c <fflush>
 801834c:	e04c      	b.n	80183e8 <etharp_find_entry+0x2f8>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801834e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8018352:	2b09      	cmp	r3, #9
 8018354:	dc0b      	bgt.n	801836e <etharp_find_entry+0x27e>
      /* recycle oldest pending */
      i = old_pending;
 8018356:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8018358:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
 801835a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801835e:	4619      	mov	r1, r3
 8018360:	481e      	ldr	r0, [pc, #120]	@ (80183dc <etharp_find_entry+0x2ec>)
 8018362:	f003 f9e1 	bl	801b728 <iprintf>
 8018366:	2000      	movs	r0, #0
 8018368:	f003 f908 	bl	801b57c <fflush>
 801836c:	e03c      	b.n	80183e8 <etharp_find_entry+0x2f8>
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801836e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018372:	2b09      	cmp	r3, #9
 8018374:	dc14      	bgt.n	80183a0 <etharp_find_entry+0x2b0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018376:	8bfb      	ldrh	r3, [r7, #30]
 8018378:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
 801837a:	f9b7 1020 	ldrsh.w	r1, [r7, #32]
 801837e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018382:	480c      	ldr	r0, [pc, #48]	@ (80183b4 <etharp_find_entry+0x2c4>)
 8018384:	4613      	mov	r3, r2
 8018386:	005b      	lsls	r3, r3, #1
 8018388:	4413      	add	r3, r2
 801838a:	00db      	lsls	r3, r3, #3
 801838c:	4403      	add	r3, r0
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	461a      	mov	r2, r3
 8018392:	4813      	ldr	r0, [pc, #76]	@ (80183e0 <etharp_find_entry+0x2f0>)
 8018394:	f003 f9c8 	bl	801b728 <iprintf>
 8018398:	2000      	movs	r0, #0
 801839a:	f003 f8ef 	bl	801b57c <fflush>
 801839e:	e023      	b.n	80183e8 <etharp_find_entry+0x2f8>
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
 80183a0:	4810      	ldr	r0, [pc, #64]	@ (80183e4 <etharp_find_entry+0x2f4>)
 80183a2:	f003 fa31 	bl	801b808 <puts>
 80183a6:	2000      	movs	r0, #0
 80183a8:	f003 f8e8 	bl	801b57c <fflush>
      return (s16_t)ERR_MEM;
 80183ac:	f04f 33ff 	mov.w	r3, #4294967295
 80183b0:	e078      	b.n	80184a4 <etharp_find_entry+0x3b4>
 80183b2:	bf00      	nop
 80183b4:	20011e14 	.word	0x20011e14
 80183b8:	08022b98 	.word	0x08022b98
 80183bc:	08022bc4 	.word	0x08022bc4
 80183c0:	08022bfc 	.word	0x08022bfc
 80183c4:	08022c3c 	.word	0x08022c3c
 80183c8:	08022c64 	.word	0x08022c64
 80183cc:	08022c90 	.word	0x08022c90
 80183d0:	08022cd4 	.word	0x08022cd4
 80183d4:	08022d04 	.word	0x08022d04
 80183d8:	08022d3c 	.word	0x08022d3c
 80183dc:	08022d54 	.word	0x08022d54
 80183e0:	08022d9c 	.word	0x08022d9c
 80183e4:	08022dec 	.word	0x08022dec
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80183e8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183ec:	2b09      	cmp	r3, #9
 80183ee:	dd09      	ble.n	8018404 <etharp_find_entry+0x314>
 80183f0:	4b2e      	ldr	r3, [pc, #184]	@ (80184ac <etharp_find_entry+0x3bc>)
 80183f2:	f240 127f 	movw	r2, #383	@ 0x17f
 80183f6:	492e      	ldr	r1, [pc, #184]	@ (80184b0 <etharp_find_entry+0x3c0>)
 80183f8:	482e      	ldr	r0, [pc, #184]	@ (80184b4 <etharp_find_entry+0x3c4>)
 80183fa:	f003 f995 	bl	801b728 <iprintf>
 80183fe:	2000      	movs	r0, #0
 8018400:	f003 f8bc 	bl	801b57c <fflush>
    etharp_free_entry(i);
 8018404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018408:	4618      	mov	r0, r3
 801840a:	f7ff fd2f 	bl	8017e6c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801840e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018412:	2b09      	cmp	r3, #9
 8018414:	dd09      	ble.n	801842a <etharp_find_entry+0x33a>
 8018416:	4b25      	ldr	r3, [pc, #148]	@ (80184ac <etharp_find_entry+0x3bc>)
 8018418:	f240 1283 	movw	r2, #387	@ 0x183
 801841c:	4924      	ldr	r1, [pc, #144]	@ (80184b0 <etharp_find_entry+0x3c0>)
 801841e:	4825      	ldr	r0, [pc, #148]	@ (80184b4 <etharp_find_entry+0x3c4>)
 8018420:	f003 f982 	bl	801b728 <iprintf>
 8018424:	2000      	movs	r0, #0
 8018426:	f003 f8a9 	bl	801b57c <fflush>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801842a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801842e:	4922      	ldr	r1, [pc, #136]	@ (80184b8 <etharp_find_entry+0x3c8>)
 8018430:	4613      	mov	r3, r2
 8018432:	005b      	lsls	r3, r3, #1
 8018434:	4413      	add	r3, r2
 8018436:	00db      	lsls	r3, r3, #3
 8018438:	440b      	add	r3, r1
 801843a:	3314      	adds	r3, #20
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	2b00      	cmp	r3, #0
 8018440:	d009      	beq.n	8018456 <etharp_find_entry+0x366>
 8018442:	4b1a      	ldr	r3, [pc, #104]	@ (80184ac <etharp_find_entry+0x3bc>)
 8018444:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 8018448:	491c      	ldr	r1, [pc, #112]	@ (80184bc <etharp_find_entry+0x3cc>)
 801844a:	481a      	ldr	r0, [pc, #104]	@ (80184b4 <etharp_find_entry+0x3c4>)
 801844c:	f003 f96c 	bl	801b728 <iprintf>
 8018450:	2000      	movs	r0, #0
 8018452:	f003 f893 	bl	801b57c <fflush>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d00b      	beq.n	8018474 <etharp_find_entry+0x384>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801845c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	6819      	ldr	r1, [r3, #0]
 8018464:	4814      	ldr	r0, [pc, #80]	@ (80184b8 <etharp_find_entry+0x3c8>)
 8018466:	4613      	mov	r3, r2
 8018468:	005b      	lsls	r3, r3, #1
 801846a:	4413      	add	r3, r2
 801846c:	00db      	lsls	r3, r3, #3
 801846e:	4403      	add	r3, r0
 8018470:	3304      	adds	r3, #4
 8018472:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018474:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018478:	490f      	ldr	r1, [pc, #60]	@ (80184b8 <etharp_find_entry+0x3c8>)
 801847a:	4613      	mov	r3, r2
 801847c:	005b      	lsls	r3, r3, #1
 801847e:	4413      	add	r3, r2
 8018480:	00db      	lsls	r3, r3, #3
 8018482:	440b      	add	r3, r1
 8018484:	3312      	adds	r3, #18
 8018486:	2200      	movs	r2, #0
 8018488:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801848a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801848e:	490a      	ldr	r1, [pc, #40]	@ (80184b8 <etharp_find_entry+0x3c8>)
 8018490:	4613      	mov	r3, r2
 8018492:	005b      	lsls	r3, r3, #1
 8018494:	4413      	add	r3, r2
 8018496:	00db      	lsls	r3, r3, #3
 8018498:	440b      	add	r3, r1
 801849a:	3308      	adds	r3, #8
 801849c:	687a      	ldr	r2, [r7, #4]
 801849e:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80184a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80184a4:	4618      	mov	r0, r3
 80184a6:	3728      	adds	r7, #40	@ 0x28
 80184a8:	46bd      	mov	sp, r7
 80184aa:	bd80      	pop	{r7, pc}
 80184ac:	08022bc4 	.word	0x08022bc4
 80184b0:	08022e24 	.word	0x08022e24
 80184b4:	08022c3c 	.word	0x08022c3c
 80184b8:	20011e14 	.word	0x20011e14
 80184bc:	08022e38 	.word	0x08022e38

080184c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80184c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184c4:	b08e      	sub	sp, #56	@ 0x38
 80184c6:	af08      	add	r7, sp, #32
 80184c8:	60f8      	str	r0, [r7, #12]
 80184ca:	60b9      	str	r1, [r7, #8]
 80184cc:	607a      	str	r2, [r7, #4]
 80184ce:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80184d6:	2b06      	cmp	r3, #6
 80184d8:	d009      	beq.n	80184ee <etharp_update_arp_entry+0x2e>
 80184da:	4b6a      	ldr	r3, [pc, #424]	@ (8018684 <etharp_update_arp_entry+0x1c4>)
 80184dc:	f240 12a9 	movw	r2, #425	@ 0x1a9
 80184e0:	4969      	ldr	r1, [pc, #420]	@ (8018688 <etharp_update_arp_entry+0x1c8>)
 80184e2:	486a      	ldr	r0, [pc, #424]	@ (801868c <etharp_update_arp_entry+0x1cc>)
 80184e4:	f003 f920 	bl	801b728 <iprintf>
 80184e8:	2000      	movs	r0, #0
 80184ea:	f003 f847 	bl	801b57c <fflush>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	469c      	mov	ip, r3
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	3301      	adds	r3, #1
 80184f8:	781b      	ldrb	r3, [r3, #0]
 80184fa:	469e      	mov	lr, r3
 80184fc:	68bb      	ldr	r3, [r7, #8]
 80184fe:	3302      	adds	r3, #2
 8018500:	781b      	ldrb	r3, [r3, #0]
 8018502:	4698      	mov	r8, r3
 8018504:	68bb      	ldr	r3, [r7, #8]
 8018506:	3303      	adds	r3, #3
 8018508:	781b      	ldrb	r3, [r3, #0]
 801850a:	461a      	mov	r2, r3
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	781b      	ldrb	r3, [r3, #0]
 8018510:	4619      	mov	r1, r3
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	785b      	ldrb	r3, [r3, #1]
 8018516:	4618      	mov	r0, r3
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	789b      	ldrb	r3, [r3, #2]
 801851c:	461c      	mov	r4, r3
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	78db      	ldrb	r3, [r3, #3]
 8018522:	461d      	mov	r5, r3
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	791b      	ldrb	r3, [r3, #4]
 8018528:	461e      	mov	r6, r3
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	795b      	ldrb	r3, [r3, #5]
 801852e:	9306      	str	r3, [sp, #24]
 8018530:	9605      	str	r6, [sp, #20]
 8018532:	9504      	str	r5, [sp, #16]
 8018534:	9403      	str	r4, [sp, #12]
 8018536:	9002      	str	r0, [sp, #8]
 8018538:	9101      	str	r1, [sp, #4]
 801853a:	9200      	str	r2, [sp, #0]
 801853c:	4643      	mov	r3, r8
 801853e:	4672      	mov	r2, lr
 8018540:	4661      	mov	r1, ip
 8018542:	4853      	ldr	r0, [pc, #332]	@ (8018690 <etharp_update_arp_entry+0x1d0>)
 8018544:	f003 f8f0 	bl	801b728 <iprintf>
 8018548:	2000      	movs	r0, #0
 801854a:	f003 f817 	bl	801b57c <fflush>
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801854e:	68bb      	ldr	r3, [r7, #8]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d012      	beq.n	801857a <etharp_update_arp_entry+0xba>
 8018554:	68bb      	ldr	r3, [r7, #8]
 8018556:	681b      	ldr	r3, [r3, #0]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d00e      	beq.n	801857a <etharp_update_arp_entry+0xba>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801855c:	68bb      	ldr	r3, [r7, #8]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	68f9      	ldr	r1, [r7, #12]
 8018562:	4618      	mov	r0, r3
 8018564:	f001 fd00 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8018568:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801856a:	2b00      	cmp	r3, #0
 801856c:	d105      	bne.n	801857a <etharp_update_arp_entry+0xba>
      ip4_addr_ismulticast(ipaddr)) {
 801856e:	68bb      	ldr	r3, [r7, #8]
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018576:	2be0      	cmp	r3, #224	@ 0xe0
 8018578:	d108      	bne.n	801858c <etharp_update_arp_entry+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
 801857a:	4846      	ldr	r0, [pc, #280]	@ (8018694 <etharp_update_arp_entry+0x1d4>)
 801857c:	f003 f944 	bl	801b808 <puts>
 8018580:	2000      	movs	r0, #0
 8018582:	f002 fffb 	bl	801b57c <fflush>
    return ERR_ARG;
 8018586:	f06f 030f 	mvn.w	r3, #15
 801858a:	e075      	b.n	8018678 <etharp_update_arp_entry+0x1b8>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801858c:	78fb      	ldrb	r3, [r7, #3]
 801858e:	68fa      	ldr	r2, [r7, #12]
 8018590:	4619      	mov	r1, r3
 8018592:	68b8      	ldr	r0, [r7, #8]
 8018594:	f7ff fdac 	bl	80180f0 <etharp_find_entry>
 8018598:	4603      	mov	r3, r0
 801859a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801859c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	da02      	bge.n	80185aa <etharp_update_arp_entry+0xea>
    return (err_t)i;
 80185a4:	8afb      	ldrh	r3, [r7, #22]
 80185a6:	b25b      	sxtb	r3, r3
 80185a8:	e066      	b.n	8018678 <etharp_update_arp_entry+0x1b8>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80185aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185ae:	493a      	ldr	r1, [pc, #232]	@ (8018698 <etharp_update_arp_entry+0x1d8>)
 80185b0:	4613      	mov	r3, r2
 80185b2:	005b      	lsls	r3, r3, #1
 80185b4:	4413      	add	r3, r2
 80185b6:	00db      	lsls	r3, r3, #3
 80185b8:	440b      	add	r3, r1
 80185ba:	3314      	adds	r3, #20
 80185bc:	2202      	movs	r2, #2
 80185be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80185c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185c4:	4934      	ldr	r1, [pc, #208]	@ (8018698 <etharp_update_arp_entry+0x1d8>)
 80185c6:	4613      	mov	r3, r2
 80185c8:	005b      	lsls	r3, r3, #1
 80185ca:	4413      	add	r3, r2
 80185cc:	00db      	lsls	r3, r3, #3
 80185ce:	440b      	add	r3, r1
 80185d0:	3308      	adds	r3, #8
 80185d2:	68fa      	ldr	r2, [r7, #12]
 80185d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
 80185d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80185da:	4619      	mov	r1, r3
 80185dc:	482f      	ldr	r0, [pc, #188]	@ (801869c <etharp_update_arp_entry+0x1dc>)
 80185de:	f003 f8a3 	bl	801b728 <iprintf>
 80185e2:	2000      	movs	r0, #0
 80185e4:	f002 ffca 	bl	801b57c <fflush>
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80185e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80185ec:	4613      	mov	r3, r2
 80185ee:	005b      	lsls	r3, r3, #1
 80185f0:	4413      	add	r3, r2
 80185f2:	00db      	lsls	r3, r3, #3
 80185f4:	3308      	adds	r3, #8
 80185f6:	4a28      	ldr	r2, [pc, #160]	@ (8018698 <etharp_update_arp_entry+0x1d8>)
 80185f8:	4413      	add	r3, r2
 80185fa:	3304      	adds	r3, #4
 80185fc:	2206      	movs	r2, #6
 80185fe:	6879      	ldr	r1, [r7, #4]
 8018600:	4618      	mov	r0, r3
 8018602:	f003 fa78 	bl	801baf6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018606:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801860a:	4923      	ldr	r1, [pc, #140]	@ (8018698 <etharp_update_arp_entry+0x1d8>)
 801860c:	4613      	mov	r3, r2
 801860e:	005b      	lsls	r3, r3, #1
 8018610:	4413      	add	r3, r2
 8018612:	00db      	lsls	r3, r3, #3
 8018614:	440b      	add	r3, r1
 8018616:	3312      	adds	r3, #18
 8018618:	2200      	movs	r2, #0
 801861a:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801861c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018620:	491d      	ldr	r1, [pc, #116]	@ (8018698 <etharp_update_arp_entry+0x1d8>)
 8018622:	4613      	mov	r3, r2
 8018624:	005b      	lsls	r3, r3, #1
 8018626:	4413      	add	r3, r2
 8018628:	00db      	lsls	r3, r3, #3
 801862a:	440b      	add	r3, r1
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d021      	beq.n	8018676 <etharp_update_arp_entry+0x1b6>
    struct pbuf *p = arp_table[i].q;
 8018632:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018636:	4918      	ldr	r1, [pc, #96]	@ (8018698 <etharp_update_arp_entry+0x1d8>)
 8018638:	4613      	mov	r3, r2
 801863a:	005b      	lsls	r3, r3, #1
 801863c:	4413      	add	r3, r2
 801863e:	00db      	lsls	r3, r3, #3
 8018640:	440b      	add	r3, r1
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018646:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801864a:	4913      	ldr	r1, [pc, #76]	@ (8018698 <etharp_update_arp_entry+0x1d8>)
 801864c:	4613      	mov	r3, r2
 801864e:	005b      	lsls	r3, r3, #1
 8018650:	4413      	add	r3, r2
 8018652:	00db      	lsls	r3, r3, #3
 8018654:	440b      	add	r3, r1
 8018656:	2200      	movs	r2, #0
 8018658:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801865a:	68fb      	ldr	r3, [r7, #12]
 801865c:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8018660:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018664:	9300      	str	r3, [sp, #0]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	6939      	ldr	r1, [r7, #16]
 801866a:	68f8      	ldr	r0, [r7, #12]
 801866c:	f002 fc8a 	bl	801af84 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018670:	6938      	ldr	r0, [r7, #16]
 8018672:	f7f4 f953 	bl	800c91c <pbuf_free>
  }
  return ERR_OK;
 8018676:	2300      	movs	r3, #0
}
 8018678:	4618      	mov	r0, r3
 801867a:	3718      	adds	r7, #24
 801867c:	46bd      	mov	sp, r7
 801867e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018682:	bf00      	nop
 8018684:	08022bc4 	.word	0x08022bc4
 8018688:	08022e64 	.word	0x08022e64
 801868c:	08022c3c 	.word	0x08022c3c
 8018690:	08022e88 	.word	0x08022e88
 8018694:	08022ed8 	.word	0x08022ed8
 8018698:	20011e14 	.word	0x20011e14
 801869c:	08022f24 	.word	0x08022f24

080186a0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80186a0:	b580      	push	{r7, lr}
 80186a2:	b084      	sub	sp, #16
 80186a4:	af00      	add	r7, sp, #0
 80186a6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186a8:	2300      	movs	r3, #0
 80186aa:	60fb      	str	r3, [r7, #12]
 80186ac:	e01e      	b.n	80186ec <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80186ae:	4913      	ldr	r1, [pc, #76]	@ (80186fc <etharp_cleanup_netif+0x5c>)
 80186b0:	68fa      	ldr	r2, [r7, #12]
 80186b2:	4613      	mov	r3, r2
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4413      	add	r3, r2
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	440b      	add	r3, r1
 80186bc:	3314      	adds	r3, #20
 80186be:	781b      	ldrb	r3, [r3, #0]
 80186c0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80186c2:	7afb      	ldrb	r3, [r7, #11]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d00e      	beq.n	80186e6 <etharp_cleanup_netif+0x46>
 80186c8:	490c      	ldr	r1, [pc, #48]	@ (80186fc <etharp_cleanup_netif+0x5c>)
 80186ca:	68fa      	ldr	r2, [r7, #12]
 80186cc:	4613      	mov	r3, r2
 80186ce:	005b      	lsls	r3, r3, #1
 80186d0:	4413      	add	r3, r2
 80186d2:	00db      	lsls	r3, r3, #3
 80186d4:	440b      	add	r3, r1
 80186d6:	3308      	adds	r3, #8
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	687a      	ldr	r2, [r7, #4]
 80186dc:	429a      	cmp	r2, r3
 80186de:	d102      	bne.n	80186e6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80186e0:	68f8      	ldr	r0, [r7, #12]
 80186e2:	f7ff fbc3 	bl	8017e6c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	3301      	adds	r3, #1
 80186ea:	60fb      	str	r3, [r7, #12]
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	2b09      	cmp	r3, #9
 80186f0:	dddd      	ble.n	80186ae <etharp_cleanup_netif+0xe>
    }
  }
}
 80186f2:	bf00      	nop
 80186f4:	bf00      	nop
 80186f6:	3710      	adds	r7, #16
 80186f8:	46bd      	mov	sp, r7
 80186fa:	bd80      	pop	{r7, pc}
 80186fc:	20011e14 	.word	0x20011e14

08018700 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018700:	b5b0      	push	{r4, r5, r7, lr}
 8018702:	b08a      	sub	sp, #40	@ 0x28
 8018704:	af04      	add	r7, sp, #16
 8018706:	6078      	str	r0, [r7, #4]
 8018708:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801870a:	683b      	ldr	r3, [r7, #0]
 801870c:	2b00      	cmp	r3, #0
 801870e:	d10a      	bne.n	8018726 <etharp_input+0x26>
 8018710:	4b62      	ldr	r3, [pc, #392]	@ (801889c <etharp_input+0x19c>)
 8018712:	f240 228a 	movw	r2, #650	@ 0x28a
 8018716:	4962      	ldr	r1, [pc, #392]	@ (80188a0 <etharp_input+0x1a0>)
 8018718:	4862      	ldr	r0, [pc, #392]	@ (80188a4 <etharp_input+0x1a4>)
 801871a:	f003 f805 	bl	801b728 <iprintf>
 801871e:	2000      	movs	r0, #0
 8018720:	f002 ff2c 	bl	801b57c <fflush>
 8018724:	e0b6      	b.n	8018894 <etharp_input+0x194>

  hdr = (struct etharp_hdr *)p->payload;
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	685b      	ldr	r3, [r3, #4]
 801872a:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801872c:	693b      	ldr	r3, [r7, #16]
 801872e:	881b      	ldrh	r3, [r3, #0]
 8018730:	b29b      	uxth	r3, r3
 8018732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018736:	d10c      	bne.n	8018752 <etharp_input+0x52>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018738:	693b      	ldr	r3, [r7, #16]
 801873a:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801873c:	2b06      	cmp	r3, #6
 801873e:	d108      	bne.n	8018752 <etharp_input+0x52>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018740:	693b      	ldr	r3, [r7, #16]
 8018742:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018744:	2b04      	cmp	r3, #4
 8018746:	d104      	bne.n	8018752 <etharp_input+0x52>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018748:	693b      	ldr	r3, [r7, #16]
 801874a:	885b      	ldrh	r3, [r3, #2]
 801874c:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801874e:	2b08      	cmp	r3, #8
 8018750:	d018      	beq.n	8018784 <etharp_input+0x84>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	881b      	ldrh	r3, [r3, #0]
 8018756:	b29b      	uxth	r3, r3
 8018758:	4619      	mov	r1, r3
 801875a:	693b      	ldr	r3, [r7, #16]
 801875c:	791b      	ldrb	r3, [r3, #4]
 801875e:	461a      	mov	r2, r3
 8018760:	693b      	ldr	r3, [r7, #16]
 8018762:	885b      	ldrh	r3, [r3, #2]
 8018764:	b29b      	uxth	r3, r3
 8018766:	4618      	mov	r0, r3
 8018768:	693b      	ldr	r3, [r7, #16]
 801876a:	795b      	ldrb	r3, [r3, #5]
 801876c:	9300      	str	r3, [sp, #0]
 801876e:	4603      	mov	r3, r0
 8018770:	484d      	ldr	r0, [pc, #308]	@ (80188a8 <etharp_input+0x1a8>)
 8018772:	f002 ffd9 	bl	801b728 <iprintf>
 8018776:	2000      	movs	r0, #0
 8018778:	f002 ff00 	bl	801b57c <fflush>
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801877c:	6878      	ldr	r0, [r7, #4]
 801877e:	f7f4 f8cd 	bl	800c91c <pbuf_free>
    return;
 8018782:	e087      	b.n	8018894 <etharp_input+0x194>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018784:	693b      	ldr	r3, [r7, #16]
 8018786:	330e      	adds	r3, #14
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	3318      	adds	r3, #24
 8018790:	681b      	ldr	r3, [r3, #0]
 8018792:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	3304      	adds	r3, #4
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	2b00      	cmp	r3, #0
 801879c:	d102      	bne.n	80187a4 <etharp_input+0xa4>
    for_us = 0;
 801879e:	2300      	movs	r3, #0
 80187a0:	75fb      	strb	r3, [r7, #23]
 80187a2:	e009      	b.n	80187b8 <etharp_input+0xb8>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80187a4:	68ba      	ldr	r2, [r7, #8]
 80187a6:	683b      	ldr	r3, [r7, #0]
 80187a8:	3304      	adds	r3, #4
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	429a      	cmp	r2, r3
 80187ae:	bf0c      	ite	eq
 80187b0:	2301      	moveq	r3, #1
 80187b2:	2300      	movne	r3, #0
 80187b4:	b2db      	uxtb	r3, r3
 80187b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80187b8:	693b      	ldr	r3, [r7, #16]
 80187ba:	f103 0208 	add.w	r2, r3, #8
 80187be:	7dfb      	ldrb	r3, [r7, #23]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d001      	beq.n	80187c8 <etharp_input+0xc8>
 80187c4:	2301      	movs	r3, #1
 80187c6:	e000      	b.n	80187ca <etharp_input+0xca>
 80187c8:	2302      	movs	r3, #2
 80187ca:	f107 010c 	add.w	r1, r7, #12
 80187ce:	6838      	ldr	r0, [r7, #0]
 80187d0:	f7ff fe76 	bl	80184c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80187d4:	693b      	ldr	r3, [r7, #16]
 80187d6:	88db      	ldrh	r3, [r3, #6]
 80187d8:	b29b      	uxth	r3, r3
 80187da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80187de:	d003      	beq.n	80187e8 <etharp_input+0xe8>
 80187e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80187e4:	d037      	beq.n	8018856 <etharp_input+0x156>
 80187e6:	e043      	b.n	8018870 <etharp_input+0x170>
    case PP_HTONS(ARP_REQUEST):
      /* ARP request. If it asked for our address, we send out a
       * reply. In any case, we time-stamp any existing ARP entry,
       * and possibly send out an IP packet that was queued on it. */

      LWIP_DEBUGF (ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP request\n"));
 80187e8:	4830      	ldr	r0, [pc, #192]	@ (80188ac <etharp_input+0x1ac>)
 80187ea:	f003 f80d 	bl	801b808 <puts>
 80187ee:	2000      	movs	r0, #0
 80187f0:	f002 fec4 	bl	801b57c <fflush>
      /* ARP request for our address? */
      if (for_us) {
 80187f4:	7dfb      	ldrb	r3, [r7, #23]
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d01a      	beq.n	8018830 <etharp_input+0x130>
        /* send ARP response */
        etharp_raw(netif,
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80187fa:	683b      	ldr	r3, [r7, #0]
 80187fc:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 8018800:	693b      	ldr	r3, [r7, #16]
 8018802:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018806:	683b      	ldr	r3, [r7, #0]
 8018808:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018810:	693a      	ldr	r2, [r7, #16]
 8018812:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018814:	2102      	movs	r1, #2
 8018816:	9103      	str	r1, [sp, #12]
 8018818:	f107 010c 	add.w	r1, r7, #12
 801881c:	9102      	str	r1, [sp, #8]
 801881e:	9201      	str	r2, [sp, #4]
 8018820:	9300      	str	r3, [sp, #0]
 8018822:	462b      	mov	r3, r5
 8018824:	4622      	mov	r2, r4
 8018826:	4601      	mov	r1, r0
 8018828:	6838      	ldr	r0, [r7, #0]
 801882a:	f000 fb75 	bl	8018f18 <etharp_raw>
        /* request was not directed to us */
      } else {
        /* { for_us == 0 and netif->ip_addr.addr != 0 } */
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
      }
      break;
 801882e:	e02e      	b.n	801888e <etharp_input+0x18e>
      } else if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018830:	683b      	ldr	r3, [r7, #0]
 8018832:	3304      	adds	r3, #4
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	2b00      	cmp	r3, #0
 8018838:	d106      	bne.n	8018848 <etharp_input+0x148>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: we are unconfigured, ARP request ignored.\n"));
 801883a:	481d      	ldr	r0, [pc, #116]	@ (80188b0 <etharp_input+0x1b0>)
 801883c:	f002 ffe4 	bl	801b808 <puts>
 8018840:	2000      	movs	r0, #0
 8018842:	f002 fe9b 	bl	801b57c <fflush>
      break;
 8018846:	e022      	b.n	801888e <etharp_input+0x18e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP request was not for us.\n"));
 8018848:	481a      	ldr	r0, [pc, #104]	@ (80188b4 <etharp_input+0x1b4>)
 801884a:	f002 ffdd 	bl	801b808 <puts>
 801884e:	2000      	movs	r0, #0
 8018850:	f002 fe94 	bl	801b57c <fflush>
      break;
 8018854:	e01b      	b.n	801888e <etharp_input+0x18e>
    case PP_HTONS(ARP_REPLY):
      /* ARP reply. We already updated the ARP cache earlier. */
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: incoming ARP reply\n"));
 8018856:	4818      	ldr	r0, [pc, #96]	@ (80188b8 <etharp_input+0x1b8>)
 8018858:	f002 ffd6 	bl	801b808 <puts>
 801885c:	2000      	movs	r0, #0
 801885e:	f002 fe8d 	bl	801b57c <fflush>
#if (LWIP_DHCP && DHCP_DOES_ARP_CHECK)
      /* DHCP wants to know about ARP replies from any host with an
       * IP address also offered to us by the DHCP server. We do not
       * want to take a duplicate IP address on a single network.
       * @todo How should we handle redundant (fail-over) interfaces? */
      dhcp_arp_reply(netif, &sipaddr);
 8018862:	f107 030c 	add.w	r3, r7, #12
 8018866:	4619      	mov	r1, r3
 8018868:	6838      	ldr	r0, [r7, #0]
 801886a:	f7fd fe23 	bl	80164b4 <dhcp_arp_reply>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
 801886e:	e00e      	b.n	801888e <etharp_input+0x18e>
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
 8018870:	693b      	ldr	r3, [r7, #16]
 8018872:	88db      	ldrh	r3, [r3, #6]
 8018874:	b29b      	uxth	r3, r3
 8018876:	4618      	mov	r0, r3
 8018878:	f7f2 f9fc 	bl	800ac74 <lwip_htons>
 801887c:	4603      	mov	r3, r0
 801887e:	4619      	mov	r1, r3
 8018880:	480e      	ldr	r0, [pc, #56]	@ (80188bc <etharp_input+0x1bc>)
 8018882:	f002 ff51 	bl	801b728 <iprintf>
 8018886:	2000      	movs	r0, #0
 8018888:	f002 fe78 	bl	801b57c <fflush>
      ETHARP_STATS_INC(etharp.err);
      break;
 801888c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801888e:	6878      	ldr	r0, [r7, #4]
 8018890:	f7f4 f844 	bl	800c91c <pbuf_free>
}
 8018894:	3718      	adds	r7, #24
 8018896:	46bd      	mov	sp, r7
 8018898:	bdb0      	pop	{r4, r5, r7, pc}
 801889a:	bf00      	nop
 801889c:	08022bc4 	.word	0x08022bc4
 80188a0:	08022f8c 	.word	0x08022f8c
 80188a4:	08022c3c 	.word	0x08022c3c
 80188a8:	08022fac 	.word	0x08022fac
 80188ac:	08023014 	.word	0x08023014
 80188b0:	08023038 	.word	0x08023038
 80188b4:	08023070 	.word	0x08023070
 80188b8:	0802309c 	.word	0x0802309c
 80188bc:	080230c0 	.word	0x080230c0

080188c0 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b086      	sub	sp, #24
 80188c4:	af02      	add	r7, sp, #8
 80188c6:	60f8      	str	r0, [r7, #12]
 80188c8:	60b9      	str	r1, [r7, #8]
 80188ca:	4613      	mov	r3, r2
 80188cc:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80188ce:	79fa      	ldrb	r2, [r7, #7]
 80188d0:	4945      	ldr	r1, [pc, #276]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 80188d2:	4613      	mov	r3, r2
 80188d4:	005b      	lsls	r3, r3, #1
 80188d6:	4413      	add	r3, r2
 80188d8:	00db      	lsls	r3, r3, #3
 80188da:	440b      	add	r3, r1
 80188dc:	3314      	adds	r3, #20
 80188de:	781b      	ldrb	r3, [r3, #0]
 80188e0:	2b01      	cmp	r3, #1
 80188e2:	d809      	bhi.n	80188f8 <etharp_output_to_arp_index+0x38>
 80188e4:	4b41      	ldr	r3, [pc, #260]	@ (80189ec <etharp_output_to_arp_index+0x12c>)
 80188e6:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80188ea:	4941      	ldr	r1, [pc, #260]	@ (80189f0 <etharp_output_to_arp_index+0x130>)
 80188ec:	4841      	ldr	r0, [pc, #260]	@ (80189f4 <etharp_output_to_arp_index+0x134>)
 80188ee:	f002 ff1b 	bl	801b728 <iprintf>
 80188f2:	2000      	movs	r0, #0
 80188f4:	f002 fe42 	bl	801b57c <fflush>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80188f8:	79fa      	ldrb	r2, [r7, #7]
 80188fa:	493b      	ldr	r1, [pc, #236]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 80188fc:	4613      	mov	r3, r2
 80188fe:	005b      	lsls	r3, r3, #1
 8018900:	4413      	add	r3, r2
 8018902:	00db      	lsls	r3, r3, #3
 8018904:	440b      	add	r3, r1
 8018906:	3314      	adds	r3, #20
 8018908:	781b      	ldrb	r3, [r3, #0]
 801890a:	2b02      	cmp	r3, #2
 801890c:	d153      	bne.n	80189b6 <etharp_output_to_arp_index+0xf6>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801890e:	79fa      	ldrb	r2, [r7, #7]
 8018910:	4935      	ldr	r1, [pc, #212]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 8018912:	4613      	mov	r3, r2
 8018914:	005b      	lsls	r3, r3, #1
 8018916:	4413      	add	r3, r2
 8018918:	00db      	lsls	r3, r3, #3
 801891a:	440b      	add	r3, r1
 801891c:	3312      	adds	r3, #18
 801891e:	881b      	ldrh	r3, [r3, #0]
 8018920:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8018924:	d919      	bls.n	801895a <etharp_output_to_arp_index+0x9a>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018926:	79fa      	ldrb	r2, [r7, #7]
 8018928:	4613      	mov	r3, r2
 801892a:	005b      	lsls	r3, r3, #1
 801892c:	4413      	add	r3, r2
 801892e:	00db      	lsls	r3, r3, #3
 8018930:	4a2d      	ldr	r2, [pc, #180]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 8018932:	4413      	add	r3, r2
 8018934:	3304      	adds	r3, #4
 8018936:	4619      	mov	r1, r3
 8018938:	68f8      	ldr	r0, [r7, #12]
 801893a:	f000 fbb5 	bl	80190a8 <etharp_request>
 801893e:	4603      	mov	r3, r0
 8018940:	2b00      	cmp	r3, #0
 8018942:	d138      	bne.n	80189b6 <etharp_output_to_arp_index+0xf6>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018944:	79fa      	ldrb	r2, [r7, #7]
 8018946:	4928      	ldr	r1, [pc, #160]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 8018948:	4613      	mov	r3, r2
 801894a:	005b      	lsls	r3, r3, #1
 801894c:	4413      	add	r3, r2
 801894e:	00db      	lsls	r3, r3, #3
 8018950:	440b      	add	r3, r1
 8018952:	3314      	adds	r3, #20
 8018954:	2203      	movs	r2, #3
 8018956:	701a      	strb	r2, [r3, #0]
 8018958:	e02d      	b.n	80189b6 <etharp_output_to_arp_index+0xf6>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801895a:	79fa      	ldrb	r2, [r7, #7]
 801895c:	4922      	ldr	r1, [pc, #136]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 801895e:	4613      	mov	r3, r2
 8018960:	005b      	lsls	r3, r3, #1
 8018962:	4413      	add	r3, r2
 8018964:	00db      	lsls	r3, r3, #3
 8018966:	440b      	add	r3, r1
 8018968:	3312      	adds	r3, #18
 801896a:	881b      	ldrh	r3, [r3, #0]
 801896c:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8018970:	d321      	bcc.n	80189b6 <etharp_output_to_arp_index+0xf6>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018972:	79fa      	ldrb	r2, [r7, #7]
 8018974:	4613      	mov	r3, r2
 8018976:	005b      	lsls	r3, r3, #1
 8018978:	4413      	add	r3, r2
 801897a:	00db      	lsls	r3, r3, #3
 801897c:	4a1a      	ldr	r2, [pc, #104]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 801897e:	4413      	add	r3, r2
 8018980:	1d19      	adds	r1, r3, #4
 8018982:	79fa      	ldrb	r2, [r7, #7]
 8018984:	4613      	mov	r3, r2
 8018986:	005b      	lsls	r3, r3, #1
 8018988:	4413      	add	r3, r2
 801898a:	00db      	lsls	r3, r3, #3
 801898c:	3308      	adds	r3, #8
 801898e:	4a16      	ldr	r2, [pc, #88]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 8018990:	4413      	add	r3, r2
 8018992:	3304      	adds	r3, #4
 8018994:	461a      	mov	r2, r3
 8018996:	68f8      	ldr	r0, [r7, #12]
 8018998:	f000 fb64 	bl	8019064 <etharp_request_dst>
 801899c:	4603      	mov	r3, r0
 801899e:	2b00      	cmp	r3, #0
 80189a0:	d109      	bne.n	80189b6 <etharp_output_to_arp_index+0xf6>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80189a2:	79fa      	ldrb	r2, [r7, #7]
 80189a4:	4910      	ldr	r1, [pc, #64]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 80189a6:	4613      	mov	r3, r2
 80189a8:	005b      	lsls	r3, r3, #1
 80189aa:	4413      	add	r3, r2
 80189ac:	00db      	lsls	r3, r3, #3
 80189ae:	440b      	add	r3, r1
 80189b0:	3314      	adds	r3, #20
 80189b2:	2203      	movs	r2, #3
 80189b4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80189b6:	68fb      	ldr	r3, [r7, #12]
 80189b8:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 80189bc:	79fa      	ldrb	r2, [r7, #7]
 80189be:	4613      	mov	r3, r2
 80189c0:	005b      	lsls	r3, r3, #1
 80189c2:	4413      	add	r3, r2
 80189c4:	00db      	lsls	r3, r3, #3
 80189c6:	3308      	adds	r3, #8
 80189c8:	4a07      	ldr	r2, [pc, #28]	@ (80189e8 <etharp_output_to_arp_index+0x128>)
 80189ca:	4413      	add	r3, r2
 80189cc:	3304      	adds	r3, #4
 80189ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80189d2:	9200      	str	r2, [sp, #0]
 80189d4:	460a      	mov	r2, r1
 80189d6:	68b9      	ldr	r1, [r7, #8]
 80189d8:	68f8      	ldr	r0, [r7, #12]
 80189da:	f002 fad3 	bl	801af84 <ethernet_output>
 80189de:	4603      	mov	r3, r0
}
 80189e0:	4618      	mov	r0, r3
 80189e2:	3710      	adds	r7, #16
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	20011e14 	.word	0x20011e14
 80189ec:	08022bc4 	.word	0x08022bc4
 80189f0:	080230ec 	.word	0x080230ec
 80189f4:	08022c3c 	.word	0x08022c3c

080189f8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80189f8:	b580      	push	{r7, lr}
 80189fa:	b08a      	sub	sp, #40	@ 0x28
 80189fc:	af02      	add	r7, sp, #8
 80189fe:	60f8      	str	r0, [r7, #12]
 8018a00:	60b9      	str	r1, [r7, #8]
 8018a02:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d109      	bne.n	8018a22 <etharp_output+0x2a>
 8018a0e:	4b78      	ldr	r3, [pc, #480]	@ (8018bf0 <etharp_output+0x1f8>)
 8018a10:	f240 321e 	movw	r2, #798	@ 0x31e
 8018a14:	4977      	ldr	r1, [pc, #476]	@ (8018bf4 <etharp_output+0x1fc>)
 8018a16:	4878      	ldr	r0, [pc, #480]	@ (8018bf8 <etharp_output+0x200>)
 8018a18:	f002 fe86 	bl	801b728 <iprintf>
 8018a1c:	2000      	movs	r0, #0
 8018a1e:	f002 fdad 	bl	801b57c <fflush>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018a22:	68bb      	ldr	r3, [r7, #8]
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d109      	bne.n	8018a3c <etharp_output+0x44>
 8018a28:	4b71      	ldr	r3, [pc, #452]	@ (8018bf0 <etharp_output+0x1f8>)
 8018a2a:	f240 321f 	movw	r2, #799	@ 0x31f
 8018a2e:	4973      	ldr	r1, [pc, #460]	@ (8018bfc <etharp_output+0x204>)
 8018a30:	4871      	ldr	r0, [pc, #452]	@ (8018bf8 <etharp_output+0x200>)
 8018a32:	f002 fe79 	bl	801b728 <iprintf>
 8018a36:	2000      	movs	r0, #0
 8018a38:	f002 fda0 	bl	801b57c <fflush>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	2b00      	cmp	r3, #0
 8018a40:	d109      	bne.n	8018a56 <etharp_output+0x5e>
 8018a42:	4b6b      	ldr	r3, [pc, #428]	@ (8018bf0 <etharp_output+0x1f8>)
 8018a44:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8018a48:	496d      	ldr	r1, [pc, #436]	@ (8018c00 <etharp_output+0x208>)
 8018a4a:	486b      	ldr	r0, [pc, #428]	@ (8018bf8 <etharp_output+0x200>)
 8018a4c:	f002 fe6c 	bl	801b728 <iprintf>
 8018a50:	2000      	movs	r0, #0
 8018a52:	f002 fd93 	bl	801b57c <fflush>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	68f9      	ldr	r1, [r7, #12]
 8018a5c:	4618      	mov	r0, r3
 8018a5e:	f001 fa83 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8018a62:	4603      	mov	r3, r0
 8018a64:	2b00      	cmp	r3, #0
 8018a66:	d002      	beq.n	8018a6e <etharp_output+0x76>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018a68:	4b66      	ldr	r3, [pc, #408]	@ (8018c04 <etharp_output+0x20c>)
 8018a6a:	61fb      	str	r3, [r7, #28]
 8018a6c:	e0af      	b.n	8018bce <etharp_output+0x1d6>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	681b      	ldr	r3, [r3, #0]
 8018a72:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018a76:	2be0      	cmp	r3, #224	@ 0xe0
 8018a78:	d118      	bne.n	8018aac <etharp_output+0xb4>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018a7a:	2301      	movs	r3, #1
 8018a7c:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018a7e:	2300      	movs	r3, #0
 8018a80:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018a82:	235e      	movs	r3, #94	@ 0x5e
 8018a84:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	3301      	adds	r3, #1
 8018a8a:	781b      	ldrb	r3, [r3, #0]
 8018a8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018a90:	b2db      	uxtb	r3, r3
 8018a92:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	3302      	adds	r3, #2
 8018a98:	781b      	ldrb	r3, [r3, #0]
 8018a9a:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	3303      	adds	r3, #3
 8018aa0:	781b      	ldrb	r3, [r3, #0]
 8018aa2:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018aa4:	f107 0310 	add.w	r3, r7, #16
 8018aa8:	61fb      	str	r3, [r7, #28]
 8018aaa:	e090      	b.n	8018bce <etharp_output+0x1d6>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681a      	ldr	r2, [r3, #0]
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	3304      	adds	r3, #4
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	405a      	eors	r2, r3
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	3308      	adds	r3, #8
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	4013      	ands	r3, r2
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d012      	beq.n	8018aea <etharp_output+0xf2>
        !ip4_addr_islinklocal(ipaddr)) {
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018aca:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8018ace:	4293      	cmp	r3, r2
 8018ad0:	d00b      	beq.n	8018aea <etharp_output+0xf2>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018ad2:	68fb      	ldr	r3, [r7, #12]
 8018ad4:	330c      	adds	r3, #12
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	2b00      	cmp	r3, #0
 8018ada:	d003      	beq.n	8018ae4 <etharp_output+0xec>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	330c      	adds	r3, #12
 8018ae0:	61bb      	str	r3, [r7, #24]
 8018ae2:	e002      	b.n	8018aea <etharp_output+0xf2>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018ae4:	f06f 0303 	mvn.w	r3, #3
 8018ae8:	e07d      	b.n	8018be6 <etharp_output+0x1ee>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018aea:	4b47      	ldr	r3, [pc, #284]	@ (8018c08 <etharp_output+0x210>)
 8018aec:	781b      	ldrb	r3, [r3, #0]
 8018aee:	4619      	mov	r1, r3
 8018af0:	4a46      	ldr	r2, [pc, #280]	@ (8018c0c <etharp_output+0x214>)
 8018af2:	460b      	mov	r3, r1
 8018af4:	005b      	lsls	r3, r3, #1
 8018af6:	440b      	add	r3, r1
 8018af8:	00db      	lsls	r3, r3, #3
 8018afa:	4413      	add	r3, r2
 8018afc:	3314      	adds	r3, #20
 8018afe:	781b      	ldrb	r3, [r3, #0]
 8018b00:	2b01      	cmp	r3, #1
 8018b02:	d925      	bls.n	8018b50 <etharp_output+0x158>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018b04:	4b40      	ldr	r3, [pc, #256]	@ (8018c08 <etharp_output+0x210>)
 8018b06:	781b      	ldrb	r3, [r3, #0]
 8018b08:	4619      	mov	r1, r3
 8018b0a:	4a40      	ldr	r2, [pc, #256]	@ (8018c0c <etharp_output+0x214>)
 8018b0c:	460b      	mov	r3, r1
 8018b0e:	005b      	lsls	r3, r3, #1
 8018b10:	440b      	add	r3, r1
 8018b12:	00db      	lsls	r3, r3, #3
 8018b14:	4413      	add	r3, r2
 8018b16:	3308      	adds	r3, #8
 8018b18:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018b1a:	68fa      	ldr	r2, [r7, #12]
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	d117      	bne.n	8018b50 <etharp_output+0x158>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018b20:	69bb      	ldr	r3, [r7, #24]
 8018b22:	681a      	ldr	r2, [r3, #0]
 8018b24:	4b38      	ldr	r3, [pc, #224]	@ (8018c08 <etharp_output+0x210>)
 8018b26:	781b      	ldrb	r3, [r3, #0]
 8018b28:	4618      	mov	r0, r3
 8018b2a:	4938      	ldr	r1, [pc, #224]	@ (8018c0c <etharp_output+0x214>)
 8018b2c:	4603      	mov	r3, r0
 8018b2e:	005b      	lsls	r3, r3, #1
 8018b30:	4403      	add	r3, r0
 8018b32:	00db      	lsls	r3, r3, #3
 8018b34:	440b      	add	r3, r1
 8018b36:	3304      	adds	r3, #4
 8018b38:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d108      	bne.n	8018b50 <etharp_output+0x158>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018b3e:	4b32      	ldr	r3, [pc, #200]	@ (8018c08 <etharp_output+0x210>)
 8018b40:	781b      	ldrb	r3, [r3, #0]
 8018b42:	461a      	mov	r2, r3
 8018b44:	68b9      	ldr	r1, [r7, #8]
 8018b46:	68f8      	ldr	r0, [r7, #12]
 8018b48:	f7ff feba 	bl	80188c0 <etharp_output_to_arp_index>
 8018b4c:	4603      	mov	r3, r0
 8018b4e:	e04a      	b.n	8018be6 <etharp_output+0x1ee>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b50:	2300      	movs	r3, #0
 8018b52:	75fb      	strb	r3, [r7, #23]
 8018b54:	e031      	b.n	8018bba <etharp_output+0x1c2>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b56:	7dfa      	ldrb	r2, [r7, #23]
 8018b58:	492c      	ldr	r1, [pc, #176]	@ (8018c0c <etharp_output+0x214>)
 8018b5a:	4613      	mov	r3, r2
 8018b5c:	005b      	lsls	r3, r3, #1
 8018b5e:	4413      	add	r3, r2
 8018b60:	00db      	lsls	r3, r3, #3
 8018b62:	440b      	add	r3, r1
 8018b64:	3314      	adds	r3, #20
 8018b66:	781b      	ldrb	r3, [r3, #0]
 8018b68:	2b01      	cmp	r3, #1
 8018b6a:	d923      	bls.n	8018bb4 <etharp_output+0x1bc>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018b6c:	7dfa      	ldrb	r2, [r7, #23]
 8018b6e:	4927      	ldr	r1, [pc, #156]	@ (8018c0c <etharp_output+0x214>)
 8018b70:	4613      	mov	r3, r2
 8018b72:	005b      	lsls	r3, r3, #1
 8018b74:	4413      	add	r3, r2
 8018b76:	00db      	lsls	r3, r3, #3
 8018b78:	440b      	add	r3, r1
 8018b7a:	3308      	adds	r3, #8
 8018b7c:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b7e:	68fa      	ldr	r2, [r7, #12]
 8018b80:	429a      	cmp	r2, r3
 8018b82:	d117      	bne.n	8018bb4 <etharp_output+0x1bc>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018b84:	69bb      	ldr	r3, [r7, #24]
 8018b86:	6819      	ldr	r1, [r3, #0]
 8018b88:	7dfa      	ldrb	r2, [r7, #23]
 8018b8a:	4820      	ldr	r0, [pc, #128]	@ (8018c0c <etharp_output+0x214>)
 8018b8c:	4613      	mov	r3, r2
 8018b8e:	005b      	lsls	r3, r3, #1
 8018b90:	4413      	add	r3, r2
 8018b92:	00db      	lsls	r3, r3, #3
 8018b94:	4403      	add	r3, r0
 8018b96:	3304      	adds	r3, #4
 8018b98:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018b9a:	4299      	cmp	r1, r3
 8018b9c:	d10a      	bne.n	8018bb4 <etharp_output+0x1bc>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8018c08 <etharp_output+0x210>)
 8018ba0:	7dfb      	ldrb	r3, [r7, #23]
 8018ba2:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018ba4:	7dfb      	ldrb	r3, [r7, #23]
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	68b9      	ldr	r1, [r7, #8]
 8018baa:	68f8      	ldr	r0, [r7, #12]
 8018bac:	f7ff fe88 	bl	80188c0 <etharp_output_to_arp_index>
 8018bb0:	4603      	mov	r3, r0
 8018bb2:	e018      	b.n	8018be6 <etharp_output+0x1ee>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018bb4:	7dfb      	ldrb	r3, [r7, #23]
 8018bb6:	3301      	adds	r3, #1
 8018bb8:	75fb      	strb	r3, [r7, #23]
 8018bba:	7dfb      	ldrb	r3, [r7, #23]
 8018bbc:	2b09      	cmp	r3, #9
 8018bbe:	d9ca      	bls.n	8018b56 <etharp_output+0x15e>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018bc0:	68ba      	ldr	r2, [r7, #8]
 8018bc2:	69b9      	ldr	r1, [r7, #24]
 8018bc4:	68f8      	ldr	r0, [r7, #12]
 8018bc6:	f000 f823 	bl	8018c10 <etharp_query>
 8018bca:	4603      	mov	r3, r0
 8018bcc:	e00b      	b.n	8018be6 <etharp_output+0x1ee>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8018bd4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8018bd8:	9300      	str	r3, [sp, #0]
 8018bda:	69fb      	ldr	r3, [r7, #28]
 8018bdc:	68b9      	ldr	r1, [r7, #8]
 8018bde:	68f8      	ldr	r0, [r7, #12]
 8018be0:	f002 f9d0 	bl	801af84 <ethernet_output>
 8018be4:	4603      	mov	r3, r0
}
 8018be6:	4618      	mov	r0, r3
 8018be8:	3720      	adds	r7, #32
 8018bea:	46bd      	mov	sp, r7
 8018bec:	bd80      	pop	{r7, pc}
 8018bee:	bf00      	nop
 8018bf0:	08022bc4 	.word	0x08022bc4
 8018bf4:	08022f8c 	.word	0x08022f8c
 8018bf8:	08022c3c 	.word	0x08022c3c
 8018bfc:	0802311c 	.word	0x0802311c
 8018c00:	08022f7c 	.word	0x08022f7c
 8018c04:	08025278 	.word	0x08025278
 8018c08:	20011f04 	.word	0x20011f04
 8018c0c:	20011e14 	.word	0x20011e14

08018c10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018c10:	b580      	push	{r7, lr}
 8018c12:	b08c      	sub	sp, #48	@ 0x30
 8018c14:	af02      	add	r7, sp, #8
 8018c16:	60f8      	str	r0, [r7, #12]
 8018c18:	60b9      	str	r1, [r7, #8]
 8018c1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018c1c:	68fb      	ldr	r3, [r7, #12]
 8018c1e:	332a      	adds	r3, #42	@ 0x2a
 8018c20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018c22:	23ff      	movs	r3, #255	@ 0xff
 8018c24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8018c28:	2300      	movs	r3, #0
 8018c2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c2c:	68bb      	ldr	r3, [r7, #8]
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	68f9      	ldr	r1, [r7, #12]
 8018c32:	4618      	mov	r0, r3
 8018c34:	f001 f998 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d10c      	bne.n	8018c58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c3e:	68bb      	ldr	r3, [r7, #8]
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c46:	2be0      	cmp	r3, #224	@ 0xe0
 8018c48:	d006      	beq.n	8018c58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c4a:	68bb      	ldr	r3, [r7, #8]
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d003      	beq.n	8018c58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018c50:	68bb      	ldr	r3, [r7, #8]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	2b00      	cmp	r3, #0
 8018c56:	d108      	bne.n	8018c6a <etharp_query+0x5a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
 8018c58:	48a1      	ldr	r0, [pc, #644]	@ (8018ee0 <etharp_query+0x2d0>)
 8018c5a:	f002 fdd5 	bl	801b808 <puts>
 8018c5e:	2000      	movs	r0, #0
 8018c60:	f002 fc8c 	bl	801b57c <fflush>
    return ERR_ARG;
 8018c64:	f06f 030f 	mvn.w	r3, #15
 8018c68:	e135      	b.n	8018ed6 <etharp_query+0x2c6>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018c6a:	68fa      	ldr	r2, [r7, #12]
 8018c6c:	2101      	movs	r1, #1
 8018c6e:	68b8      	ldr	r0, [r7, #8]
 8018c70:	f7ff fa3e 	bl	80180f0 <etharp_find_entry>
 8018c74:	4603      	mov	r3, r0
 8018c76:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018c78:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	da11      	bge.n	8018ca4 <etharp_query+0x94>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
 8018c80:	4898      	ldr	r0, [pc, #608]	@ (8018ee4 <etharp_query+0x2d4>)
 8018c82:	f002 fdc1 	bl	801b808 <puts>
 8018c86:	2000      	movs	r0, #0
 8018c88:	f002 fc78 	bl	801b57c <fflush>
    if (q) {
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d005      	beq.n	8018c9e <etharp_query+0x8e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
 8018c92:	4895      	ldr	r0, [pc, #596]	@ (8018ee8 <etharp_query+0x2d8>)
 8018c94:	f002 fdb8 	bl	801b808 <puts>
 8018c98:	2000      	movs	r0, #0
 8018c9a:	f002 fc6f 	bl	801b57c <fflush>
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018c9e:	8a7b      	ldrh	r3, [r7, #18]
 8018ca0:	b25b      	sxtb	r3, r3
 8018ca2:	e118      	b.n	8018ed6 <etharp_query+0x2c6>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018ca4:	8a7b      	ldrh	r3, [r7, #18]
 8018ca6:	2b7e      	cmp	r3, #126	@ 0x7e
 8018ca8:	d909      	bls.n	8018cbe <etharp_query+0xae>
 8018caa:	4b90      	ldr	r3, [pc, #576]	@ (8018eec <etharp_query+0x2dc>)
 8018cac:	f240 32c1 	movw	r2, #961	@ 0x3c1
 8018cb0:	498f      	ldr	r1, [pc, #572]	@ (8018ef0 <etharp_query+0x2e0>)
 8018cb2:	4890      	ldr	r0, [pc, #576]	@ (8018ef4 <etharp_query+0x2e4>)
 8018cb4:	f002 fd38 	bl	801b728 <iprintf>
 8018cb8:	2000      	movs	r0, #0
 8018cba:	f002 fc5f 	bl	801b57c <fflush>
  i = (netif_addr_idx_t)i_err;
 8018cbe:	8a7b      	ldrh	r3, [r7, #18]
 8018cc0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018cc2:	7c7a      	ldrb	r2, [r7, #17]
 8018cc4:	498c      	ldr	r1, [pc, #560]	@ (8018ef8 <etharp_query+0x2e8>)
 8018cc6:	4613      	mov	r3, r2
 8018cc8:	005b      	lsls	r3, r3, #1
 8018cca:	4413      	add	r3, r2
 8018ccc:	00db      	lsls	r3, r3, #3
 8018cce:	440b      	add	r3, r1
 8018cd0:	3314      	adds	r3, #20
 8018cd2:	781b      	ldrb	r3, [r3, #0]
 8018cd4:	2b00      	cmp	r3, #0
 8018cd6:	d115      	bne.n	8018d04 <etharp_query+0xf4>
    is_new_entry = 1;
 8018cd8:	2301      	movs	r3, #1
 8018cda:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018cdc:	7c7a      	ldrb	r2, [r7, #17]
 8018cde:	4986      	ldr	r1, [pc, #536]	@ (8018ef8 <etharp_query+0x2e8>)
 8018ce0:	4613      	mov	r3, r2
 8018ce2:	005b      	lsls	r3, r3, #1
 8018ce4:	4413      	add	r3, r2
 8018ce6:	00db      	lsls	r3, r3, #3
 8018ce8:	440b      	add	r3, r1
 8018cea:	3314      	adds	r3, #20
 8018cec:	2201      	movs	r2, #1
 8018cee:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018cf0:	7c7a      	ldrb	r2, [r7, #17]
 8018cf2:	4981      	ldr	r1, [pc, #516]	@ (8018ef8 <etharp_query+0x2e8>)
 8018cf4:	4613      	mov	r3, r2
 8018cf6:	005b      	lsls	r3, r3, #1
 8018cf8:	4413      	add	r3, r2
 8018cfa:	00db      	lsls	r3, r3, #3
 8018cfc:	440b      	add	r3, r1
 8018cfe:	3308      	adds	r3, #8
 8018d00:	68fa      	ldr	r2, [r7, #12]
 8018d02:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018d04:	7c7a      	ldrb	r2, [r7, #17]
 8018d06:	497c      	ldr	r1, [pc, #496]	@ (8018ef8 <etharp_query+0x2e8>)
 8018d08:	4613      	mov	r3, r2
 8018d0a:	005b      	lsls	r3, r3, #1
 8018d0c:	4413      	add	r3, r2
 8018d0e:	00db      	lsls	r3, r3, #3
 8018d10:	440b      	add	r3, r1
 8018d12:	3314      	adds	r3, #20
 8018d14:	781b      	ldrb	r3, [r3, #0]
 8018d16:	2b01      	cmp	r3, #1
 8018d18:	d014      	beq.n	8018d44 <etharp_query+0x134>
 8018d1a:	7c7a      	ldrb	r2, [r7, #17]
 8018d1c:	4976      	ldr	r1, [pc, #472]	@ (8018ef8 <etharp_query+0x2e8>)
 8018d1e:	4613      	mov	r3, r2
 8018d20:	005b      	lsls	r3, r3, #1
 8018d22:	4413      	add	r3, r2
 8018d24:	00db      	lsls	r3, r3, #3
 8018d26:	440b      	add	r3, r1
 8018d28:	3314      	adds	r3, #20
 8018d2a:	781b      	ldrb	r3, [r3, #0]
 8018d2c:	2b01      	cmp	r3, #1
 8018d2e:	d809      	bhi.n	8018d44 <etharp_query+0x134>
 8018d30:	4b6e      	ldr	r3, [pc, #440]	@ (8018eec <etharp_query+0x2dc>)
 8018d32:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8018d36:	4971      	ldr	r1, [pc, #452]	@ (8018efc <etharp_query+0x2ec>)
 8018d38:	486e      	ldr	r0, [pc, #440]	@ (8018ef4 <etharp_query+0x2e4>)
 8018d3a:	f002 fcf5 	bl	801b728 <iprintf>
 8018d3e:	2000      	movs	r0, #0
 8018d40:	f002 fc1c 	bl	801b57c <fflush>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018d44:	6a3b      	ldr	r3, [r7, #32]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d102      	bne.n	8018d50 <etharp_query+0x140>
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	2b00      	cmp	r3, #0
 8018d4e:	d10c      	bne.n	8018d6a <etharp_query+0x15a>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018d50:	68b9      	ldr	r1, [r7, #8]
 8018d52:	68f8      	ldr	r0, [r7, #12]
 8018d54:	f000 f9a8 	bl	80190a8 <etharp_request>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d102      	bne.n	8018d6a <etharp_query+0x15a>
      return result;
 8018d64:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8018d68:	e0b5      	b.n	8018ed6 <etharp_query+0x2c6>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d109      	bne.n	8018d84 <etharp_query+0x174>
 8018d70:	4b5e      	ldr	r3, [pc, #376]	@ (8018eec <etharp_query+0x2dc>)
 8018d72:	f240 32e1 	movw	r2, #993	@ 0x3e1
 8018d76:	4962      	ldr	r1, [pc, #392]	@ (8018f00 <etharp_query+0x2f0>)
 8018d78:	485e      	ldr	r0, [pc, #376]	@ (8018ef4 <etharp_query+0x2e4>)
 8018d7a:	f002 fcd5 	bl	801b728 <iprintf>
 8018d7e:	2000      	movs	r0, #0
 8018d80:	f002 fbfc 	bl	801b57c <fflush>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018d84:	7c7a      	ldrb	r2, [r7, #17]
 8018d86:	495c      	ldr	r1, [pc, #368]	@ (8018ef8 <etharp_query+0x2e8>)
 8018d88:	4613      	mov	r3, r2
 8018d8a:	005b      	lsls	r3, r3, #1
 8018d8c:	4413      	add	r3, r2
 8018d8e:	00db      	lsls	r3, r3, #3
 8018d90:	440b      	add	r3, r1
 8018d92:	3314      	adds	r3, #20
 8018d94:	781b      	ldrb	r3, [r3, #0]
 8018d96:	2b01      	cmp	r3, #1
 8018d98:	d917      	bls.n	8018dca <etharp_query+0x1ba>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018d9a:	4a5a      	ldr	r2, [pc, #360]	@ (8018f04 <etharp_query+0x2f4>)
 8018d9c:	7c7b      	ldrb	r3, [r7, #17]
 8018d9e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018da0:	7c7a      	ldrb	r2, [r7, #17]
 8018da2:	4613      	mov	r3, r2
 8018da4:	005b      	lsls	r3, r3, #1
 8018da6:	4413      	add	r3, r2
 8018da8:	00db      	lsls	r3, r3, #3
 8018daa:	3308      	adds	r3, #8
 8018dac:	4a52      	ldr	r2, [pc, #328]	@ (8018ef8 <etharp_query+0x2e8>)
 8018dae:	4413      	add	r3, r2
 8018db0:	3304      	adds	r3, #4
 8018db2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8018db6:	9200      	str	r2, [sp, #0]
 8018db8:	697a      	ldr	r2, [r7, #20]
 8018dba:	6879      	ldr	r1, [r7, #4]
 8018dbc:	68f8      	ldr	r0, [r7, #12]
 8018dbe:	f002 f8e1 	bl	801af84 <ethernet_output>
 8018dc2:	4603      	mov	r3, r0
 8018dc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8018dc8:	e083      	b.n	8018ed2 <etharp_query+0x2c2>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018dca:	7c7a      	ldrb	r2, [r7, #17]
 8018dcc:	494a      	ldr	r1, [pc, #296]	@ (8018ef8 <etharp_query+0x2e8>)
 8018dce:	4613      	mov	r3, r2
 8018dd0:	005b      	lsls	r3, r3, #1
 8018dd2:	4413      	add	r3, r2
 8018dd4:	00db      	lsls	r3, r3, #3
 8018dd6:	440b      	add	r3, r1
 8018dd8:	3314      	adds	r3, #20
 8018dda:	781b      	ldrb	r3, [r3, #0]
 8018ddc:	2b01      	cmp	r3, #1
 8018dde:	d178      	bne.n	8018ed2 <etharp_query+0x2c2>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018de0:	2300      	movs	r3, #0
 8018de2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018de8:	e01f      	b.n	8018e2a <etharp_query+0x21a>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018dea:	69fb      	ldr	r3, [r7, #28]
 8018dec:	895a      	ldrh	r2, [r3, #10]
 8018dee:	69fb      	ldr	r3, [r7, #28]
 8018df0:	891b      	ldrh	r3, [r3, #8]
 8018df2:	429a      	cmp	r2, r3
 8018df4:	d10d      	bne.n	8018e12 <etharp_query+0x202>
 8018df6:	69fb      	ldr	r3, [r7, #28]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d009      	beq.n	8018e12 <etharp_query+0x202>
 8018dfe:	4b3b      	ldr	r3, [pc, #236]	@ (8018eec <etharp_query+0x2dc>)
 8018e00:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 8018e04:	4940      	ldr	r1, [pc, #256]	@ (8018f08 <etharp_query+0x2f8>)
 8018e06:	483b      	ldr	r0, [pc, #236]	@ (8018ef4 <etharp_query+0x2e4>)
 8018e08:	f002 fc8e 	bl	801b728 <iprintf>
 8018e0c:	2000      	movs	r0, #0
 8018e0e:	f002 fbb5 	bl	801b57c <fflush>
      if (PBUF_NEEDS_COPY(p)) {
 8018e12:	69fb      	ldr	r3, [r7, #28]
 8018e14:	7b1b      	ldrb	r3, [r3, #12]
 8018e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d002      	beq.n	8018e24 <etharp_query+0x214>
        copy_needed = 1;
 8018e1e:	2301      	movs	r3, #1
 8018e20:	61bb      	str	r3, [r7, #24]
        break;
 8018e22:	e005      	b.n	8018e30 <etharp_query+0x220>
      }
      p = p->next;
 8018e24:	69fb      	ldr	r3, [r7, #28]
 8018e26:	681b      	ldr	r3, [r3, #0]
 8018e28:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018e2a:	69fb      	ldr	r3, [r7, #28]
 8018e2c:	2b00      	cmp	r3, #0
 8018e2e:	d1dc      	bne.n	8018dea <etharp_query+0x1da>
    }
    if (copy_needed) {
 8018e30:	69bb      	ldr	r3, [r7, #24]
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d007      	beq.n	8018e46 <etharp_query+0x236>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018e36:	687a      	ldr	r2, [r7, #4]
 8018e38:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8018e3c:	200e      	movs	r0, #14
 8018e3e:	f7f4 f855 	bl	800ceec <pbuf_clone>
 8018e42:	61f8      	str	r0, [r7, #28]
 8018e44:	e004      	b.n	8018e50 <etharp_query+0x240>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018e4a:	69f8      	ldr	r0, [r7, #28]
 8018e4c:	f7f3 fe3c 	bl	800cac8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018e50:	69fb      	ldr	r3, [r7, #28]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d033      	beq.n	8018ebe <etharp_query+0x2ae>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018e56:	7c7a      	ldrb	r2, [r7, #17]
 8018e58:	4927      	ldr	r1, [pc, #156]	@ (8018ef8 <etharp_query+0x2e8>)
 8018e5a:	4613      	mov	r3, r2
 8018e5c:	005b      	lsls	r3, r3, #1
 8018e5e:	4413      	add	r3, r2
 8018e60:	00db      	lsls	r3, r3, #3
 8018e62:	440b      	add	r3, r1
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	2b00      	cmp	r3, #0
 8018e68:	d013      	beq.n	8018e92 <etharp_query+0x282>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8018e6a:	7c7b      	ldrb	r3, [r7, #17]
 8018e6c:	461a      	mov	r2, r3
 8018e6e:	6879      	ldr	r1, [r7, #4]
 8018e70:	4826      	ldr	r0, [pc, #152]	@ (8018f0c <etharp_query+0x2fc>)
 8018e72:	f002 fc59 	bl	801b728 <iprintf>
 8018e76:	2000      	movs	r0, #0
 8018e78:	f002 fb80 	bl	801b57c <fflush>
        pbuf_free(arp_table[i].q);
 8018e7c:	7c7a      	ldrb	r2, [r7, #17]
 8018e7e:	491e      	ldr	r1, [pc, #120]	@ (8018ef8 <etharp_query+0x2e8>)
 8018e80:	4613      	mov	r3, r2
 8018e82:	005b      	lsls	r3, r3, #1
 8018e84:	4413      	add	r3, r2
 8018e86:	00db      	lsls	r3, r3, #3
 8018e88:	440b      	add	r3, r1
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	4618      	mov	r0, r3
 8018e8e:	f7f3 fd45 	bl	800c91c <pbuf_free>
      }
      arp_table[i].q = p;
 8018e92:	7c7a      	ldrb	r2, [r7, #17]
 8018e94:	4918      	ldr	r1, [pc, #96]	@ (8018ef8 <etharp_query+0x2e8>)
 8018e96:	4613      	mov	r3, r2
 8018e98:	005b      	lsls	r3, r3, #1
 8018e9a:	4413      	add	r3, r2
 8018e9c:	00db      	lsls	r3, r3, #3
 8018e9e:	440b      	add	r3, r1
 8018ea0:	69fa      	ldr	r2, [r7, #28]
 8018ea2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018ea4:	2300      	movs	r3, #0
 8018ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
 8018eaa:	7c7b      	ldrb	r3, [r7, #17]
 8018eac:	461a      	mov	r2, r3
 8018eae:	6879      	ldr	r1, [r7, #4]
 8018eb0:	4817      	ldr	r0, [pc, #92]	@ (8018f10 <etharp_query+0x300>)
 8018eb2:	f002 fc39 	bl	801b728 <iprintf>
 8018eb6:	2000      	movs	r0, #0
 8018eb8:	f002 fb60 	bl	801b57c <fflush>
 8018ebc:	e009      	b.n	8018ed2 <etharp_query+0x2c2>
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
 8018ebe:	6879      	ldr	r1, [r7, #4]
 8018ec0:	4814      	ldr	r0, [pc, #80]	@ (8018f14 <etharp_query+0x304>)
 8018ec2:	f002 fc31 	bl	801b728 <iprintf>
 8018ec6:	2000      	movs	r0, #0
 8018ec8:	f002 fb58 	bl	801b57c <fflush>
      result = ERR_MEM;
 8018ecc:	23ff      	movs	r3, #255	@ 0xff
 8018ece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 8018ed2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8018ed6:	4618      	mov	r0, r3
 8018ed8:	3728      	adds	r7, #40	@ 0x28
 8018eda:	46bd      	mov	sp, r7
 8018edc:	bd80      	pop	{r7, pc}
 8018ede:	bf00      	nop
 8018ee0:	08023128 	.word	0x08023128
 8018ee4:	08023168 	.word	0x08023168
 8018ee8:	08023194 	.word	0x08023194
 8018eec:	08022bc4 	.word	0x08022bc4
 8018ef0:	080231b4 	.word	0x080231b4
 8018ef4:	08022c3c 	.word	0x08022c3c
 8018ef8:	20011e14 	.word	0x20011e14
 8018efc:	080231c4 	.word	0x080231c4
 8018f00:	0802311c 	.word	0x0802311c
 8018f04:	20011f04 	.word	0x20011f04
 8018f08:	080231ec 	.word	0x080231ec
 8018f0c:	08023208 	.word	0x08023208
 8018f10:	08023250 	.word	0x08023250
 8018f14:	08023284 	.word	0x08023284

08018f18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018f18:	b580      	push	{r7, lr}
 8018f1a:	b08a      	sub	sp, #40	@ 0x28
 8018f1c:	af02      	add	r7, sp, #8
 8018f1e:	60f8      	str	r0, [r7, #12]
 8018f20:	60b9      	str	r1, [r7, #8]
 8018f22:	607a      	str	r2, [r7, #4]
 8018f24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018f26:	2300      	movs	r3, #0
 8018f28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018f2a:	68fb      	ldr	r3, [r7, #12]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d109      	bne.n	8018f44 <etharp_raw+0x2c>
 8018f30:	4b45      	ldr	r3, [pc, #276]	@ (8019048 <etharp_raw+0x130>)
 8018f32:	f240 4257 	movw	r2, #1111	@ 0x457
 8018f36:	4945      	ldr	r1, [pc, #276]	@ (801904c <etharp_raw+0x134>)
 8018f38:	4845      	ldr	r0, [pc, #276]	@ (8019050 <etharp_raw+0x138>)
 8018f3a:	f002 fbf5 	bl	801b728 <iprintf>
 8018f3e:	2000      	movs	r0, #0
 8018f40:	f002 fb1c 	bl	801b57c <fflush>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018f44:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018f48:	211c      	movs	r1, #28
 8018f4a:	200e      	movs	r0, #14
 8018f4c:	f7f3 f980 	bl	800c250 <pbuf_alloc>
 8018f50:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018f52:	69bb      	ldr	r3, [r7, #24]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d108      	bne.n	8018f6a <etharp_raw+0x52>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 8018f58:	483e      	ldr	r0, [pc, #248]	@ (8019054 <etharp_raw+0x13c>)
 8018f5a:	f002 fc55 	bl	801b808 <puts>
 8018f5e:	2000      	movs	r0, #0
 8018f60:	f002 fb0c 	bl	801b57c <fflush>
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018f64:	f04f 33ff 	mov.w	r3, #4294967295
 8018f68:	e069      	b.n	801903e <etharp_raw+0x126>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018f6a:	69bb      	ldr	r3, [r7, #24]
 8018f6c:	895b      	ldrh	r3, [r3, #10]
 8018f6e:	2b1b      	cmp	r3, #27
 8018f70:	d809      	bhi.n	8018f86 <etharp_raw+0x6e>
 8018f72:	4b35      	ldr	r3, [pc, #212]	@ (8019048 <etharp_raw+0x130>)
 8018f74:	f240 4262 	movw	r2, #1122	@ 0x462
 8018f78:	4937      	ldr	r1, [pc, #220]	@ (8019058 <etharp_raw+0x140>)
 8018f7a:	4835      	ldr	r0, [pc, #212]	@ (8019050 <etharp_raw+0x138>)
 8018f7c:	f002 fbd4 	bl	801b728 <iprintf>
 8018f80:	2000      	movs	r0, #0
 8018f82:	f002 fafb 	bl	801b57c <fflush>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018f86:	69bb      	ldr	r3, [r7, #24]
 8018f88:	685b      	ldr	r3, [r3, #4]
 8018f8a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
 8018f8c:	4833      	ldr	r0, [pc, #204]	@ (801905c <etharp_raw+0x144>)
 8018f8e:	f002 fc3b 	bl	801b808 <puts>
 8018f92:	2000      	movs	r0, #0
 8018f94:	f002 faf2 	bl	801b57c <fflush>
  hdr->opcode = lwip_htons(opcode);
 8018f98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	f7f1 fe6a 	bl	800ac74 <lwip_htons>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	461a      	mov	r2, r3
 8018fa4:	697b      	ldr	r3, [r7, #20]
 8018fa6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018fae:	2b06      	cmp	r3, #6
 8018fb0:	d009      	beq.n	8018fc6 <etharp_raw+0xae>
 8018fb2:	4b25      	ldr	r3, [pc, #148]	@ (8019048 <etharp_raw+0x130>)
 8018fb4:	f240 4269 	movw	r2, #1129	@ 0x469
 8018fb8:	4929      	ldr	r1, [pc, #164]	@ (8019060 <etharp_raw+0x148>)
 8018fba:	4825      	ldr	r0, [pc, #148]	@ (8019050 <etharp_raw+0x138>)
 8018fbc:	f002 fbb4 	bl	801b728 <iprintf>
 8018fc0:	2000      	movs	r0, #0
 8018fc2:	f002 fadb 	bl	801b57c <fflush>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018fc6:	697b      	ldr	r3, [r7, #20]
 8018fc8:	3308      	adds	r3, #8
 8018fca:	2206      	movs	r2, #6
 8018fcc:	6839      	ldr	r1, [r7, #0]
 8018fce:	4618      	mov	r0, r3
 8018fd0:	f002 fd91 	bl	801baf6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018fd4:	697b      	ldr	r3, [r7, #20]
 8018fd6:	3312      	adds	r3, #18
 8018fd8:	2206      	movs	r2, #6
 8018fda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018fdc:	4618      	mov	r0, r3
 8018fde:	f002 fd8a 	bl	801baf6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018fe2:	697b      	ldr	r3, [r7, #20]
 8018fe4:	330e      	adds	r3, #14
 8018fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018fe8:	6812      	ldr	r2, [r2, #0]
 8018fea:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018fec:	697b      	ldr	r3, [r7, #20]
 8018fee:	3318      	adds	r3, #24
 8018ff0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018ff2:	6812      	ldr	r2, [r2, #0]
 8018ff4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018ff6:	697b      	ldr	r3, [r7, #20]
 8018ff8:	2200      	movs	r2, #0
 8018ffa:	701a      	strb	r2, [r3, #0]
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	f042 0201 	orr.w	r2, r2, #1
 8019002:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019004:	697b      	ldr	r3, [r7, #20]
 8019006:	2200      	movs	r2, #0
 8019008:	f042 0208 	orr.w	r2, r2, #8
 801900c:	709a      	strb	r2, [r3, #2]
 801900e:	2200      	movs	r2, #0
 8019010:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019012:	697b      	ldr	r3, [r7, #20]
 8019014:	2206      	movs	r2, #6
 8019016:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019018:	697b      	ldr	r3, [r7, #20]
 801901a:	2204      	movs	r2, #4
 801901c:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801901e:	f640 0306 	movw	r3, #2054	@ 0x806
 8019022:	9300      	str	r3, [sp, #0]
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	68ba      	ldr	r2, [r7, #8]
 8019028:	69b9      	ldr	r1, [r7, #24]
 801902a:	68f8      	ldr	r0, [r7, #12]
 801902c:	f001 ffaa 	bl	801af84 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8019030:	69b8      	ldr	r0, [r7, #24]
 8019032:	f7f3 fc73 	bl	800c91c <pbuf_free>
  p = NULL;
 8019036:	2300      	movs	r3, #0
 8019038:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801903a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801903e:	4618      	mov	r0, r3
 8019040:	3720      	adds	r7, #32
 8019042:	46bd      	mov	sp, r7
 8019044:	bd80      	pop	{r7, pc}
 8019046:	bf00      	nop
 8019048:	08022bc4 	.word	0x08022bc4
 801904c:	08022f8c 	.word	0x08022f8c
 8019050:	08022c3c 	.word	0x08022c3c
 8019054:	080232d0 	.word	0x080232d0
 8019058:	08023308 	.word	0x08023308
 801905c:	0802333c 	.word	0x0802333c
 8019060:	08023360 	.word	0x08023360

08019064 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019064:	b580      	push	{r7, lr}
 8019066:	b088      	sub	sp, #32
 8019068:	af04      	add	r7, sp, #16
 801906a:	60f8      	str	r0, [r7, #12]
 801906c:	60b9      	str	r1, [r7, #8]
 801906e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019076:	68fb      	ldr	r3, [r7, #12]
 8019078:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019080:	2201      	movs	r2, #1
 8019082:	9203      	str	r2, [sp, #12]
 8019084:	68ba      	ldr	r2, [r7, #8]
 8019086:	9202      	str	r2, [sp, #8]
 8019088:	4a06      	ldr	r2, [pc, #24]	@ (80190a4 <etharp_request_dst+0x40>)
 801908a:	9201      	str	r2, [sp, #4]
 801908c:	9300      	str	r3, [sp, #0]
 801908e:	4603      	mov	r3, r0
 8019090:	687a      	ldr	r2, [r7, #4]
 8019092:	68f8      	ldr	r0, [r7, #12]
 8019094:	f7ff ff40 	bl	8018f18 <etharp_raw>
 8019098:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801909a:	4618      	mov	r0, r3
 801909c:	3710      	adds	r7, #16
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
 80190a2:	bf00      	nop
 80190a4:	08025280 	.word	0x08025280

080190a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80190a8:	b580      	push	{r7, lr}
 80190aa:	b082      	sub	sp, #8
 80190ac:	af00      	add	r7, sp, #0
 80190ae:	6078      	str	r0, [r7, #4]
 80190b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
 80190b2:	4808      	ldr	r0, [pc, #32]	@ (80190d4 <etharp_request+0x2c>)
 80190b4:	f002 fba8 	bl	801b808 <puts>
 80190b8:	2000      	movs	r0, #0
 80190ba:	f002 fa5f 	bl	801b57c <fflush>
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80190be:	4a06      	ldr	r2, [pc, #24]	@ (80190d8 <etharp_request+0x30>)
 80190c0:	6839      	ldr	r1, [r7, #0]
 80190c2:	6878      	ldr	r0, [r7, #4]
 80190c4:	f7ff ffce 	bl	8019064 <etharp_request_dst>
 80190c8:	4603      	mov	r3, r0
}
 80190ca:	4618      	mov	r0, r3
 80190cc:	3708      	adds	r7, #8
 80190ce:	46bd      	mov	sp, r7
 80190d0:	bd80      	pop	{r7, pc}
 80190d2:	bf00      	nop
 80190d4:	080233a4 	.word	0x080233a4
 80190d8:	08025278 	.word	0x08025278

080190dc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b08e      	sub	sp, #56	@ 0x38
 80190e0:	af04      	add	r7, sp, #16
 80190e2:	6078      	str	r0, [r7, #4]
 80190e4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80190e6:	4bab      	ldr	r3, [pc, #684]	@ (8019394 <icmp_input+0x2b8>)
 80190e8:	689b      	ldr	r3, [r3, #8]
 80190ea:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80190ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80190ee:	781b      	ldrb	r3, [r3, #0]
 80190f0:	f003 030f 	and.w	r3, r3, #15
 80190f4:	b2db      	uxtb	r3, r3
 80190f6:	009b      	lsls	r3, r3, #2
 80190f8:	b2db      	uxtb	r3, r3
 80190fa:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 80190fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80190fe:	2b13      	cmp	r3, #19
 8019100:	d808      	bhi.n	8019114 <icmp_input+0x38>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
 8019102:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019104:	4619      	mov	r1, r3
 8019106:	48a4      	ldr	r0, [pc, #656]	@ (8019398 <icmp_input+0x2bc>)
 8019108:	f002 fb0e 	bl	801b728 <iprintf>
 801910c:	2000      	movs	r0, #0
 801910e:	f002 fa35 	bl	801b57c <fflush>
    goto lenerr;
 8019112:	e134      	b.n	801937e <icmp_input+0x2a2>
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	895b      	ldrh	r3, [r3, #10]
 8019118:	2b03      	cmp	r3, #3
 801911a:	d809      	bhi.n	8019130 <icmp_input+0x54>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	891b      	ldrh	r3, [r3, #8]
 8019120:	4619      	mov	r1, r3
 8019122:	489e      	ldr	r0, [pc, #632]	@ (801939c <icmp_input+0x2c0>)
 8019124:	f002 fb00 	bl	801b728 <iprintf>
 8019128:	2000      	movs	r0, #0
 801912a:	f002 fa27 	bl	801b57c <fflush>
    goto lenerr;
 801912e:	e126      	b.n	801937e <icmp_input+0x2a2>
  }

  type = *((u8_t *)p->payload);
 8019130:	687b      	ldr	r3, [r7, #4]
 8019132:	685b      	ldr	r3, [r3, #4]
 8019134:	781b      	ldrb	r3, [r3, #0]
 8019136:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	685b      	ldr	r3, [r3, #4]
 801913e:	785b      	ldrb	r3, [r3, #1]
 8019140:	f887 3020 	strb.w	r3, [r7, #32]
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019144:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8019148:	2b00      	cmp	r3, #0
 801914a:	f000 8111 	beq.w	8019370 <icmp_input+0x294>
 801914e:	2b08      	cmp	r3, #8
 8019150:	f040 8102 	bne.w	8019358 <icmp_input+0x27c>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019154:	4b92      	ldr	r3, [pc, #584]	@ (80193a0 <icmp_input+0x2c4>)
 8019156:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019158:	4b8e      	ldr	r3, [pc, #568]	@ (8019394 <icmp_input+0x2b8>)
 801915a:	695b      	ldr	r3, [r3, #20]
 801915c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8019160:	2be0      	cmp	r3, #224	@ 0xe0
 8019162:	d106      	bne.n	8019172 <icmp_input+0x96>
#if LWIP_MULTICAST_PING
        /* For multicast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_MULTICAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
 8019164:	488f      	ldr	r0, [pc, #572]	@ (80193a4 <icmp_input+0x2c8>)
 8019166:	f002 fb4f 	bl	801b808 <puts>
 801916a:	2000      	movs	r0, #0
 801916c:	f002 fa06 	bl	801b57c <fflush>
        goto icmperr;
 8019170:	e109      	b.n	8019386 <icmp_input+0x2aa>
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019172:	4b88      	ldr	r3, [pc, #544]	@ (8019394 <icmp_input+0x2b8>)
 8019174:	695b      	ldr	r3, [r3, #20]
 8019176:	4a87      	ldr	r2, [pc, #540]	@ (8019394 <icmp_input+0x2b8>)
 8019178:	6812      	ldr	r2, [r2, #0]
 801917a:	4611      	mov	r1, r2
 801917c:	4618      	mov	r0, r3
 801917e:	f000 fef3 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8019182:	4603      	mov	r3, r0
 8019184:	2b00      	cmp	r3, #0
 8019186:	d006      	beq.n	8019196 <icmp_input+0xba>
#if LWIP_BROADCAST_PING
        /* For broadcast, use address of receiving interface as source address */
        src = netif_ip4_addr(inp);
#else /* LWIP_BROADCAST_PING */
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
 8019188:	4887      	ldr	r0, [pc, #540]	@ (80193a8 <icmp_input+0x2cc>)
 801918a:	f002 fb3d 	bl	801b808 <puts>
 801918e:	2000      	movs	r0, #0
 8019190:	f002 f9f4 	bl	801b57c <fflush>
        goto icmperr;
 8019194:	e0f7      	b.n	8019386 <icmp_input+0x2aa>
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
 8019196:	4885      	ldr	r0, [pc, #532]	@ (80193ac <icmp_input+0x2d0>)
 8019198:	f002 fb36 	bl	801b808 <puts>
 801919c:	2000      	movs	r0, #0
 801919e:	f002 f9ed 	bl	801b57c <fflush>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	891b      	ldrh	r3, [r3, #8]
 80191a6:	2b07      	cmp	r3, #7
 80191a8:	d806      	bhi.n	80191b8 <icmp_input+0xdc>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
 80191aa:	4881      	ldr	r0, [pc, #516]	@ (80193b0 <icmp_input+0x2d4>)
 80191ac:	f002 fb2c 	bl	801b808 <puts>
 80191b0:	2000      	movs	r0, #0
 80191b2:	f002 f9e3 	bl	801b57c <fflush>
        goto lenerr;
 80191b6:	e0e2      	b.n	801937e <icmp_input+0x2a2>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80191b8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80191ba:	330e      	adds	r3, #14
 80191bc:	4619      	mov	r1, r3
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f7f3 fb04 	bl	800c7cc <pbuf_add_header>
 80191c4:	4603      	mov	r3, r0
 80191c6:	2b00      	cmp	r3, #0
 80191c8:	d066      	beq.n	8019298 <icmp_input+0x1bc>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	891a      	ldrh	r2, [r3, #8]
 80191ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80191d0:	4413      	add	r3, r2
 80191d2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	891b      	ldrh	r3, [r3, #8]
 80191d8:	8b7a      	ldrh	r2, [r7, #26]
 80191da:	429a      	cmp	r2, r3
 80191dc:	d206      	bcs.n	80191ec <icmp_input+0x110>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
 80191de:	4875      	ldr	r0, [pc, #468]	@ (80193b4 <icmp_input+0x2d8>)
 80191e0:	f002 fb12 	bl	801b808 <puts>
 80191e4:	2000      	movs	r0, #0
 80191e6:	f002 f9c9 	bl	801b57c <fflush>
          goto icmperr;
 80191ea:	e0cc      	b.n	8019386 <icmp_input+0x2aa>
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80191ec:	8b7b      	ldrh	r3, [r7, #26]
 80191ee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80191f2:	4619      	mov	r1, r3
 80191f4:	200e      	movs	r0, #14
 80191f6:	f7f3 f82b 	bl	800c250 <pbuf_alloc>
 80191fa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80191fc:	697b      	ldr	r3, [r7, #20]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d106      	bne.n	8019210 <icmp_input+0x134>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
 8019202:	486d      	ldr	r0, [pc, #436]	@ (80193b8 <icmp_input+0x2dc>)
 8019204:	f002 fb00 	bl	801b808 <puts>
 8019208:	2000      	movs	r0, #0
 801920a:	f002 f9b7 	bl	801b57c <fflush>
          goto icmperr;
 801920e:	e0ba      	b.n	8019386 <icmp_input+0x2aa>
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019210:	697b      	ldr	r3, [r7, #20]
 8019212:	895b      	ldrh	r3, [r3, #10]
 8019214:	461a      	mov	r2, r3
 8019216:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019218:	3308      	adds	r3, #8
 801921a:	429a      	cmp	r2, r3
 801921c:	d209      	bcs.n	8019232 <icmp_input+0x156>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
 801921e:	4867      	ldr	r0, [pc, #412]	@ (80193bc <icmp_input+0x2e0>)
 8019220:	f002 fa82 	bl	801b728 <iprintf>
 8019224:	2000      	movs	r0, #0
 8019226:	f002 f9a9 	bl	801b57c <fflush>
          pbuf_free(r);
 801922a:	6978      	ldr	r0, [r7, #20]
 801922c:	f7f3 fb76 	bl	800c91c <pbuf_free>
          goto icmperr;
 8019230:	e0a9      	b.n	8019386 <icmp_input+0x2aa>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019232:	697b      	ldr	r3, [r7, #20]
 8019234:	685b      	ldr	r3, [r3, #4]
 8019236:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8019238:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801923a:	4618      	mov	r0, r3
 801923c:	f002 fc5b 	bl	801baf6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019240:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8019242:	4619      	mov	r1, r3
 8019244:	6978      	ldr	r0, [r7, #20]
 8019246:	f7f3 fad1 	bl	800c7ec <pbuf_remove_header>
 801924a:	4603      	mov	r3, r0
 801924c:	2b00      	cmp	r3, #0
 801924e:	d00c      	beq.n	801926a <icmp_input+0x18e>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019250:	4b5b      	ldr	r3, [pc, #364]	@ (80193c0 <icmp_input+0x2e4>)
 8019252:	22b6      	movs	r2, #182	@ 0xb6
 8019254:	495b      	ldr	r1, [pc, #364]	@ (80193c4 <icmp_input+0x2e8>)
 8019256:	485c      	ldr	r0, [pc, #368]	@ (80193c8 <icmp_input+0x2ec>)
 8019258:	f002 fa66 	bl	801b728 <iprintf>
 801925c:	2000      	movs	r0, #0
 801925e:	f002 f98d 	bl	801b57c <fflush>
          pbuf_free(r);
 8019262:	6978      	ldr	r0, [r7, #20]
 8019264:	f7f3 fb5a 	bl	800c91c <pbuf_free>
          goto icmperr;
 8019268:	e08d      	b.n	8019386 <icmp_input+0x2aa>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801926a:	6879      	ldr	r1, [r7, #4]
 801926c:	6978      	ldr	r0, [r7, #20]
 801926e:	f7f3 fccf 	bl	800cc10 <pbuf_copy>
 8019272:	4603      	mov	r3, r0
 8019274:	2b00      	cmp	r3, #0
 8019276:	d009      	beq.n	801928c <icmp_input+0x1b0>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
 8019278:	4854      	ldr	r0, [pc, #336]	@ (80193cc <icmp_input+0x2f0>)
 801927a:	f002 fa55 	bl	801b728 <iprintf>
 801927e:	2000      	movs	r0, #0
 8019280:	f002 f97c 	bl	801b57c <fflush>
          pbuf_free(r);
 8019284:	6978      	ldr	r0, [r7, #20]
 8019286:	f7f3 fb49 	bl	800c91c <pbuf_free>
          goto icmperr;
 801928a:	e07c      	b.n	8019386 <icmp_input+0x2aa>
        }
        /* free the original p */
        pbuf_free(p);
 801928c:	6878      	ldr	r0, [r7, #4]
 801928e:	f7f3 fb45 	bl	800c91c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019292:	697b      	ldr	r3, [r7, #20]
 8019294:	607b      	str	r3, [r7, #4]
 8019296:	e012      	b.n	80192be <icmp_input+0x1e2>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019298:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801929a:	330e      	adds	r3, #14
 801929c:	4619      	mov	r1, r3
 801929e:	6878      	ldr	r0, [r7, #4]
 80192a0:	f7f3 faa4 	bl	800c7ec <pbuf_remove_header>
 80192a4:	4603      	mov	r3, r0
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d009      	beq.n	80192be <icmp_input+0x1e2>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80192aa:	4b45      	ldr	r3, [pc, #276]	@ (80193c0 <icmp_input+0x2e4>)
 80192ac:	22c7      	movs	r2, #199	@ 0xc7
 80192ae:	4948      	ldr	r1, [pc, #288]	@ (80193d0 <icmp_input+0x2f4>)
 80192b0:	4845      	ldr	r0, [pc, #276]	@ (80193c8 <icmp_input+0x2ec>)
 80192b2:	f002 fa39 	bl	801b728 <iprintf>
 80192b6:	2000      	movs	r0, #0
 80192b8:	f002 f960 	bl	801b57c <fflush>
          goto icmperr;
 80192bc:	e063      	b.n	8019386 <icmp_input+0x2aa>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80192be:	687b      	ldr	r3, [r7, #4]
 80192c0:	685b      	ldr	r3, [r3, #4]
 80192c2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80192c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80192c6:	4619      	mov	r1, r3
 80192c8:	6878      	ldr	r0, [r7, #4]
 80192ca:	f7f3 fa7f 	bl	800c7cc <pbuf_add_header>
 80192ce:	4603      	mov	r3, r0
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d006      	beq.n	80192e2 <icmp_input+0x206>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
 80192d4:	483f      	ldr	r0, [pc, #252]	@ (80193d4 <icmp_input+0x2f8>)
 80192d6:	f002 fa27 	bl	801b728 <iprintf>
 80192da:	2000      	movs	r0, #0
 80192dc:	f002 f94e 	bl	801b57c <fflush>
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80192e0:	e048      	b.n	8019374 <icmp_input+0x298>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	685b      	ldr	r3, [r3, #4]
 80192e6:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80192e8:	69fb      	ldr	r3, [r7, #28]
 80192ea:	681a      	ldr	r2, [r3, #0]
 80192ec:	68fb      	ldr	r3, [r7, #12]
 80192ee:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80192f0:	4b28      	ldr	r3, [pc, #160]	@ (8019394 <icmp_input+0x2b8>)
 80192f2:	691a      	ldr	r2, [r3, #16]
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80192f8:	693b      	ldr	r3, [r7, #16]
 80192fa:	2200      	movs	r2, #0
 80192fc:	701a      	strb	r2, [r3, #0]
        iecho->chksum = 0;
 80192fe:	693b      	ldr	r3, [r7, #16]
 8019300:	2200      	movs	r2, #0
 8019302:	709a      	strb	r2, [r3, #2]
 8019304:	2200      	movs	r2, #0
 8019306:	70da      	strb	r2, [r3, #3]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	22ff      	movs	r2, #255	@ 0xff
 801930c:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801930e:	68fb      	ldr	r3, [r7, #12]
 8019310:	2200      	movs	r2, #0
 8019312:	729a      	strb	r2, [r3, #10]
 8019314:	2200      	movs	r2, #0
 8019316:	72da      	strb	r2, [r3, #11]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019318:	683b      	ldr	r3, [r7, #0]
 801931a:	9302      	str	r3, [sp, #8]
 801931c:	2301      	movs	r3, #1
 801931e:	9301      	str	r3, [sp, #4]
 8019320:	2300      	movs	r3, #0
 8019322:	9300      	str	r3, [sp, #0]
 8019324:	23ff      	movs	r3, #255	@ 0xff
 8019326:	2200      	movs	r2, #0
 8019328:	69f9      	ldr	r1, [r7, #28]
 801932a:	6878      	ldr	r0, [r7, #4]
 801932c:	f000 fc28 	bl	8019b80 <ip4_output_if>
 8019330:	4603      	mov	r3, r0
 8019332:	72fb      	strb	r3, [r7, #11]
        if (ret != ERR_OK) {
 8019334:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019338:	2b00      	cmp	r3, #0
 801933a:	d01b      	beq.n	8019374 <icmp_input+0x298>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
 801933c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019340:	4618      	mov	r0, r3
 8019342:	f7f1 f9c3 	bl	800a6cc <lwip_strerr>
 8019346:	4603      	mov	r3, r0
 8019348:	4619      	mov	r1, r3
 801934a:	4823      	ldr	r0, [pc, #140]	@ (80193d8 <icmp_input+0x2fc>)
 801934c:	f002 f9ec 	bl	801b728 <iprintf>
 8019350:	2000      	movs	r0, #0
 8019352:	f002 f913 	bl	801b57c <fflush>
      break;
 8019356:	e00d      	b.n	8019374 <icmp_input+0x298>
      } else if (type == ICMP_AM) {
        MIB2_STATS_INC(mib2.icmpinaddrmasks);
      } else if (type == ICMP_AMR) {
        MIB2_STATS_INC(mib2.icmpinaddrmaskreps);
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
 8019358:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801935c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8019360:	4619      	mov	r1, r3
 8019362:	481e      	ldr	r0, [pc, #120]	@ (80193dc <icmp_input+0x300>)
 8019364:	f002 f9e0 	bl	801b728 <iprintf>
 8019368:	2000      	movs	r0, #0
 801936a:	f002 f907 	bl	801b57c <fflush>
 801936e:	e002      	b.n	8019376 <icmp_input+0x29a>
      break;
 8019370:	bf00      	nop
 8019372:	e000      	b.n	8019376 <icmp_input+0x29a>
      break;
 8019374:	bf00      	nop
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019376:	6878      	ldr	r0, [r7, #4]
 8019378:	f7f3 fad0 	bl	800c91c <pbuf_free>
  return;
 801937c:	e007      	b.n	801938e <icmp_input+0x2b2>
lenerr:
  pbuf_free(p);
 801937e:	6878      	ldr	r0, [r7, #4]
 8019380:	f7f3 facc 	bl	800c91c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019384:	e003      	b.n	801938e <icmp_input+0x2b2>
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019386:	6878      	ldr	r0, [r7, #4]
 8019388:	f7f3 fac8 	bl	800c91c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801938c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801938e:	3728      	adds	r7, #40	@ 0x28
 8019390:	46bd      	mov	sp, r7
 8019392:	bd80      	pop	{r7, pc}
 8019394:	2000c0e8 	.word	0x2000c0e8
 8019398:	080233cc 	.word	0x080233cc
 801939c:	08023400 	.word	0x08023400
 80193a0:	2000c0fc 	.word	0x2000c0fc
 80193a4:	08023430 	.word	0x08023430
 80193a8:	0802345c 	.word	0x0802345c
 80193ac:	08023488 	.word	0x08023488
 80193b0:	0802349c 	.word	0x0802349c
 80193b4:	080234c0 	.word	0x080234c0
 80193b8:	080234fc 	.word	0x080234fc
 80193bc:	08023524 	.word	0x08023524
 80193c0:	0802354c 	.word	0x0802354c
 80193c4:	08023584 	.word	0x08023584
 80193c8:	080235bc 	.word	0x080235bc
 80193cc:	080235e4 	.word	0x080235e4
 80193d0:	0802360c 	.word	0x0802360c
 80193d4:	08023640 	.word	0x08023640
 80193d8:	08023664 	.word	0x08023664
 80193dc:	08023694 	.word	0x08023694

080193e0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80193e0:	b580      	push	{r7, lr}
 80193e2:	b082      	sub	sp, #8
 80193e4:	af00      	add	r7, sp, #0
 80193e6:	6078      	str	r0, [r7, #4]
 80193e8:	460b      	mov	r3, r1
 80193ea:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80193ec:	78fb      	ldrb	r3, [r7, #3]
 80193ee:	461a      	mov	r2, r3
 80193f0:	2103      	movs	r1, #3
 80193f2:	6878      	ldr	r0, [r7, #4]
 80193f4:	f000 f814 	bl	8019420 <icmp_send_response>
}
 80193f8:	bf00      	nop
 80193fa:	3708      	adds	r7, #8
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bd80      	pop	{r7, pc}

08019400 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019400:	b580      	push	{r7, lr}
 8019402:	b082      	sub	sp, #8
 8019404:	af00      	add	r7, sp, #0
 8019406:	6078      	str	r0, [r7, #4]
 8019408:	460b      	mov	r3, r1
 801940a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801940c:	78fb      	ldrb	r3, [r7, #3]
 801940e:	461a      	mov	r2, r3
 8019410:	210b      	movs	r1, #11
 8019412:	6878      	ldr	r0, [r7, #4]
 8019414:	f000 f804 	bl	8019420 <icmp_send_response>
}
 8019418:	bf00      	nop
 801941a:	3708      	adds	r7, #8
 801941c:	46bd      	mov	sp, r7
 801941e:	bd80      	pop	{r7, pc}

08019420 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019420:	b580      	push	{r7, lr}
 8019422:	b08c      	sub	sp, #48	@ 0x30
 8019424:	af04      	add	r7, sp, #16
 8019426:	6078      	str	r0, [r7, #4]
 8019428:	460b      	mov	r3, r1
 801942a:	70fb      	strb	r3, [r7, #3]
 801942c:	4613      	mov	r3, r2
 801942e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019430:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8019434:	2124      	movs	r1, #36	@ 0x24
 8019436:	2022      	movs	r0, #34	@ 0x22
 8019438:	f7f2 ff0a 	bl	800c250 <pbuf_alloc>
 801943c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801943e:	69fb      	ldr	r3, [r7, #28]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d106      	bne.n	8019452 <icmp_send_response+0x32>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
 8019444:	484f      	ldr	r0, [pc, #316]	@ (8019584 <icmp_send_response+0x164>)
 8019446:	f002 f9df 	bl	801b808 <puts>
 801944a:	2000      	movs	r0, #0
 801944c:	f002 f896 	bl	801b57c <fflush>
 8019450:	e094      	b.n	801957c <icmp_send_response+0x15c>
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019452:	69fb      	ldr	r3, [r7, #28]
 8019454:	895b      	ldrh	r3, [r3, #10]
 8019456:	2b23      	cmp	r3, #35	@ 0x23
 8019458:	d809      	bhi.n	801946e <icmp_send_response+0x4e>
 801945a:	4b4b      	ldr	r3, [pc, #300]	@ (8019588 <icmp_send_response+0x168>)
 801945c:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 8019460:	494a      	ldr	r1, [pc, #296]	@ (801958c <icmp_send_response+0x16c>)
 8019462:	484b      	ldr	r0, [pc, #300]	@ (8019590 <icmp_send_response+0x170>)
 8019464:	f002 f960 	bl	801b728 <iprintf>
 8019468:	2000      	movs	r0, #0
 801946a:	f002 f887 	bl	801b57c <fflush>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801946e:	687b      	ldr	r3, [r7, #4]
 8019470:	685b      	ldr	r3, [r3, #4]
 8019472:	61bb      	str	r3, [r7, #24]
  LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded from "));
 8019474:	4847      	ldr	r0, [pc, #284]	@ (8019594 <icmp_send_response+0x174>)
 8019476:	f002 f957 	bl	801b728 <iprintf>
 801947a:	2000      	movs	r0, #0
 801947c:	f002 f87e 	bl	801b57c <fflush>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
 8019480:	69bb      	ldr	r3, [r7, #24]
 8019482:	68db      	ldr	r3, [r3, #12]
 8019484:	b2db      	uxtb	r3, r3
 8019486:	4619      	mov	r1, r3
 8019488:	69bb      	ldr	r3, [r7, #24]
 801948a:	68db      	ldr	r3, [r3, #12]
 801948c:	0a1b      	lsrs	r3, r3, #8
 801948e:	b2db      	uxtb	r3, r3
 8019490:	461a      	mov	r2, r3
 8019492:	69bb      	ldr	r3, [r7, #24]
 8019494:	68db      	ldr	r3, [r3, #12]
 8019496:	0c1b      	lsrs	r3, r3, #16
 8019498:	b2db      	uxtb	r3, r3
 801949a:	4618      	mov	r0, r3
 801949c:	69bb      	ldr	r3, [r7, #24]
 801949e:	68db      	ldr	r3, [r3, #12]
 80194a0:	0e1b      	lsrs	r3, r3, #24
 80194a2:	b2db      	uxtb	r3, r3
 80194a4:	9300      	str	r3, [sp, #0]
 80194a6:	4603      	mov	r3, r0
 80194a8:	483b      	ldr	r0, [pc, #236]	@ (8019598 <icmp_send_response+0x178>)
 80194aa:	f002 f93d 	bl	801b728 <iprintf>
 80194ae:	2000      	movs	r0, #0
 80194b0:	f002 f864 	bl	801b57c <fflush>
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
 80194b4:	4839      	ldr	r0, [pc, #228]	@ (801959c <icmp_send_response+0x17c>)
 80194b6:	f002 f937 	bl	801b728 <iprintf>
 80194ba:	2000      	movs	r0, #0
 80194bc:	f002 f85e 	bl	801b57c <fflush>
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
 80194c0:	69bb      	ldr	r3, [r7, #24]
 80194c2:	691b      	ldr	r3, [r3, #16]
 80194c4:	b2db      	uxtb	r3, r3
 80194c6:	4619      	mov	r1, r3
 80194c8:	69bb      	ldr	r3, [r7, #24]
 80194ca:	691b      	ldr	r3, [r3, #16]
 80194cc:	0a1b      	lsrs	r3, r3, #8
 80194ce:	b2db      	uxtb	r3, r3
 80194d0:	461a      	mov	r2, r3
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	691b      	ldr	r3, [r3, #16]
 80194d6:	0c1b      	lsrs	r3, r3, #16
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	4618      	mov	r0, r3
 80194dc:	69bb      	ldr	r3, [r7, #24]
 80194de:	691b      	ldr	r3, [r3, #16]
 80194e0:	0e1b      	lsrs	r3, r3, #24
 80194e2:	b2db      	uxtb	r3, r3
 80194e4:	9300      	str	r3, [sp, #0]
 80194e6:	4603      	mov	r3, r0
 80194e8:	482b      	ldr	r0, [pc, #172]	@ (8019598 <icmp_send_response+0x178>)
 80194ea:	f002 f91d 	bl	801b728 <iprintf>
 80194ee:	2000      	movs	r0, #0
 80194f0:	f002 f844 	bl	801b57c <fflush>
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));
 80194f4:	200a      	movs	r0, #10
 80194f6:	f002 f929 	bl	801b74c <putchar>
 80194fa:	2000      	movs	r0, #0
 80194fc:	f002 f83e 	bl	801b57c <fflush>

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019500:	69fb      	ldr	r3, [r7, #28]
 8019502:	685b      	ldr	r3, [r3, #4]
 8019504:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019506:	697b      	ldr	r3, [r7, #20]
 8019508:	78fa      	ldrb	r2, [r7, #3]
 801950a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	78ba      	ldrb	r2, [r7, #2]
 8019510:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019512:	697b      	ldr	r3, [r7, #20]
 8019514:	2200      	movs	r2, #0
 8019516:	711a      	strb	r2, [r3, #4]
 8019518:	2200      	movs	r2, #0
 801951a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801951c:	697b      	ldr	r3, [r7, #20]
 801951e:	2200      	movs	r2, #0
 8019520:	719a      	strb	r2, [r3, #6]
 8019522:	2200      	movs	r2, #0
 8019524:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019526:	69fb      	ldr	r3, [r7, #28]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	f103 0008 	add.w	r0, r3, #8
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	685b      	ldr	r3, [r3, #4]
 8019532:	221c      	movs	r2, #28
 8019534:	4619      	mov	r1, r3
 8019536:	f002 fade 	bl	801baf6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801953a:	69bb      	ldr	r3, [r7, #24]
 801953c:	68db      	ldr	r3, [r3, #12]
 801953e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019540:	f107 030c 	add.w	r3, r7, #12
 8019544:	4618      	mov	r0, r3
 8019546:	f000 f82b 	bl	80195a0 <ip4_route>
 801954a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801954c:	693b      	ldr	r3, [r7, #16]
 801954e:	2b00      	cmp	r3, #0
 8019550:	d011      	beq.n	8019576 <icmp_send_response+0x156>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	2200      	movs	r2, #0
 8019556:	709a      	strb	r2, [r3, #2]
 8019558:	2200      	movs	r2, #0
 801955a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801955c:	f107 020c 	add.w	r2, r7, #12
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	9302      	str	r3, [sp, #8]
 8019564:	2301      	movs	r3, #1
 8019566:	9301      	str	r3, [sp, #4]
 8019568:	2300      	movs	r3, #0
 801956a:	9300      	str	r3, [sp, #0]
 801956c:	23ff      	movs	r3, #255	@ 0xff
 801956e:	2100      	movs	r1, #0
 8019570:	69f8      	ldr	r0, [r7, #28]
 8019572:	f000 fb05 	bl	8019b80 <ip4_output_if>
  }
  pbuf_free(q);
 8019576:	69f8      	ldr	r0, [r7, #28]
 8019578:	f7f3 f9d0 	bl	800c91c <pbuf_free>
}
 801957c:	3720      	adds	r7, #32
 801957e:	46bd      	mov	sp, r7
 8019580:	bd80      	pop	{r7, pc}
 8019582:	bf00      	nop
 8019584:	080236c8 	.word	0x080236c8
 8019588:	0802354c 	.word	0x0802354c
 801958c:	08023708 	.word	0x08023708
 8019590:	080235bc 	.word	0x080235bc
 8019594:	08023734 	.word	0x08023734
 8019598:	08023750 	.word	0x08023750
 801959c:	08023760 	.word	0x08023760

080195a0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80195a0:	b580      	push	{r7, lr}
 80195a2:	b086      	sub	sp, #24
 80195a4:	af02      	add	r7, sp, #8
 80195a6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80195a8:	4b3d      	ldr	r3, [pc, #244]	@ (80196a0 <ip4_route+0x100>)
 80195aa:	681b      	ldr	r3, [r3, #0]
 80195ac:	60fb      	str	r3, [r7, #12]
 80195ae:	e036      	b.n	801961e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80195b0:	68fb      	ldr	r3, [r7, #12]
 80195b2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80195b6:	f003 0301 	and.w	r3, r3, #1
 80195ba:	b2db      	uxtb	r3, r3
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d02b      	beq.n	8019618 <ip4_route+0x78>
 80195c0:	68fb      	ldr	r3, [r7, #12]
 80195c2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80195c6:	089b      	lsrs	r3, r3, #2
 80195c8:	f003 0301 	and.w	r3, r3, #1
 80195cc:	b2db      	uxtb	r3, r3
 80195ce:	2b00      	cmp	r3, #0
 80195d0:	d022      	beq.n	8019618 <ip4_route+0x78>
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	3304      	adds	r3, #4
 80195d6:	681b      	ldr	r3, [r3, #0]
 80195d8:	2b00      	cmp	r3, #0
 80195da:	d01d      	beq.n	8019618 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681a      	ldr	r2, [r3, #0]
 80195e0:	68fb      	ldr	r3, [r7, #12]
 80195e2:	3304      	adds	r3, #4
 80195e4:	681b      	ldr	r3, [r3, #0]
 80195e6:	405a      	eors	r2, r3
 80195e8:	68fb      	ldr	r3, [r7, #12]
 80195ea:	3308      	adds	r3, #8
 80195ec:	681b      	ldr	r3, [r3, #0]
 80195ee:	4013      	ands	r3, r2
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d101      	bne.n	80195f8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	e04e      	b.n	8019696 <ip4_route+0xf6>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80195fe:	f003 0302 	and.w	r3, r3, #2
 8019602:	2b00      	cmp	r3, #0
 8019604:	d108      	bne.n	8019618 <ip4_route+0x78>
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	681a      	ldr	r2, [r3, #0]
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	330c      	adds	r3, #12
 801960e:	681b      	ldr	r3, [r3, #0]
 8019610:	429a      	cmp	r2, r3
 8019612:	d101      	bne.n	8019618 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	e03e      	b.n	8019696 <ip4_route+0xf6>
  NETIF_FOREACH(netif) {
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	60fb      	str	r3, [r7, #12]
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d1c5      	bne.n	80195b0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019624:	4b1f      	ldr	r3, [pc, #124]	@ (80196a4 <ip4_route+0x104>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d01a      	beq.n	8019662 <ip4_route+0xc2>
 801962c:	4b1d      	ldr	r3, [pc, #116]	@ (80196a4 <ip4_route+0x104>)
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019634:	f003 0301 	and.w	r3, r3, #1
 8019638:	2b00      	cmp	r3, #0
 801963a:	d012      	beq.n	8019662 <ip4_route+0xc2>
 801963c:	4b19      	ldr	r3, [pc, #100]	@ (80196a4 <ip4_route+0x104>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019644:	f003 0304 	and.w	r3, r3, #4
 8019648:	2b00      	cmp	r3, #0
 801964a:	d00a      	beq.n	8019662 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801964c:	4b15      	ldr	r3, [pc, #84]	@ (80196a4 <ip4_route+0x104>)
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	3304      	adds	r3, #4
 8019652:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019654:	2b00      	cmp	r3, #0
 8019656:	d004      	beq.n	8019662 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	b2db      	uxtb	r3, r3
 801965e:	2b7f      	cmp	r3, #127	@ 0x7f
 8019660:	d117      	bne.n	8019692 <ip4_route+0xf2>
    /* No matching netif found and default netif is not usable.
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	781b      	ldrb	r3, [r3, #0]
 8019666:	4619      	mov	r1, r3
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	3301      	adds	r3, #1
 801966c:	781b      	ldrb	r3, [r3, #0]
 801966e:	461a      	mov	r2, r3
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	3302      	adds	r3, #2
 8019674:	781b      	ldrb	r3, [r3, #0]
 8019676:	4618      	mov	r0, r3
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	3303      	adds	r3, #3
 801967c:	781b      	ldrb	r3, [r3, #0]
 801967e:	9300      	str	r3, [sp, #0]
 8019680:	4603      	mov	r3, r0
 8019682:	4809      	ldr	r0, [pc, #36]	@ (80196a8 <ip4_route+0x108>)
 8019684:	f002 f850 	bl	801b728 <iprintf>
 8019688:	2000      	movs	r0, #0
 801968a:	f001 ff77 	bl	801b57c <fflush>
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801968e:	2300      	movs	r3, #0
 8019690:	e001      	b.n	8019696 <ip4_route+0xf6>
  }

  return netif_default;
 8019692:	4b04      	ldr	r3, [pc, #16]	@ (80196a4 <ip4_route+0x104>)
 8019694:	681b      	ldr	r3, [r3, #0]
}
 8019696:	4618      	mov	r0, r3
 8019698:	3710      	adds	r7, #16
 801969a:	46bd      	mov	sp, r7
 801969c:	bd80      	pop	{r7, pc}
 801969e:	bf00      	nop
 80196a0:	20011d70 	.word	0x20011d70
 80196a4:	20011d74 	.word	0x20011d74
 80196a8:	08023768 	.word	0x08023768

080196ac <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80196ac:	b5b0      	push	{r4, r5, r7, lr}
 80196ae:	b084      	sub	sp, #16
 80196b0:	af02      	add	r7, sp, #8
 80196b2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0x%"X32_F", 0x%"X32_F")\n",
 80196b4:	4b2b      	ldr	r3, [pc, #172]	@ (8019764 <ip4_input_accept+0xb8>)
 80196b6:	6958      	ldr	r0, [r3, #20]
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	3304      	adds	r3, #4
 80196bc:	681c      	ldr	r4, [r3, #0]
 80196be:	4b29      	ldr	r3, [pc, #164]	@ (8019764 <ip4_input_accept+0xb8>)
 80196c0:	695a      	ldr	r2, [r3, #20]
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	3308      	adds	r3, #8
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	ea02 0503 	and.w	r5, r2, r3
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	3304      	adds	r3, #4
 80196d0:	681a      	ldr	r2, [r3, #0]
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	3308      	adds	r3, #8
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	4013      	ands	r3, r2
 80196da:	4a22      	ldr	r2, [pc, #136]	@ (8019764 <ip4_input_accept+0xb8>)
 80196dc:	6951      	ldr	r1, [r2, #20]
 80196de:	687a      	ldr	r2, [r7, #4]
 80196e0:	3208      	adds	r2, #8
 80196e2:	6812      	ldr	r2, [r2, #0]
 80196e4:	43d2      	mvns	r2, r2
 80196e6:	400a      	ands	r2, r1
 80196e8:	9201      	str	r2, [sp, #4]
 80196ea:	9300      	str	r3, [sp, #0]
 80196ec:	462b      	mov	r3, r5
 80196ee:	4622      	mov	r2, r4
 80196f0:	4601      	mov	r1, r0
 80196f2:	481d      	ldr	r0, [pc, #116]	@ (8019768 <ip4_input_accept+0xbc>)
 80196f4:	f002 f818 	bl	801b728 <iprintf>
 80196f8:	2000      	movs	r0, #0
 80196fa:	f001 ff3f 	bl	801b57c <fflush>
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019704:	f003 0301 	and.w	r3, r3, #1
 8019708:	b2db      	uxtb	r3, r3
 801970a:	2b00      	cmp	r3, #0
 801970c:	d024      	beq.n	8019758 <ip4_input_accept+0xac>
 801970e:	687b      	ldr	r3, [r7, #4]
 8019710:	3304      	adds	r3, #4
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	2b00      	cmp	r3, #0
 8019716:	d01f      	beq.n	8019758 <ip4_input_accept+0xac>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019718:	4b12      	ldr	r3, [pc, #72]	@ (8019764 <ip4_input_accept+0xb8>)
 801971a:	695a      	ldr	r2, [r3, #20]
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	3304      	adds	r3, #4
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	429a      	cmp	r2, r3
 8019724:	d008      	beq.n	8019738 <ip4_input_accept+0x8c>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019726:	4b0f      	ldr	r3, [pc, #60]	@ (8019764 <ip4_input_accept+0xb8>)
 8019728:	695b      	ldr	r3, [r3, #20]
 801972a:	6879      	ldr	r1, [r7, #4]
 801972c:	4618      	mov	r0, r3
 801972e:	f000 fc1b 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8019732:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019734:	2b00      	cmp	r3, #0
 8019736:	d00f      	beq.n	8019758 <ip4_input_accept+0xac>
#if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
        || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 801973e:	4619      	mov	r1, r3
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8019746:	461a      	mov	r2, r3
 8019748:	4808      	ldr	r0, [pc, #32]	@ (801976c <ip4_input_accept+0xc0>)
 801974a:	f001 ffed 	bl	801b728 <iprintf>
 801974e:	2000      	movs	r0, #0
 8019750:	f001 ff14 	bl	801b57c <fflush>
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019754:	2301      	movs	r3, #1
 8019756:	e000      	b.n	801975a <ip4_input_accept+0xae>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019758:	2300      	movs	r3, #0
}
 801975a:	4618      	mov	r0, r3
 801975c:	3708      	adds	r7, #8
 801975e:	46bd      	mov	sp, r7
 8019760:	bdb0      	pop	{r4, r5, r7, pc}
 8019762:	bf00      	nop
 8019764:	2000c0e8 	.word	0x2000c0e8
 8019768:	08023790 	.word	0x08023790
 801976c:	080237d8 	.word	0x080237d8

08019770 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019774:	b08a      	sub	sp, #40	@ 0x28
 8019776:	af02      	add	r7, sp, #8
 8019778:	6078      	str	r0, [r7, #4]
 801977a:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801977c:	2301      	movs	r3, #1
 801977e:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	685b      	ldr	r3, [r3, #4]
 8019784:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8019786:	69fb      	ldr	r3, [r7, #28]
 8019788:	781b      	ldrb	r3, [r3, #0]
 801978a:	091b      	lsrs	r3, r3, #4
 801978c:	b2db      	uxtb	r3, r3
 801978e:	2b04      	cmp	r3, #4
 8019790:	d012      	beq.n	80197b8 <ip4_input+0x48>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
 8019792:	69fb      	ldr	r3, [r7, #28]
 8019794:	781b      	ldrb	r3, [r3, #0]
 8019796:	091b      	lsrs	r3, r3, #4
 8019798:	b2db      	uxtb	r3, r3
 801979a:	4619      	mov	r1, r3
 801979c:	4881      	ldr	r0, [pc, #516]	@ (80199a4 <ip4_input+0x234>)
 801979e:	f001 ffc3 	bl	801b728 <iprintf>
 80197a2:	2000      	movs	r0, #0
 80197a4:	f001 feea 	bl	801b57c <fflush>
    ip4_debug_print(p);
 80197a8:	6878      	ldr	r0, [r7, #4]
 80197aa:	f000 faf5 	bl	8019d98 <ip4_debug_print>
    pbuf_free(p);
 80197ae:	6878      	ldr	r0, [r7, #4]
 80197b0:	f7f3 f8b4 	bl	800c91c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80197b4:	2300      	movs	r3, #0
 80197b6:	e1d3      	b.n	8019b60 <ip4_input+0x3f0>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80197b8:	69fb      	ldr	r3, [r7, #28]
 80197ba:	781b      	ldrb	r3, [r3, #0]
 80197bc:	f003 030f 	and.w	r3, r3, #15
 80197c0:	b2db      	uxtb	r3, r3
 80197c2:	009b      	lsls	r3, r3, #2
 80197c4:	b2db      	uxtb	r3, r3
 80197c6:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80197c8:	69fb      	ldr	r3, [r7, #28]
 80197ca:	885b      	ldrh	r3, [r3, #2]
 80197cc:	b29b      	uxth	r3, r3
 80197ce:	4618      	mov	r0, r3
 80197d0:	f7f1 fa50 	bl	800ac74 <lwip_htons>
 80197d4:	4603      	mov	r3, r0
 80197d6:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	891b      	ldrh	r3, [r3, #8]
 80197dc:	8a3a      	ldrh	r2, [r7, #16]
 80197de:	429a      	cmp	r2, r3
 80197e0:	d204      	bcs.n	80197ec <ip4_input+0x7c>
    pbuf_realloc(p, iphdr_len);
 80197e2:	8a3b      	ldrh	r3, [r7, #16]
 80197e4:	4619      	mov	r1, r3
 80197e6:	6878      	ldr	r0, [r7, #4]
 80197e8:	f7f2 fedc 	bl	800c5a4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	895b      	ldrh	r3, [r3, #10]
 80197f0:	8a7a      	ldrh	r2, [r7, #18]
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d807      	bhi.n	8019806 <ip4_input+0x96>
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	891b      	ldrh	r3, [r3, #8]
 80197fa:	8a3a      	ldrh	r2, [r7, #16]
 80197fc:	429a      	cmp	r2, r3
 80197fe:	d802      	bhi.n	8019806 <ip4_input+0x96>
 8019800:	8a7b      	ldrh	r3, [r7, #18]
 8019802:	2b13      	cmp	r3, #19
 8019804:	d82d      	bhi.n	8019862 <ip4_input+0xf2>
    if (iphdr_hlen < IP_HLEN) {
 8019806:	8a7b      	ldrh	r3, [r7, #18]
 8019808:	2b13      	cmp	r3, #19
 801980a:	d807      	bhi.n	801981c <ip4_input+0xac>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 801980c:	8a7b      	ldrh	r3, [r7, #18]
 801980e:	4619      	mov	r1, r3
 8019810:	4865      	ldr	r0, [pc, #404]	@ (80199a8 <ip4_input+0x238>)
 8019812:	f001 ff89 	bl	801b728 <iprintf>
 8019816:	2000      	movs	r0, #0
 8019818:	f001 feb0 	bl	801b57c <fflush>
                  ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iphdr_hlen));
    }
    if (iphdr_hlen > p->len) {
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	895b      	ldrh	r3, [r3, #10]
 8019820:	8a7a      	ldrh	r2, [r7, #18]
 8019822:	429a      	cmp	r2, r3
 8019824:	d909      	bls.n	801983a <ip4_input+0xca>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8019826:	8a79      	ldrh	r1, [r7, #18]
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	895b      	ldrh	r3, [r3, #10]
 801982c:	461a      	mov	r2, r3
 801982e:	485f      	ldr	r0, [pc, #380]	@ (80199ac <ip4_input+0x23c>)
 8019830:	f001 ff7a 	bl	801b728 <iprintf>
 8019834:	2000      	movs	r0, #0
 8019836:	f001 fea1 	bl	801b57c <fflush>
                  ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_hlen, p->len));
    }
    if (iphdr_len > p->tot_len) {
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	891b      	ldrh	r3, [r3, #8]
 801983e:	8a3a      	ldrh	r2, [r7, #16]
 8019840:	429a      	cmp	r2, r3
 8019842:	d909      	bls.n	8019858 <ip4_input+0xe8>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 8019844:	8a39      	ldrh	r1, [r7, #16]
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	891b      	ldrh	r3, [r3, #8]
 801984a:	461a      	mov	r2, r3
 801984c:	4858      	ldr	r0, [pc, #352]	@ (80199b0 <ip4_input+0x240>)
 801984e:	f001 ff6b 	bl	801b728 <iprintf>
 8019852:	2000      	movs	r0, #0
 8019854:	f001 fe92 	bl	801b57c <fflush>
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019858:	6878      	ldr	r0, [r7, #4]
 801985a:	f7f3 f85f 	bl	800c91c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801985e:	2300      	movs	r3, #0
 8019860:	e17e      	b.n	8019b60 <ip4_input+0x3f0>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019862:	69fb      	ldr	r3, [r7, #28]
 8019864:	691b      	ldr	r3, [r3, #16]
 8019866:	4a53      	ldr	r2, [pc, #332]	@ (80199b4 <ip4_input+0x244>)
 8019868:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801986a:	69fb      	ldr	r3, [r7, #28]
 801986c:	68db      	ldr	r3, [r3, #12]
 801986e:	4a51      	ldr	r2, [pc, #324]	@ (80199b4 <ip4_input+0x244>)
 8019870:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019872:	4b50      	ldr	r3, [pc, #320]	@ (80199b4 <ip4_input+0x244>)
 8019874:	695b      	ldr	r3, [r3, #20]
 8019876:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801987a:	2be0      	cmp	r3, #224	@ 0xe0
 801987c:	d112      	bne.n	80198a4 <ip4_input+0x134>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801987e:	683b      	ldr	r3, [r7, #0]
 8019880:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019884:	f003 0301 	and.w	r3, r3, #1
 8019888:	b2db      	uxtb	r3, r3
 801988a:	2b00      	cmp	r3, #0
 801988c:	d007      	beq.n	801989e <ip4_input+0x12e>
 801988e:	683b      	ldr	r3, [r7, #0]
 8019890:	3304      	adds	r3, #4
 8019892:	681b      	ldr	r3, [r3, #0]
 8019894:	2b00      	cmp	r3, #0
 8019896:	d002      	beq.n	801989e <ip4_input+0x12e>
      netif = inp;
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	61bb      	str	r3, [r7, #24]
 801989c:	e02a      	b.n	80198f4 <ip4_input+0x184>
    } else {
      netif = NULL;
 801989e:	2300      	movs	r3, #0
 80198a0:	61bb      	str	r3, [r7, #24]
 80198a2:	e027      	b.n	80198f4 <ip4_input+0x184>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80198a4:	6838      	ldr	r0, [r7, #0]
 80198a6:	f7ff ff01 	bl	80196ac <ip4_input_accept>
 80198aa:	4603      	mov	r3, r0
 80198ac:	2b00      	cmp	r3, #0
 80198ae:	d002      	beq.n	80198b6 <ip4_input+0x146>
      netif = inp;
 80198b0:	683b      	ldr	r3, [r7, #0]
 80198b2:	61bb      	str	r3, [r7, #24]
 80198b4:	e01e      	b.n	80198f4 <ip4_input+0x184>
    } else {
      netif = NULL;
 80198b6:	2300      	movs	r3, #0
 80198b8:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80198ba:	4b3e      	ldr	r3, [pc, #248]	@ (80199b4 <ip4_input+0x244>)
 80198bc:	695b      	ldr	r3, [r3, #20]
 80198be:	b2db      	uxtb	r3, r3
 80198c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80198c2:	d017      	beq.n	80198f4 <ip4_input+0x184>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80198c4:	4b3c      	ldr	r3, [pc, #240]	@ (80199b8 <ip4_input+0x248>)
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	61bb      	str	r3, [r7, #24]
 80198ca:	e00e      	b.n	80198ea <ip4_input+0x17a>
          if (netif == inp) {
 80198cc:	69ba      	ldr	r2, [r7, #24]
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	429a      	cmp	r2, r3
 80198d2:	d006      	beq.n	80198e2 <ip4_input+0x172>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80198d4:	69b8      	ldr	r0, [r7, #24]
 80198d6:	f7ff fee9 	bl	80196ac <ip4_input_accept>
 80198da:	4603      	mov	r3, r0
 80198dc:	2b00      	cmp	r3, #0
 80198de:	d108      	bne.n	80198f2 <ip4_input+0x182>
 80198e0:	e000      	b.n	80198e4 <ip4_input+0x174>
            continue;
 80198e2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80198e4:	69bb      	ldr	r3, [r7, #24]
 80198e6:	681b      	ldr	r3, [r3, #0]
 80198e8:	61bb      	str	r3, [r7, #24]
 80198ea:	69bb      	ldr	r3, [r7, #24]
 80198ec:	2b00      	cmp	r3, #0
 80198ee:	d1ed      	bne.n	80198cc <ip4_input+0x15c>
 80198f0:	e000      	b.n	80198f4 <ip4_input+0x184>
            break;
 80198f2:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80198f4:	69bb      	ldr	r3, [r7, #24]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d125      	bne.n	8019946 <ip4_input+0x1d6>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80198fa:	69fb      	ldr	r3, [r7, #28]
 80198fc:	7a5b      	ldrb	r3, [r3, #9]
 80198fe:	2b11      	cmp	r3, #17
 8019900:	d121      	bne.n	8019946 <ip4_input+0x1d6>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8019902:	8a7b      	ldrh	r3, [r7, #18]
 8019904:	69fa      	ldr	r2, [r7, #28]
 8019906:	4413      	add	r3, r2
 8019908:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	885b      	ldrh	r3, [r3, #2]
 801990e:	b29b      	uxth	r3, r3
 8019910:	4618      	mov	r0, r3
 8019912:	f7f1 f9af 	bl	800ac74 <lwip_htons>
 8019916:	4603      	mov	r3, r0
 8019918:	4619      	mov	r1, r3
 801991a:	4828      	ldr	r0, [pc, #160]	@ (80199bc <ip4_input+0x24c>)
 801991c:	f001 ff04 	bl	801b728 <iprintf>
 8019920:	2000      	movs	r0, #0
 8019922:	f001 fe2b 	bl	801b57c <fflush>
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8019926:	68fb      	ldr	r3, [r7, #12]
 8019928:	885b      	ldrh	r3, [r3, #2]
 801992a:	b29b      	uxth	r3, r3
 801992c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 8019930:	d109      	bne.n	8019946 <ip4_input+0x1d6>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
 8019932:	4823      	ldr	r0, [pc, #140]	@ (80199c0 <ip4_input+0x250>)
 8019934:	f001 ff68 	bl	801b808 <puts>
 8019938:	2000      	movs	r0, #0
 801993a:	f001 fe1f 	bl	801b57c <fflush>
        netif = inp;
 801993e:	683b      	ldr	r3, [r7, #0]
 8019940:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8019942:	2300      	movs	r3, #0
 8019944:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8019946:	697b      	ldr	r3, [r7, #20]
 8019948:	2b00      	cmp	r3, #0
 801994a:	d01d      	beq.n	8019988 <ip4_input+0x218>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801994c:	4b19      	ldr	r3, [pc, #100]	@ (80199b4 <ip4_input+0x244>)
 801994e:	691b      	ldr	r3, [r3, #16]
 8019950:	2b00      	cmp	r3, #0
 8019952:	d019      	beq.n	8019988 <ip4_input+0x218>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019954:	4b17      	ldr	r3, [pc, #92]	@ (80199b4 <ip4_input+0x244>)
 8019956:	691b      	ldr	r3, [r3, #16]
 8019958:	6839      	ldr	r1, [r7, #0]
 801995a:	4618      	mov	r0, r3
 801995c:	f000 fb04 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8019960:	4603      	mov	r3, r0
 8019962:	2b00      	cmp	r3, #0
 8019964:	d105      	bne.n	8019972 <ip4_input+0x202>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019966:	4b13      	ldr	r3, [pc, #76]	@ (80199b4 <ip4_input+0x244>)
 8019968:	691b      	ldr	r3, [r3, #16]
 801996a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801996e:	2be0      	cmp	r3, #224	@ 0xe0
 8019970:	d10a      	bne.n	8019988 <ip4_input+0x218>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
 8019972:	4814      	ldr	r0, [pc, #80]	@ (80199c4 <ip4_input+0x254>)
 8019974:	f001 ff48 	bl	801b808 <puts>
 8019978:	2000      	movs	r0, #0
 801997a:	f001 fdff 	bl	801b57c <fflush>
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801997e:	6878      	ldr	r0, [r7, #4]
 8019980:	f7f2 ffcc 	bl	800c91c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019984:	2300      	movs	r3, #0
 8019986:	e0eb      	b.n	8019b60 <ip4_input+0x3f0>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019988:	69bb      	ldr	r3, [r7, #24]
 801998a:	2b00      	cmp	r3, #0
 801998c:	d11e      	bne.n	80199cc <ip4_input+0x25c>
    /* packet not for us, route or discard */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 801998e:	480e      	ldr	r0, [pc, #56]	@ (80199c8 <ip4_input+0x258>)
 8019990:	f001 ff3a 	bl	801b808 <puts>
 8019994:	2000      	movs	r0, #0
 8019996:	f001 fdf1 	bl	801b57c <fflush>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801999a:	6878      	ldr	r0, [r7, #4]
 801999c:	f7f2 ffbe 	bl	800c91c <pbuf_free>
    return ERR_OK;
 80199a0:	2300      	movs	r3, #0
 80199a2:	e0dd      	b.n	8019b60 <ip4_input+0x3f0>
 80199a4:	08023808 	.word	0x08023808
 80199a8:	0802383c 	.word	0x0802383c
 80199ac:	08023880 	.word	0x08023880
 80199b0:	080238d0 	.word	0x080238d0
 80199b4:	2000c0e8 	.word	0x2000c0e8
 80199b8:	20011d70 	.word	0x20011d70
 80199bc:	08023910 	.word	0x08023910
 80199c0:	08023940 	.word	0x08023940
 80199c4:	08023964 	.word	0x08023964
 80199c8:	0802398c 	.word	0x0802398c
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80199cc:	69fb      	ldr	r3, [r7, #28]
 80199ce:	88db      	ldrh	r3, [r3, #6]
 80199d0:	b29b      	uxth	r3, r3
 80199d2:	461a      	mov	r2, r3
 80199d4:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80199d8:	4013      	ands	r3, r2
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d040      	beq.n	8019a60 <ip4_input+0x2f0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
 80199de:	69fb      	ldr	r3, [r7, #28]
 80199e0:	889b      	ldrh	r3, [r3, #4]
 80199e2:	b29b      	uxth	r3, r3
 80199e4:	4618      	mov	r0, r3
 80199e6:	f7f1 f945 	bl	800ac74 <lwip_htons>
 80199ea:	4603      	mov	r3, r0
 80199ec:	461d      	mov	r5, r3
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	891b      	ldrh	r3, [r3, #8]
 80199f2:	461e      	mov	r6, r3
 80199f4:	69fb      	ldr	r3, [r7, #28]
 80199f6:	885b      	ldrh	r3, [r3, #2]
 80199f8:	b29b      	uxth	r3, r3
 80199fa:	4618      	mov	r0, r3
 80199fc:	f7f1 f93a 	bl	800ac74 <lwip_htons>
 8019a00:	4603      	mov	r3, r0
 8019a02:	4698      	mov	r8, r3
 8019a04:	69fb      	ldr	r3, [r7, #28]
 8019a06:	88db      	ldrh	r3, [r3, #6]
 8019a08:	b29b      	uxth	r3, r3
 8019a0a:	f003 0320 	and.w	r3, r3, #32
 8019a0e:	2b00      	cmp	r3, #0
 8019a10:	bf14      	ite	ne
 8019a12:	2301      	movne	r3, #1
 8019a14:	2300      	moveq	r3, #0
 8019a16:	b2db      	uxtb	r3, r3
 8019a18:	461c      	mov	r4, r3
 8019a1a:	69fb      	ldr	r3, [r7, #28]
 8019a1c:	88db      	ldrh	r3, [r3, #6]
 8019a1e:	b29b      	uxth	r3, r3
 8019a20:	4618      	mov	r0, r3
 8019a22:	f7f1 f927 	bl	800ac74 <lwip_htons>
 8019a26:	4603      	mov	r3, r0
 8019a28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019a2c:	b29b      	uxth	r3, r3
 8019a2e:	00db      	lsls	r3, r3, #3
 8019a30:	b29b      	uxth	r3, r3
 8019a32:	9301      	str	r3, [sp, #4]
 8019a34:	9400      	str	r4, [sp, #0]
 8019a36:	4643      	mov	r3, r8
 8019a38:	4632      	mov	r2, r6
 8019a3a:	4629      	mov	r1, r5
 8019a3c:	484b      	ldr	r0, [pc, #300]	@ (8019b6c <ip4_input+0x3fc>)
 8019a3e:	f001 fe73 	bl	801b728 <iprintf>
 8019a42:	2000      	movs	r0, #0
 8019a44:	f001 fd9a 	bl	801b57c <fflush>
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019a48:	6878      	ldr	r0, [r7, #4]
 8019a4a:	f000 fe0f 	bl	801a66c <ip4_reass>
 8019a4e:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d101      	bne.n	8019a5a <ip4_input+0x2ea>
      return ERR_OK;
 8019a56:	2300      	movs	r3, #0
 8019a58:	e082      	b.n	8019b60 <ip4_input+0x3f0>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	685b      	ldr	r3, [r3, #4]
 8019a5e:	61fb      	str	r3, [r7, #28]
    return ERR_OK;
  }
#endif /* IP_OPTIONS_ALLOWED == 0 */

  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 8019a60:	4843      	ldr	r0, [pc, #268]	@ (8019b70 <ip4_input+0x400>)
 8019a62:	f001 fed1 	bl	801b808 <puts>
 8019a66:	2000      	movs	r0, #0
 8019a68:	f001 fd88 	bl	801b57c <fflush>
  ip4_debug_print(p);
 8019a6c:	6878      	ldr	r0, [r7, #4]
 8019a6e:	f000 f993 	bl	8019d98 <ip4_debug_print>
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	895b      	ldrh	r3, [r3, #10]
 8019a76:	4619      	mov	r1, r3
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	891b      	ldrh	r3, [r3, #8]
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	483d      	ldr	r0, [pc, #244]	@ (8019b74 <ip4_input+0x404>)
 8019a80:	f001 fe52 	bl	801b728 <iprintf>
 8019a84:	2000      	movs	r0, #0
 8019a86:	f001 fd79 	bl	801b57c <fflush>

  ip_data.current_netif = netif;
 8019a8a:	4a3b      	ldr	r2, [pc, #236]	@ (8019b78 <ip4_input+0x408>)
 8019a8c:	69bb      	ldr	r3, [r7, #24]
 8019a8e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019a90:	4a39      	ldr	r2, [pc, #228]	@ (8019b78 <ip4_input+0x408>)
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019a96:	4a38      	ldr	r2, [pc, #224]	@ (8019b78 <ip4_input+0x408>)
 8019a98:	69fb      	ldr	r3, [r7, #28]
 8019a9a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019a9c:	69fb      	ldr	r3, [r7, #28]
 8019a9e:	781b      	ldrb	r3, [r3, #0]
 8019aa0:	f003 030f 	and.w	r3, r3, #15
 8019aa4:	b2db      	uxtb	r3, r3
 8019aa6:	009b      	lsls	r3, r3, #2
 8019aa8:	b2db      	uxtb	r3, r3
 8019aaa:	461a      	mov	r2, r3
 8019aac:	4b32      	ldr	r3, [pc, #200]	@ (8019b78 <ip4_input+0x408>)
 8019aae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019ab0:	8a7b      	ldrh	r3, [r7, #18]
 8019ab2:	4619      	mov	r1, r3
 8019ab4:	6878      	ldr	r0, [r7, #4]
 8019ab6:	f7f2 fe99 	bl	800c7ec <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019aba:	69fb      	ldr	r3, [r7, #28]
 8019abc:	7a5b      	ldrb	r3, [r3, #9]
 8019abe:	2b11      	cmp	r3, #17
 8019ac0:	d006      	beq.n	8019ad0 <ip4_input+0x360>
 8019ac2:	2b11      	cmp	r3, #17
 8019ac4:	dc13      	bgt.n	8019aee <ip4_input+0x37e>
 8019ac6:	2b01      	cmp	r3, #1
 8019ac8:	d00c      	beq.n	8019ae4 <ip4_input+0x374>
 8019aca:	2b06      	cmp	r3, #6
 8019acc:	d005      	beq.n	8019ada <ip4_input+0x36a>
 8019ace:	e00e      	b.n	8019aee <ip4_input+0x37e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019ad0:	6839      	ldr	r1, [r7, #0]
 8019ad2:	6878      	ldr	r0, [r7, #4]
 8019ad4:	f7fb f8c2 	bl	8014c5c <udp_input>
        break;
 8019ad8:	e02f      	b.n	8019b3a <ip4_input+0x3ca>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019ada:	6839      	ldr	r1, [r7, #0]
 8019adc:	6878      	ldr	r0, [r7, #4]
 8019ade:	f7f5 fcd5 	bl	800f48c <tcp_input>
        break;
 8019ae2:	e02a      	b.n	8019b3a <ip4_input+0x3ca>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019ae4:	6839      	ldr	r1, [r7, #0]
 8019ae6:	6878      	ldr	r0, [r7, #4]
 8019ae8:	f7ff faf8 	bl	80190dc <icmp_input>
        break;
 8019aec:	e025      	b.n	8019b3a <ip4_input+0x3ca>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019aee:	4b22      	ldr	r3, [pc, #136]	@ (8019b78 <ip4_input+0x408>)
 8019af0:	695b      	ldr	r3, [r3, #20]
 8019af2:	69b9      	ldr	r1, [r7, #24]
 8019af4:	4618      	mov	r0, r3
 8019af6:	f000 fa37 	bl	8019f68 <ip4_addr_isbroadcast_u32>
 8019afa:	4603      	mov	r3, r0
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d10f      	bne.n	8019b20 <ip4_input+0x3b0>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019b00:	4b1d      	ldr	r3, [pc, #116]	@ (8019b78 <ip4_input+0x408>)
 8019b02:	695b      	ldr	r3, [r3, #20]
 8019b04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019b08:	2be0      	cmp	r3, #224	@ 0xe0
 8019b0a:	d009      	beq.n	8019b20 <ip4_input+0x3b0>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019b0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019b10:	4619      	mov	r1, r3
 8019b12:	6878      	ldr	r0, [r7, #4]
 8019b14:	f7f2 feef 	bl	800c8f6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019b18:	2102      	movs	r1, #2
 8019b1a:	6878      	ldr	r0, [r7, #4]
 8019b1c:	f7ff fc60 	bl	80193e0 <icmp_dest_unreach>
          }
#endif /* LWIP_ICMP */

          LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\n", (u16_t)IPH_PROTO(iphdr)));
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	7a5b      	ldrb	r3, [r3, #9]
 8019b24:	4619      	mov	r1, r3
 8019b26:	4815      	ldr	r0, [pc, #84]	@ (8019b7c <ip4_input+0x40c>)
 8019b28:	f001 fdfe 	bl	801b728 <iprintf>
 8019b2c:	2000      	movs	r0, #0
 8019b2e:	f001 fd25 	bl	801b57c <fflush>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019b32:	6878      	ldr	r0, [r7, #4]
 8019b34:	f7f2 fef2 	bl	800c91c <pbuf_free>
        break;
 8019b38:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8019b78 <ip4_input+0x408>)
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019b40:	4b0d      	ldr	r3, [pc, #52]	@ (8019b78 <ip4_input+0x408>)
 8019b42:	2200      	movs	r2, #0
 8019b44:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019b46:	4b0c      	ldr	r3, [pc, #48]	@ (8019b78 <ip4_input+0x408>)
 8019b48:	2200      	movs	r2, #0
 8019b4a:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8019b78 <ip4_input+0x408>)
 8019b4e:	2200      	movs	r2, #0
 8019b50:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019b52:	4b09      	ldr	r3, [pc, #36]	@ (8019b78 <ip4_input+0x408>)
 8019b54:	2200      	movs	r2, #0
 8019b56:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019b58:	4b07      	ldr	r3, [pc, #28]	@ (8019b78 <ip4_input+0x408>)
 8019b5a:	2200      	movs	r2, #0
 8019b5c:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019b5e:	2300      	movs	r3, #0
}
 8019b60:	4618      	mov	r0, r3
 8019b62:	3720      	adds	r7, #32
 8019b64:	46bd      	mov	sp, r7
 8019b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b6a:	bf00      	nop
 8019b6c:	080239ac 	.word	0x080239ac
 8019b70:	08023a10 	.word	0x08023a10
 8019b74:	08023a1c 	.word	0x08023a1c
 8019b78:	2000c0e8 	.word	0x2000c0e8
 8019b7c:	08023a44 	.word	0x08023a44

08019b80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019b80:	b580      	push	{r7, lr}
 8019b82:	b08a      	sub	sp, #40	@ 0x28
 8019b84:	af04      	add	r7, sp, #16
 8019b86:	60f8      	str	r0, [r7, #12]
 8019b88:	60b9      	str	r1, [r7, #8]
 8019b8a:	607a      	str	r2, [r7, #4]
 8019b8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	d009      	beq.n	8019bac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019b98:	68bb      	ldr	r3, [r7, #8]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d003      	beq.n	8019ba6 <ip4_output_if+0x26>
 8019b9e:	68bb      	ldr	r3, [r7, #8]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d102      	bne.n	8019bac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ba8:	3304      	adds	r3, #4
 8019baa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019bac:	78fa      	ldrb	r2, [r7, #3]
 8019bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019bb0:	9302      	str	r3, [sp, #8]
 8019bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8019bb6:	9301      	str	r3, [sp, #4]
 8019bb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019bbc:	9300      	str	r3, [sp, #0]
 8019bbe:	4613      	mov	r3, r2
 8019bc0:	687a      	ldr	r2, [r7, #4]
 8019bc2:	6979      	ldr	r1, [r7, #20]
 8019bc4:	68f8      	ldr	r0, [r7, #12]
 8019bc6:	f000 f805 	bl	8019bd4 <ip4_output_if_src>
 8019bca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019bcc:	4618      	mov	r0, r3
 8019bce:	3718      	adds	r7, #24
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}

08019bd4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019bd4:	b580      	push	{r7, lr}
 8019bd6:	b088      	sub	sp, #32
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	60f8      	str	r0, [r7, #12]
 8019bdc:	60b9      	str	r1, [r7, #8]
 8019bde:	607a      	str	r2, [r7, #4]
 8019be0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	7b9b      	ldrb	r3, [r3, #14]
 8019be6:	2b01      	cmp	r3, #1
 8019be8:	d009      	beq.n	8019bfe <ip4_output_if_src+0x2a>
 8019bea:	4b61      	ldr	r3, [pc, #388]	@ (8019d70 <ip4_output_if_src+0x19c>)
 8019bec:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8019bf0:	4960      	ldr	r1, [pc, #384]	@ (8019d74 <ip4_output_if_src+0x1a0>)
 8019bf2:	4861      	ldr	r0, [pc, #388]	@ (8019d78 <ip4_output_if_src+0x1a4>)
 8019bf4:	f001 fd98 	bl	801b728 <iprintf>
 8019bf8:	2000      	movs	r0, #0
 8019bfa:	f001 fcbf 	bl	801b57c <fflush>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d069      	beq.n	8019cd8 <ip4_output_if_src+0x104>
    u16_t ip_hlen = IP_HLEN;
 8019c04:	2314      	movs	r3, #20
 8019c06:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019c08:	2114      	movs	r1, #20
 8019c0a:	68f8      	ldr	r0, [r7, #12]
 8019c0c:	f7f2 fdde 	bl	800c7cc <pbuf_add_header>
 8019c10:	4603      	mov	r3, r0
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d008      	beq.n	8019c28 <ip4_output_if_src+0x54>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));
 8019c16:	4859      	ldr	r0, [pc, #356]	@ (8019d7c <ip4_output_if_src+0x1a8>)
 8019c18:	f001 fdf6 	bl	801b808 <puts>
 8019c1c:	2000      	movs	r0, #0
 8019c1e:	f001 fcad 	bl	801b57c <fflush>

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019c22:	f06f 0301 	mvn.w	r3, #1
 8019c26:	e09f      	b.n	8019d68 <ip4_output_if_src+0x194>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	685b      	ldr	r3, [r3, #4]
 8019c2c:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019c2e:	68fb      	ldr	r3, [r7, #12]
 8019c30:	895b      	ldrh	r3, [r3, #10]
 8019c32:	2b13      	cmp	r3, #19
 8019c34:	d809      	bhi.n	8019c4a <ip4_output_if_src+0x76>
 8019c36:	4b4e      	ldr	r3, [pc, #312]	@ (8019d70 <ip4_output_if_src+0x19c>)
 8019c38:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8019c3c:	4950      	ldr	r1, [pc, #320]	@ (8019d80 <ip4_output_if_src+0x1ac>)
 8019c3e:	484e      	ldr	r0, [pc, #312]	@ (8019d78 <ip4_output_if_src+0x1a4>)
 8019c40:	f001 fd72 	bl	801b728 <iprintf>
 8019c44:	2000      	movs	r0, #0
 8019c46:	f001 fc99 	bl	801b57c <fflush>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019c4a:	69fb      	ldr	r3, [r7, #28]
 8019c4c:	78fa      	ldrb	r2, [r7, #3]
 8019c4e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019c50:	69fb      	ldr	r3, [r7, #28]
 8019c52:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8019c56:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	681a      	ldr	r2, [r3, #0]
 8019c5c:	69fb      	ldr	r3, [r7, #28]
 8019c5e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019c60:	8b7b      	ldrh	r3, [r7, #26]
 8019c62:	089b      	lsrs	r3, r3, #2
 8019c64:	b29b      	uxth	r3, r3
 8019c66:	b2db      	uxtb	r3, r3
 8019c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019c6c:	b2da      	uxtb	r2, r3
 8019c6e:	69fb      	ldr	r3, [r7, #28]
 8019c70:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019c72:	69fb      	ldr	r3, [r7, #28]
 8019c74:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8019c78:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	891b      	ldrh	r3, [r3, #8]
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7f0 fff8 	bl	800ac74 <lwip_htons>
 8019c84:	4603      	mov	r3, r0
 8019c86:	461a      	mov	r2, r3
 8019c88:	69fb      	ldr	r3, [r7, #28]
 8019c8a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019c8c:	69fb      	ldr	r3, [r7, #28]
 8019c8e:	2200      	movs	r2, #0
 8019c90:	719a      	strb	r2, [r3, #6]
 8019c92:	2200      	movs	r2, #0
 8019c94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019c96:	4b3b      	ldr	r3, [pc, #236]	@ (8019d84 <ip4_output_if_src+0x1b0>)
 8019c98:	881b      	ldrh	r3, [r3, #0]
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7f0 ffea 	bl	800ac74 <lwip_htons>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	461a      	mov	r2, r3
 8019ca4:	69fb      	ldr	r3, [r7, #28]
 8019ca6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019ca8:	4b36      	ldr	r3, [pc, #216]	@ (8019d84 <ip4_output_if_src+0x1b0>)
 8019caa:	881b      	ldrh	r3, [r3, #0]
 8019cac:	3301      	adds	r3, #1
 8019cae:	b29a      	uxth	r2, r3
 8019cb0:	4b34      	ldr	r3, [pc, #208]	@ (8019d84 <ip4_output_if_src+0x1b0>)
 8019cb2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019cb4:	68bb      	ldr	r3, [r7, #8]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d104      	bne.n	8019cc4 <ip4_output_if_src+0xf0>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019cba:	4b33      	ldr	r3, [pc, #204]	@ (8019d88 <ip4_output_if_src+0x1b4>)
 8019cbc:	681a      	ldr	r2, [r3, #0]
 8019cbe:	69fb      	ldr	r3, [r7, #28]
 8019cc0:	60da      	str	r2, [r3, #12]
 8019cc2:	e003      	b.n	8019ccc <ip4_output_if_src+0xf8>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019cc4:	68bb      	ldr	r3, [r7, #8]
 8019cc6:	681a      	ldr	r2, [r3, #0]
 8019cc8:	69fb      	ldr	r3, [r7, #28]
 8019cca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019ccc:	69fb      	ldr	r3, [r7, #28]
 8019cce:	2200      	movs	r2, #0
 8019cd0:	729a      	strb	r2, [r3, #10]
 8019cd2:	2200      	movs	r2, #0
 8019cd4:	72da      	strb	r2, [r3, #11]
 8019cd6:	e015      	b.n	8019d04 <ip4_output_if_src+0x130>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	895b      	ldrh	r3, [r3, #10]
 8019cdc:	2b13      	cmp	r3, #19
 8019cde:	d808      	bhi.n	8019cf2 <ip4_output_if_src+0x11e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
 8019ce0:	482a      	ldr	r0, [pc, #168]	@ (8019d8c <ip4_output_if_src+0x1b8>)
 8019ce2:	f001 fd91 	bl	801b808 <puts>
 8019ce6:	2000      	movs	r0, #0
 8019ce8:	f001 fc48 	bl	801b57c <fflush>
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019cec:	f06f 0301 	mvn.w	r3, #1
 8019cf0:	e03a      	b.n	8019d68 <ip4_output_if_src+0x194>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	685b      	ldr	r3, [r3, #4]
 8019cf6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019cf8:	69fb      	ldr	r3, [r7, #28]
 8019cfa:	691b      	ldr	r3, [r3, #16]
 8019cfc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019cfe:	f107 0314 	add.w	r3, r7, #20
 8019d02:	607b      	str	r3, [r7, #4]
  }

  IP_STATS_INC(ip.xmit);

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
 8019d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d06:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8019d0a:	4619      	mov	r1, r3
 8019d0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d0e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
 8019d12:	461a      	mov	r2, r3
 8019d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d16:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8019d1a:	481d      	ldr	r0, [pc, #116]	@ (8019d90 <ip4_output_if_src+0x1bc>)
 8019d1c:	f001 fd04 	bl	801b728 <iprintf>
 8019d20:	2000      	movs	r0, #0
 8019d22:	f001 fc2b 	bl	801b57c <fflush>
  ip4_debug_print(p);
 8019d26:	68f8      	ldr	r0, [r7, #12]
 8019d28:	f000 f836 	bl	8019d98 <ip4_debug_print>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d00c      	beq.n	8019d4e <ip4_output_if_src+0x17a>
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	891a      	ldrh	r2, [r3, #8]
 8019d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d906      	bls.n	8019d4e <ip4_output_if_src+0x17a>
    return ip4_frag(p, netif, dest);
 8019d40:	687a      	ldr	r2, [r7, #4]
 8019d42:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8019d44:	68f8      	ldr	r0, [r7, #12]
 8019d46:	f000 fed3 	bl	801aaf0 <ip4_frag>
 8019d4a:	4603      	mov	r3, r0
 8019d4c:	e00c      	b.n	8019d68 <ip4_output_if_src+0x194>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 8019d4e:	4811      	ldr	r0, [pc, #68]	@ (8019d94 <ip4_output_if_src+0x1c0>)
 8019d50:	f001 fd5a 	bl	801b808 <puts>
 8019d54:	2000      	movs	r0, #0
 8019d56:	f001 fc11 	bl	801b57c <fflush>
  return netif->output(netif, p, dest);
 8019d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d5c:	695b      	ldr	r3, [r3, #20]
 8019d5e:	687a      	ldr	r2, [r7, #4]
 8019d60:	68f9      	ldr	r1, [r7, #12]
 8019d62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019d64:	4798      	blx	r3
 8019d66:	4603      	mov	r3, r0
}
 8019d68:	4618      	mov	r0, r3
 8019d6a:	3720      	adds	r7, #32
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}
 8019d70:	08023a68 	.word	0x08023a68
 8019d74:	08023a9c 	.word	0x08023a9c
 8019d78:	08023aa8 	.word	0x08023aa8
 8019d7c:	08023ad0 	.word	0x08023ad0
 8019d80:	08023b04 	.word	0x08023b04
 8019d84:	20011f06 	.word	0x20011f06
 8019d88:	08025270 	.word	0x08025270
 8019d8c:	08023b34 	.word	0x08023b34
 8019d90:	08023b68 	.word	0x08023b68
 8019d94:	08023b80 	.word	0x08023b80

08019d98 <ip4_debug_print>:
/* Print an IP header by using LWIP_DEBUGF
 * @param p an IP packet, p->payload pointing to the IP header
 */
void
ip4_debug_print(struct pbuf *p)
{
 8019d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d9c:	b086      	sub	sp, #24
 8019d9e:	af02      	add	r7, sp, #8
 8019da0:	6078      	str	r0, [r7, #4]
  struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	685b      	ldr	r3, [r3, #4]
 8019da6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(IP_DEBUG, ("IP header:\n"));
 8019da8:	4868      	ldr	r0, [pc, #416]	@ (8019f4c <ip4_debug_print+0x1b4>)
 8019daa:	f001 fd2d 	bl	801b808 <puts>
 8019dae:	2000      	movs	r0, #0
 8019db0:	f001 fbe4 	bl	801b57c <fflush>
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8019db4:	4866      	ldr	r0, [pc, #408]	@ (8019f50 <ip4_debug_print+0x1b8>)
 8019db6:	f001 fd27 	bl	801b808 <puts>
 8019dba:	2000      	movs	r0, #0
 8019dbc:	f001 fbde 	bl	801b57c <fflush>
  LWIP_DEBUGF(IP_DEBUG, ("|%2"S16_F" |%2"S16_F" |  0x%02"X16_F" |     %5"U16_F"     | (v, hl, tos, len)\n",
 8019dc0:	68fb      	ldr	r3, [r7, #12]
 8019dc2:	781b      	ldrb	r3, [r3, #0]
 8019dc4:	091b      	lsrs	r3, r3, #4
 8019dc6:	b2db      	uxtb	r3, r3
 8019dc8:	461d      	mov	r5, r3
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	781b      	ldrb	r3, [r3, #0]
 8019dce:	f003 040f 	and.w	r4, r3, #15
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	785b      	ldrb	r3, [r3, #1]
 8019dd6:	461e      	mov	r6, r3
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	885b      	ldrh	r3, [r3, #2]
 8019ddc:	b29b      	uxth	r3, r3
 8019dde:	4618      	mov	r0, r3
 8019de0:	f7f0 ff48 	bl	800ac74 <lwip_htons>
 8019de4:	4603      	mov	r3, r0
 8019de6:	9300      	str	r3, [sp, #0]
 8019de8:	4633      	mov	r3, r6
 8019dea:	4622      	mov	r2, r4
 8019dec:	4629      	mov	r1, r5
 8019dee:	4859      	ldr	r0, [pc, #356]	@ (8019f54 <ip4_debug_print+0x1bc>)
 8019df0:	f001 fc9a 	bl	801b728 <iprintf>
 8019df4:	2000      	movs	r0, #0
 8019df6:	f001 fbc1 	bl	801b57c <fflush>
                         (u16_t)IPH_V(iphdr),
                         (u16_t)IPH_HL(iphdr),
                         (u16_t)IPH_TOS(iphdr),
                         lwip_ntohs(IPH_LEN(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8019dfa:	4855      	ldr	r0, [pc, #340]	@ (8019f50 <ip4_debug_print+0x1b8>)
 8019dfc:	f001 fd04 	bl	801b808 <puts>
 8019e00:	2000      	movs	r0, #0
 8019e02:	f001 fbbb 	bl	801b57c <fflush>
  LWIP_DEBUGF(IP_DEBUG, ("|    %5"U16_F"      |%"U16_F"%"U16_F"%"U16_F"|    %4"U16_F"   | (id, flags, offset)\n",
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	889b      	ldrh	r3, [r3, #4]
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	f7f0 ff31 	bl	800ac74 <lwip_htons>
 8019e12:	4603      	mov	r3, r0
 8019e14:	4698      	mov	r8, r3
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	88db      	ldrh	r3, [r3, #6]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f7f0 ff29 	bl	800ac74 <lwip_htons>
 8019e22:	4603      	mov	r3, r0
 8019e24:	0bdb      	lsrs	r3, r3, #15
 8019e26:	b29b      	uxth	r3, r3
 8019e28:	f003 0501 	and.w	r5, r3, #1
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	88db      	ldrh	r3, [r3, #6]
 8019e30:	b29b      	uxth	r3, r3
 8019e32:	4618      	mov	r0, r3
 8019e34:	f7f0 ff1e 	bl	800ac74 <lwip_htons>
 8019e38:	4603      	mov	r3, r0
 8019e3a:	0b9b      	lsrs	r3, r3, #14
 8019e3c:	b29b      	uxth	r3, r3
 8019e3e:	f003 0601 	and.w	r6, r3, #1
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	88db      	ldrh	r3, [r3, #6]
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	4618      	mov	r0, r3
 8019e4a:	f7f0 ff13 	bl	800ac74 <lwip_htons>
 8019e4e:	4603      	mov	r3, r0
 8019e50:	0b5b      	lsrs	r3, r3, #13
 8019e52:	b29b      	uxth	r3, r3
 8019e54:	f003 0401 	and.w	r4, r3, #1
 8019e58:	68fb      	ldr	r3, [r7, #12]
 8019e5a:	88db      	ldrh	r3, [r3, #6]
 8019e5c:	b29b      	uxth	r3, r3
 8019e5e:	4618      	mov	r0, r3
 8019e60:	f7f0 ff08 	bl	800ac74 <lwip_htons>
 8019e64:	4603      	mov	r3, r0
 8019e66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019e6a:	9301      	str	r3, [sp, #4]
 8019e6c:	9400      	str	r4, [sp, #0]
 8019e6e:	4633      	mov	r3, r6
 8019e70:	462a      	mov	r2, r5
 8019e72:	4641      	mov	r1, r8
 8019e74:	4838      	ldr	r0, [pc, #224]	@ (8019f58 <ip4_debug_print+0x1c0>)
 8019e76:	f001 fc57 	bl	801b728 <iprintf>
 8019e7a:	2000      	movs	r0, #0
 8019e7c:	f001 fb7e 	bl	801b57c <fflush>
                         lwip_ntohs(IPH_ID(iphdr)),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 15 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 14 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) >> 13 & 1),
                         (u16_t)(lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8019e80:	4833      	ldr	r0, [pc, #204]	@ (8019f50 <ip4_debug_print+0x1b8>)
 8019e82:	f001 fcc1 	bl	801b808 <puts>
 8019e86:	2000      	movs	r0, #0
 8019e88:	f001 fb78 	bl	801b57c <fflush>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |    0x%04"X16_F"     | (ttl, proto, chksum)\n",
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	7a1b      	ldrb	r3, [r3, #8]
 8019e90:	461c      	mov	r4, r3
 8019e92:	68fb      	ldr	r3, [r7, #12]
 8019e94:	7a5b      	ldrb	r3, [r3, #9]
 8019e96:	461d      	mov	r5, r3
 8019e98:	68fb      	ldr	r3, [r7, #12]
 8019e9a:	895b      	ldrh	r3, [r3, #10]
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	f7f0 fee8 	bl	800ac74 <lwip_htons>
 8019ea4:	4603      	mov	r3, r0
 8019ea6:	462a      	mov	r2, r5
 8019ea8:	4621      	mov	r1, r4
 8019eaa:	482c      	ldr	r0, [pc, #176]	@ (8019f5c <ip4_debug_print+0x1c4>)
 8019eac:	f001 fc3c 	bl	801b728 <iprintf>
 8019eb0:	2000      	movs	r0, #0
 8019eb2:	f001 fb63 	bl	801b57c <fflush>
                         (u16_t)IPH_TTL(iphdr),
                         (u16_t)IPH_PROTO(iphdr),
                         lwip_ntohs(IPH_CHKSUM(iphdr))));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8019eb6:	4826      	ldr	r0, [pc, #152]	@ (8019f50 <ip4_debug_print+0x1b8>)
 8019eb8:	f001 fca6 	bl	801b808 <puts>
 8019ebc:	2000      	movs	r0, #0
 8019ebe:	f001 fb5d 	bl	801b57c <fflush>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (src)\n",
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	68db      	ldr	r3, [r3, #12]
 8019ec6:	b2db      	uxtb	r3, r3
 8019ec8:	4619      	mov	r1, r3
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	68db      	ldr	r3, [r3, #12]
 8019ece:	0a1b      	lsrs	r3, r3, #8
 8019ed0:	b2db      	uxtb	r3, r3
 8019ed2:	461a      	mov	r2, r3
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	68db      	ldr	r3, [r3, #12]
 8019ed8:	0c1b      	lsrs	r3, r3, #16
 8019eda:	b2db      	uxtb	r3, r3
 8019edc:	4618      	mov	r0, r3
 8019ede:	68fb      	ldr	r3, [r7, #12]
 8019ee0:	68db      	ldr	r3, [r3, #12]
 8019ee2:	0e1b      	lsrs	r3, r3, #24
 8019ee4:	b2db      	uxtb	r3, r3
 8019ee6:	9300      	str	r3, [sp, #0]
 8019ee8:	4603      	mov	r3, r0
 8019eea:	481d      	ldr	r0, [pc, #116]	@ (8019f60 <ip4_debug_print+0x1c8>)
 8019eec:	f001 fc1c 	bl	801b728 <iprintf>
 8019ef0:	2000      	movs	r0, #0
 8019ef2:	f001 fb43 	bl	801b57c <fflush>
                         ip4_addr1_16_val(iphdr->src),
                         ip4_addr2_16_val(iphdr->src),
                         ip4_addr3_16_val(iphdr->src),
                         ip4_addr4_16_val(iphdr->src)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8019ef6:	4816      	ldr	r0, [pc, #88]	@ (8019f50 <ip4_debug_print+0x1b8>)
 8019ef8:	f001 fc86 	bl	801b808 <puts>
 8019efc:	2000      	movs	r0, #0
 8019efe:	f001 fb3d 	bl	801b57c <fflush>
  LWIP_DEBUGF(IP_DEBUG, ("|  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  |  %3"U16_F"  | (dest)\n",
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	691b      	ldr	r3, [r3, #16]
 8019f06:	b2db      	uxtb	r3, r3
 8019f08:	4619      	mov	r1, r3
 8019f0a:	68fb      	ldr	r3, [r7, #12]
 8019f0c:	691b      	ldr	r3, [r3, #16]
 8019f0e:	0a1b      	lsrs	r3, r3, #8
 8019f10:	b2db      	uxtb	r3, r3
 8019f12:	461a      	mov	r2, r3
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	691b      	ldr	r3, [r3, #16]
 8019f18:	0c1b      	lsrs	r3, r3, #16
 8019f1a:	b2db      	uxtb	r3, r3
 8019f1c:	4618      	mov	r0, r3
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	691b      	ldr	r3, [r3, #16]
 8019f22:	0e1b      	lsrs	r3, r3, #24
 8019f24:	b2db      	uxtb	r3, r3
 8019f26:	9300      	str	r3, [sp, #0]
 8019f28:	4603      	mov	r3, r0
 8019f2a:	480e      	ldr	r0, [pc, #56]	@ (8019f64 <ip4_debug_print+0x1cc>)
 8019f2c:	f001 fbfc 	bl	801b728 <iprintf>
 8019f30:	2000      	movs	r0, #0
 8019f32:	f001 fb23 	bl	801b57c <fflush>
                         ip4_addr1_16_val(iphdr->dest),
                         ip4_addr2_16_val(iphdr->dest),
                         ip4_addr3_16_val(iphdr->dest),
                         ip4_addr4_16_val(iphdr->dest)));
  LWIP_DEBUGF(IP_DEBUG, ("+-------------------------------+\n"));
 8019f36:	4806      	ldr	r0, [pc, #24]	@ (8019f50 <ip4_debug_print+0x1b8>)
 8019f38:	f001 fc66 	bl	801b808 <puts>
 8019f3c:	2000      	movs	r0, #0
 8019f3e:	f001 fb1d 	bl	801b57c <fflush>
}
 8019f42:	bf00      	nop
 8019f44:	3710      	adds	r7, #16
 8019f46:	46bd      	mov	sp, r7
 8019f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f4c:	08023bd0 	.word	0x08023bd0
 8019f50:	08023bdc 	.word	0x08023bdc
 8019f54:	08023c00 	.word	0x08023c00
 8019f58:	08023c3c 	.word	0x08023c3c
 8019f5c:	08023c78 	.word	0x08023c78
 8019f60:	08023cb4 	.word	0x08023cb4
 8019f64:	08023ce4 	.word	0x08023ce4

08019f68 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019f68:	b480      	push	{r7}
 8019f6a:	b085      	sub	sp, #20
 8019f6c:	af00      	add	r7, sp, #0
 8019f6e:	6078      	str	r0, [r7, #4]
 8019f70:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019f76:	687b      	ldr	r3, [r7, #4]
 8019f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f7c:	d002      	beq.n	8019f84 <ip4_addr_isbroadcast_u32+0x1c>
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d101      	bne.n	8019f88 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019f84:	2301      	movs	r3, #1
 8019f86:	e02a      	b.n	8019fde <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019f88:	683b      	ldr	r3, [r7, #0]
 8019f8a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019f8e:	f003 0302 	and.w	r3, r3, #2
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	d101      	bne.n	8019f9a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019f96:	2300      	movs	r3, #0
 8019f98:	e021      	b.n	8019fde <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019f9a:	683b      	ldr	r3, [r7, #0]
 8019f9c:	3304      	adds	r3, #4
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	687a      	ldr	r2, [r7, #4]
 8019fa2:	429a      	cmp	r2, r3
 8019fa4:	d101      	bne.n	8019faa <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019fa6:	2300      	movs	r3, #0
 8019fa8:	e019      	b.n	8019fde <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019faa:	68fa      	ldr	r2, [r7, #12]
 8019fac:	683b      	ldr	r3, [r7, #0]
 8019fae:	3304      	adds	r3, #4
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	405a      	eors	r2, r3
 8019fb4:	683b      	ldr	r3, [r7, #0]
 8019fb6:	3308      	adds	r3, #8
 8019fb8:	681b      	ldr	r3, [r3, #0]
 8019fba:	4013      	ands	r3, r2
 8019fbc:	2b00      	cmp	r3, #0
 8019fbe:	d10d      	bne.n	8019fdc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019fc0:	683b      	ldr	r3, [r7, #0]
 8019fc2:	3308      	adds	r3, #8
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	43da      	mvns	r2, r3
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019fcc:	683b      	ldr	r3, [r7, #0]
 8019fce:	3308      	adds	r3, #8
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019fd4:	429a      	cmp	r2, r3
 8019fd6:	d101      	bne.n	8019fdc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019fd8:	2301      	movs	r3, #1
 8019fda:	e000      	b.n	8019fde <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019fdc:	2300      	movs	r3, #0
  }
}
 8019fde:	4618      	mov	r0, r3
 8019fe0:	3714      	adds	r7, #20
 8019fe2:	46bd      	mov	sp, r7
 8019fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe8:	4770      	bx	lr
	...

08019fec <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b084      	sub	sp, #16
 8019ff0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019ff6:	4b1a      	ldr	r3, [pc, #104]	@ (801a060 <ip_reass_tmr+0x74>)
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019ffc:	e027      	b.n	801a04e <ip_reass_tmr+0x62>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	7fdb      	ldrb	r3, [r3, #31]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d014      	beq.n	801a030 <ip_reass_tmr+0x44>
      r->timer--;
 801a006:	68fb      	ldr	r3, [r7, #12]
 801a008:	7fdb      	ldrb	r3, [r3, #31]
 801a00a:	3b01      	subs	r3, #1
 801a00c:	b2da      	uxtb	r2, r3
 801a00e:	68fb      	ldr	r3, [r7, #12]
 801a010:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	7fdb      	ldrb	r3, [r3, #31]
 801a016:	4619      	mov	r1, r3
 801a018:	4812      	ldr	r0, [pc, #72]	@ (801a064 <ip_reass_tmr+0x78>)
 801a01a:	f001 fb85 	bl	801b728 <iprintf>
 801a01e:	2000      	movs	r0, #0
 801a020:	f001 faac 	bl	801b57c <fflush>
      prev = r;
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	60fb      	str	r3, [r7, #12]
 801a02e:	e00e      	b.n	801a04e <ip_reass_tmr+0x62>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
 801a030:	480d      	ldr	r0, [pc, #52]	@ (801a068 <ip_reass_tmr+0x7c>)
 801a032:	f001 fbe9 	bl	801b808 <puts>
 801a036:	2000      	movs	r0, #0
 801a038:	f001 faa0 	bl	801b57c <fflush>
      tmp = r;
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a040:	68fb      	ldr	r3, [r7, #12]
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a046:	68b9      	ldr	r1, [r7, #8]
 801a048:	6878      	ldr	r0, [r7, #4]
 801a04a:	f000 f80f 	bl	801a06c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	2b00      	cmp	r3, #0
 801a052:	d1d4      	bne.n	8019ffe <ip_reass_tmr+0x12>
    }
  }
}
 801a054:	bf00      	nop
 801a056:	bf00      	nop
 801a058:	3710      	adds	r7, #16
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}
 801a05e:	bf00      	nop
 801a060:	20011f08 	.word	0x20011f08
 801a064:	08023d14 	.word	0x08023d14
 801a068:	08023d34 	.word	0x08023d34

0801a06c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b088      	sub	sp, #32
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
 801a074:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a076:	2300      	movs	r3, #0
 801a078:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a07a:	683a      	ldr	r2, [r7, #0]
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	429a      	cmp	r2, r3
 801a080:	d108      	bne.n	801a094 <ip_reass_free_complete_datagram+0x28>
 801a082:	4b4c      	ldr	r3, [pc, #304]	@ (801a1b4 <ip_reass_free_complete_datagram+0x148>)
 801a084:	22ab      	movs	r2, #171	@ 0xab
 801a086:	494c      	ldr	r1, [pc, #304]	@ (801a1b8 <ip_reass_free_complete_datagram+0x14c>)
 801a088:	484c      	ldr	r0, [pc, #304]	@ (801a1bc <ip_reass_free_complete_datagram+0x150>)
 801a08a:	f001 fb4d 	bl	801b728 <iprintf>
 801a08e:	2000      	movs	r0, #0
 801a090:	f001 fa74 	bl	801b57c <fflush>
  if (prev != NULL) {
 801a094:	683b      	ldr	r3, [r7, #0]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d00d      	beq.n	801a0b6 <ip_reass_free_complete_datagram+0x4a>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	687a      	ldr	r2, [r7, #4]
 801a0a0:	429a      	cmp	r2, r3
 801a0a2:	d008      	beq.n	801a0b6 <ip_reass_free_complete_datagram+0x4a>
 801a0a4:	4b43      	ldr	r3, [pc, #268]	@ (801a1b4 <ip_reass_free_complete_datagram+0x148>)
 801a0a6:	22ad      	movs	r2, #173	@ 0xad
 801a0a8:	4945      	ldr	r1, [pc, #276]	@ (801a1c0 <ip_reass_free_complete_datagram+0x154>)
 801a0aa:	4844      	ldr	r0, [pc, #272]	@ (801a1bc <ip_reass_free_complete_datagram+0x150>)
 801a0ac:	f001 fb3c 	bl	801b728 <iprintf>
 801a0b0:	2000      	movs	r0, #0
 801a0b2:	f001 fa63 	bl	801b57c <fflush>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	685b      	ldr	r3, [r3, #4]
 801a0ba:	685b      	ldr	r3, [r3, #4]
 801a0bc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a0be:	697b      	ldr	r3, [r7, #20]
 801a0c0:	889b      	ldrh	r3, [r3, #4]
 801a0c2:	b29b      	uxth	r3, r3
 801a0c4:	2b00      	cmp	r3, #0
 801a0c6:	d12d      	bne.n	801a124 <ip_reass_free_complete_datagram+0xb8>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	685b      	ldr	r3, [r3, #4]
 801a0cc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a0ce:	697b      	ldr	r3, [r7, #20]
 801a0d0:	681a      	ldr	r2, [r3, #0]
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a0d6:	69bb      	ldr	r3, [r7, #24]
 801a0d8:	6858      	ldr	r0, [r3, #4]
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	3308      	adds	r3, #8
 801a0de:	2214      	movs	r2, #20
 801a0e0:	4619      	mov	r1, r3
 801a0e2:	f001 fd08 	bl	801baf6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a0e6:	2101      	movs	r1, #1
 801a0e8:	69b8      	ldr	r0, [r7, #24]
 801a0ea:	f7ff f989 	bl	8019400 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a0ee:	69b8      	ldr	r0, [r7, #24]
 801a0f0:	f7f2 fcd2 	bl	800ca98 <pbuf_clen>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a0f8:	8bfa      	ldrh	r2, [r7, #30]
 801a0fa:	8a7b      	ldrh	r3, [r7, #18]
 801a0fc:	4413      	add	r3, r2
 801a0fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a102:	db08      	blt.n	801a116 <ip_reass_free_complete_datagram+0xaa>
 801a104:	4b2b      	ldr	r3, [pc, #172]	@ (801a1b4 <ip_reass_free_complete_datagram+0x148>)
 801a106:	22bc      	movs	r2, #188	@ 0xbc
 801a108:	492e      	ldr	r1, [pc, #184]	@ (801a1c4 <ip_reass_free_complete_datagram+0x158>)
 801a10a:	482c      	ldr	r0, [pc, #176]	@ (801a1bc <ip_reass_free_complete_datagram+0x150>)
 801a10c:	f001 fb0c 	bl	801b728 <iprintf>
 801a110:	2000      	movs	r0, #0
 801a112:	f001 fa33 	bl	801b57c <fflush>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a116:	8bfa      	ldrh	r2, [r7, #30]
 801a118:	8a7b      	ldrh	r3, [r7, #18]
 801a11a:	4413      	add	r3, r2
 801a11c:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a11e:	69b8      	ldr	r0, [r7, #24]
 801a120:	f7f2 fbfc 	bl	800c91c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	685b      	ldr	r3, [r3, #4]
 801a128:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a12a:	e022      	b.n	801a172 <ip_reass_free_complete_datagram+0x106>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a12c:	69bb      	ldr	r3, [r7, #24]
 801a12e:	685b      	ldr	r3, [r3, #4]
 801a130:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a132:	69bb      	ldr	r3, [r7, #24]
 801a134:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a136:	697b      	ldr	r3, [r7, #20]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a13c:	68f8      	ldr	r0, [r7, #12]
 801a13e:	f7f2 fcab 	bl	800ca98 <pbuf_clen>
 801a142:	4603      	mov	r3, r0
 801a144:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a146:	8bfa      	ldrh	r2, [r7, #30]
 801a148:	8a7b      	ldrh	r3, [r7, #18]
 801a14a:	4413      	add	r3, r2
 801a14c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a150:	db08      	blt.n	801a164 <ip_reass_free_complete_datagram+0xf8>
 801a152:	4b18      	ldr	r3, [pc, #96]	@ (801a1b4 <ip_reass_free_complete_datagram+0x148>)
 801a154:	22cc      	movs	r2, #204	@ 0xcc
 801a156:	491b      	ldr	r1, [pc, #108]	@ (801a1c4 <ip_reass_free_complete_datagram+0x158>)
 801a158:	4818      	ldr	r0, [pc, #96]	@ (801a1bc <ip_reass_free_complete_datagram+0x150>)
 801a15a:	f001 fae5 	bl	801b728 <iprintf>
 801a15e:	2000      	movs	r0, #0
 801a160:	f001 fa0c 	bl	801b57c <fflush>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a164:	8bfa      	ldrh	r2, [r7, #30]
 801a166:	8a7b      	ldrh	r3, [r7, #18]
 801a168:	4413      	add	r3, r2
 801a16a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a16c:	68f8      	ldr	r0, [r7, #12]
 801a16e:	f7f2 fbd5 	bl	800c91c <pbuf_free>
  while (p != NULL) {
 801a172:	69bb      	ldr	r3, [r7, #24]
 801a174:	2b00      	cmp	r3, #0
 801a176:	d1d9      	bne.n	801a12c <ip_reass_free_complete_datagram+0xc0>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a178:	6839      	ldr	r1, [r7, #0]
 801a17a:	6878      	ldr	r0, [r7, #4]
 801a17c:	f000 f8cc 	bl	801a318 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a180:	4b11      	ldr	r3, [pc, #68]	@ (801a1c8 <ip_reass_free_complete_datagram+0x15c>)
 801a182:	881b      	ldrh	r3, [r3, #0]
 801a184:	8bfa      	ldrh	r2, [r7, #30]
 801a186:	429a      	cmp	r2, r3
 801a188:	d908      	bls.n	801a19c <ip_reass_free_complete_datagram+0x130>
 801a18a:	4b0a      	ldr	r3, [pc, #40]	@ (801a1b4 <ip_reass_free_complete_datagram+0x148>)
 801a18c:	22d2      	movs	r2, #210	@ 0xd2
 801a18e:	490f      	ldr	r1, [pc, #60]	@ (801a1cc <ip_reass_free_complete_datagram+0x160>)
 801a190:	480a      	ldr	r0, [pc, #40]	@ (801a1bc <ip_reass_free_complete_datagram+0x150>)
 801a192:	f001 fac9 	bl	801b728 <iprintf>
 801a196:	2000      	movs	r0, #0
 801a198:	f001 f9f0 	bl	801b57c <fflush>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a19c:	4b0a      	ldr	r3, [pc, #40]	@ (801a1c8 <ip_reass_free_complete_datagram+0x15c>)
 801a19e:	881a      	ldrh	r2, [r3, #0]
 801a1a0:	8bfb      	ldrh	r3, [r7, #30]
 801a1a2:	1ad3      	subs	r3, r2, r3
 801a1a4:	b29a      	uxth	r2, r3
 801a1a6:	4b08      	ldr	r3, [pc, #32]	@ (801a1c8 <ip_reass_free_complete_datagram+0x15c>)
 801a1a8:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a1aa:	8bfb      	ldrh	r3, [r7, #30]
}
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	3720      	adds	r7, #32
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}
 801a1b4:	08023d54 	.word	0x08023d54
 801a1b8:	08023d90 	.word	0x08023d90
 801a1bc:	08023d9c 	.word	0x08023d9c
 801a1c0:	08023dc4 	.word	0x08023dc4
 801a1c4:	08023dd8 	.word	0x08023dd8
 801a1c8:	20011f0c 	.word	0x20011f0c
 801a1cc:	08023df8 	.word	0x08023df8

0801a1d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a1d0:	b580      	push	{r7, lr}
 801a1d2:	b08a      	sub	sp, #40	@ 0x28
 801a1d4:	af00      	add	r7, sp, #0
 801a1d6:	6078      	str	r0, [r7, #4]
 801a1d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a1de:	2300      	movs	r3, #0
 801a1e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a1e6:	2300      	movs	r3, #0
 801a1e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a1ee:	4b28      	ldr	r3, [pc, #160]	@ (801a290 <ip_reass_remove_oldest_datagram+0xc0>)
 801a1f0:	681b      	ldr	r3, [r3, #0]
 801a1f2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a1f4:	e030      	b.n	801a258 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a1f8:	695a      	ldr	r2, [r3, #20]
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	68db      	ldr	r3, [r3, #12]
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d10c      	bne.n	801a21c <ip_reass_remove_oldest_datagram+0x4c>
 801a202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a204:	699a      	ldr	r2, [r3, #24]
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	691b      	ldr	r3, [r3, #16]
 801a20a:	429a      	cmp	r2, r3
 801a20c:	d106      	bne.n	801a21c <ip_reass_remove_oldest_datagram+0x4c>
 801a20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a210:	899a      	ldrh	r2, [r3, #12]
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	889b      	ldrh	r3, [r3, #4]
 801a216:	b29b      	uxth	r3, r3
 801a218:	429a      	cmp	r2, r3
 801a21a:	d014      	beq.n	801a246 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a21c:	693b      	ldr	r3, [r7, #16]
 801a21e:	3301      	adds	r3, #1
 801a220:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a222:	6a3b      	ldr	r3, [r7, #32]
 801a224:	2b00      	cmp	r3, #0
 801a226:	d104      	bne.n	801a232 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a22a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a22c:	69fb      	ldr	r3, [r7, #28]
 801a22e:	61bb      	str	r3, [r7, #24]
 801a230:	e009      	b.n	801a246 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a234:	7fda      	ldrb	r2, [r3, #31]
 801a236:	6a3b      	ldr	r3, [r7, #32]
 801a238:	7fdb      	ldrb	r3, [r3, #31]
 801a23a:	429a      	cmp	r2, r3
 801a23c:	d803      	bhi.n	801a246 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a240:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a242:	69fb      	ldr	r3, [r7, #28]
 801a244:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d001      	beq.n	801a252 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a250:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a254:	681b      	ldr	r3, [r3, #0]
 801a256:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d1cb      	bne.n	801a1f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a25e:	6a3b      	ldr	r3, [r7, #32]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d008      	beq.n	801a276 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a264:	69b9      	ldr	r1, [r7, #24]
 801a266:	6a38      	ldr	r0, [r7, #32]
 801a268:	f7ff ff00 	bl	801a06c <ip_reass_free_complete_datagram>
 801a26c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a26e:	697a      	ldr	r2, [r7, #20]
 801a270:	68fb      	ldr	r3, [r7, #12]
 801a272:	4413      	add	r3, r2
 801a274:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a276:	697a      	ldr	r2, [r7, #20]
 801a278:	683b      	ldr	r3, [r7, #0]
 801a27a:	429a      	cmp	r2, r3
 801a27c:	da02      	bge.n	801a284 <ip_reass_remove_oldest_datagram+0xb4>
 801a27e:	693b      	ldr	r3, [r7, #16]
 801a280:	2b01      	cmp	r3, #1
 801a282:	dcac      	bgt.n	801a1de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a284:	697b      	ldr	r3, [r7, #20]
}
 801a286:	4618      	mov	r0, r3
 801a288:	3728      	adds	r7, #40	@ 0x28
 801a28a:	46bd      	mov	sp, r7
 801a28c:	bd80      	pop	{r7, pc}
 801a28e:	bf00      	nop
 801a290:	20011f08 	.word	0x20011f08

0801a294 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b084      	sub	sp, #16
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
 801a29c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a29e:	2004      	movs	r0, #4
 801a2a0:	f7f1 fa3c 	bl	800b71c <memp_malloc>
 801a2a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d116      	bne.n	801a2da <ip_reass_enqueue_new_datagram+0x46>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a2ac:	6839      	ldr	r1, [r7, #0]
 801a2ae:	6878      	ldr	r0, [r7, #4]
 801a2b0:	f7ff ff8e 	bl	801a1d0 <ip_reass_remove_oldest_datagram>
 801a2b4:	4602      	mov	r2, r0
 801a2b6:	683b      	ldr	r3, [r7, #0]
 801a2b8:	4293      	cmp	r3, r2
 801a2ba:	dc03      	bgt.n	801a2c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a2bc:	2004      	movs	r0, #4
 801a2be:	f7f1 fa2d 	bl	800b71c <memp_malloc>
 801a2c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d107      	bne.n	801a2da <ip_reass_enqueue_new_datagram+0x46>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
 801a2ca:	4811      	ldr	r0, [pc, #68]	@ (801a310 <ip_reass_enqueue_new_datagram+0x7c>)
 801a2cc:	f001 fa9c 	bl	801b808 <puts>
 801a2d0:	2000      	movs	r0, #0
 801a2d2:	f001 f953 	bl	801b57c <fflush>
      return NULL;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	e016      	b.n	801a308 <ip_reass_enqueue_new_datagram+0x74>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a2da:	2220      	movs	r2, #32
 801a2dc:	2100      	movs	r1, #0
 801a2de:	68f8      	ldr	r0, [r7, #12]
 801a2e0:	f001 fb82 	bl	801b9e8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	220f      	movs	r2, #15
 801a2e8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a2ea:	4b0a      	ldr	r3, [pc, #40]	@ (801a314 <ip_reass_enqueue_new_datagram+0x80>)
 801a2ec:	681a      	ldr	r2, [r3, #0]
 801a2ee:	68fb      	ldr	r3, [r7, #12]
 801a2f0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a2f2:	4a08      	ldr	r2, [pc, #32]	@ (801a314 <ip_reass_enqueue_new_datagram+0x80>)
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	3308      	adds	r3, #8
 801a2fc:	2214      	movs	r2, #20
 801a2fe:	6879      	ldr	r1, [r7, #4]
 801a300:	4618      	mov	r0, r3
 801a302:	f001 fbf8 	bl	801baf6 <memcpy>
  return ipr;
 801a306:	68fb      	ldr	r3, [r7, #12]
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3710      	adds	r7, #16
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	08023e1c 	.word	0x08023e1c
 801a314:	20011f08 	.word	0x20011f08

0801a318 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a318:	b580      	push	{r7, lr}
 801a31a:	b082      	sub	sp, #8
 801a31c:	af00      	add	r7, sp, #0
 801a31e:	6078      	str	r0, [r7, #4]
 801a320:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a322:	4b11      	ldr	r3, [pc, #68]	@ (801a368 <ip_reass_dequeue_datagram+0x50>)
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	687a      	ldr	r2, [r7, #4]
 801a328:	429a      	cmp	r2, r3
 801a32a:	d104      	bne.n	801a336 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	4a0d      	ldr	r2, [pc, #52]	@ (801a368 <ip_reass_dequeue_datagram+0x50>)
 801a332:	6013      	str	r3, [r2, #0]
 801a334:	e010      	b.n	801a358 <ip_reass_dequeue_datagram+0x40>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d109      	bne.n	801a350 <ip_reass_dequeue_datagram+0x38>
 801a33c:	4b0b      	ldr	r3, [pc, #44]	@ (801a36c <ip_reass_dequeue_datagram+0x54>)
 801a33e:	f240 1245 	movw	r2, #325	@ 0x145
 801a342:	490b      	ldr	r1, [pc, #44]	@ (801a370 <ip_reass_dequeue_datagram+0x58>)
 801a344:	480b      	ldr	r0, [pc, #44]	@ (801a374 <ip_reass_dequeue_datagram+0x5c>)
 801a346:	f001 f9ef 	bl	801b728 <iprintf>
 801a34a:	2000      	movs	r0, #0
 801a34c:	f001 f916 	bl	801b57c <fflush>
    prev->next = ipr->next;
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681a      	ldr	r2, [r3, #0]
 801a354:	683b      	ldr	r3, [r7, #0]
 801a356:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a358:	6879      	ldr	r1, [r7, #4]
 801a35a:	2004      	movs	r0, #4
 801a35c:	f7f1 fa60 	bl	800b820 <memp_free>
}
 801a360:	bf00      	nop
 801a362:	3708      	adds	r7, #8
 801a364:	46bd      	mov	sp, r7
 801a366:	bd80      	pop	{r7, pc}
 801a368:	20011f08 	.word	0x20011f08
 801a36c:	08023d54 	.word	0x08023d54
 801a370:	08023e40 	.word	0x08023e40
 801a374:	08023d9c 	.word	0x08023d9c

0801a378 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b08c      	sub	sp, #48	@ 0x30
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	60f8      	str	r0, [r7, #12]
 801a380:	60b9      	str	r1, [r7, #8]
 801a382:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a384:	2300      	movs	r3, #0
 801a386:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a388:	2301      	movs	r3, #1
 801a38a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a38c:	68bb      	ldr	r3, [r7, #8]
 801a38e:	685b      	ldr	r3, [r3, #4]
 801a390:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a392:	69fb      	ldr	r3, [r7, #28]
 801a394:	885b      	ldrh	r3, [r3, #2]
 801a396:	b29b      	uxth	r3, r3
 801a398:	4618      	mov	r0, r3
 801a39a:	f7f0 fc6b 	bl	800ac74 <lwip_htons>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a3a2:	69fb      	ldr	r3, [r7, #28]
 801a3a4:	781b      	ldrb	r3, [r3, #0]
 801a3a6:	f003 030f 	and.w	r3, r3, #15
 801a3aa:	b2db      	uxtb	r3, r3
 801a3ac:	009b      	lsls	r3, r3, #2
 801a3ae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a3b0:	7e7b      	ldrb	r3, [r7, #25]
 801a3b2:	b29b      	uxth	r3, r3
 801a3b4:	8b7a      	ldrh	r2, [r7, #26]
 801a3b6:	429a      	cmp	r2, r3
 801a3b8:	d202      	bcs.n	801a3c0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a3ba:	f04f 33ff 	mov.w	r3, #4294967295
 801a3be:	e144      	b.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x2d2>
  }
  len = (u16_t)(len - hlen);
 801a3c0:	7e7b      	ldrb	r3, [r7, #25]
 801a3c2:	b29b      	uxth	r3, r3
 801a3c4:	8b7a      	ldrh	r2, [r7, #26]
 801a3c6:	1ad3      	subs	r3, r2, r3
 801a3c8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a3ca:	69fb      	ldr	r3, [r7, #28]
 801a3cc:	88db      	ldrh	r3, [r3, #6]
 801a3ce:	b29b      	uxth	r3, r3
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	f7f0 fc4f 	bl	800ac74 <lwip_htons>
 801a3d6:	4603      	mov	r3, r0
 801a3d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a3dc:	b29b      	uxth	r3, r3
 801a3de:	00db      	lsls	r3, r3, #3
 801a3e0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a3e2:	68bb      	ldr	r3, [r7, #8]
 801a3e4:	685b      	ldr	r3, [r3, #4]
 801a3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801a3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3ea:	2200      	movs	r2, #0
 801a3ec:	701a      	strb	r2, [r3, #0]
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	705a      	strb	r2, [r3, #1]
 801a3f2:	2200      	movs	r2, #0
 801a3f4:	709a      	strb	r2, [r3, #2]
 801a3f6:	2200      	movs	r2, #0
 801a3f8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a3fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a3fc:	8afa      	ldrh	r2, [r7, #22]
 801a3fe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a400:	8afa      	ldrh	r2, [r7, #22]
 801a402:	8b7b      	ldrh	r3, [r7, #26]
 801a404:	4413      	add	r3, r2
 801a406:	b29a      	uxth	r2, r3
 801a408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a40a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a40e:	88db      	ldrh	r3, [r3, #6]
 801a410:	b29b      	uxth	r3, r3
 801a412:	8afa      	ldrh	r2, [r7, #22]
 801a414:	429a      	cmp	r2, r3
 801a416:	d902      	bls.n	801a41e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a418:	f04f 33ff 	mov.w	r3, #4294967295
 801a41c:	e115      	b.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x2d2>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	685b      	ldr	r3, [r3, #4]
 801a422:	627b      	str	r3, [r7, #36]	@ 0x24
 801a424:	e068      	b.n	801a4f8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a42e:	889b      	ldrh	r3, [r3, #4]
 801a430:	b29a      	uxth	r2, r3
 801a432:	693b      	ldr	r3, [r7, #16]
 801a434:	889b      	ldrh	r3, [r3, #4]
 801a436:	b29b      	uxth	r3, r3
 801a438:	429a      	cmp	r2, r3
 801a43a:	d235      	bcs.n	801a4a8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a43c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a43e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a440:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a444:	2b00      	cmp	r3, #0
 801a446:	d020      	beq.n	801a48a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a44a:	889b      	ldrh	r3, [r3, #4]
 801a44c:	b29a      	uxth	r2, r3
 801a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a450:	88db      	ldrh	r3, [r3, #6]
 801a452:	b29b      	uxth	r3, r3
 801a454:	429a      	cmp	r2, r3
 801a456:	d307      	bcc.n	801a468 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a45a:	88db      	ldrh	r3, [r3, #6]
 801a45c:	b29a      	uxth	r2, r3
 801a45e:	693b      	ldr	r3, [r7, #16]
 801a460:	889b      	ldrh	r3, [r3, #4]
 801a462:	b29b      	uxth	r3, r3
 801a464:	429a      	cmp	r2, r3
 801a466:	d902      	bls.n	801a46e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a468:	f04f 33ff 	mov.w	r3, #4294967295
 801a46c:	e0ed      	b.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x2d2>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a46e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a470:	68ba      	ldr	r2, [r7, #8]
 801a472:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a476:	88db      	ldrh	r3, [r3, #6]
 801a478:	b29a      	uxth	r2, r3
 801a47a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a47c:	889b      	ldrh	r3, [r3, #4]
 801a47e:	b29b      	uxth	r3, r3
 801a480:	429a      	cmp	r2, r3
 801a482:	d03d      	beq.n	801a500 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a484:	2300      	movs	r3, #0
 801a486:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a488:	e03a      	b.n	801a500 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a48a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a48c:	88db      	ldrh	r3, [r3, #6]
 801a48e:	b29a      	uxth	r2, r3
 801a490:	693b      	ldr	r3, [r7, #16]
 801a492:	889b      	ldrh	r3, [r3, #4]
 801a494:	b29b      	uxth	r3, r3
 801a496:	429a      	cmp	r2, r3
 801a498:	d902      	bls.n	801a4a0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a49a:	f04f 33ff 	mov.w	r3, #4294967295
 801a49e:	e0d4      	b.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x2d2>
        ipr->p = new_p;
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	68ba      	ldr	r2, [r7, #8]
 801a4a4:	605a      	str	r2, [r3, #4]
      break;
 801a4a6:	e02b      	b.n	801a500 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4aa:	889b      	ldrh	r3, [r3, #4]
 801a4ac:	b29a      	uxth	r2, r3
 801a4ae:	693b      	ldr	r3, [r7, #16]
 801a4b0:	889b      	ldrh	r3, [r3, #4]
 801a4b2:	b29b      	uxth	r3, r3
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	d102      	bne.n	801a4be <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4b8:	f04f 33ff 	mov.w	r3, #4294967295
 801a4bc:	e0c5      	b.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x2d2>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a4c0:	889b      	ldrh	r3, [r3, #4]
 801a4c2:	b29a      	uxth	r2, r3
 801a4c4:	693b      	ldr	r3, [r7, #16]
 801a4c6:	88db      	ldrh	r3, [r3, #6]
 801a4c8:	b29b      	uxth	r3, r3
 801a4ca:	429a      	cmp	r2, r3
 801a4cc:	d202      	bcs.n	801a4d4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a4ce:	f04f 33ff 	mov.w	r3, #4294967295
 801a4d2:	e0ba      	b.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x2d2>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d009      	beq.n	801a4ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a4da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a4dc:	88db      	ldrh	r3, [r3, #6]
 801a4de:	b29a      	uxth	r2, r3
 801a4e0:	693b      	ldr	r3, [r7, #16]
 801a4e2:	889b      	ldrh	r3, [r3, #4]
 801a4e4:	b29b      	uxth	r3, r3
 801a4e6:	429a      	cmp	r2, r3
 801a4e8:	d001      	beq.n	801a4ee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a4ea:	2300      	movs	r3, #0
 801a4ec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a4ee:	693b      	ldr	r3, [r7, #16]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801a4f4:	693b      	ldr	r3, [r7, #16]
 801a4f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801a4f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d193      	bne.n	801a426 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a4fe:	e000      	b.n	801a502 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a500:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a504:	2b00      	cmp	r3, #0
 801a506:	d133      	bne.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
    if (iprh_prev != NULL) {
 801a508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d01f      	beq.n	801a54e <ip_reass_chain_frag_into_datagram_and_validate+0x1d6>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a50e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a510:	88db      	ldrh	r3, [r3, #6]
 801a512:	b29a      	uxth	r2, r3
 801a514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a516:	889b      	ldrh	r3, [r3, #4]
 801a518:	b29b      	uxth	r3, r3
 801a51a:	429a      	cmp	r2, r3
 801a51c:	d909      	bls.n	801a532 <ip_reass_chain_frag_into_datagram_and_validate+0x1ba>
 801a51e:	4b4d      	ldr	r3, [pc, #308]	@ (801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>)
 801a520:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801a524:	494c      	ldr	r1, [pc, #304]	@ (801a658 <ip_reass_chain_frag_into_datagram_and_validate+0x2e0>)
 801a526:	484d      	ldr	r0, [pc, #308]	@ (801a65c <ip_reass_chain_frag_into_datagram_and_validate+0x2e4>)
 801a528:	f001 f8fe 	bl	801b728 <iprintf>
 801a52c:	2000      	movs	r0, #0
 801a52e:	f001 f825 	bl	801b57c <fflush>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a534:	68ba      	ldr	r2, [r7, #8]
 801a536:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a53a:	88db      	ldrh	r3, [r3, #6]
 801a53c:	b29a      	uxth	r2, r3
 801a53e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a540:	889b      	ldrh	r3, [r3, #4]
 801a542:	b29b      	uxth	r3, r3
 801a544:	429a      	cmp	r2, r3
 801a546:	d013      	beq.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        valid = 0;
 801a548:	2300      	movs	r3, #0
 801a54a:	623b      	str	r3, [r7, #32]
 801a54c:	e010      	b.n	801a570 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a54e:	68fb      	ldr	r3, [r7, #12]
 801a550:	685b      	ldr	r3, [r3, #4]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d009      	beq.n	801a56a <ip_reass_chain_frag_into_datagram_and_validate+0x1f2>
 801a556:	4b3f      	ldr	r3, [pc, #252]	@ (801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>)
 801a558:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801a55c:	4940      	ldr	r1, [pc, #256]	@ (801a660 <ip_reass_chain_frag_into_datagram_and_validate+0x2e8>)
 801a55e:	483f      	ldr	r0, [pc, #252]	@ (801a65c <ip_reass_chain_frag_into_datagram_and_validate+0x2e4>)
 801a560:	f001 f8e2 	bl	801b728 <iprintf>
 801a564:	2000      	movs	r0, #0
 801a566:	f001 f809 	bl	801b57c <fflush>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a56a:	68fb      	ldr	r3, [r7, #12]
 801a56c:	68ba      	ldr	r2, [r7, #8]
 801a56e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d105      	bne.n	801a582 <ip_reass_chain_frag_into_datagram_and_validate+0x20a>
 801a576:	68fb      	ldr	r3, [r7, #12]
 801a578:	7f9b      	ldrb	r3, [r3, #30]
 801a57a:	f003 0301 	and.w	r3, r3, #1
 801a57e:	2b00      	cmp	r3, #0
 801a580:	d062      	beq.n	801a648 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>
    /* and had no holes so far */
    if (valid) {
 801a582:	6a3b      	ldr	r3, [r7, #32]
 801a584:	2b00      	cmp	r3, #0
 801a586:	d058      	beq.n	801a63a <ip_reass_chain_frag_into_datagram_and_validate+0x2c2>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	685b      	ldr	r3, [r3, #4]
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d006      	beq.n	801a59e <ip_reass_chain_frag_into_datagram_and_validate+0x226>
 801a590:	68fb      	ldr	r3, [r7, #12]
 801a592:	685b      	ldr	r3, [r3, #4]
 801a594:	685b      	ldr	r3, [r3, #4]
 801a596:	889b      	ldrh	r3, [r3, #4]
 801a598:	b29b      	uxth	r3, r3
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d002      	beq.n	801a5a4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        valid = 0;
 801a59e:	2300      	movs	r3, #0
 801a5a0:	623b      	str	r3, [r7, #32]
 801a5a2:	e04a      	b.n	801a63a <ip_reass_chain_frag_into_datagram_and_validate+0x2c2>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a5a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5a6:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801a5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a5ae:	e012      	b.n	801a5d6 <ip_reass_chain_frag_into_datagram_and_validate+0x25e>
          iprh = (struct ip_reass_helper *)q->payload;
 801a5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5b2:	685b      	ldr	r3, [r3, #4]
 801a5b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801a5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a5b8:	88db      	ldrh	r3, [r3, #6]
 801a5ba:	b29a      	uxth	r2, r3
 801a5bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5be:	889b      	ldrh	r3, [r3, #4]
 801a5c0:	b29b      	uxth	r3, r3
 801a5c2:	429a      	cmp	r2, r3
 801a5c4:	d002      	beq.n	801a5cc <ip_reass_chain_frag_into_datagram_and_validate+0x254>
            valid = 0;
 801a5c6:	2300      	movs	r3, #0
 801a5c8:	623b      	str	r3, [r7, #32]
            break;
 801a5ca:	e007      	b.n	801a5dc <ip_reass_chain_frag_into_datagram_and_validate+0x264>
          }
          iprh_prev = iprh;
 801a5cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5ce:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801a5d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d1e9      	bne.n	801a5b0 <ip_reass_chain_frag_into_datagram_and_validate+0x238>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a5dc:	6a3b      	ldr	r3, [r7, #32]
 801a5de:	2b00      	cmp	r3, #0
 801a5e0:	d02b      	beq.n	801a63a <ip_reass_chain_frag_into_datagram_and_validate+0x2c2>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a5e2:	68fb      	ldr	r3, [r7, #12]
 801a5e4:	685b      	ldr	r3, [r3, #4]
 801a5e6:	2b00      	cmp	r3, #0
 801a5e8:	d109      	bne.n	801a5fe <ip_reass_chain_frag_into_datagram_and_validate+0x286>
 801a5ea:	4b1a      	ldr	r3, [pc, #104]	@ (801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>)
 801a5ec:	f240 12df 	movw	r2, #479	@ 0x1df
 801a5f0:	491c      	ldr	r1, [pc, #112]	@ (801a664 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>)
 801a5f2:	481a      	ldr	r0, [pc, #104]	@ (801a65c <ip_reass_chain_frag_into_datagram_and_validate+0x2e4>)
 801a5f4:	f001 f898 	bl	801b728 <iprintf>
 801a5f8:	2000      	movs	r0, #0
 801a5fa:	f000 ffbf 	bl	801b57c <fflush>
          LWIP_ASSERT("sanity check",
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	685b      	ldr	r3, [r3, #4]
 801a602:	685b      	ldr	r3, [r3, #4]
 801a604:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a606:	429a      	cmp	r2, r3
 801a608:	d109      	bne.n	801a61e <ip_reass_chain_frag_into_datagram_and_validate+0x2a6>
 801a60a:	4b12      	ldr	r3, [pc, #72]	@ (801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>)
 801a60c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801a610:	4914      	ldr	r1, [pc, #80]	@ (801a664 <ip_reass_chain_frag_into_datagram_and_validate+0x2ec>)
 801a612:	4812      	ldr	r0, [pc, #72]	@ (801a65c <ip_reass_chain_frag_into_datagram_and_validate+0x2e4>)
 801a614:	f001 f888 	bl	801b728 <iprintf>
 801a618:	2000      	movs	r0, #0
 801a61a:	f000 ffaf 	bl	801b57c <fflush>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d009      	beq.n	801a63a <ip_reass_chain_frag_into_datagram_and_validate+0x2c2>
 801a626:	4b0b      	ldr	r3, [pc, #44]	@ (801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x2dc>)
 801a628:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801a62c:	490e      	ldr	r1, [pc, #56]	@ (801a668 <ip_reass_chain_frag_into_datagram_and_validate+0x2f0>)
 801a62e:	480b      	ldr	r0, [pc, #44]	@ (801a65c <ip_reass_chain_frag_into_datagram_and_validate+0x2e4>)
 801a630:	f001 f87a 	bl	801b728 <iprintf>
 801a634:	2000      	movs	r0, #0
 801a636:	f000 ffa1 	bl	801b57c <fflush>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a63a:	6a3b      	ldr	r3, [r7, #32]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	bf14      	ite	ne
 801a640:	2301      	movne	r3, #1
 801a642:	2300      	moveq	r3, #0
 801a644:	b2db      	uxtb	r3, r3
 801a646:	e000      	b.n	801a64a <ip_reass_chain_frag_into_datagram_and_validate+0x2d2>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a648:	2300      	movs	r3, #0
}
 801a64a:	4618      	mov	r0, r3
 801a64c:	3730      	adds	r7, #48	@ 0x30
 801a64e:	46bd      	mov	sp, r7
 801a650:	bd80      	pop	{r7, pc}
 801a652:	bf00      	nop
 801a654:	08023d54 	.word	0x08023d54
 801a658:	08023e5c 	.word	0x08023e5c
 801a65c:	08023d9c 	.word	0x08023d9c
 801a660:	08023e7c 	.word	0x08023e7c
 801a664:	08023eb4 	.word	0x08023eb4
 801a668:	08023ec4 	.word	0x08023ec4

0801a66c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a66c:	b580      	push	{r7, lr}
 801a66e:	b08e      	sub	sp, #56	@ 0x38
 801a670:	af00      	add	r7, sp, #0
 801a672:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	685b      	ldr	r3, [r3, #4]
 801a678:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a67c:	781b      	ldrb	r3, [r3, #0]
 801a67e:	f003 030f 	and.w	r3, r3, #15
 801a682:	b2db      	uxtb	r3, r3
 801a684:	009b      	lsls	r3, r3, #2
 801a686:	b2db      	uxtb	r3, r3
 801a688:	2b14      	cmp	r3, #20
 801a68a:	d006      	beq.n	801a69a <ip4_reass+0x2e>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
 801a68c:	489f      	ldr	r0, [pc, #636]	@ (801a90c <ip4_reass+0x2a0>)
 801a68e:	f001 f8bb 	bl	801b808 <puts>
 801a692:	2000      	movs	r0, #0
 801a694:	f000 ff72 	bl	801b57c <fflush>
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
 801a698:	e1a8      	b.n	801a9ec <ip4_reass+0x380>
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a69c:	88db      	ldrh	r3, [r3, #6]
 801a69e:	b29b      	uxth	r3, r3
 801a6a0:	4618      	mov	r0, r3
 801a6a2:	f7f0 fae7 	bl	800ac74 <lwip_htons>
 801a6a6:	4603      	mov	r3, r0
 801a6a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a6ac:	b29b      	uxth	r3, r3
 801a6ae:	00db      	lsls	r3, r3, #3
 801a6b0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6b4:	885b      	ldrh	r3, [r3, #2]
 801a6b6:	b29b      	uxth	r3, r3
 801a6b8:	4618      	mov	r0, r3
 801a6ba:	f7f0 fadb 	bl	800ac74 <lwip_htons>
 801a6be:	4603      	mov	r3, r0
 801a6c0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a6c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a6c4:	781b      	ldrb	r3, [r3, #0]
 801a6c6:	f003 030f 	and.w	r3, r3, #15
 801a6ca:	b2db      	uxtb	r3, r3
 801a6cc:	009b      	lsls	r3, r3, #2
 801a6ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801a6d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a6d6:	b29b      	uxth	r3, r3
 801a6d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a6da:	429a      	cmp	r2, r3
 801a6dc:	f0c0 8183 	bcc.w	801a9e6 <ip4_reass+0x37a>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a6e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801a6e4:	b29b      	uxth	r3, r3
 801a6e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801a6e8:	1ad3      	subs	r3, r2, r3
 801a6ea:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a6ec:	6878      	ldr	r0, [r7, #4]
 801a6ee:	f7f2 f9d3 	bl	800ca98 <pbuf_clen>
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a6f6:	4b86      	ldr	r3, [pc, #536]	@ (801a910 <ip4_reass+0x2a4>)
 801a6f8:	881b      	ldrh	r3, [r3, #0]
 801a6fa:	461a      	mov	r2, r3
 801a6fc:	8c3b      	ldrh	r3, [r7, #32]
 801a6fe:	4413      	add	r3, r2
 801a700:	2b0a      	cmp	r3, #10
 801a702:	dd1a      	ble.n	801a73a <ip4_reass+0xce>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a704:	8c3b      	ldrh	r3, [r7, #32]
 801a706:	4619      	mov	r1, r3
 801a708:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a70a:	f7ff fd61 	bl	801a1d0 <ip_reass_remove_oldest_datagram>
 801a70e:	4603      	mov	r3, r0
 801a710:	2b00      	cmp	r3, #0
 801a712:	d006      	beq.n	801a722 <ip4_reass+0xb6>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a714:	4b7e      	ldr	r3, [pc, #504]	@ (801a910 <ip4_reass+0x2a4>)
 801a716:	881b      	ldrh	r3, [r3, #0]
 801a718:	461a      	mov	r2, r3
 801a71a:	8c3b      	ldrh	r3, [r7, #32]
 801a71c:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a71e:	2b0a      	cmp	r3, #10
 801a720:	dd0b      	ble.n	801a73a <ip4_reass+0xce>
#endif /* IP_REASS_FREE_OLDEST */
    {
      /* No datagram could be freed and still too many pbufs enqueued */
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: Overflow condition: pbufct=%d, clen=%d, MAX=%d\n",
 801a722:	4b7b      	ldr	r3, [pc, #492]	@ (801a910 <ip4_reass+0x2a4>)
 801a724:	881b      	ldrh	r3, [r3, #0]
 801a726:	4619      	mov	r1, r3
 801a728:	8c3a      	ldrh	r2, [r7, #32]
 801a72a:	230a      	movs	r3, #10
 801a72c:	4879      	ldr	r0, [pc, #484]	@ (801a914 <ip4_reass+0x2a8>)
 801a72e:	f000 fffb 	bl	801b728 <iprintf>
 801a732:	2000      	movs	r0, #0
 801a734:	f000 ff22 	bl	801b57c <fflush>
                                   ip_reass_pbufcount, clen, IP_REASS_MAX_PBUFS));
      IPFRAG_STATS_INC(ip_frag.memerr);
      /* @todo: send ICMP time exceeded here? */
      /* drop this pbuf */
      goto nullreturn;
 801a738:	e158      	b.n	801a9ec <ip4_reass+0x380>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a73a:	4b77      	ldr	r3, [pc, #476]	@ (801a918 <ip4_reass+0x2ac>)
 801a73c:	681b      	ldr	r3, [r3, #0]
 801a73e:	633b      	str	r3, [r7, #48]	@ 0x30
 801a740:	e024      	b.n	801a78c <ip4_reass+0x120>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a744:	695a      	ldr	r2, [r3, #20]
 801a746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a748:	68db      	ldr	r3, [r3, #12]
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d11b      	bne.n	801a786 <ip4_reass+0x11a>
 801a74e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a750:	699a      	ldr	r2, [r3, #24]
 801a752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a754:	691b      	ldr	r3, [r3, #16]
 801a756:	429a      	cmp	r2, r3
 801a758:	d115      	bne.n	801a786 <ip4_reass+0x11a>
 801a75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a75c:	899a      	ldrh	r2, [r3, #12]
 801a75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a760:	889b      	ldrh	r3, [r3, #4]
 801a762:	b29b      	uxth	r3, r3
 801a764:	429a      	cmp	r2, r3
 801a766:	d10e      	bne.n	801a786 <ip4_reass+0x11a>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
 801a768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a76a:	889b      	ldrh	r3, [r3, #4]
 801a76c:	b29b      	uxth	r3, r3
 801a76e:	4618      	mov	r0, r3
 801a770:	f7f0 fa80 	bl	800ac74 <lwip_htons>
 801a774:	4603      	mov	r3, r0
 801a776:	4619      	mov	r1, r3
 801a778:	4868      	ldr	r0, [pc, #416]	@ (801a91c <ip4_reass+0x2b0>)
 801a77a:	f000 ffd5 	bl	801b728 <iprintf>
 801a77e:	2000      	movs	r0, #0
 801a780:	f000 fefc 	bl	801b57c <fflush>
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a784:	e005      	b.n	801a792 <ip4_reass+0x126>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	633b      	str	r3, [r7, #48]	@ 0x30
 801a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d1d7      	bne.n	801a742 <ip4_reass+0xd6>
    }
  }

  if (ipr == NULL) {
 801a792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a794:	2b00      	cmp	r3, #0
 801a796:	d109      	bne.n	801a7ac <ip4_reass+0x140>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a798:	8c3b      	ldrh	r3, [r7, #32]
 801a79a:	4619      	mov	r1, r3
 801a79c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a79e:	f7ff fd79 	bl	801a294 <ip_reass_enqueue_new_datagram>
 801a7a2:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d11c      	bne.n	801a7e4 <ip4_reass+0x178>
      goto nullreturn;
 801a7aa:	e11f      	b.n	801a9ec <ip4_reass+0x380>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7ae:	88db      	ldrh	r3, [r3, #6]
 801a7b0:	b29b      	uxth	r3, r3
 801a7b2:	4618      	mov	r0, r3
 801a7b4:	f7f0 fa5e 	bl	800ac74 <lwip_htons>
 801a7b8:	4603      	mov	r3, r0
 801a7ba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d110      	bne.n	801a7e4 <ip4_reass+0x178>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a7c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7c4:	89db      	ldrh	r3, [r3, #14]
 801a7c6:	4618      	mov	r0, r3
 801a7c8:	f7f0 fa54 	bl	800ac74 <lwip_htons>
 801a7cc:	4603      	mov	r3, r0
 801a7ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a7d2:	2b00      	cmp	r3, #0
 801a7d4:	d006      	beq.n	801a7e4 <ip4_reass+0x178>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a7d8:	3308      	adds	r3, #8
 801a7da:	2214      	movs	r2, #20
 801a7dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a7de:	4618      	mov	r0, r3
 801a7e0:	f001 f989 	bl	801baf6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7e6:	88db      	ldrh	r3, [r3, #6]
 801a7e8:	b29b      	uxth	r3, r3
 801a7ea:	f003 0320 	and.w	r3, r3, #32
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	bf0c      	ite	eq
 801a7f2:	2301      	moveq	r3, #1
 801a7f4:	2300      	movne	r3, #0
 801a7f6:	b2db      	uxtb	r3, r3
 801a7f8:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a7fa:	69fb      	ldr	r3, [r7, #28]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d00e      	beq.n	801a81e <ip4_reass+0x1b2>
    u16_t datagram_len = (u16_t)(offset + len);
 801a800:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a802:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a804:	4413      	add	r3, r2
 801a806:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a808:	8b7a      	ldrh	r2, [r7, #26]
 801a80a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a80c:	429a      	cmp	r2, r3
 801a80e:	f0c0 80c2 	bcc.w	801a996 <ip4_reass+0x32a>
 801a812:	8b7b      	ldrh	r3, [r7, #26]
 801a814:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801a818:	4293      	cmp	r3, r2
 801a81a:	f200 80bc 	bhi.w	801a996 <ip4_reass+0x32a>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a81e:	69fa      	ldr	r2, [r7, #28]
 801a820:	6879      	ldr	r1, [r7, #4]
 801a822:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a824:	f7ff fda8 	bl	801a378 <ip_reass_chain_frag_into_datagram_and_validate>
 801a828:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a82a:	697b      	ldr	r3, [r7, #20]
 801a82c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a830:	f000 80b3 	beq.w	801a99a <ip4_reass+0x32e>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a834:	4b36      	ldr	r3, [pc, #216]	@ (801a910 <ip4_reass+0x2a4>)
 801a836:	881a      	ldrh	r2, [r3, #0]
 801a838:	8c3b      	ldrh	r3, [r7, #32]
 801a83a:	4413      	add	r3, r2
 801a83c:	b29a      	uxth	r2, r3
 801a83e:	4b34      	ldr	r3, [pc, #208]	@ (801a910 <ip4_reass+0x2a4>)
 801a840:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a842:	69fb      	ldr	r3, [r7, #28]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d016      	beq.n	801a876 <ip4_reass+0x20a>
    u16_t datagram_len = (u16_t)(offset + len);
 801a848:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801a84a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a84c:	4413      	add	r3, r2
 801a84e:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a852:	8a7a      	ldrh	r2, [r7, #18]
 801a854:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a858:	7f9b      	ldrb	r3, [r3, #30]
 801a85a:	f043 0301 	orr.w	r3, r3, #1
 801a85e:	b2da      	uxtb	r2, r3
 801a860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a862:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
 801a864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a866:	8b9b      	ldrh	r3, [r3, #28]
 801a868:	4619      	mov	r1, r3
 801a86a:	482d      	ldr	r0, [pc, #180]	@ (801a920 <ip4_reass+0x2b4>)
 801a86c:	f000 ff5c 	bl	801b728 <iprintf>
 801a870:	2000      	movs	r0, #0
 801a872:	f000 fe83 	bl	801b57c <fflush>
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a876:	697b      	ldr	r3, [r7, #20]
 801a878:	2b01      	cmp	r3, #1
 801a87a:	f040 8081 	bne.w	801a980 <ip4_reass+0x314>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a87e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a880:	8b9b      	ldrh	r3, [r3, #28]
 801a882:	3314      	adds	r3, #20
 801a884:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a888:	685b      	ldr	r3, [r3, #4]
 801a88a:	685b      	ldr	r3, [r3, #4]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a892:	685b      	ldr	r3, [r3, #4]
 801a894:	685b      	ldr	r3, [r3, #4]
 801a896:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a89a:	3308      	adds	r3, #8
 801a89c:	2214      	movs	r2, #20
 801a89e:	4619      	mov	r1, r3
 801a8a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801a8a2:	f001 f928 	bl	801baf6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a8a6:	8a3b      	ldrh	r3, [r7, #16]
 801a8a8:	4618      	mov	r0, r3
 801a8aa:	f7f0 f9e3 	bl	800ac74 <lwip_htons>
 801a8ae:	4603      	mov	r3, r0
 801a8b0:	461a      	mov	r2, r3
 801a8b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8b4:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	719a      	strb	r2, [r3, #6]
 801a8bc:	2200      	movs	r2, #0
 801a8be:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	729a      	strb	r2, [r3, #10]
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a8ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8cc:	685b      	ldr	r3, [r3, #4]
 801a8ce:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a8d0:	e00d      	b.n	801a8ee <ip4_reass+0x282>
      iprh = (struct ip_reass_helper *)r->payload;
 801a8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8d4:	685b      	ldr	r3, [r3, #4]
 801a8d6:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a8d8:	2114      	movs	r1, #20
 801a8da:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801a8dc:	f7f1 ff86 	bl	800c7ec <pbuf_remove_header>
      pbuf_cat(p, r);
 801a8e0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801a8e2:	6878      	ldr	r0, [r7, #4]
 801a8e4:	f7f2 f91c 	bl	800cb20 <pbuf_cat>
      r = iprh->next_pbuf;
 801a8e8:	68fb      	ldr	r3, [r7, #12]
 801a8ea:	681b      	ldr	r3, [r3, #0]
 801a8ec:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801a8ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a8f0:	2b00      	cmp	r3, #0
 801a8f2:	d1ee      	bne.n	801a8d2 <ip4_reass+0x266>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a8f4:	4b08      	ldr	r3, [pc, #32]	@ (801a918 <ip4_reass+0x2ac>)
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a8fa:	429a      	cmp	r2, r3
 801a8fc:	d102      	bne.n	801a904 <ip4_reass+0x298>
      ipr_prev = NULL;
 801a8fe:	2300      	movs	r3, #0
 801a900:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a902:	e01c      	b.n	801a93e <ip4_reass+0x2d2>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a904:	4b04      	ldr	r3, [pc, #16]	@ (801a918 <ip4_reass+0x2ac>)
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a90a:	e013      	b.n	801a934 <ip4_reass+0x2c8>
 801a90c:	08023ee8 	.word	0x08023ee8
 801a910:	20011f0c 	.word	0x20011f0c
 801a914:	08023f18 	.word	0x08023f18
 801a918:	20011f08 	.word	0x20011f08
 801a91c:	08023f54 	.word	0x08023f54
 801a920:	08023f84 	.word	0x08023f84
        if (ipr_prev->next == ipr) {
 801a924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a92a:	429a      	cmp	r2, r3
 801a92c:	d006      	beq.n	801a93c <ip4_reass+0x2d0>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a92e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a936:	2b00      	cmp	r3, #0
 801a938:	d1f4      	bne.n	801a924 <ip4_reass+0x2b8>
 801a93a:	e000      	b.n	801a93e <ip4_reass+0x2d2>
          break;
 801a93c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a93e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a940:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a942:	f7ff fce9 	bl	801a318 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a946:	6878      	ldr	r0, [r7, #4]
 801a948:	f7f2 f8a6 	bl	800ca98 <pbuf_clen>
 801a94c:	4603      	mov	r3, r0
 801a94e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a950:	4b2d      	ldr	r3, [pc, #180]	@ (801aa08 <ip4_reass+0x39c>)
 801a952:	881b      	ldrh	r3, [r3, #0]
 801a954:	8c3a      	ldrh	r2, [r7, #32]
 801a956:	429a      	cmp	r2, r3
 801a958:	d909      	bls.n	801a96e <ip4_reass+0x302>
 801a95a:	4b2c      	ldr	r3, [pc, #176]	@ (801aa0c <ip4_reass+0x3a0>)
 801a95c:	f240 229b 	movw	r2, #667	@ 0x29b
 801a960:	492b      	ldr	r1, [pc, #172]	@ (801aa10 <ip4_reass+0x3a4>)
 801a962:	482c      	ldr	r0, [pc, #176]	@ (801aa14 <ip4_reass+0x3a8>)
 801a964:	f000 fee0 	bl	801b728 <iprintf>
 801a968:	2000      	movs	r0, #0
 801a96a:	f000 fe07 	bl	801b57c <fflush>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a96e:	4b26      	ldr	r3, [pc, #152]	@ (801aa08 <ip4_reass+0x39c>)
 801a970:	881a      	ldrh	r2, [r3, #0]
 801a972:	8c3b      	ldrh	r3, [r7, #32]
 801a974:	1ad3      	subs	r3, r2, r3
 801a976:	b29a      	uxth	r2, r3
 801a978:	4b23      	ldr	r3, [pc, #140]	@ (801aa08 <ip4_reass+0x39c>)
 801a97a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	e03f      	b.n	801aa00 <ip4_reass+0x394>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
 801a980:	4b21      	ldr	r3, [pc, #132]	@ (801aa08 <ip4_reass+0x39c>)
 801a982:	881b      	ldrh	r3, [r3, #0]
 801a984:	4619      	mov	r1, r3
 801a986:	4824      	ldr	r0, [pc, #144]	@ (801aa18 <ip4_reass+0x3ac>)
 801a988:	f000 fece 	bl	801b728 <iprintf>
 801a98c:	2000      	movs	r0, #0
 801a98e:	f000 fdf5 	bl	801b57c <fflush>
  return NULL;
 801a992:	2300      	movs	r3, #0
 801a994:	e034      	b.n	801aa00 <ip4_reass+0x394>
      goto nullreturn_ipr;
 801a996:	bf00      	nop
 801a998:	e000      	b.n	801a99c <ip4_reass+0x330>
    goto nullreturn_ipr;
 801a99a:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d109      	bne.n	801a9b6 <ip4_reass+0x34a>
 801a9a2:	4b1a      	ldr	r3, [pc, #104]	@ (801aa0c <ip4_reass+0x3a0>)
 801a9a4:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801a9a8:	491c      	ldr	r1, [pc, #112]	@ (801aa1c <ip4_reass+0x3b0>)
 801a9aa:	481a      	ldr	r0, [pc, #104]	@ (801aa14 <ip4_reass+0x3a8>)
 801a9ac:	f000 febc 	bl	801b728 <iprintf>
 801a9b0:	2000      	movs	r0, #0
 801a9b2:	f000 fde3 	bl	801b57c <fflush>
  if (ipr->p == NULL) {
 801a9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9b8:	685b      	ldr	r3, [r3, #4]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d115      	bne.n	801a9ea <ip4_reass+0x37e>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a9be:	4b18      	ldr	r3, [pc, #96]	@ (801aa20 <ip4_reass+0x3b4>)
 801a9c0:	681b      	ldr	r3, [r3, #0]
 801a9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a9c4:	429a      	cmp	r2, r3
 801a9c6:	d009      	beq.n	801a9dc <ip4_reass+0x370>
 801a9c8:	4b10      	ldr	r3, [pc, #64]	@ (801aa0c <ip4_reass+0x3a0>)
 801a9ca:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801a9ce:	4915      	ldr	r1, [pc, #84]	@ (801aa24 <ip4_reass+0x3b8>)
 801a9d0:	4810      	ldr	r0, [pc, #64]	@ (801aa14 <ip4_reass+0x3a8>)
 801a9d2:	f000 fea9 	bl	801b728 <iprintf>
 801a9d6:	2000      	movs	r0, #0
 801a9d8:	f000 fdd0 	bl	801b57c <fflush>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a9dc:	2100      	movs	r1, #0
 801a9de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a9e0:	f7ff fc9a 	bl	801a318 <ip_reass_dequeue_datagram>
 801a9e4:	e002      	b.n	801a9ec <ip4_reass+0x380>
    goto nullreturn;
 801a9e6:	bf00      	nop
 801a9e8:	e000      	b.n	801a9ec <ip4_reass+0x380>
  }

nullreturn:
 801a9ea:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
 801a9ec:	480e      	ldr	r0, [pc, #56]	@ (801aa28 <ip4_reass+0x3bc>)
 801a9ee:	f000 ff0b 	bl	801b808 <puts>
 801a9f2:	2000      	movs	r0, #0
 801a9f4:	f000 fdc2 	bl	801b57c <fflush>
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a9f8:	6878      	ldr	r0, [r7, #4]
 801a9fa:	f7f1 ff8f 	bl	800c91c <pbuf_free>
  return NULL;
 801a9fe:	2300      	movs	r3, #0
}
 801aa00:	4618      	mov	r0, r3
 801aa02:	3738      	adds	r7, #56	@ 0x38
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}
 801aa08:	20011f0c 	.word	0x20011f0c
 801aa0c:	08023d54 	.word	0x08023d54
 801aa10:	08023fb4 	.word	0x08023fb4
 801aa14:	08023d9c 	.word	0x08023d9c
 801aa18:	08023fd0 	.word	0x08023fd0
 801aa1c:	08023fec 	.word	0x08023fec
 801aa20:	20011f08 	.word	0x20011f08
 801aa24:	08023ff8 	.word	0x08023ff8
 801aa28:	08024018 	.word	0x08024018

0801aa2c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801aa30:	2005      	movs	r0, #5
 801aa32:	f7f0 fe73 	bl	800b71c <memp_malloc>
 801aa36:	4603      	mov	r3, r0
}
 801aa38:	4618      	mov	r0, r3
 801aa3a:	bd80      	pop	{r7, pc}

0801aa3c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b082      	sub	sp, #8
 801aa40:	af00      	add	r7, sp, #0
 801aa42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d109      	bne.n	801aa5e <ip_frag_free_pbuf_custom_ref+0x22>
 801aa4a:	4b09      	ldr	r3, [pc, #36]	@ (801aa70 <ip_frag_free_pbuf_custom_ref+0x34>)
 801aa4c:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801aa50:	4908      	ldr	r1, [pc, #32]	@ (801aa74 <ip_frag_free_pbuf_custom_ref+0x38>)
 801aa52:	4809      	ldr	r0, [pc, #36]	@ (801aa78 <ip_frag_free_pbuf_custom_ref+0x3c>)
 801aa54:	f000 fe68 	bl	801b728 <iprintf>
 801aa58:	2000      	movs	r0, #0
 801aa5a:	f000 fd8f 	bl	801b57c <fflush>
  memp_free(MEMP_FRAG_PBUF, p);
 801aa5e:	6879      	ldr	r1, [r7, #4]
 801aa60:	2005      	movs	r0, #5
 801aa62:	f7f0 fedd 	bl	800b820 <memp_free>
}
 801aa66:	bf00      	nop
 801aa68:	3708      	adds	r7, #8
 801aa6a:	46bd      	mov	sp, r7
 801aa6c:	bd80      	pop	{r7, pc}
 801aa6e:	bf00      	nop
 801aa70:	08023d54 	.word	0x08023d54
 801aa74:	08024030 	.word	0x08024030
 801aa78:	08023d9c 	.word	0x08023d9c

0801aa7c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801aa7c:	b580      	push	{r7, lr}
 801aa7e:	b084      	sub	sp, #16
 801aa80:	af00      	add	r7, sp, #0
 801aa82:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d109      	bne.n	801aaa2 <ipfrag_free_pbuf_custom+0x26>
 801aa8e:	4b14      	ldr	r3, [pc, #80]	@ (801aae0 <ipfrag_free_pbuf_custom+0x64>)
 801aa90:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801aa94:	4913      	ldr	r1, [pc, #76]	@ (801aae4 <ipfrag_free_pbuf_custom+0x68>)
 801aa96:	4814      	ldr	r0, [pc, #80]	@ (801aae8 <ipfrag_free_pbuf_custom+0x6c>)
 801aa98:	f000 fe46 	bl	801b728 <iprintf>
 801aa9c:	2000      	movs	r0, #0
 801aa9e:	f000 fd6d 	bl	801b57c <fflush>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801aaa2:	68fa      	ldr	r2, [r7, #12]
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	429a      	cmp	r2, r3
 801aaa8:	d009      	beq.n	801aabe <ipfrag_free_pbuf_custom+0x42>
 801aaaa:	4b0d      	ldr	r3, [pc, #52]	@ (801aae0 <ipfrag_free_pbuf_custom+0x64>)
 801aaac:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801aab0:	490e      	ldr	r1, [pc, #56]	@ (801aaec <ipfrag_free_pbuf_custom+0x70>)
 801aab2:	480d      	ldr	r0, [pc, #52]	@ (801aae8 <ipfrag_free_pbuf_custom+0x6c>)
 801aab4:	f000 fe38 	bl	801b728 <iprintf>
 801aab8:	2000      	movs	r0, #0
 801aaba:	f000 fd5f 	bl	801b57c <fflush>
  if (pcr->original != NULL) {
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	695b      	ldr	r3, [r3, #20]
 801aac2:	2b00      	cmp	r3, #0
 801aac4:	d004      	beq.n	801aad0 <ipfrag_free_pbuf_custom+0x54>
    pbuf_free(pcr->original);
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	695b      	ldr	r3, [r3, #20]
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7f1 ff26 	bl	800c91c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801aad0:	68f8      	ldr	r0, [r7, #12]
 801aad2:	f7ff ffb3 	bl	801aa3c <ip_frag_free_pbuf_custom_ref>
}
 801aad6:	bf00      	nop
 801aad8:	3710      	adds	r7, #16
 801aada:	46bd      	mov	sp, r7
 801aadc:	bd80      	pop	{r7, pc}
 801aade:	bf00      	nop
 801aae0:	08023d54 	.word	0x08023d54
 801aae4:	0802403c 	.word	0x0802403c
 801aae8:	08023d9c 	.word	0x08023d9c
 801aaec:	08024048 	.word	0x08024048

0801aaf0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801aaf0:	b580      	push	{r7, lr}
 801aaf2:	b094      	sub	sp, #80	@ 0x50
 801aaf4:	af02      	add	r7, sp, #8
 801aaf6:	60f8      	str	r0, [r7, #12]
 801aaf8:	60b9      	str	r1, [r7, #8]
 801aafa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801aafc:	2300      	movs	r3, #0
 801aafe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ab02:	68bb      	ldr	r3, [r7, #8]
 801ab04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801ab06:	3b14      	subs	r3, #20
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	da00      	bge.n	801ab0e <ip4_frag+0x1e>
 801ab0c:	3307      	adds	r3, #7
 801ab0e:	10db      	asrs	r3, r3, #3
 801ab10:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ab12:	2314      	movs	r3, #20
 801ab14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ab16:	68fb      	ldr	r3, [r7, #12]
 801ab18:	685b      	ldr	r3, [r3, #4]
 801ab1a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ab1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ab1e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ab20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab22:	781b      	ldrb	r3, [r3, #0]
 801ab24:	f003 030f 	and.w	r3, r3, #15
 801ab28:	b2db      	uxtb	r3, r3
 801ab2a:	009b      	lsls	r3, r3, #2
 801ab2c:	b2db      	uxtb	r3, r3
 801ab2e:	2b14      	cmp	r3, #20
 801ab30:	d002      	beq.n	801ab38 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ab32:	f06f 0305 	mvn.w	r3, #5
 801ab36:	e119      	b.n	801ad6c <ip4_frag+0x27c>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	895b      	ldrh	r3, [r3, #10]
 801ab3c:	2b13      	cmp	r3, #19
 801ab3e:	d80c      	bhi.n	801ab5a <ip4_frag+0x6a>
 801ab40:	4b8c      	ldr	r3, [pc, #560]	@ (801ad74 <ip4_frag+0x284>)
 801ab42:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ab46:	498c      	ldr	r1, [pc, #560]	@ (801ad78 <ip4_frag+0x288>)
 801ab48:	488c      	ldr	r0, [pc, #560]	@ (801ad7c <ip4_frag+0x28c>)
 801ab4a:	f000 fded 	bl	801b728 <iprintf>
 801ab4e:	2000      	movs	r0, #0
 801ab50:	f000 fd14 	bl	801b57c <fflush>
 801ab54:	f06f 0305 	mvn.w	r3, #5
 801ab58:	e108      	b.n	801ad6c <ip4_frag+0x27c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ab5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ab5c:	88db      	ldrh	r3, [r3, #6]
 801ab5e:	b29b      	uxth	r3, r3
 801ab60:	4618      	mov	r0, r3
 801ab62:	f7f0 f887 	bl	800ac74 <lwip_htons>
 801ab66:	4603      	mov	r3, r0
 801ab68:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ab6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ab6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ab70:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ab74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ab76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ab7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	891b      	ldrh	r3, [r3, #8]
 801ab80:	3b14      	subs	r3, #20
 801ab82:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ab86:	e0e7      	b.n	801ad58 <ip4_frag+0x268>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ab88:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ab8a:	00db      	lsls	r3, r3, #3
 801ab8c:	b29b      	uxth	r3, r3
 801ab8e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ab92:	4293      	cmp	r3, r2
 801ab94:	bf28      	it	cs
 801ab96:	4613      	movcs	r3, r2
 801ab98:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ab9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ab9e:	2114      	movs	r1, #20
 801aba0:	200e      	movs	r0, #14
 801aba2:	f7f1 fb55 	bl	800c250 <pbuf_alloc>
 801aba6:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abaa:	2b00      	cmp	r3, #0
 801abac:	f000 80db 	beq.w	801ad66 <ip4_frag+0x276>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abb2:	895b      	ldrh	r3, [r3, #10]
 801abb4:	2b13      	cmp	r3, #19
 801abb6:	d809      	bhi.n	801abcc <ip4_frag+0xdc>
 801abb8:	4b6e      	ldr	r3, [pc, #440]	@ (801ad74 <ip4_frag+0x284>)
 801abba:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801abbe:	4970      	ldr	r1, [pc, #448]	@ (801ad80 <ip4_frag+0x290>)
 801abc0:	486e      	ldr	r0, [pc, #440]	@ (801ad7c <ip4_frag+0x28c>)
 801abc2:	f000 fdb1 	bl	801b728 <iprintf>
 801abc6:	2000      	movs	r0, #0
 801abc8:	f000 fcd8 	bl	801b57c <fflush>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801abcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abce:	685b      	ldr	r3, [r3, #4]
 801abd0:	2214      	movs	r2, #20
 801abd2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801abd4:	4618      	mov	r0, r3
 801abd6:	f000 ff8e 	bl	801baf6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801abda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801abdc:	685b      	ldr	r3, [r3, #4]
 801abde:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801abe0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801abe2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801abe6:	e067      	b.n	801acb8 <ip4_frag+0x1c8>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	895a      	ldrh	r2, [r3, #10]
 801abec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801abee:	1ad3      	subs	r3, r2, r3
 801abf0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801abf2:	68fb      	ldr	r3, [r7, #12]
 801abf4:	895b      	ldrh	r3, [r3, #10]
 801abf6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801abf8:	429a      	cmp	r2, r3
 801abfa:	d909      	bls.n	801ac10 <ip4_frag+0x120>
 801abfc:	4b5d      	ldr	r3, [pc, #372]	@ (801ad74 <ip4_frag+0x284>)
 801abfe:	f240 322d 	movw	r2, #813	@ 0x32d
 801ac02:	4960      	ldr	r1, [pc, #384]	@ (801ad84 <ip4_frag+0x294>)
 801ac04:	485d      	ldr	r0, [pc, #372]	@ (801ad7c <ip4_frag+0x28c>)
 801ac06:	f000 fd8f 	bl	801b728 <iprintf>
 801ac0a:	2000      	movs	r0, #0
 801ac0c:	f000 fcb6 	bl	801b57c <fflush>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ac10:	8bfa      	ldrh	r2, [r7, #30]
 801ac12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ac16:	4293      	cmp	r3, r2
 801ac18:	bf28      	it	cs
 801ac1a:	4613      	movcs	r3, r2
 801ac1c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ac20:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801ac24:	2b00      	cmp	r3, #0
 801ac26:	d105      	bne.n	801ac34 <ip4_frag+0x144>
        poff = 0;
 801ac28:	2300      	movs	r3, #0
 801ac2a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ac2c:	68fb      	ldr	r3, [r7, #12]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	60fb      	str	r3, [r7, #12]
        continue;
 801ac32:	e041      	b.n	801acb8 <ip4_frag+0x1c8>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ac34:	f7ff fefa 	bl	801aa2c <ip_frag_alloc_pbuf_custom_ref>
 801ac38:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ac3a:	69bb      	ldr	r3, [r7, #24]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	d103      	bne.n	801ac48 <ip4_frag+0x158>
        pbuf_free(rambuf);
 801ac40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac42:	f7f1 fe6b 	bl	800c91c <pbuf_free>
        goto memerr;
 801ac46:	e08f      	b.n	801ad68 <ip4_frag+0x278>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ac48:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ac4e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ac50:	4413      	add	r3, r2
 801ac52:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801ac56:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801ac5a:	9201      	str	r2, [sp, #4]
 801ac5c:	9300      	str	r3, [sp, #0]
 801ac5e:	4603      	mov	r3, r0
 801ac60:	2241      	movs	r2, #65	@ 0x41
 801ac62:	2000      	movs	r0, #0
 801ac64:	f7f1 fc56 	bl	800c514 <pbuf_alloced_custom>
 801ac68:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ac6a:	697b      	ldr	r3, [r7, #20]
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	d106      	bne.n	801ac7e <ip4_frag+0x18e>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ac70:	69b8      	ldr	r0, [r7, #24]
 801ac72:	f7ff fee3 	bl	801aa3c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ac76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac78:	f7f1 fe50 	bl	800c91c <pbuf_free>
        goto memerr;
 801ac7c:	e074      	b.n	801ad68 <ip4_frag+0x278>
      }
      pbuf_ref(p);
 801ac7e:	68f8      	ldr	r0, [r7, #12]
 801ac80:	f7f1 ff22 	bl	800cac8 <pbuf_ref>
      pcr->original = p;
 801ac84:	69bb      	ldr	r3, [r7, #24]
 801ac86:	68fa      	ldr	r2, [r7, #12]
 801ac88:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ac8a:	69bb      	ldr	r3, [r7, #24]
 801ac8c:	4a3e      	ldr	r2, [pc, #248]	@ (801ad88 <ip4_frag+0x298>)
 801ac8e:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ac90:	6979      	ldr	r1, [r7, #20]
 801ac92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ac94:	f7f1 ff44 	bl	800cb20 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ac98:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801ac9c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801aca0:	1ad3      	subs	r3, r2, r3
 801aca2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801aca6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d004      	beq.n	801acb8 <ip4_frag+0x1c8>
        poff = 0;
 801acae:	2300      	movs	r3, #0
 801acb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801acb2:	68fb      	ldr	r3, [r7, #12]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801acb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d193      	bne.n	801abe8 <ip4_frag+0xf8>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801acc0:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801acc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801acc6:	4413      	add	r3, r2
 801acc8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801acca:	68bb      	ldr	r3, [r7, #8]
 801accc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801acce:	f1a3 0213 	sub.w	r2, r3, #19
 801acd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801acd6:	429a      	cmp	r2, r3
 801acd8:	bfcc      	ite	gt
 801acda:	2301      	movgt	r3, #1
 801acdc:	2300      	movle	r3, #0
 801acde:	b2db      	uxtb	r3, r3
 801ace0:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ace2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801ace6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801acea:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801acec:	6a3b      	ldr	r3, [r7, #32]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d002      	beq.n	801acf8 <ip4_frag+0x208>
 801acf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801acf4:	2b00      	cmp	r3, #0
 801acf6:	d003      	beq.n	801ad00 <ip4_frag+0x210>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801acf8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801acfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801acfe:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ad00:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ad02:	4618      	mov	r0, r3
 801ad04:	f7ef ffb6 	bl	800ac74 <lwip_htons>
 801ad08:	4603      	mov	r3, r0
 801ad0a:	461a      	mov	r2, r3
 801ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad0e:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ad10:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ad12:	3314      	adds	r3, #20
 801ad14:	b29b      	uxth	r3, r3
 801ad16:	4618      	mov	r0, r3
 801ad18:	f7ef ffac 	bl	800ac74 <lwip_htons>
 801ad1c:	4603      	mov	r3, r0
 801ad1e:	461a      	mov	r2, r3
 801ad20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad22:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ad24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ad26:	2200      	movs	r2, #0
 801ad28:	729a      	strb	r2, [r3, #10]
 801ad2a:	2200      	movs	r2, #0
 801ad2c:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	695b      	ldr	r3, [r3, #20]
 801ad32:	687a      	ldr	r2, [r7, #4]
 801ad34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801ad36:	68b8      	ldr	r0, [r7, #8]
 801ad38:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ad3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801ad3c:	f7f1 fdee 	bl	800c91c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ad40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ad44:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ad46:	1ad3      	subs	r3, r2, r3
 801ad48:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801ad4c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801ad50:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ad52:	4413      	add	r3, r2
 801ad54:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801ad58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801ad5c:	2b00      	cmp	r3, #0
 801ad5e:	f47f af13 	bne.w	801ab88 <ip4_frag+0x98>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ad62:	2300      	movs	r3, #0
 801ad64:	e002      	b.n	801ad6c <ip4_frag+0x27c>
      goto memerr;
 801ad66:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ad68:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ad6c:	4618      	mov	r0, r3
 801ad6e:	3748      	adds	r7, #72	@ 0x48
 801ad70:	46bd      	mov	sp, r7
 801ad72:	bd80      	pop	{r7, pc}
 801ad74:	08023d54 	.word	0x08023d54
 801ad78:	08024054 	.word	0x08024054
 801ad7c:	08023d9c 	.word	0x08023d9c
 801ad80:	08024070 	.word	0x08024070
 801ad84:	08024090 	.word	0x08024090
 801ad88:	0801aa7d 	.word	0x0801aa7d

0801ad8c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ad8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ad90:	b096      	sub	sp, #88	@ 0x58
 801ad92:	af0a      	add	r7, sp, #40	@ 0x28
 801ad94:	61f8      	str	r0, [r7, #28]
 801ad96:	61b9      	str	r1, [r7, #24]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ad98:	230e      	movs	r3, #14
 801ad9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ad9c:	69fb      	ldr	r3, [r7, #28]
 801ad9e:	895b      	ldrh	r3, [r3, #10]
 801ada0:	2b0e      	cmp	r3, #14
 801ada2:	f240 80d7 	bls.w	801af54 <ethernet_input+0x1c8>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ada6:	69fb      	ldr	r3, [r7, #28]
 801ada8:	7bdb      	ldrb	r3, [r3, #15]
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d106      	bne.n	801adbc <ethernet_input+0x30>
    p->if_idx = netif_get_index(netif);
 801adae:	69bb      	ldr	r3, [r7, #24]
 801adb0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801adb4:	3301      	adds	r3, #1
 801adb6:	b2da      	uxtb	r2, r3
 801adb8:	69fb      	ldr	r3, [r7, #28]
 801adba:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801adbc:	69fb      	ldr	r3, [r7, #28]
 801adbe:	685b      	ldr	r3, [r3, #4]
 801adc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 801adc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adc4:	781b      	ldrb	r3, [r3, #0]
 801adc6:	4698      	mov	r8, r3
 801adc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adca:	785b      	ldrb	r3, [r3, #1]
 801adcc:	4699      	mov	r9, r3
 801adce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801add0:	789b      	ldrb	r3, [r3, #2]
 801add2:	469a      	mov	sl, r3
 801add4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801add6:	78db      	ldrb	r3, [r3, #3]
 801add8:	461c      	mov	r4, r3
 801adda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801addc:	791b      	ldrb	r3, [r3, #4]
 801adde:	461d      	mov	r5, r3
 801ade0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ade2:	795b      	ldrb	r3, [r3, #5]
 801ade4:	461e      	mov	r6, r3
 801ade6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ade8:	799b      	ldrb	r3, [r3, #6]
 801adea:	617b      	str	r3, [r7, #20]
 801adec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adee:	79db      	ldrb	r3, [r3, #7]
 801adf0:	613b      	str	r3, [r7, #16]
 801adf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adf4:	7a1b      	ldrb	r3, [r3, #8]
 801adf6:	60fb      	str	r3, [r7, #12]
 801adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801adfa:	7a5b      	ldrb	r3, [r3, #9]
 801adfc:	60bb      	str	r3, [r7, #8]
 801adfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae00:	7a9b      	ldrb	r3, [r3, #10]
 801ae02:	607b      	str	r3, [r7, #4]
 801ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae06:	7adb      	ldrb	r3, [r3, #11]
 801ae08:	603b      	str	r3, [r7, #0]
 801ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae0c:	899b      	ldrh	r3, [r3, #12]
 801ae0e:	b29b      	uxth	r3, r3
 801ae10:	4618      	mov	r0, r3
 801ae12:	f7ef ff2f 	bl	800ac74 <lwip_htons>
 801ae16:	4603      	mov	r3, r0
 801ae18:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae1a:	683a      	ldr	r2, [r7, #0]
 801ae1c:	9208      	str	r2, [sp, #32]
 801ae1e:	687a      	ldr	r2, [r7, #4]
 801ae20:	9207      	str	r2, [sp, #28]
 801ae22:	68ba      	ldr	r2, [r7, #8]
 801ae24:	9206      	str	r2, [sp, #24]
 801ae26:	68fa      	ldr	r2, [r7, #12]
 801ae28:	9205      	str	r2, [sp, #20]
 801ae2a:	693a      	ldr	r2, [r7, #16]
 801ae2c:	9204      	str	r2, [sp, #16]
 801ae2e:	697b      	ldr	r3, [r7, #20]
 801ae30:	9303      	str	r3, [sp, #12]
 801ae32:	9602      	str	r6, [sp, #8]
 801ae34:	9501      	str	r5, [sp, #4]
 801ae36:	9400      	str	r4, [sp, #0]
 801ae38:	4653      	mov	r3, sl
 801ae3a:	464a      	mov	r2, r9
 801ae3c:	4641      	mov	r1, r8
 801ae3e:	484c      	ldr	r0, [pc, #304]	@ (801af70 <ethernet_input+0x1e4>)
 801ae40:	f000 fc72 	bl	801b728 <iprintf>
 801ae44:	2000      	movs	r0, #0
 801ae46:	f000 fb99 	bl	801b57c <fflush>
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ae4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae4c:	7b1a      	ldrb	r2, [r3, #12]
 801ae4e:	7b5b      	ldrb	r3, [r3, #13]
 801ae50:	021b      	lsls	r3, r3, #8
 801ae52:	4313      	orrs	r3, r2
 801ae54:	84fb      	strh	r3, [r7, #38]	@ 0x26

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ae56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae58:	781b      	ldrb	r3, [r3, #0]
 801ae5a:	f003 0301 	and.w	r3, r3, #1
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d023      	beq.n	801aeaa <ethernet_input+0x11e>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ae62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae64:	781b      	ldrb	r3, [r3, #0]
 801ae66:	2b01      	cmp	r3, #1
 801ae68:	d10f      	bne.n	801ae8a <ethernet_input+0xfe>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ae6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae6c:	785b      	ldrb	r3, [r3, #1]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d11b      	bne.n	801aeaa <ethernet_input+0x11e>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ae72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae74:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ae76:	2b5e      	cmp	r3, #94	@ 0x5e
 801ae78:	d117      	bne.n	801aeaa <ethernet_input+0x11e>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	7b5b      	ldrb	r3, [r3, #13]
 801ae7e:	f043 0310 	orr.w	r3, r3, #16
 801ae82:	b2da      	uxtb	r2, r3
 801ae84:	69fb      	ldr	r3, [r7, #28]
 801ae86:	735a      	strb	r2, [r3, #13]
 801ae88:	e00f      	b.n	801aeaa <ethernet_input+0x11e>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ae8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ae8c:	2206      	movs	r2, #6
 801ae8e:	4939      	ldr	r1, [pc, #228]	@ (801af74 <ethernet_input+0x1e8>)
 801ae90:	4618      	mov	r0, r3
 801ae92:	f000 fd99 	bl	801b9c8 <memcmp>
 801ae96:	4603      	mov	r3, r0
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d106      	bne.n	801aeaa <ethernet_input+0x11e>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ae9c:	69fb      	ldr	r3, [r7, #28]
 801ae9e:	7b5b      	ldrb	r3, [r3, #13]
 801aea0:	f043 0308 	orr.w	r3, r3, #8
 801aea4:	b2da      	uxtb	r2, r3
 801aea6:	69fb      	ldr	r3, [r7, #28]
 801aea8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801aeaa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801aeac:	2b08      	cmp	r3, #8
 801aeae:	d003      	beq.n	801aeb8 <ethernet_input+0x12c>
 801aeb0:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801aeb4:	d026      	beq.n	801af04 <ethernet_input+0x178>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aeb6:	e052      	b.n	801af5e <ethernet_input+0x1d2>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aeb8:	69bb      	ldr	r3, [r7, #24]
 801aeba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801aebe:	f003 0308 	and.w	r3, r3, #8
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d048      	beq.n	801af58 <ethernet_input+0x1cc>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aec6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801aec8:	4619      	mov	r1, r3
 801aeca:	69f8      	ldr	r0, [r7, #28]
 801aecc:	f7f1 fc8e 	bl	800c7ec <pbuf_remove_header>
 801aed0:	4603      	mov	r3, r0
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	d011      	beq.n	801aefa <ethernet_input+0x16e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801aed6:	69fb      	ldr	r3, [r7, #28]
 801aed8:	891b      	ldrh	r3, [r3, #8]
 801aeda:	4619      	mov	r1, r3
 801aedc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801aede:	461a      	mov	r2, r3
 801aee0:	4825      	ldr	r0, [pc, #148]	@ (801af78 <ethernet_input+0x1ec>)
 801aee2:	f000 fc21 	bl	801b728 <iprintf>
 801aee6:	2000      	movs	r0, #0
 801aee8:	f000 fb48 	bl	801b57c <fflush>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801aeec:	4823      	ldr	r0, [pc, #140]	@ (801af7c <ethernet_input+0x1f0>)
 801aeee:	f000 fc1b 	bl	801b728 <iprintf>
 801aef2:	2000      	movs	r0, #0
 801aef4:	f000 fb42 	bl	801b57c <fflush>
        goto free_and_return;
 801aef8:	e031      	b.n	801af5e <ethernet_input+0x1d2>
        ip4_input(p, netif);
 801aefa:	69b9      	ldr	r1, [r7, #24]
 801aefc:	69f8      	ldr	r0, [r7, #28]
 801aefe:	f7fe fc37 	bl	8019770 <ip4_input>
      break;
 801af02:	e025      	b.n	801af50 <ethernet_input+0x1c4>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801af04:	69bb      	ldr	r3, [r7, #24]
 801af06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801af0a:	f003 0308 	and.w	r3, r3, #8
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d024      	beq.n	801af5c <ethernet_input+0x1d0>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801af12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801af14:	4619      	mov	r1, r3
 801af16:	69f8      	ldr	r0, [r7, #28]
 801af18:	f7f1 fc68 	bl	800c7ec <pbuf_remove_header>
 801af1c:	4603      	mov	r3, r0
 801af1e:	2b00      	cmp	r3, #0
 801af20:	d011      	beq.n	801af46 <ethernet_input+0x1ba>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
 801af22:	69fb      	ldr	r3, [r7, #28]
 801af24:	891b      	ldrh	r3, [r3, #8]
 801af26:	4619      	mov	r1, r3
 801af28:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801af2a:	461a      	mov	r2, r3
 801af2c:	4814      	ldr	r0, [pc, #80]	@ (801af80 <ethernet_input+0x1f4>)
 801af2e:	f000 fbfb 	bl	801b728 <iprintf>
 801af32:	2000      	movs	r0, #0
 801af34:	f000 fb22 	bl	801b57c <fflush>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("Can't move over header in packet"));
 801af38:	4810      	ldr	r0, [pc, #64]	@ (801af7c <ethernet_input+0x1f0>)
 801af3a:	f000 fbf5 	bl	801b728 <iprintf>
 801af3e:	2000      	movs	r0, #0
 801af40:	f000 fb1c 	bl	801b57c <fflush>
        goto free_and_return;
 801af44:	e00b      	b.n	801af5e <ethernet_input+0x1d2>
        etharp_input(p, netif);
 801af46:	69b9      	ldr	r1, [r7, #24]
 801af48:	69f8      	ldr	r0, [r7, #28]
 801af4a:	f7fd fbd9 	bl	8018700 <etharp_input>
      break;
 801af4e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801af50:	2300      	movs	r3, #0
 801af52:	e008      	b.n	801af66 <ethernet_input+0x1da>
    goto free_and_return;
 801af54:	bf00      	nop
 801af56:	e002      	b.n	801af5e <ethernet_input+0x1d2>
        goto free_and_return;
 801af58:	bf00      	nop
 801af5a:	e000      	b.n	801af5e <ethernet_input+0x1d2>
        goto free_and_return;
 801af5c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801af5e:	69f8      	ldr	r0, [r7, #28]
 801af60:	f7f1 fcdc 	bl	800c91c <pbuf_free>
  return ERR_OK;
 801af64:	2300      	movs	r3, #0
}
 801af66:	4618      	mov	r0, r3
 801af68:	3730      	adds	r7, #48	@ 0x30
 801af6a:	46bd      	mov	sp, r7
 801af6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801af70:	080240a0 	.word	0x080240a0
 801af74:	08025278 	.word	0x08025278
 801af78:	0802411c 	.word	0x0802411c
 801af7c:	08024158 	.word	0x08024158
 801af80:	0802417c 	.word	0x0802417c

0801af84 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801af84:	b580      	push	{r7, lr}
 801af86:	b086      	sub	sp, #24
 801af88:	af00      	add	r7, sp, #0
 801af8a:	60f8      	str	r0, [r7, #12]
 801af8c:	60b9      	str	r1, [r7, #8]
 801af8e:	607a      	str	r2, [r7, #4]
 801af90:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801af92:	8c3b      	ldrh	r3, [r7, #32]
 801af94:	4618      	mov	r0, r3
 801af96:	f7ef fe6d 	bl	800ac74 <lwip_htons>
 801af9a:	4603      	mov	r3, r0
 801af9c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801af9e:	210e      	movs	r1, #14
 801afa0:	68b8      	ldr	r0, [r7, #8]
 801afa2:	f7f1 fc13 	bl	800c7cc <pbuf_add_header>
 801afa6:	4603      	mov	r3, r0
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d12f      	bne.n	801b00c <ethernet_output+0x88>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801afac:	68bb      	ldr	r3, [r7, #8]
 801afae:	685b      	ldr	r3, [r3, #4]
 801afb0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801afb2:	693b      	ldr	r3, [r7, #16]
 801afb4:	8afa      	ldrh	r2, [r7, #22]
 801afb6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801afb8:	693b      	ldr	r3, [r7, #16]
 801afba:	2206      	movs	r2, #6
 801afbc:	6839      	ldr	r1, [r7, #0]
 801afbe:	4618      	mov	r0, r3
 801afc0:	f000 fd99 	bl	801baf6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801afc4:	693b      	ldr	r3, [r7, #16]
 801afc6:	3306      	adds	r3, #6
 801afc8:	2206      	movs	r2, #6
 801afca:	6879      	ldr	r1, [r7, #4]
 801afcc:	4618      	mov	r0, r3
 801afce:	f000 fd92 	bl	801baf6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801afd8:	2b06      	cmp	r3, #6
 801afda:	d009      	beq.n	801aff0 <ethernet_output+0x6c>
 801afdc:	4b12      	ldr	r3, [pc, #72]	@ (801b028 <ethernet_output+0xa4>)
 801afde:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801afe2:	4912      	ldr	r1, [pc, #72]	@ (801b02c <ethernet_output+0xa8>)
 801afe4:	4812      	ldr	r0, [pc, #72]	@ (801b030 <ethernet_output+0xac>)
 801afe6:	f000 fb9f 	bl	801b728 <iprintf>
 801afea:	2000      	movs	r0, #0
 801afec:	f000 fac6 	bl	801b57c <fflush>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
 801aff0:	68b9      	ldr	r1, [r7, #8]
 801aff2:	4810      	ldr	r0, [pc, #64]	@ (801b034 <ethernet_output+0xb0>)
 801aff4:	f000 fb98 	bl	801b728 <iprintf>
 801aff8:	2000      	movs	r0, #0
 801affa:	f000 fabf 	bl	801b57c <fflush>
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801affe:	68fb      	ldr	r3, [r7, #12]
 801b000:	699b      	ldr	r3, [r3, #24]
 801b002:	68b9      	ldr	r1, [r7, #8]
 801b004:	68f8      	ldr	r0, [r7, #12]
 801b006:	4798      	blx	r3
 801b008:	4603      	mov	r3, r0
 801b00a:	e008      	b.n	801b01e <ethernet_output+0x9a>
      goto pbuf_header_failed;
 801b00c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
 801b00e:	480a      	ldr	r0, [pc, #40]	@ (801b038 <ethernet_output+0xb4>)
 801b010:	f000 fbfa 	bl	801b808 <puts>
 801b014:	2000      	movs	r0, #0
 801b016:	f000 fab1 	bl	801b57c <fflush>
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b01a:	f06f 0301 	mvn.w	r3, #1
}
 801b01e:	4618      	mov	r0, r3
 801b020:	3718      	adds	r7, #24
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}
 801b026:	bf00      	nop
 801b028:	080241c0 	.word	0x080241c0
 801b02c:	080241f8 	.word	0x080241f8
 801b030:	0802422c 	.word	0x0802422c
 801b034:	08024254 	.word	0x08024254
 801b038:	08024278 	.word	0x08024278

0801b03c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b03c:	b580      	push	{r7, lr}
 801b03e:	b082      	sub	sp, #8
 801b040:	af00      	add	r7, sp, #0
 801b042:	6078      	str	r0, [r7, #4]
 801b044:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b046:	683b      	ldr	r3, [r7, #0]
 801b048:	2200      	movs	r2, #0
 801b04a:	2104      	movs	r1, #4
 801b04c:	4618      	mov	r0, r3
 801b04e:	f7e9 fd6f 	bl	8004b30 <osMessageQueueNew>
 801b052:	4602      	mov	r2, r0
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d102      	bne.n	801b066 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b060:	f04f 33ff 	mov.w	r3, #4294967295
 801b064:	e000      	b.n	801b068 <sys_mbox_new+0x2c>

  return ERR_OK;
 801b066:	2300      	movs	r3, #0
}
 801b068:	4618      	mov	r0, r3
 801b06a:	3708      	adds	r7, #8
 801b06c:	46bd      	mov	sp, r7
 801b06e:	bd80      	pop	{r7, pc}

0801b070 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b070:	b580      	push	{r7, lr}
 801b072:	b082      	sub	sp, #8
 801b074:	af00      	add	r7, sp, #0
 801b076:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	4618      	mov	r0, r3
 801b07e:	f7e9 fe89 	bl	8004d94 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	4618      	mov	r0, r3
 801b088:	f7e9 fea4 	bl	8004dd4 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b08c:	bf00      	nop
 801b08e:	3708      	adds	r7, #8
 801b090:	46bd      	mov	sp, r7
 801b092:	bd80      	pop	{r7, pc}

0801b094 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b094:	b580      	push	{r7, lr}
 801b096:	b084      	sub	sp, #16
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]
 801b09c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	6818      	ldr	r0, [r3, #0]
 801b0a2:	4639      	mov	r1, r7
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	f7e9 fdb6 	bl	8004c18 <osMessageQueuePut>
 801b0ac:	4603      	mov	r3, r0
 801b0ae:	2b00      	cmp	r3, #0
 801b0b0:	d102      	bne.n	801b0b8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	73fb      	strb	r3, [r7, #15]
 801b0b6:	e001      	b.n	801b0bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b0b8:	23ff      	movs	r3, #255	@ 0xff
 801b0ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b0c0:	4618      	mov	r0, r3
 801b0c2:	3710      	adds	r7, #16
 801b0c4:	46bd      	mov	sp, r7
 801b0c6:	bd80      	pop	{r7, pc}

0801b0c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b0c8:	b580      	push	{r7, lr}
 801b0ca:	b086      	sub	sp, #24
 801b0cc:	af00      	add	r7, sp, #0
 801b0ce:	60f8      	str	r0, [r7, #12]
 801b0d0:	60b9      	str	r1, [r7, #8]
 801b0d2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b0d4:	f7e9 f9ea 	bl	80044ac <osKernelGetTickCount>
 801b0d8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d013      	beq.n	801b108 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b0e0:	68fb      	ldr	r3, [r7, #12]
 801b0e2:	6818      	ldr	r0, [r3, #0]
 801b0e4:	687b      	ldr	r3, [r7, #4]
 801b0e6:	2200      	movs	r2, #0
 801b0e8:	68b9      	ldr	r1, [r7, #8]
 801b0ea:	f7e9 fdf5 	bl	8004cd8 <osMessageQueueGet>
 801b0ee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b0f0:	693b      	ldr	r3, [r7, #16]
 801b0f2:	2b00      	cmp	r3, #0
 801b0f4:	d105      	bne.n	801b102 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b0f6:	f7e9 f9d9 	bl	80044ac <osKernelGetTickCount>
 801b0fa:	4602      	mov	r2, r0
 801b0fc:	697b      	ldr	r3, [r7, #20]
 801b0fe:	1ad3      	subs	r3, r2, r3
 801b100:	e00f      	b.n	801b122 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b102:	f04f 33ff 	mov.w	r3, #4294967295
 801b106:	e00c      	b.n	801b122 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b108:	68fb      	ldr	r3, [r7, #12]
 801b10a:	6818      	ldr	r0, [r3, #0]
 801b10c:	f04f 33ff 	mov.w	r3, #4294967295
 801b110:	2200      	movs	r2, #0
 801b112:	68b9      	ldr	r1, [r7, #8]
 801b114:	f7e9 fde0 	bl	8004cd8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b118:	f7e9 f9c8 	bl	80044ac <osKernelGetTickCount>
 801b11c:	4602      	mov	r2, r0
 801b11e:	697b      	ldr	r3, [r7, #20]
 801b120:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b122:	4618      	mov	r0, r3
 801b124:	3718      	adds	r7, #24
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}

0801b12a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b12a:	b580      	push	{r7, lr}
 801b12c:	b082      	sub	sp, #8
 801b12e:	af00      	add	r7, sp, #0
 801b130:	6078      	str	r0, [r7, #4]
 801b132:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	6818      	ldr	r0, [r3, #0]
 801b138:	2300      	movs	r3, #0
 801b13a:	2200      	movs	r2, #0
 801b13c:	6839      	ldr	r1, [r7, #0]
 801b13e:	f7e9 fdcb 	bl	8004cd8 <osMessageQueueGet>
 801b142:	4603      	mov	r3, r0
 801b144:	2b00      	cmp	r3, #0
 801b146:	d101      	bne.n	801b14c <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801b148:	2300      	movs	r3, #0
 801b14a:	e001      	b.n	801b150 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b14c:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b150:	4618      	mov	r0, r3
 801b152:	3708      	adds	r7, #8
 801b154:	46bd      	mov	sp, r7
 801b156:	bd80      	pop	{r7, pc}

0801b158 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b158:	b480      	push	{r7}
 801b15a:	b083      	sub	sp, #12
 801b15c:	af00      	add	r7, sp, #0
 801b15e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b160:	687b      	ldr	r3, [r7, #4]
 801b162:	681b      	ldr	r3, [r3, #0]
 801b164:	2b00      	cmp	r3, #0
 801b166:	d101      	bne.n	801b16c <sys_mbox_valid+0x14>
    return 0;
 801b168:	2300      	movs	r3, #0
 801b16a:	e000      	b.n	801b16e <sys_mbox_valid+0x16>
  else
    return 1;
 801b16c:	2301      	movs	r3, #1
}
 801b16e:	4618      	mov	r0, r3
 801b170:	370c      	adds	r7, #12
 801b172:	46bd      	mov	sp, r7
 801b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b178:	4770      	bx	lr

0801b17a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b17a:	b480      	push	{r7}
 801b17c:	b083      	sub	sp, #12
 801b17e:	af00      	add	r7, sp, #0
 801b180:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	2200      	movs	r2, #0
 801b186:	601a      	str	r2, [r3, #0]
}
 801b188:	bf00      	nop
 801b18a:	370c      	adds	r7, #12
 801b18c:	46bd      	mov	sp, r7
 801b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b192:	4770      	bx	lr

0801b194 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b194:	b580      	push	{r7, lr}
 801b196:	b082      	sub	sp, #8
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
 801b19c:	460b      	mov	r3, r1
 801b19e:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801b1a0:	78fb      	ldrb	r3, [r7, #3]
 801b1a2:	2200      	movs	r2, #0
 801b1a4:	4619      	mov	r1, r3
 801b1a6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801b1aa:	f7e9 fb7d 	bl	80048a8 <osSemaphoreNew>
 801b1ae:	4602      	mov	r2, r0
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	681b      	ldr	r3, [r3, #0]
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d102      	bne.n	801b1c2 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b1bc:	f04f 33ff 	mov.w	r3, #4294967295
 801b1c0:	e009      	b.n	801b1d6 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801b1c2:	78fb      	ldrb	r3, [r7, #3]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d105      	bne.n	801b1d4 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	2100      	movs	r1, #0
 801b1ce:	4618      	mov	r0, r3
 801b1d0:	f7e9 fbf4 	bl	80049bc <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b1d4:	2300      	movs	r3, #0
}
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	3708      	adds	r7, #8
 801b1da:	46bd      	mov	sp, r7
 801b1dc:	bd80      	pop	{r7, pc}

0801b1de <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b1de:	b580      	push	{r7, lr}
 801b1e0:	b084      	sub	sp, #16
 801b1e2:	af00      	add	r7, sp, #0
 801b1e4:	6078      	str	r0, [r7, #4]
 801b1e6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801b1e8:	f7e9 f960 	bl	80044ac <osKernelGetTickCount>
 801b1ec:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801b1ee:	683b      	ldr	r3, [r7, #0]
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d011      	beq.n	801b218 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801b1f4:	687b      	ldr	r3, [r7, #4]
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	6839      	ldr	r1, [r7, #0]
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7e9 fbde 	bl	80049bc <osSemaphoreAcquire>
 801b200:	4603      	mov	r3, r0
 801b202:	2b00      	cmp	r3, #0
 801b204:	d105      	bne.n	801b212 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801b206:	f7e9 f951 	bl	80044ac <osKernelGetTickCount>
 801b20a:	4602      	mov	r2, r0
 801b20c:	68fb      	ldr	r3, [r7, #12]
 801b20e:	1ad3      	subs	r3, r2, r3
 801b210:	e012      	b.n	801b238 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b212:	f04f 33ff 	mov.w	r3, #4294967295
 801b216:	e00f      	b.n	801b238 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801b218:	bf00      	nop
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	681b      	ldr	r3, [r3, #0]
 801b21e:	f04f 31ff 	mov.w	r1, #4294967295
 801b222:	4618      	mov	r0, r3
 801b224:	f7e9 fbca 	bl	80049bc <osSemaphoreAcquire>
 801b228:	4603      	mov	r3, r0
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d1f5      	bne.n	801b21a <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801b22e:	f7e9 f93d 	bl	80044ac <osKernelGetTickCount>
 801b232:	4602      	mov	r2, r0
 801b234:	68fb      	ldr	r3, [r7, #12]
 801b236:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b238:	4618      	mov	r0, r3
 801b23a:	3710      	adds	r7, #16
 801b23c:	46bd      	mov	sp, r7
 801b23e:	bd80      	pop	{r7, pc}

0801b240 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b240:	b580      	push	{r7, lr}
 801b242:	b082      	sub	sp, #8
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	4618      	mov	r0, r3
 801b24e:	f7e9 fc07 	bl	8004a60 <osSemaphoreRelease>
}
 801b252:	bf00      	nop
 801b254:	3708      	adds	r7, #8
 801b256:	46bd      	mov	sp, r7
 801b258:	bd80      	pop	{r7, pc}

0801b25a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b25a:	b580      	push	{r7, lr}
 801b25c:	b082      	sub	sp, #8
 801b25e:	af00      	add	r7, sp, #0
 801b260:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	4618      	mov	r0, r3
 801b268:	f7e9 fc3e 	bl	8004ae8 <osSemaphoreDelete>
}
 801b26c:	bf00      	nop
 801b26e:	3708      	adds	r7, #8
 801b270:	46bd      	mov	sp, r7
 801b272:	bd80      	pop	{r7, pc}

0801b274 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b274:	b480      	push	{r7}
 801b276:	b083      	sub	sp, #12
 801b278:	af00      	add	r7, sp, #0
 801b27a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d101      	bne.n	801b288 <sys_sem_valid+0x14>
    return 0;
 801b284:	2300      	movs	r3, #0
 801b286:	e000      	b.n	801b28a <sys_sem_valid+0x16>
  else
    return 1;
 801b288:	2301      	movs	r3, #1
}
 801b28a:	4618      	mov	r0, r3
 801b28c:	370c      	adds	r7, #12
 801b28e:	46bd      	mov	sp, r7
 801b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b294:	4770      	bx	lr

0801b296 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b296:	b480      	push	{r7}
 801b298:	b083      	sub	sp, #12
 801b29a:	af00      	add	r7, sp, #0
 801b29c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b29e:	687b      	ldr	r3, [r7, #4]
 801b2a0:	2200      	movs	r2, #0
 801b2a2:	601a      	str	r2, [r3, #0]
}
 801b2a4:	bf00      	nop
 801b2a6:	370c      	adds	r7, #12
 801b2a8:	46bd      	mov	sp, r7
 801b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2ae:	4770      	bx	lr

0801b2b0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b2b4:	2000      	movs	r0, #0
 801b2b6:	f7e9 f9e9 	bl	800468c <osMutexNew>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	4a01      	ldr	r2, [pc, #4]	@ (801b2c4 <sys_init+0x14>)
 801b2be:	6013      	str	r3, [r2, #0]
#endif
}
 801b2c0:	bf00      	nop
 801b2c2:	bd80      	pop	{r7, pc}
 801b2c4:	20011f14 	.word	0x20011f14

0801b2c8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b2c8:	b580      	push	{r7, lr}
 801b2ca:	b082      	sub	sp, #8
 801b2cc:	af00      	add	r7, sp, #0
 801b2ce:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b2d0:	2000      	movs	r0, #0
 801b2d2:	f7e9 f9db 	bl	800468c <osMutexNew>
 801b2d6:	4602      	mov	r2, r0
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	2b00      	cmp	r3, #0
 801b2e2:	d102      	bne.n	801b2ea <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b2e4:	f04f 33ff 	mov.w	r3, #4294967295
 801b2e8:	e000      	b.n	801b2ec <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b2ea:	2300      	movs	r3, #0
}
 801b2ec:	4618      	mov	r0, r3
 801b2ee:	3708      	adds	r7, #8
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}

0801b2f4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b082      	sub	sp, #8
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b2fc:	687b      	ldr	r3, [r7, #4]
 801b2fe:	681b      	ldr	r3, [r3, #0]
 801b300:	f04f 31ff 	mov.w	r1, #4294967295
 801b304:	4618      	mov	r0, r3
 801b306:	f7e9 fa47 	bl	8004798 <osMutexAcquire>
#endif
}
 801b30a:	bf00      	nop
 801b30c:	3708      	adds	r7, #8
 801b30e:	46bd      	mov	sp, r7
 801b310:	bd80      	pop	{r7, pc}

0801b312 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b312:	b580      	push	{r7, lr}
 801b314:	b082      	sub	sp, #8
 801b316:	af00      	add	r7, sp, #0
 801b318:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	4618      	mov	r0, r3
 801b320:	f7e9 fa85 	bl	800482e <osMutexRelease>
}
 801b324:	bf00      	nop
 801b326:	3708      	adds	r7, #8
 801b328:	46bd      	mov	sp, r7
 801b32a:	bd80      	pop	{r7, pc}

0801b32c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b32c:	b580      	push	{r7, lr}
 801b32e:	b08e      	sub	sp, #56	@ 0x38
 801b330:	af00      	add	r7, sp, #0
 801b332:	60f8      	str	r0, [r7, #12]
 801b334:	60b9      	str	r1, [r7, #8]
 801b336:	607a      	str	r2, [r7, #4]
 801b338:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b33a:	f107 0314 	add.w	r3, r7, #20
 801b33e:	2224      	movs	r2, #36	@ 0x24
 801b340:	2100      	movs	r1, #0
 801b342:	4618      	mov	r0, r3
 801b344:	f000 fb50 	bl	801b9e8 <memset>
 801b348:	68fb      	ldr	r3, [r7, #12]
 801b34a:	617b      	str	r3, [r7, #20]
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801b350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b352:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b354:	f107 0314 	add.w	r3, r7, #20
 801b358:	461a      	mov	r2, r3
 801b35a:	6879      	ldr	r1, [r7, #4]
 801b35c:	68b8      	ldr	r0, [r7, #8]
 801b35e:	f7e9 f8ba 	bl	80044d6 <osThreadNew>
 801b362:	4603      	mov	r3, r0
#endif
}
 801b364:	4618      	mov	r0, r3
 801b366:	3738      	adds	r7, #56	@ 0x38
 801b368:	46bd      	mov	sp, r7
 801b36a:	bd80      	pop	{r7, pc}

0801b36c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b36c:	b580      	push	{r7, lr}
 801b36e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b370:	4b04      	ldr	r3, [pc, #16]	@ (801b384 <sys_arch_protect+0x18>)
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	f04f 31ff 	mov.w	r1, #4294967295
 801b378:	4618      	mov	r0, r3
 801b37a:	f7e9 fa0d 	bl	8004798 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b37e:	2301      	movs	r3, #1
}
 801b380:	4618      	mov	r0, r3
 801b382:	bd80      	pop	{r7, pc}
 801b384:	20011f14 	.word	0x20011f14

0801b388 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b388:	b580      	push	{r7, lr}
 801b38a:	b082      	sub	sp, #8
 801b38c:	af00      	add	r7, sp, #0
 801b38e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b390:	4b04      	ldr	r3, [pc, #16]	@ (801b3a4 <sys_arch_unprotect+0x1c>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	4618      	mov	r0, r3
 801b396:	f7e9 fa4a 	bl	800482e <osMutexRelease>
}
 801b39a:	bf00      	nop
 801b39c:	3708      	adds	r7, #8
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	bd80      	pop	{r7, pc}
 801b3a2:	bf00      	nop
 801b3a4:	20011f14 	.word	0x20011f14

0801b3a8 <rand>:
 801b3a8:	4b16      	ldr	r3, [pc, #88]	@ (801b404 <rand+0x5c>)
 801b3aa:	b510      	push	{r4, lr}
 801b3ac:	681c      	ldr	r4, [r3, #0]
 801b3ae:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b3b0:	b9b3      	cbnz	r3, 801b3e0 <rand+0x38>
 801b3b2:	2018      	movs	r0, #24
 801b3b4:	f000 fc16 	bl	801bbe4 <malloc>
 801b3b8:	4602      	mov	r2, r0
 801b3ba:	6320      	str	r0, [r4, #48]	@ 0x30
 801b3bc:	b920      	cbnz	r0, 801b3c8 <rand+0x20>
 801b3be:	4b12      	ldr	r3, [pc, #72]	@ (801b408 <rand+0x60>)
 801b3c0:	4812      	ldr	r0, [pc, #72]	@ (801b40c <rand+0x64>)
 801b3c2:	2152      	movs	r1, #82	@ 0x52
 801b3c4:	f000 fba6 	bl	801bb14 <__assert_func>
 801b3c8:	4911      	ldr	r1, [pc, #68]	@ (801b410 <rand+0x68>)
 801b3ca:	4b12      	ldr	r3, [pc, #72]	@ (801b414 <rand+0x6c>)
 801b3cc:	e9c0 1300 	strd	r1, r3, [r0]
 801b3d0:	4b11      	ldr	r3, [pc, #68]	@ (801b418 <rand+0x70>)
 801b3d2:	6083      	str	r3, [r0, #8]
 801b3d4:	230b      	movs	r3, #11
 801b3d6:	8183      	strh	r3, [r0, #12]
 801b3d8:	2100      	movs	r1, #0
 801b3da:	2001      	movs	r0, #1
 801b3dc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b3e0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b3e2:	480e      	ldr	r0, [pc, #56]	@ (801b41c <rand+0x74>)
 801b3e4:	690b      	ldr	r3, [r1, #16]
 801b3e6:	694c      	ldr	r4, [r1, #20]
 801b3e8:	4a0d      	ldr	r2, [pc, #52]	@ (801b420 <rand+0x78>)
 801b3ea:	4358      	muls	r0, r3
 801b3ec:	fb02 0004 	mla	r0, r2, r4, r0
 801b3f0:	fba3 3202 	umull	r3, r2, r3, r2
 801b3f4:	3301      	adds	r3, #1
 801b3f6:	eb40 0002 	adc.w	r0, r0, r2
 801b3fa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b3fe:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b402:	bd10      	pop	{r4, pc}
 801b404:	20000084 	.word	0x20000084
 801b408:	08025286 	.word	0x08025286
 801b40c:	0802529d 	.word	0x0802529d
 801b410:	abcd330e 	.word	0xabcd330e
 801b414:	e66d1234 	.word	0xe66d1234
 801b418:	0005deec 	.word	0x0005deec
 801b41c:	5851f42d 	.word	0x5851f42d
 801b420:	4c957f2d 	.word	0x4c957f2d

0801b424 <__sflush_r>:
 801b424:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801b428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b42c:	0716      	lsls	r6, r2, #28
 801b42e:	4605      	mov	r5, r0
 801b430:	460c      	mov	r4, r1
 801b432:	d454      	bmi.n	801b4de <__sflush_r+0xba>
 801b434:	684b      	ldr	r3, [r1, #4]
 801b436:	2b00      	cmp	r3, #0
 801b438:	dc02      	bgt.n	801b440 <__sflush_r+0x1c>
 801b43a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	dd48      	ble.n	801b4d2 <__sflush_r+0xae>
 801b440:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b442:	2e00      	cmp	r6, #0
 801b444:	d045      	beq.n	801b4d2 <__sflush_r+0xae>
 801b446:	2300      	movs	r3, #0
 801b448:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801b44c:	682f      	ldr	r7, [r5, #0]
 801b44e:	6a21      	ldr	r1, [r4, #32]
 801b450:	602b      	str	r3, [r5, #0]
 801b452:	d030      	beq.n	801b4b6 <__sflush_r+0x92>
 801b454:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801b456:	89a3      	ldrh	r3, [r4, #12]
 801b458:	0759      	lsls	r1, r3, #29
 801b45a:	d505      	bpl.n	801b468 <__sflush_r+0x44>
 801b45c:	6863      	ldr	r3, [r4, #4]
 801b45e:	1ad2      	subs	r2, r2, r3
 801b460:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801b462:	b10b      	cbz	r3, 801b468 <__sflush_r+0x44>
 801b464:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801b466:	1ad2      	subs	r2, r2, r3
 801b468:	2300      	movs	r3, #0
 801b46a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801b46c:	6a21      	ldr	r1, [r4, #32]
 801b46e:	4628      	mov	r0, r5
 801b470:	47b0      	blx	r6
 801b472:	1c43      	adds	r3, r0, #1
 801b474:	89a3      	ldrh	r3, [r4, #12]
 801b476:	d106      	bne.n	801b486 <__sflush_r+0x62>
 801b478:	6829      	ldr	r1, [r5, #0]
 801b47a:	291d      	cmp	r1, #29
 801b47c:	d82b      	bhi.n	801b4d6 <__sflush_r+0xb2>
 801b47e:	4a2a      	ldr	r2, [pc, #168]	@ (801b528 <__sflush_r+0x104>)
 801b480:	410a      	asrs	r2, r1
 801b482:	07d6      	lsls	r6, r2, #31
 801b484:	d427      	bmi.n	801b4d6 <__sflush_r+0xb2>
 801b486:	2200      	movs	r2, #0
 801b488:	6062      	str	r2, [r4, #4]
 801b48a:	04d9      	lsls	r1, r3, #19
 801b48c:	6922      	ldr	r2, [r4, #16]
 801b48e:	6022      	str	r2, [r4, #0]
 801b490:	d504      	bpl.n	801b49c <__sflush_r+0x78>
 801b492:	1c42      	adds	r2, r0, #1
 801b494:	d101      	bne.n	801b49a <__sflush_r+0x76>
 801b496:	682b      	ldr	r3, [r5, #0]
 801b498:	b903      	cbnz	r3, 801b49c <__sflush_r+0x78>
 801b49a:	6560      	str	r0, [r4, #84]	@ 0x54
 801b49c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b49e:	602f      	str	r7, [r5, #0]
 801b4a0:	b1b9      	cbz	r1, 801b4d2 <__sflush_r+0xae>
 801b4a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b4a6:	4299      	cmp	r1, r3
 801b4a8:	d002      	beq.n	801b4b0 <__sflush_r+0x8c>
 801b4aa:	4628      	mov	r0, r5
 801b4ac:	f000 fb50 	bl	801bb50 <_free_r>
 801b4b0:	2300      	movs	r3, #0
 801b4b2:	6363      	str	r3, [r4, #52]	@ 0x34
 801b4b4:	e00d      	b.n	801b4d2 <__sflush_r+0xae>
 801b4b6:	2301      	movs	r3, #1
 801b4b8:	4628      	mov	r0, r5
 801b4ba:	47b0      	blx	r6
 801b4bc:	4602      	mov	r2, r0
 801b4be:	1c50      	adds	r0, r2, #1
 801b4c0:	d1c9      	bne.n	801b456 <__sflush_r+0x32>
 801b4c2:	682b      	ldr	r3, [r5, #0]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d0c6      	beq.n	801b456 <__sflush_r+0x32>
 801b4c8:	2b1d      	cmp	r3, #29
 801b4ca:	d001      	beq.n	801b4d0 <__sflush_r+0xac>
 801b4cc:	2b16      	cmp	r3, #22
 801b4ce:	d11e      	bne.n	801b50e <__sflush_r+0xea>
 801b4d0:	602f      	str	r7, [r5, #0]
 801b4d2:	2000      	movs	r0, #0
 801b4d4:	e022      	b.n	801b51c <__sflush_r+0xf8>
 801b4d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b4da:	b21b      	sxth	r3, r3
 801b4dc:	e01b      	b.n	801b516 <__sflush_r+0xf2>
 801b4de:	690f      	ldr	r7, [r1, #16]
 801b4e0:	2f00      	cmp	r7, #0
 801b4e2:	d0f6      	beq.n	801b4d2 <__sflush_r+0xae>
 801b4e4:	0793      	lsls	r3, r2, #30
 801b4e6:	680e      	ldr	r6, [r1, #0]
 801b4e8:	bf08      	it	eq
 801b4ea:	694b      	ldreq	r3, [r1, #20]
 801b4ec:	600f      	str	r7, [r1, #0]
 801b4ee:	bf18      	it	ne
 801b4f0:	2300      	movne	r3, #0
 801b4f2:	eba6 0807 	sub.w	r8, r6, r7
 801b4f6:	608b      	str	r3, [r1, #8]
 801b4f8:	f1b8 0f00 	cmp.w	r8, #0
 801b4fc:	dde9      	ble.n	801b4d2 <__sflush_r+0xae>
 801b4fe:	6a21      	ldr	r1, [r4, #32]
 801b500:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801b502:	4643      	mov	r3, r8
 801b504:	463a      	mov	r2, r7
 801b506:	4628      	mov	r0, r5
 801b508:	47b0      	blx	r6
 801b50a:	2800      	cmp	r0, #0
 801b50c:	dc08      	bgt.n	801b520 <__sflush_r+0xfc>
 801b50e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b512:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b516:	81a3      	strh	r3, [r4, #12]
 801b518:	f04f 30ff 	mov.w	r0, #4294967295
 801b51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b520:	4407      	add	r7, r0
 801b522:	eba8 0800 	sub.w	r8, r8, r0
 801b526:	e7e7      	b.n	801b4f8 <__sflush_r+0xd4>
 801b528:	dfbffffe 	.word	0xdfbffffe

0801b52c <_fflush_r>:
 801b52c:	b538      	push	{r3, r4, r5, lr}
 801b52e:	690b      	ldr	r3, [r1, #16]
 801b530:	4605      	mov	r5, r0
 801b532:	460c      	mov	r4, r1
 801b534:	b913      	cbnz	r3, 801b53c <_fflush_r+0x10>
 801b536:	2500      	movs	r5, #0
 801b538:	4628      	mov	r0, r5
 801b53a:	bd38      	pop	{r3, r4, r5, pc}
 801b53c:	b118      	cbz	r0, 801b546 <_fflush_r+0x1a>
 801b53e:	6a03      	ldr	r3, [r0, #32]
 801b540:	b90b      	cbnz	r3, 801b546 <_fflush_r+0x1a>
 801b542:	f000 f8bb 	bl	801b6bc <__sinit>
 801b546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b54a:	2b00      	cmp	r3, #0
 801b54c:	d0f3      	beq.n	801b536 <_fflush_r+0xa>
 801b54e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801b550:	07d0      	lsls	r0, r2, #31
 801b552:	d404      	bmi.n	801b55e <_fflush_r+0x32>
 801b554:	0599      	lsls	r1, r3, #22
 801b556:	d402      	bmi.n	801b55e <_fflush_r+0x32>
 801b558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b55a:	f000 faca 	bl	801baf2 <__retarget_lock_acquire_recursive>
 801b55e:	4628      	mov	r0, r5
 801b560:	4621      	mov	r1, r4
 801b562:	f7ff ff5f 	bl	801b424 <__sflush_r>
 801b566:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b568:	07da      	lsls	r2, r3, #31
 801b56a:	4605      	mov	r5, r0
 801b56c:	d4e4      	bmi.n	801b538 <_fflush_r+0xc>
 801b56e:	89a3      	ldrh	r3, [r4, #12]
 801b570:	059b      	lsls	r3, r3, #22
 801b572:	d4e1      	bmi.n	801b538 <_fflush_r+0xc>
 801b574:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b576:	f000 fabd 	bl	801baf4 <__retarget_lock_release_recursive>
 801b57a:	e7dd      	b.n	801b538 <_fflush_r+0xc>

0801b57c <fflush>:
 801b57c:	4601      	mov	r1, r0
 801b57e:	b920      	cbnz	r0, 801b58a <fflush+0xe>
 801b580:	4a04      	ldr	r2, [pc, #16]	@ (801b594 <fflush+0x18>)
 801b582:	4905      	ldr	r1, [pc, #20]	@ (801b598 <fflush+0x1c>)
 801b584:	4805      	ldr	r0, [pc, #20]	@ (801b59c <fflush+0x20>)
 801b586:	f000 b8b1 	b.w	801b6ec <_fwalk_sglue>
 801b58a:	4b05      	ldr	r3, [pc, #20]	@ (801b5a0 <fflush+0x24>)
 801b58c:	6818      	ldr	r0, [r3, #0]
 801b58e:	f7ff bfcd 	b.w	801b52c <_fflush_r>
 801b592:	bf00      	nop
 801b594:	20000078 	.word	0x20000078
 801b598:	0801b52d 	.word	0x0801b52d
 801b59c:	20000088 	.word	0x20000088
 801b5a0:	20000084 	.word	0x20000084

0801b5a4 <std>:
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	b510      	push	{r4, lr}
 801b5a8:	4604      	mov	r4, r0
 801b5aa:	e9c0 3300 	strd	r3, r3, [r0]
 801b5ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b5b2:	6083      	str	r3, [r0, #8]
 801b5b4:	8181      	strh	r1, [r0, #12]
 801b5b6:	6643      	str	r3, [r0, #100]	@ 0x64
 801b5b8:	81c2      	strh	r2, [r0, #14]
 801b5ba:	6183      	str	r3, [r0, #24]
 801b5bc:	4619      	mov	r1, r3
 801b5be:	2208      	movs	r2, #8
 801b5c0:	305c      	adds	r0, #92	@ 0x5c
 801b5c2:	f000 fa11 	bl	801b9e8 <memset>
 801b5c6:	4b0d      	ldr	r3, [pc, #52]	@ (801b5fc <std+0x58>)
 801b5c8:	6263      	str	r3, [r4, #36]	@ 0x24
 801b5ca:	4b0d      	ldr	r3, [pc, #52]	@ (801b600 <std+0x5c>)
 801b5cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b5ce:	4b0d      	ldr	r3, [pc, #52]	@ (801b604 <std+0x60>)
 801b5d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b5d2:	4b0d      	ldr	r3, [pc, #52]	@ (801b608 <std+0x64>)
 801b5d4:	6323      	str	r3, [r4, #48]	@ 0x30
 801b5d6:	4b0d      	ldr	r3, [pc, #52]	@ (801b60c <std+0x68>)
 801b5d8:	6224      	str	r4, [r4, #32]
 801b5da:	429c      	cmp	r4, r3
 801b5dc:	d006      	beq.n	801b5ec <std+0x48>
 801b5de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b5e2:	4294      	cmp	r4, r2
 801b5e4:	d002      	beq.n	801b5ec <std+0x48>
 801b5e6:	33d0      	adds	r3, #208	@ 0xd0
 801b5e8:	429c      	cmp	r4, r3
 801b5ea:	d105      	bne.n	801b5f8 <std+0x54>
 801b5ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b5f4:	f000 ba7c 	b.w	801baf0 <__retarget_lock_init_recursive>
 801b5f8:	bd10      	pop	{r4, pc}
 801b5fa:	bf00      	nop
 801b5fc:	0801b819 	.word	0x0801b819
 801b600:	0801b83b 	.word	0x0801b83b
 801b604:	0801b873 	.word	0x0801b873
 801b608:	0801b897 	.word	0x0801b897
 801b60c:	20011f18 	.word	0x20011f18

0801b610 <stdio_exit_handler>:
 801b610:	4a02      	ldr	r2, [pc, #8]	@ (801b61c <stdio_exit_handler+0xc>)
 801b612:	4903      	ldr	r1, [pc, #12]	@ (801b620 <stdio_exit_handler+0x10>)
 801b614:	4803      	ldr	r0, [pc, #12]	@ (801b624 <stdio_exit_handler+0x14>)
 801b616:	f000 b869 	b.w	801b6ec <_fwalk_sglue>
 801b61a:	bf00      	nop
 801b61c:	20000078 	.word	0x20000078
 801b620:	0801b52d 	.word	0x0801b52d
 801b624:	20000088 	.word	0x20000088

0801b628 <cleanup_stdio>:
 801b628:	6841      	ldr	r1, [r0, #4]
 801b62a:	4b0c      	ldr	r3, [pc, #48]	@ (801b65c <cleanup_stdio+0x34>)
 801b62c:	4299      	cmp	r1, r3
 801b62e:	b510      	push	{r4, lr}
 801b630:	4604      	mov	r4, r0
 801b632:	d001      	beq.n	801b638 <cleanup_stdio+0x10>
 801b634:	f7ff ff7a 	bl	801b52c <_fflush_r>
 801b638:	68a1      	ldr	r1, [r4, #8]
 801b63a:	4b09      	ldr	r3, [pc, #36]	@ (801b660 <cleanup_stdio+0x38>)
 801b63c:	4299      	cmp	r1, r3
 801b63e:	d002      	beq.n	801b646 <cleanup_stdio+0x1e>
 801b640:	4620      	mov	r0, r4
 801b642:	f7ff ff73 	bl	801b52c <_fflush_r>
 801b646:	68e1      	ldr	r1, [r4, #12]
 801b648:	4b06      	ldr	r3, [pc, #24]	@ (801b664 <cleanup_stdio+0x3c>)
 801b64a:	4299      	cmp	r1, r3
 801b64c:	d004      	beq.n	801b658 <cleanup_stdio+0x30>
 801b64e:	4620      	mov	r0, r4
 801b650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b654:	f7ff bf6a 	b.w	801b52c <_fflush_r>
 801b658:	bd10      	pop	{r4, pc}
 801b65a:	bf00      	nop
 801b65c:	20011f18 	.word	0x20011f18
 801b660:	20011f80 	.word	0x20011f80
 801b664:	20011fe8 	.word	0x20011fe8

0801b668 <global_stdio_init.part.0>:
 801b668:	b510      	push	{r4, lr}
 801b66a:	4b0b      	ldr	r3, [pc, #44]	@ (801b698 <global_stdio_init.part.0+0x30>)
 801b66c:	4c0b      	ldr	r4, [pc, #44]	@ (801b69c <global_stdio_init.part.0+0x34>)
 801b66e:	4a0c      	ldr	r2, [pc, #48]	@ (801b6a0 <global_stdio_init.part.0+0x38>)
 801b670:	601a      	str	r2, [r3, #0]
 801b672:	4620      	mov	r0, r4
 801b674:	2200      	movs	r2, #0
 801b676:	2104      	movs	r1, #4
 801b678:	f7ff ff94 	bl	801b5a4 <std>
 801b67c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b680:	2201      	movs	r2, #1
 801b682:	2109      	movs	r1, #9
 801b684:	f7ff ff8e 	bl	801b5a4 <std>
 801b688:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b68c:	2202      	movs	r2, #2
 801b68e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b692:	2112      	movs	r1, #18
 801b694:	f7ff bf86 	b.w	801b5a4 <std>
 801b698:	20012050 	.word	0x20012050
 801b69c:	20011f18 	.word	0x20011f18
 801b6a0:	0801b611 	.word	0x0801b611

0801b6a4 <__sfp_lock_acquire>:
 801b6a4:	4801      	ldr	r0, [pc, #4]	@ (801b6ac <__sfp_lock_acquire+0x8>)
 801b6a6:	f000 ba24 	b.w	801baf2 <__retarget_lock_acquire_recursive>
 801b6aa:	bf00      	nop
 801b6ac:	20012055 	.word	0x20012055

0801b6b0 <__sfp_lock_release>:
 801b6b0:	4801      	ldr	r0, [pc, #4]	@ (801b6b8 <__sfp_lock_release+0x8>)
 801b6b2:	f000 ba1f 	b.w	801baf4 <__retarget_lock_release_recursive>
 801b6b6:	bf00      	nop
 801b6b8:	20012055 	.word	0x20012055

0801b6bc <__sinit>:
 801b6bc:	b510      	push	{r4, lr}
 801b6be:	4604      	mov	r4, r0
 801b6c0:	f7ff fff0 	bl	801b6a4 <__sfp_lock_acquire>
 801b6c4:	6a23      	ldr	r3, [r4, #32]
 801b6c6:	b11b      	cbz	r3, 801b6d0 <__sinit+0x14>
 801b6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b6cc:	f7ff bff0 	b.w	801b6b0 <__sfp_lock_release>
 801b6d0:	4b04      	ldr	r3, [pc, #16]	@ (801b6e4 <__sinit+0x28>)
 801b6d2:	6223      	str	r3, [r4, #32]
 801b6d4:	4b04      	ldr	r3, [pc, #16]	@ (801b6e8 <__sinit+0x2c>)
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d1f5      	bne.n	801b6c8 <__sinit+0xc>
 801b6dc:	f7ff ffc4 	bl	801b668 <global_stdio_init.part.0>
 801b6e0:	e7f2      	b.n	801b6c8 <__sinit+0xc>
 801b6e2:	bf00      	nop
 801b6e4:	0801b629 	.word	0x0801b629
 801b6e8:	20012050 	.word	0x20012050

0801b6ec <_fwalk_sglue>:
 801b6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b6f0:	4607      	mov	r7, r0
 801b6f2:	4688      	mov	r8, r1
 801b6f4:	4614      	mov	r4, r2
 801b6f6:	2600      	movs	r6, #0
 801b6f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b6fc:	f1b9 0901 	subs.w	r9, r9, #1
 801b700:	d505      	bpl.n	801b70e <_fwalk_sglue+0x22>
 801b702:	6824      	ldr	r4, [r4, #0]
 801b704:	2c00      	cmp	r4, #0
 801b706:	d1f7      	bne.n	801b6f8 <_fwalk_sglue+0xc>
 801b708:	4630      	mov	r0, r6
 801b70a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b70e:	89ab      	ldrh	r3, [r5, #12]
 801b710:	2b01      	cmp	r3, #1
 801b712:	d907      	bls.n	801b724 <_fwalk_sglue+0x38>
 801b714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b718:	3301      	adds	r3, #1
 801b71a:	d003      	beq.n	801b724 <_fwalk_sglue+0x38>
 801b71c:	4629      	mov	r1, r5
 801b71e:	4638      	mov	r0, r7
 801b720:	47c0      	blx	r8
 801b722:	4306      	orrs	r6, r0
 801b724:	3568      	adds	r5, #104	@ 0x68
 801b726:	e7e9      	b.n	801b6fc <_fwalk_sglue+0x10>

0801b728 <iprintf>:
 801b728:	b40f      	push	{r0, r1, r2, r3}
 801b72a:	b507      	push	{r0, r1, r2, lr}
 801b72c:	4906      	ldr	r1, [pc, #24]	@ (801b748 <iprintf+0x20>)
 801b72e:	ab04      	add	r3, sp, #16
 801b730:	6808      	ldr	r0, [r1, #0]
 801b732:	f853 2b04 	ldr.w	r2, [r3], #4
 801b736:	6881      	ldr	r1, [r0, #8]
 801b738:	9301      	str	r3, [sp, #4]
 801b73a:	f000 fb33 	bl	801bda4 <_vfiprintf_r>
 801b73e:	b003      	add	sp, #12
 801b740:	f85d eb04 	ldr.w	lr, [sp], #4
 801b744:	b004      	add	sp, #16
 801b746:	4770      	bx	lr
 801b748:	20000084 	.word	0x20000084

0801b74c <putchar>:
 801b74c:	4b02      	ldr	r3, [pc, #8]	@ (801b758 <putchar+0xc>)
 801b74e:	4601      	mov	r1, r0
 801b750:	6818      	ldr	r0, [r3, #0]
 801b752:	6882      	ldr	r2, [r0, #8]
 801b754:	f000 be40 	b.w	801c3d8 <_putc_r>
 801b758:	20000084 	.word	0x20000084

0801b75c <_puts_r>:
 801b75c:	6a03      	ldr	r3, [r0, #32]
 801b75e:	b570      	push	{r4, r5, r6, lr}
 801b760:	6884      	ldr	r4, [r0, #8]
 801b762:	4605      	mov	r5, r0
 801b764:	460e      	mov	r6, r1
 801b766:	b90b      	cbnz	r3, 801b76c <_puts_r+0x10>
 801b768:	f7ff ffa8 	bl	801b6bc <__sinit>
 801b76c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b76e:	07db      	lsls	r3, r3, #31
 801b770:	d405      	bmi.n	801b77e <_puts_r+0x22>
 801b772:	89a3      	ldrh	r3, [r4, #12]
 801b774:	0598      	lsls	r0, r3, #22
 801b776:	d402      	bmi.n	801b77e <_puts_r+0x22>
 801b778:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b77a:	f000 f9ba 	bl	801baf2 <__retarget_lock_acquire_recursive>
 801b77e:	89a3      	ldrh	r3, [r4, #12]
 801b780:	0719      	lsls	r1, r3, #28
 801b782:	d502      	bpl.n	801b78a <_puts_r+0x2e>
 801b784:	6923      	ldr	r3, [r4, #16]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d135      	bne.n	801b7f6 <_puts_r+0x9a>
 801b78a:	4621      	mov	r1, r4
 801b78c:	4628      	mov	r0, r5
 801b78e:	f000 f8c5 	bl	801b91c <__swsetup_r>
 801b792:	b380      	cbz	r0, 801b7f6 <_puts_r+0x9a>
 801b794:	f04f 35ff 	mov.w	r5, #4294967295
 801b798:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b79a:	07da      	lsls	r2, r3, #31
 801b79c:	d405      	bmi.n	801b7aa <_puts_r+0x4e>
 801b79e:	89a3      	ldrh	r3, [r4, #12]
 801b7a0:	059b      	lsls	r3, r3, #22
 801b7a2:	d402      	bmi.n	801b7aa <_puts_r+0x4e>
 801b7a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b7a6:	f000 f9a5 	bl	801baf4 <__retarget_lock_release_recursive>
 801b7aa:	4628      	mov	r0, r5
 801b7ac:	bd70      	pop	{r4, r5, r6, pc}
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	da04      	bge.n	801b7bc <_puts_r+0x60>
 801b7b2:	69a2      	ldr	r2, [r4, #24]
 801b7b4:	429a      	cmp	r2, r3
 801b7b6:	dc17      	bgt.n	801b7e8 <_puts_r+0x8c>
 801b7b8:	290a      	cmp	r1, #10
 801b7ba:	d015      	beq.n	801b7e8 <_puts_r+0x8c>
 801b7bc:	6823      	ldr	r3, [r4, #0]
 801b7be:	1c5a      	adds	r2, r3, #1
 801b7c0:	6022      	str	r2, [r4, #0]
 801b7c2:	7019      	strb	r1, [r3, #0]
 801b7c4:	68a3      	ldr	r3, [r4, #8]
 801b7c6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b7ca:	3b01      	subs	r3, #1
 801b7cc:	60a3      	str	r3, [r4, #8]
 801b7ce:	2900      	cmp	r1, #0
 801b7d0:	d1ed      	bne.n	801b7ae <_puts_r+0x52>
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	da11      	bge.n	801b7fa <_puts_r+0x9e>
 801b7d6:	4622      	mov	r2, r4
 801b7d8:	210a      	movs	r1, #10
 801b7da:	4628      	mov	r0, r5
 801b7dc:	f000 f85f 	bl	801b89e <__swbuf_r>
 801b7e0:	3001      	adds	r0, #1
 801b7e2:	d0d7      	beq.n	801b794 <_puts_r+0x38>
 801b7e4:	250a      	movs	r5, #10
 801b7e6:	e7d7      	b.n	801b798 <_puts_r+0x3c>
 801b7e8:	4622      	mov	r2, r4
 801b7ea:	4628      	mov	r0, r5
 801b7ec:	f000 f857 	bl	801b89e <__swbuf_r>
 801b7f0:	3001      	adds	r0, #1
 801b7f2:	d1e7      	bne.n	801b7c4 <_puts_r+0x68>
 801b7f4:	e7ce      	b.n	801b794 <_puts_r+0x38>
 801b7f6:	3e01      	subs	r6, #1
 801b7f8:	e7e4      	b.n	801b7c4 <_puts_r+0x68>
 801b7fa:	6823      	ldr	r3, [r4, #0]
 801b7fc:	1c5a      	adds	r2, r3, #1
 801b7fe:	6022      	str	r2, [r4, #0]
 801b800:	220a      	movs	r2, #10
 801b802:	701a      	strb	r2, [r3, #0]
 801b804:	e7ee      	b.n	801b7e4 <_puts_r+0x88>
	...

0801b808 <puts>:
 801b808:	4b02      	ldr	r3, [pc, #8]	@ (801b814 <puts+0xc>)
 801b80a:	4601      	mov	r1, r0
 801b80c:	6818      	ldr	r0, [r3, #0]
 801b80e:	f7ff bfa5 	b.w	801b75c <_puts_r>
 801b812:	bf00      	nop
 801b814:	20000084 	.word	0x20000084

0801b818 <__sread>:
 801b818:	b510      	push	{r4, lr}
 801b81a:	460c      	mov	r4, r1
 801b81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b820:	f000 f91e 	bl	801ba60 <_read_r>
 801b824:	2800      	cmp	r0, #0
 801b826:	bfab      	itete	ge
 801b828:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b82a:	89a3      	ldrhlt	r3, [r4, #12]
 801b82c:	181b      	addge	r3, r3, r0
 801b82e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b832:	bfac      	ite	ge
 801b834:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b836:	81a3      	strhlt	r3, [r4, #12]
 801b838:	bd10      	pop	{r4, pc}

0801b83a <__swrite>:
 801b83a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b83e:	461f      	mov	r7, r3
 801b840:	898b      	ldrh	r3, [r1, #12]
 801b842:	05db      	lsls	r3, r3, #23
 801b844:	4605      	mov	r5, r0
 801b846:	460c      	mov	r4, r1
 801b848:	4616      	mov	r6, r2
 801b84a:	d505      	bpl.n	801b858 <__swrite+0x1e>
 801b84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b850:	2302      	movs	r3, #2
 801b852:	2200      	movs	r2, #0
 801b854:	f000 f8f2 	bl	801ba3c <_lseek_r>
 801b858:	89a3      	ldrh	r3, [r4, #12]
 801b85a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b85e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b862:	81a3      	strh	r3, [r4, #12]
 801b864:	4632      	mov	r2, r6
 801b866:	463b      	mov	r3, r7
 801b868:	4628      	mov	r0, r5
 801b86a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b86e:	f000 b909 	b.w	801ba84 <_write_r>

0801b872 <__sseek>:
 801b872:	b510      	push	{r4, lr}
 801b874:	460c      	mov	r4, r1
 801b876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b87a:	f000 f8df 	bl	801ba3c <_lseek_r>
 801b87e:	1c43      	adds	r3, r0, #1
 801b880:	89a3      	ldrh	r3, [r4, #12]
 801b882:	bf15      	itete	ne
 801b884:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b886:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b88a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b88e:	81a3      	strheq	r3, [r4, #12]
 801b890:	bf18      	it	ne
 801b892:	81a3      	strhne	r3, [r4, #12]
 801b894:	bd10      	pop	{r4, pc}

0801b896 <__sclose>:
 801b896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b89a:	f000 b8bf 	b.w	801ba1c <_close_r>

0801b89e <__swbuf_r>:
 801b89e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8a0:	460e      	mov	r6, r1
 801b8a2:	4614      	mov	r4, r2
 801b8a4:	4605      	mov	r5, r0
 801b8a6:	b118      	cbz	r0, 801b8b0 <__swbuf_r+0x12>
 801b8a8:	6a03      	ldr	r3, [r0, #32]
 801b8aa:	b90b      	cbnz	r3, 801b8b0 <__swbuf_r+0x12>
 801b8ac:	f7ff ff06 	bl	801b6bc <__sinit>
 801b8b0:	69a3      	ldr	r3, [r4, #24]
 801b8b2:	60a3      	str	r3, [r4, #8]
 801b8b4:	89a3      	ldrh	r3, [r4, #12]
 801b8b6:	071a      	lsls	r2, r3, #28
 801b8b8:	d501      	bpl.n	801b8be <__swbuf_r+0x20>
 801b8ba:	6923      	ldr	r3, [r4, #16]
 801b8bc:	b943      	cbnz	r3, 801b8d0 <__swbuf_r+0x32>
 801b8be:	4621      	mov	r1, r4
 801b8c0:	4628      	mov	r0, r5
 801b8c2:	f000 f82b 	bl	801b91c <__swsetup_r>
 801b8c6:	b118      	cbz	r0, 801b8d0 <__swbuf_r+0x32>
 801b8c8:	f04f 37ff 	mov.w	r7, #4294967295
 801b8cc:	4638      	mov	r0, r7
 801b8ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b8d0:	6823      	ldr	r3, [r4, #0]
 801b8d2:	6922      	ldr	r2, [r4, #16]
 801b8d4:	1a98      	subs	r0, r3, r2
 801b8d6:	6963      	ldr	r3, [r4, #20]
 801b8d8:	b2f6      	uxtb	r6, r6
 801b8da:	4283      	cmp	r3, r0
 801b8dc:	4637      	mov	r7, r6
 801b8de:	dc05      	bgt.n	801b8ec <__swbuf_r+0x4e>
 801b8e0:	4621      	mov	r1, r4
 801b8e2:	4628      	mov	r0, r5
 801b8e4:	f7ff fe22 	bl	801b52c <_fflush_r>
 801b8e8:	2800      	cmp	r0, #0
 801b8ea:	d1ed      	bne.n	801b8c8 <__swbuf_r+0x2a>
 801b8ec:	68a3      	ldr	r3, [r4, #8]
 801b8ee:	3b01      	subs	r3, #1
 801b8f0:	60a3      	str	r3, [r4, #8]
 801b8f2:	6823      	ldr	r3, [r4, #0]
 801b8f4:	1c5a      	adds	r2, r3, #1
 801b8f6:	6022      	str	r2, [r4, #0]
 801b8f8:	701e      	strb	r6, [r3, #0]
 801b8fa:	6962      	ldr	r2, [r4, #20]
 801b8fc:	1c43      	adds	r3, r0, #1
 801b8fe:	429a      	cmp	r2, r3
 801b900:	d004      	beq.n	801b90c <__swbuf_r+0x6e>
 801b902:	89a3      	ldrh	r3, [r4, #12]
 801b904:	07db      	lsls	r3, r3, #31
 801b906:	d5e1      	bpl.n	801b8cc <__swbuf_r+0x2e>
 801b908:	2e0a      	cmp	r6, #10
 801b90a:	d1df      	bne.n	801b8cc <__swbuf_r+0x2e>
 801b90c:	4621      	mov	r1, r4
 801b90e:	4628      	mov	r0, r5
 801b910:	f7ff fe0c 	bl	801b52c <_fflush_r>
 801b914:	2800      	cmp	r0, #0
 801b916:	d0d9      	beq.n	801b8cc <__swbuf_r+0x2e>
 801b918:	e7d6      	b.n	801b8c8 <__swbuf_r+0x2a>
	...

0801b91c <__swsetup_r>:
 801b91c:	b538      	push	{r3, r4, r5, lr}
 801b91e:	4b29      	ldr	r3, [pc, #164]	@ (801b9c4 <__swsetup_r+0xa8>)
 801b920:	4605      	mov	r5, r0
 801b922:	6818      	ldr	r0, [r3, #0]
 801b924:	460c      	mov	r4, r1
 801b926:	b118      	cbz	r0, 801b930 <__swsetup_r+0x14>
 801b928:	6a03      	ldr	r3, [r0, #32]
 801b92a:	b90b      	cbnz	r3, 801b930 <__swsetup_r+0x14>
 801b92c:	f7ff fec6 	bl	801b6bc <__sinit>
 801b930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b934:	0719      	lsls	r1, r3, #28
 801b936:	d422      	bmi.n	801b97e <__swsetup_r+0x62>
 801b938:	06da      	lsls	r2, r3, #27
 801b93a:	d407      	bmi.n	801b94c <__swsetup_r+0x30>
 801b93c:	2209      	movs	r2, #9
 801b93e:	602a      	str	r2, [r5, #0]
 801b940:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b944:	81a3      	strh	r3, [r4, #12]
 801b946:	f04f 30ff 	mov.w	r0, #4294967295
 801b94a:	e033      	b.n	801b9b4 <__swsetup_r+0x98>
 801b94c:	0758      	lsls	r0, r3, #29
 801b94e:	d512      	bpl.n	801b976 <__swsetup_r+0x5a>
 801b950:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b952:	b141      	cbz	r1, 801b966 <__swsetup_r+0x4a>
 801b954:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b958:	4299      	cmp	r1, r3
 801b95a:	d002      	beq.n	801b962 <__swsetup_r+0x46>
 801b95c:	4628      	mov	r0, r5
 801b95e:	f000 f8f7 	bl	801bb50 <_free_r>
 801b962:	2300      	movs	r3, #0
 801b964:	6363      	str	r3, [r4, #52]	@ 0x34
 801b966:	89a3      	ldrh	r3, [r4, #12]
 801b968:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b96c:	81a3      	strh	r3, [r4, #12]
 801b96e:	2300      	movs	r3, #0
 801b970:	6063      	str	r3, [r4, #4]
 801b972:	6923      	ldr	r3, [r4, #16]
 801b974:	6023      	str	r3, [r4, #0]
 801b976:	89a3      	ldrh	r3, [r4, #12]
 801b978:	f043 0308 	orr.w	r3, r3, #8
 801b97c:	81a3      	strh	r3, [r4, #12]
 801b97e:	6923      	ldr	r3, [r4, #16]
 801b980:	b94b      	cbnz	r3, 801b996 <__swsetup_r+0x7a>
 801b982:	89a3      	ldrh	r3, [r4, #12]
 801b984:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b98c:	d003      	beq.n	801b996 <__swsetup_r+0x7a>
 801b98e:	4621      	mov	r1, r4
 801b990:	4628      	mov	r0, r5
 801b992:	f000 fce5 	bl	801c360 <__smakebuf_r>
 801b996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b99a:	f013 0201 	ands.w	r2, r3, #1
 801b99e:	d00a      	beq.n	801b9b6 <__swsetup_r+0x9a>
 801b9a0:	2200      	movs	r2, #0
 801b9a2:	60a2      	str	r2, [r4, #8]
 801b9a4:	6962      	ldr	r2, [r4, #20]
 801b9a6:	4252      	negs	r2, r2
 801b9a8:	61a2      	str	r2, [r4, #24]
 801b9aa:	6922      	ldr	r2, [r4, #16]
 801b9ac:	b942      	cbnz	r2, 801b9c0 <__swsetup_r+0xa4>
 801b9ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b9b2:	d1c5      	bne.n	801b940 <__swsetup_r+0x24>
 801b9b4:	bd38      	pop	{r3, r4, r5, pc}
 801b9b6:	0799      	lsls	r1, r3, #30
 801b9b8:	bf58      	it	pl
 801b9ba:	6962      	ldrpl	r2, [r4, #20]
 801b9bc:	60a2      	str	r2, [r4, #8]
 801b9be:	e7f4      	b.n	801b9aa <__swsetup_r+0x8e>
 801b9c0:	2000      	movs	r0, #0
 801b9c2:	e7f7      	b.n	801b9b4 <__swsetup_r+0x98>
 801b9c4:	20000084 	.word	0x20000084

0801b9c8 <memcmp>:
 801b9c8:	b510      	push	{r4, lr}
 801b9ca:	3901      	subs	r1, #1
 801b9cc:	4402      	add	r2, r0
 801b9ce:	4290      	cmp	r0, r2
 801b9d0:	d101      	bne.n	801b9d6 <memcmp+0xe>
 801b9d2:	2000      	movs	r0, #0
 801b9d4:	e005      	b.n	801b9e2 <memcmp+0x1a>
 801b9d6:	7803      	ldrb	r3, [r0, #0]
 801b9d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b9dc:	42a3      	cmp	r3, r4
 801b9de:	d001      	beq.n	801b9e4 <memcmp+0x1c>
 801b9e0:	1b18      	subs	r0, r3, r4
 801b9e2:	bd10      	pop	{r4, pc}
 801b9e4:	3001      	adds	r0, #1
 801b9e6:	e7f2      	b.n	801b9ce <memcmp+0x6>

0801b9e8 <memset>:
 801b9e8:	4402      	add	r2, r0
 801b9ea:	4603      	mov	r3, r0
 801b9ec:	4293      	cmp	r3, r2
 801b9ee:	d100      	bne.n	801b9f2 <memset+0xa>
 801b9f0:	4770      	bx	lr
 801b9f2:	f803 1b01 	strb.w	r1, [r3], #1
 801b9f6:	e7f9      	b.n	801b9ec <memset+0x4>

0801b9f8 <strncmp>:
 801b9f8:	b510      	push	{r4, lr}
 801b9fa:	b16a      	cbz	r2, 801ba18 <strncmp+0x20>
 801b9fc:	3901      	subs	r1, #1
 801b9fe:	1884      	adds	r4, r0, r2
 801ba00:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ba04:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801ba08:	429a      	cmp	r2, r3
 801ba0a:	d103      	bne.n	801ba14 <strncmp+0x1c>
 801ba0c:	42a0      	cmp	r0, r4
 801ba0e:	d001      	beq.n	801ba14 <strncmp+0x1c>
 801ba10:	2a00      	cmp	r2, #0
 801ba12:	d1f5      	bne.n	801ba00 <strncmp+0x8>
 801ba14:	1ad0      	subs	r0, r2, r3
 801ba16:	bd10      	pop	{r4, pc}
 801ba18:	4610      	mov	r0, r2
 801ba1a:	e7fc      	b.n	801ba16 <strncmp+0x1e>

0801ba1c <_close_r>:
 801ba1c:	b538      	push	{r3, r4, r5, lr}
 801ba1e:	4d06      	ldr	r5, [pc, #24]	@ (801ba38 <_close_r+0x1c>)
 801ba20:	2300      	movs	r3, #0
 801ba22:	4604      	mov	r4, r0
 801ba24:	4608      	mov	r0, r1
 801ba26:	602b      	str	r3, [r5, #0]
 801ba28:	f7e5 f8ca 	bl	8000bc0 <_close>
 801ba2c:	1c43      	adds	r3, r0, #1
 801ba2e:	d102      	bne.n	801ba36 <_close_r+0x1a>
 801ba30:	682b      	ldr	r3, [r5, #0]
 801ba32:	b103      	cbz	r3, 801ba36 <_close_r+0x1a>
 801ba34:	6023      	str	r3, [r4, #0]
 801ba36:	bd38      	pop	{r3, r4, r5, pc}
 801ba38:	20011f10 	.word	0x20011f10

0801ba3c <_lseek_r>:
 801ba3c:	b538      	push	{r3, r4, r5, lr}
 801ba3e:	4d07      	ldr	r5, [pc, #28]	@ (801ba5c <_lseek_r+0x20>)
 801ba40:	4604      	mov	r4, r0
 801ba42:	4608      	mov	r0, r1
 801ba44:	4611      	mov	r1, r2
 801ba46:	2200      	movs	r2, #0
 801ba48:	602a      	str	r2, [r5, #0]
 801ba4a:	461a      	mov	r2, r3
 801ba4c:	f7e5 f8df 	bl	8000c0e <_lseek>
 801ba50:	1c43      	adds	r3, r0, #1
 801ba52:	d102      	bne.n	801ba5a <_lseek_r+0x1e>
 801ba54:	682b      	ldr	r3, [r5, #0]
 801ba56:	b103      	cbz	r3, 801ba5a <_lseek_r+0x1e>
 801ba58:	6023      	str	r3, [r4, #0]
 801ba5a:	bd38      	pop	{r3, r4, r5, pc}
 801ba5c:	20011f10 	.word	0x20011f10

0801ba60 <_read_r>:
 801ba60:	b538      	push	{r3, r4, r5, lr}
 801ba62:	4d07      	ldr	r5, [pc, #28]	@ (801ba80 <_read_r+0x20>)
 801ba64:	4604      	mov	r4, r0
 801ba66:	4608      	mov	r0, r1
 801ba68:	4611      	mov	r1, r2
 801ba6a:	2200      	movs	r2, #0
 801ba6c:	602a      	str	r2, [r5, #0]
 801ba6e:	461a      	mov	r2, r3
 801ba70:	f7e5 f889 	bl	8000b86 <_read>
 801ba74:	1c43      	adds	r3, r0, #1
 801ba76:	d102      	bne.n	801ba7e <_read_r+0x1e>
 801ba78:	682b      	ldr	r3, [r5, #0]
 801ba7a:	b103      	cbz	r3, 801ba7e <_read_r+0x1e>
 801ba7c:	6023      	str	r3, [r4, #0]
 801ba7e:	bd38      	pop	{r3, r4, r5, pc}
 801ba80:	20011f10 	.word	0x20011f10

0801ba84 <_write_r>:
 801ba84:	b538      	push	{r3, r4, r5, lr}
 801ba86:	4d07      	ldr	r5, [pc, #28]	@ (801baa4 <_write_r+0x20>)
 801ba88:	4604      	mov	r4, r0
 801ba8a:	4608      	mov	r0, r1
 801ba8c:	4611      	mov	r1, r2
 801ba8e:	2200      	movs	r2, #0
 801ba90:	602a      	str	r2, [r5, #0]
 801ba92:	461a      	mov	r2, r3
 801ba94:	f7e4 ff36 	bl	8000904 <_write>
 801ba98:	1c43      	adds	r3, r0, #1
 801ba9a:	d102      	bne.n	801baa2 <_write_r+0x1e>
 801ba9c:	682b      	ldr	r3, [r5, #0]
 801ba9e:	b103      	cbz	r3, 801baa2 <_write_r+0x1e>
 801baa0:	6023      	str	r3, [r4, #0]
 801baa2:	bd38      	pop	{r3, r4, r5, pc}
 801baa4:	20011f10 	.word	0x20011f10

0801baa8 <__libc_init_array>:
 801baa8:	b570      	push	{r4, r5, r6, lr}
 801baaa:	4d0d      	ldr	r5, [pc, #52]	@ (801bae0 <__libc_init_array+0x38>)
 801baac:	4c0d      	ldr	r4, [pc, #52]	@ (801bae4 <__libc_init_array+0x3c>)
 801baae:	1b64      	subs	r4, r4, r5
 801bab0:	10a4      	asrs	r4, r4, #2
 801bab2:	2600      	movs	r6, #0
 801bab4:	42a6      	cmp	r6, r4
 801bab6:	d109      	bne.n	801bacc <__libc_init_array+0x24>
 801bab8:	4d0b      	ldr	r5, [pc, #44]	@ (801bae8 <__libc_init_array+0x40>)
 801baba:	4c0c      	ldr	r4, [pc, #48]	@ (801baec <__libc_init_array+0x44>)
 801babc:	f000 fd3e 	bl	801c53c <_init>
 801bac0:	1b64      	subs	r4, r4, r5
 801bac2:	10a4      	asrs	r4, r4, #2
 801bac4:	2600      	movs	r6, #0
 801bac6:	42a6      	cmp	r6, r4
 801bac8:	d105      	bne.n	801bad6 <__libc_init_array+0x2e>
 801baca:	bd70      	pop	{r4, r5, r6, pc}
 801bacc:	f855 3b04 	ldr.w	r3, [r5], #4
 801bad0:	4798      	blx	r3
 801bad2:	3601      	adds	r6, #1
 801bad4:	e7ee      	b.n	801bab4 <__libc_init_array+0xc>
 801bad6:	f855 3b04 	ldr.w	r3, [r5], #4
 801bada:	4798      	blx	r3
 801badc:	3601      	adds	r6, #1
 801bade:	e7f2      	b.n	801bac6 <__libc_init_array+0x1e>
 801bae0:	0802536c 	.word	0x0802536c
 801bae4:	0802536c 	.word	0x0802536c
 801bae8:	0802536c 	.word	0x0802536c
 801baec:	08025370 	.word	0x08025370

0801baf0 <__retarget_lock_init_recursive>:
 801baf0:	4770      	bx	lr

0801baf2 <__retarget_lock_acquire_recursive>:
 801baf2:	4770      	bx	lr

0801baf4 <__retarget_lock_release_recursive>:
 801baf4:	4770      	bx	lr

0801baf6 <memcpy>:
 801baf6:	440a      	add	r2, r1
 801baf8:	4291      	cmp	r1, r2
 801bafa:	f100 33ff 	add.w	r3, r0, #4294967295
 801bafe:	d100      	bne.n	801bb02 <memcpy+0xc>
 801bb00:	4770      	bx	lr
 801bb02:	b510      	push	{r4, lr}
 801bb04:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bb08:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bb0c:	4291      	cmp	r1, r2
 801bb0e:	d1f9      	bne.n	801bb04 <memcpy+0xe>
 801bb10:	bd10      	pop	{r4, pc}
	...

0801bb14 <__assert_func>:
 801bb14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bb16:	4614      	mov	r4, r2
 801bb18:	461a      	mov	r2, r3
 801bb1a:	4b09      	ldr	r3, [pc, #36]	@ (801bb40 <__assert_func+0x2c>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	4605      	mov	r5, r0
 801bb20:	68d8      	ldr	r0, [r3, #12]
 801bb22:	b954      	cbnz	r4, 801bb3a <__assert_func+0x26>
 801bb24:	4b07      	ldr	r3, [pc, #28]	@ (801bb44 <__assert_func+0x30>)
 801bb26:	461c      	mov	r4, r3
 801bb28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bb2c:	9100      	str	r1, [sp, #0]
 801bb2e:	462b      	mov	r3, r5
 801bb30:	4905      	ldr	r1, [pc, #20]	@ (801bb48 <__assert_func+0x34>)
 801bb32:	f000 fbdd 	bl	801c2f0 <fiprintf>
 801bb36:	f000 fcb5 	bl	801c4a4 <abort>
 801bb3a:	4b04      	ldr	r3, [pc, #16]	@ (801bb4c <__assert_func+0x38>)
 801bb3c:	e7f4      	b.n	801bb28 <__assert_func+0x14>
 801bb3e:	bf00      	nop
 801bb40:	20000084 	.word	0x20000084
 801bb44:	08025330 	.word	0x08025330
 801bb48:	08025302 	.word	0x08025302
 801bb4c:	080252f5 	.word	0x080252f5

0801bb50 <_free_r>:
 801bb50:	b538      	push	{r3, r4, r5, lr}
 801bb52:	4605      	mov	r5, r0
 801bb54:	2900      	cmp	r1, #0
 801bb56:	d041      	beq.n	801bbdc <_free_r+0x8c>
 801bb58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bb5c:	1f0c      	subs	r4, r1, #4
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	bfb8      	it	lt
 801bb62:	18e4      	addlt	r4, r4, r3
 801bb64:	f000 f8e8 	bl	801bd38 <__malloc_lock>
 801bb68:	4a1d      	ldr	r2, [pc, #116]	@ (801bbe0 <_free_r+0x90>)
 801bb6a:	6813      	ldr	r3, [r2, #0]
 801bb6c:	b933      	cbnz	r3, 801bb7c <_free_r+0x2c>
 801bb6e:	6063      	str	r3, [r4, #4]
 801bb70:	6014      	str	r4, [r2, #0]
 801bb72:	4628      	mov	r0, r5
 801bb74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb78:	f000 b8e4 	b.w	801bd44 <__malloc_unlock>
 801bb7c:	42a3      	cmp	r3, r4
 801bb7e:	d908      	bls.n	801bb92 <_free_r+0x42>
 801bb80:	6820      	ldr	r0, [r4, #0]
 801bb82:	1821      	adds	r1, r4, r0
 801bb84:	428b      	cmp	r3, r1
 801bb86:	bf01      	itttt	eq
 801bb88:	6819      	ldreq	r1, [r3, #0]
 801bb8a:	685b      	ldreq	r3, [r3, #4]
 801bb8c:	1809      	addeq	r1, r1, r0
 801bb8e:	6021      	streq	r1, [r4, #0]
 801bb90:	e7ed      	b.n	801bb6e <_free_r+0x1e>
 801bb92:	461a      	mov	r2, r3
 801bb94:	685b      	ldr	r3, [r3, #4]
 801bb96:	b10b      	cbz	r3, 801bb9c <_free_r+0x4c>
 801bb98:	42a3      	cmp	r3, r4
 801bb9a:	d9fa      	bls.n	801bb92 <_free_r+0x42>
 801bb9c:	6811      	ldr	r1, [r2, #0]
 801bb9e:	1850      	adds	r0, r2, r1
 801bba0:	42a0      	cmp	r0, r4
 801bba2:	d10b      	bne.n	801bbbc <_free_r+0x6c>
 801bba4:	6820      	ldr	r0, [r4, #0]
 801bba6:	4401      	add	r1, r0
 801bba8:	1850      	adds	r0, r2, r1
 801bbaa:	4283      	cmp	r3, r0
 801bbac:	6011      	str	r1, [r2, #0]
 801bbae:	d1e0      	bne.n	801bb72 <_free_r+0x22>
 801bbb0:	6818      	ldr	r0, [r3, #0]
 801bbb2:	685b      	ldr	r3, [r3, #4]
 801bbb4:	6053      	str	r3, [r2, #4]
 801bbb6:	4408      	add	r0, r1
 801bbb8:	6010      	str	r0, [r2, #0]
 801bbba:	e7da      	b.n	801bb72 <_free_r+0x22>
 801bbbc:	d902      	bls.n	801bbc4 <_free_r+0x74>
 801bbbe:	230c      	movs	r3, #12
 801bbc0:	602b      	str	r3, [r5, #0]
 801bbc2:	e7d6      	b.n	801bb72 <_free_r+0x22>
 801bbc4:	6820      	ldr	r0, [r4, #0]
 801bbc6:	1821      	adds	r1, r4, r0
 801bbc8:	428b      	cmp	r3, r1
 801bbca:	bf04      	itt	eq
 801bbcc:	6819      	ldreq	r1, [r3, #0]
 801bbce:	685b      	ldreq	r3, [r3, #4]
 801bbd0:	6063      	str	r3, [r4, #4]
 801bbd2:	bf04      	itt	eq
 801bbd4:	1809      	addeq	r1, r1, r0
 801bbd6:	6021      	streq	r1, [r4, #0]
 801bbd8:	6054      	str	r4, [r2, #4]
 801bbda:	e7ca      	b.n	801bb72 <_free_r+0x22>
 801bbdc:	bd38      	pop	{r3, r4, r5, pc}
 801bbde:	bf00      	nop
 801bbe0:	2001205c 	.word	0x2001205c

0801bbe4 <malloc>:
 801bbe4:	4b02      	ldr	r3, [pc, #8]	@ (801bbf0 <malloc+0xc>)
 801bbe6:	4601      	mov	r1, r0
 801bbe8:	6818      	ldr	r0, [r3, #0]
 801bbea:	f000 b825 	b.w	801bc38 <_malloc_r>
 801bbee:	bf00      	nop
 801bbf0:	20000084 	.word	0x20000084

0801bbf4 <sbrk_aligned>:
 801bbf4:	b570      	push	{r4, r5, r6, lr}
 801bbf6:	4e0f      	ldr	r6, [pc, #60]	@ (801bc34 <sbrk_aligned+0x40>)
 801bbf8:	460c      	mov	r4, r1
 801bbfa:	6831      	ldr	r1, [r6, #0]
 801bbfc:	4605      	mov	r5, r0
 801bbfe:	b911      	cbnz	r1, 801bc06 <sbrk_aligned+0x12>
 801bc00:	f000 fc40 	bl	801c484 <_sbrk_r>
 801bc04:	6030      	str	r0, [r6, #0]
 801bc06:	4621      	mov	r1, r4
 801bc08:	4628      	mov	r0, r5
 801bc0a:	f000 fc3b 	bl	801c484 <_sbrk_r>
 801bc0e:	1c43      	adds	r3, r0, #1
 801bc10:	d103      	bne.n	801bc1a <sbrk_aligned+0x26>
 801bc12:	f04f 34ff 	mov.w	r4, #4294967295
 801bc16:	4620      	mov	r0, r4
 801bc18:	bd70      	pop	{r4, r5, r6, pc}
 801bc1a:	1cc4      	adds	r4, r0, #3
 801bc1c:	f024 0403 	bic.w	r4, r4, #3
 801bc20:	42a0      	cmp	r0, r4
 801bc22:	d0f8      	beq.n	801bc16 <sbrk_aligned+0x22>
 801bc24:	1a21      	subs	r1, r4, r0
 801bc26:	4628      	mov	r0, r5
 801bc28:	f000 fc2c 	bl	801c484 <_sbrk_r>
 801bc2c:	3001      	adds	r0, #1
 801bc2e:	d1f2      	bne.n	801bc16 <sbrk_aligned+0x22>
 801bc30:	e7ef      	b.n	801bc12 <sbrk_aligned+0x1e>
 801bc32:	bf00      	nop
 801bc34:	20012058 	.word	0x20012058

0801bc38 <_malloc_r>:
 801bc38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bc3c:	1ccd      	adds	r5, r1, #3
 801bc3e:	f025 0503 	bic.w	r5, r5, #3
 801bc42:	3508      	adds	r5, #8
 801bc44:	2d0c      	cmp	r5, #12
 801bc46:	bf38      	it	cc
 801bc48:	250c      	movcc	r5, #12
 801bc4a:	2d00      	cmp	r5, #0
 801bc4c:	4606      	mov	r6, r0
 801bc4e:	db01      	blt.n	801bc54 <_malloc_r+0x1c>
 801bc50:	42a9      	cmp	r1, r5
 801bc52:	d904      	bls.n	801bc5e <_malloc_r+0x26>
 801bc54:	230c      	movs	r3, #12
 801bc56:	6033      	str	r3, [r6, #0]
 801bc58:	2000      	movs	r0, #0
 801bc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bc5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801bd34 <_malloc_r+0xfc>
 801bc62:	f000 f869 	bl	801bd38 <__malloc_lock>
 801bc66:	f8d8 3000 	ldr.w	r3, [r8]
 801bc6a:	461c      	mov	r4, r3
 801bc6c:	bb44      	cbnz	r4, 801bcc0 <_malloc_r+0x88>
 801bc6e:	4629      	mov	r1, r5
 801bc70:	4630      	mov	r0, r6
 801bc72:	f7ff ffbf 	bl	801bbf4 <sbrk_aligned>
 801bc76:	1c43      	adds	r3, r0, #1
 801bc78:	4604      	mov	r4, r0
 801bc7a:	d158      	bne.n	801bd2e <_malloc_r+0xf6>
 801bc7c:	f8d8 4000 	ldr.w	r4, [r8]
 801bc80:	4627      	mov	r7, r4
 801bc82:	2f00      	cmp	r7, #0
 801bc84:	d143      	bne.n	801bd0e <_malloc_r+0xd6>
 801bc86:	2c00      	cmp	r4, #0
 801bc88:	d04b      	beq.n	801bd22 <_malloc_r+0xea>
 801bc8a:	6823      	ldr	r3, [r4, #0]
 801bc8c:	4639      	mov	r1, r7
 801bc8e:	4630      	mov	r0, r6
 801bc90:	eb04 0903 	add.w	r9, r4, r3
 801bc94:	f000 fbf6 	bl	801c484 <_sbrk_r>
 801bc98:	4581      	cmp	r9, r0
 801bc9a:	d142      	bne.n	801bd22 <_malloc_r+0xea>
 801bc9c:	6821      	ldr	r1, [r4, #0]
 801bc9e:	1a6d      	subs	r5, r5, r1
 801bca0:	4629      	mov	r1, r5
 801bca2:	4630      	mov	r0, r6
 801bca4:	f7ff ffa6 	bl	801bbf4 <sbrk_aligned>
 801bca8:	3001      	adds	r0, #1
 801bcaa:	d03a      	beq.n	801bd22 <_malloc_r+0xea>
 801bcac:	6823      	ldr	r3, [r4, #0]
 801bcae:	442b      	add	r3, r5
 801bcb0:	6023      	str	r3, [r4, #0]
 801bcb2:	f8d8 3000 	ldr.w	r3, [r8]
 801bcb6:	685a      	ldr	r2, [r3, #4]
 801bcb8:	bb62      	cbnz	r2, 801bd14 <_malloc_r+0xdc>
 801bcba:	f8c8 7000 	str.w	r7, [r8]
 801bcbe:	e00f      	b.n	801bce0 <_malloc_r+0xa8>
 801bcc0:	6822      	ldr	r2, [r4, #0]
 801bcc2:	1b52      	subs	r2, r2, r5
 801bcc4:	d420      	bmi.n	801bd08 <_malloc_r+0xd0>
 801bcc6:	2a0b      	cmp	r2, #11
 801bcc8:	d917      	bls.n	801bcfa <_malloc_r+0xc2>
 801bcca:	1961      	adds	r1, r4, r5
 801bccc:	42a3      	cmp	r3, r4
 801bcce:	6025      	str	r5, [r4, #0]
 801bcd0:	bf18      	it	ne
 801bcd2:	6059      	strne	r1, [r3, #4]
 801bcd4:	6863      	ldr	r3, [r4, #4]
 801bcd6:	bf08      	it	eq
 801bcd8:	f8c8 1000 	streq.w	r1, [r8]
 801bcdc:	5162      	str	r2, [r4, r5]
 801bcde:	604b      	str	r3, [r1, #4]
 801bce0:	4630      	mov	r0, r6
 801bce2:	f000 f82f 	bl	801bd44 <__malloc_unlock>
 801bce6:	f104 000b 	add.w	r0, r4, #11
 801bcea:	1d23      	adds	r3, r4, #4
 801bcec:	f020 0007 	bic.w	r0, r0, #7
 801bcf0:	1ac2      	subs	r2, r0, r3
 801bcf2:	bf1c      	itt	ne
 801bcf4:	1a1b      	subne	r3, r3, r0
 801bcf6:	50a3      	strne	r3, [r4, r2]
 801bcf8:	e7af      	b.n	801bc5a <_malloc_r+0x22>
 801bcfa:	6862      	ldr	r2, [r4, #4]
 801bcfc:	42a3      	cmp	r3, r4
 801bcfe:	bf0c      	ite	eq
 801bd00:	f8c8 2000 	streq.w	r2, [r8]
 801bd04:	605a      	strne	r2, [r3, #4]
 801bd06:	e7eb      	b.n	801bce0 <_malloc_r+0xa8>
 801bd08:	4623      	mov	r3, r4
 801bd0a:	6864      	ldr	r4, [r4, #4]
 801bd0c:	e7ae      	b.n	801bc6c <_malloc_r+0x34>
 801bd0e:	463c      	mov	r4, r7
 801bd10:	687f      	ldr	r7, [r7, #4]
 801bd12:	e7b6      	b.n	801bc82 <_malloc_r+0x4a>
 801bd14:	461a      	mov	r2, r3
 801bd16:	685b      	ldr	r3, [r3, #4]
 801bd18:	42a3      	cmp	r3, r4
 801bd1a:	d1fb      	bne.n	801bd14 <_malloc_r+0xdc>
 801bd1c:	2300      	movs	r3, #0
 801bd1e:	6053      	str	r3, [r2, #4]
 801bd20:	e7de      	b.n	801bce0 <_malloc_r+0xa8>
 801bd22:	230c      	movs	r3, #12
 801bd24:	6033      	str	r3, [r6, #0]
 801bd26:	4630      	mov	r0, r6
 801bd28:	f000 f80c 	bl	801bd44 <__malloc_unlock>
 801bd2c:	e794      	b.n	801bc58 <_malloc_r+0x20>
 801bd2e:	6005      	str	r5, [r0, #0]
 801bd30:	e7d6      	b.n	801bce0 <_malloc_r+0xa8>
 801bd32:	bf00      	nop
 801bd34:	2001205c 	.word	0x2001205c

0801bd38 <__malloc_lock>:
 801bd38:	4801      	ldr	r0, [pc, #4]	@ (801bd40 <__malloc_lock+0x8>)
 801bd3a:	f7ff beda 	b.w	801baf2 <__retarget_lock_acquire_recursive>
 801bd3e:	bf00      	nop
 801bd40:	20012054 	.word	0x20012054

0801bd44 <__malloc_unlock>:
 801bd44:	4801      	ldr	r0, [pc, #4]	@ (801bd4c <__malloc_unlock+0x8>)
 801bd46:	f7ff bed5 	b.w	801baf4 <__retarget_lock_release_recursive>
 801bd4a:	bf00      	nop
 801bd4c:	20012054 	.word	0x20012054

0801bd50 <__sfputc_r>:
 801bd50:	6893      	ldr	r3, [r2, #8]
 801bd52:	3b01      	subs	r3, #1
 801bd54:	2b00      	cmp	r3, #0
 801bd56:	b410      	push	{r4}
 801bd58:	6093      	str	r3, [r2, #8]
 801bd5a:	da08      	bge.n	801bd6e <__sfputc_r+0x1e>
 801bd5c:	6994      	ldr	r4, [r2, #24]
 801bd5e:	42a3      	cmp	r3, r4
 801bd60:	db01      	blt.n	801bd66 <__sfputc_r+0x16>
 801bd62:	290a      	cmp	r1, #10
 801bd64:	d103      	bne.n	801bd6e <__sfputc_r+0x1e>
 801bd66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd6a:	f7ff bd98 	b.w	801b89e <__swbuf_r>
 801bd6e:	6813      	ldr	r3, [r2, #0]
 801bd70:	1c58      	adds	r0, r3, #1
 801bd72:	6010      	str	r0, [r2, #0]
 801bd74:	7019      	strb	r1, [r3, #0]
 801bd76:	4608      	mov	r0, r1
 801bd78:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bd7c:	4770      	bx	lr

0801bd7e <__sfputs_r>:
 801bd7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd80:	4606      	mov	r6, r0
 801bd82:	460f      	mov	r7, r1
 801bd84:	4614      	mov	r4, r2
 801bd86:	18d5      	adds	r5, r2, r3
 801bd88:	42ac      	cmp	r4, r5
 801bd8a:	d101      	bne.n	801bd90 <__sfputs_r+0x12>
 801bd8c:	2000      	movs	r0, #0
 801bd8e:	e007      	b.n	801bda0 <__sfputs_r+0x22>
 801bd90:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd94:	463a      	mov	r2, r7
 801bd96:	4630      	mov	r0, r6
 801bd98:	f7ff ffda 	bl	801bd50 <__sfputc_r>
 801bd9c:	1c43      	adds	r3, r0, #1
 801bd9e:	d1f3      	bne.n	801bd88 <__sfputs_r+0xa>
 801bda0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bda4 <_vfiprintf_r>:
 801bda4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bda8:	460d      	mov	r5, r1
 801bdaa:	b09d      	sub	sp, #116	@ 0x74
 801bdac:	4614      	mov	r4, r2
 801bdae:	4698      	mov	r8, r3
 801bdb0:	4606      	mov	r6, r0
 801bdb2:	b118      	cbz	r0, 801bdbc <_vfiprintf_r+0x18>
 801bdb4:	6a03      	ldr	r3, [r0, #32]
 801bdb6:	b90b      	cbnz	r3, 801bdbc <_vfiprintf_r+0x18>
 801bdb8:	f7ff fc80 	bl	801b6bc <__sinit>
 801bdbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bdbe:	07d9      	lsls	r1, r3, #31
 801bdc0:	d405      	bmi.n	801bdce <_vfiprintf_r+0x2a>
 801bdc2:	89ab      	ldrh	r3, [r5, #12]
 801bdc4:	059a      	lsls	r2, r3, #22
 801bdc6:	d402      	bmi.n	801bdce <_vfiprintf_r+0x2a>
 801bdc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bdca:	f7ff fe92 	bl	801baf2 <__retarget_lock_acquire_recursive>
 801bdce:	89ab      	ldrh	r3, [r5, #12]
 801bdd0:	071b      	lsls	r3, r3, #28
 801bdd2:	d501      	bpl.n	801bdd8 <_vfiprintf_r+0x34>
 801bdd4:	692b      	ldr	r3, [r5, #16]
 801bdd6:	b99b      	cbnz	r3, 801be00 <_vfiprintf_r+0x5c>
 801bdd8:	4629      	mov	r1, r5
 801bdda:	4630      	mov	r0, r6
 801bddc:	f7ff fd9e 	bl	801b91c <__swsetup_r>
 801bde0:	b170      	cbz	r0, 801be00 <_vfiprintf_r+0x5c>
 801bde2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bde4:	07dc      	lsls	r4, r3, #31
 801bde6:	d504      	bpl.n	801bdf2 <_vfiprintf_r+0x4e>
 801bde8:	f04f 30ff 	mov.w	r0, #4294967295
 801bdec:	b01d      	add	sp, #116	@ 0x74
 801bdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bdf2:	89ab      	ldrh	r3, [r5, #12]
 801bdf4:	0598      	lsls	r0, r3, #22
 801bdf6:	d4f7      	bmi.n	801bde8 <_vfiprintf_r+0x44>
 801bdf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bdfa:	f7ff fe7b 	bl	801baf4 <__retarget_lock_release_recursive>
 801bdfe:	e7f3      	b.n	801bde8 <_vfiprintf_r+0x44>
 801be00:	2300      	movs	r3, #0
 801be02:	9309      	str	r3, [sp, #36]	@ 0x24
 801be04:	2320      	movs	r3, #32
 801be06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801be0a:	f8cd 800c 	str.w	r8, [sp, #12]
 801be0e:	2330      	movs	r3, #48	@ 0x30
 801be10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801bfc0 <_vfiprintf_r+0x21c>
 801be14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801be18:	f04f 0901 	mov.w	r9, #1
 801be1c:	4623      	mov	r3, r4
 801be1e:	469a      	mov	sl, r3
 801be20:	f813 2b01 	ldrb.w	r2, [r3], #1
 801be24:	b10a      	cbz	r2, 801be2a <_vfiprintf_r+0x86>
 801be26:	2a25      	cmp	r2, #37	@ 0x25
 801be28:	d1f9      	bne.n	801be1e <_vfiprintf_r+0x7a>
 801be2a:	ebba 0b04 	subs.w	fp, sl, r4
 801be2e:	d00b      	beq.n	801be48 <_vfiprintf_r+0xa4>
 801be30:	465b      	mov	r3, fp
 801be32:	4622      	mov	r2, r4
 801be34:	4629      	mov	r1, r5
 801be36:	4630      	mov	r0, r6
 801be38:	f7ff ffa1 	bl	801bd7e <__sfputs_r>
 801be3c:	3001      	adds	r0, #1
 801be3e:	f000 80a7 	beq.w	801bf90 <_vfiprintf_r+0x1ec>
 801be42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801be44:	445a      	add	r2, fp
 801be46:	9209      	str	r2, [sp, #36]	@ 0x24
 801be48:	f89a 3000 	ldrb.w	r3, [sl]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	f000 809f 	beq.w	801bf90 <_vfiprintf_r+0x1ec>
 801be52:	2300      	movs	r3, #0
 801be54:	f04f 32ff 	mov.w	r2, #4294967295
 801be58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801be5c:	f10a 0a01 	add.w	sl, sl, #1
 801be60:	9304      	str	r3, [sp, #16]
 801be62:	9307      	str	r3, [sp, #28]
 801be64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801be68:	931a      	str	r3, [sp, #104]	@ 0x68
 801be6a:	4654      	mov	r4, sl
 801be6c:	2205      	movs	r2, #5
 801be6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be72:	4853      	ldr	r0, [pc, #332]	@ (801bfc0 <_vfiprintf_r+0x21c>)
 801be74:	f7e4 f9cc 	bl	8000210 <memchr>
 801be78:	9a04      	ldr	r2, [sp, #16]
 801be7a:	b9d8      	cbnz	r0, 801beb4 <_vfiprintf_r+0x110>
 801be7c:	06d1      	lsls	r1, r2, #27
 801be7e:	bf44      	itt	mi
 801be80:	2320      	movmi	r3, #32
 801be82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801be86:	0713      	lsls	r3, r2, #28
 801be88:	bf44      	itt	mi
 801be8a:	232b      	movmi	r3, #43	@ 0x2b
 801be8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801be90:	f89a 3000 	ldrb.w	r3, [sl]
 801be94:	2b2a      	cmp	r3, #42	@ 0x2a
 801be96:	d015      	beq.n	801bec4 <_vfiprintf_r+0x120>
 801be98:	9a07      	ldr	r2, [sp, #28]
 801be9a:	4654      	mov	r4, sl
 801be9c:	2000      	movs	r0, #0
 801be9e:	f04f 0c0a 	mov.w	ip, #10
 801bea2:	4621      	mov	r1, r4
 801bea4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bea8:	3b30      	subs	r3, #48	@ 0x30
 801beaa:	2b09      	cmp	r3, #9
 801beac:	d94b      	bls.n	801bf46 <_vfiprintf_r+0x1a2>
 801beae:	b1b0      	cbz	r0, 801bede <_vfiprintf_r+0x13a>
 801beb0:	9207      	str	r2, [sp, #28]
 801beb2:	e014      	b.n	801bede <_vfiprintf_r+0x13a>
 801beb4:	eba0 0308 	sub.w	r3, r0, r8
 801beb8:	fa09 f303 	lsl.w	r3, r9, r3
 801bebc:	4313      	orrs	r3, r2
 801bebe:	9304      	str	r3, [sp, #16]
 801bec0:	46a2      	mov	sl, r4
 801bec2:	e7d2      	b.n	801be6a <_vfiprintf_r+0xc6>
 801bec4:	9b03      	ldr	r3, [sp, #12]
 801bec6:	1d19      	adds	r1, r3, #4
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	9103      	str	r1, [sp, #12]
 801becc:	2b00      	cmp	r3, #0
 801bece:	bfbb      	ittet	lt
 801bed0:	425b      	neglt	r3, r3
 801bed2:	f042 0202 	orrlt.w	r2, r2, #2
 801bed6:	9307      	strge	r3, [sp, #28]
 801bed8:	9307      	strlt	r3, [sp, #28]
 801beda:	bfb8      	it	lt
 801bedc:	9204      	strlt	r2, [sp, #16]
 801bede:	7823      	ldrb	r3, [r4, #0]
 801bee0:	2b2e      	cmp	r3, #46	@ 0x2e
 801bee2:	d10a      	bne.n	801befa <_vfiprintf_r+0x156>
 801bee4:	7863      	ldrb	r3, [r4, #1]
 801bee6:	2b2a      	cmp	r3, #42	@ 0x2a
 801bee8:	d132      	bne.n	801bf50 <_vfiprintf_r+0x1ac>
 801beea:	9b03      	ldr	r3, [sp, #12]
 801beec:	1d1a      	adds	r2, r3, #4
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	9203      	str	r2, [sp, #12]
 801bef2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801bef6:	3402      	adds	r4, #2
 801bef8:	9305      	str	r3, [sp, #20]
 801befa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801bfd0 <_vfiprintf_r+0x22c>
 801befe:	7821      	ldrb	r1, [r4, #0]
 801bf00:	2203      	movs	r2, #3
 801bf02:	4650      	mov	r0, sl
 801bf04:	f7e4 f984 	bl	8000210 <memchr>
 801bf08:	b138      	cbz	r0, 801bf1a <_vfiprintf_r+0x176>
 801bf0a:	9b04      	ldr	r3, [sp, #16]
 801bf0c:	eba0 000a 	sub.w	r0, r0, sl
 801bf10:	2240      	movs	r2, #64	@ 0x40
 801bf12:	4082      	lsls	r2, r0
 801bf14:	4313      	orrs	r3, r2
 801bf16:	3401      	adds	r4, #1
 801bf18:	9304      	str	r3, [sp, #16]
 801bf1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bf1e:	4829      	ldr	r0, [pc, #164]	@ (801bfc4 <_vfiprintf_r+0x220>)
 801bf20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801bf24:	2206      	movs	r2, #6
 801bf26:	f7e4 f973 	bl	8000210 <memchr>
 801bf2a:	2800      	cmp	r0, #0
 801bf2c:	d03f      	beq.n	801bfae <_vfiprintf_r+0x20a>
 801bf2e:	4b26      	ldr	r3, [pc, #152]	@ (801bfc8 <_vfiprintf_r+0x224>)
 801bf30:	bb1b      	cbnz	r3, 801bf7a <_vfiprintf_r+0x1d6>
 801bf32:	9b03      	ldr	r3, [sp, #12]
 801bf34:	3307      	adds	r3, #7
 801bf36:	f023 0307 	bic.w	r3, r3, #7
 801bf3a:	3308      	adds	r3, #8
 801bf3c:	9303      	str	r3, [sp, #12]
 801bf3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf40:	443b      	add	r3, r7
 801bf42:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf44:	e76a      	b.n	801be1c <_vfiprintf_r+0x78>
 801bf46:	fb0c 3202 	mla	r2, ip, r2, r3
 801bf4a:	460c      	mov	r4, r1
 801bf4c:	2001      	movs	r0, #1
 801bf4e:	e7a8      	b.n	801bea2 <_vfiprintf_r+0xfe>
 801bf50:	2300      	movs	r3, #0
 801bf52:	3401      	adds	r4, #1
 801bf54:	9305      	str	r3, [sp, #20]
 801bf56:	4619      	mov	r1, r3
 801bf58:	f04f 0c0a 	mov.w	ip, #10
 801bf5c:	4620      	mov	r0, r4
 801bf5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bf62:	3a30      	subs	r2, #48	@ 0x30
 801bf64:	2a09      	cmp	r2, #9
 801bf66:	d903      	bls.n	801bf70 <_vfiprintf_r+0x1cc>
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d0c6      	beq.n	801befa <_vfiprintf_r+0x156>
 801bf6c:	9105      	str	r1, [sp, #20]
 801bf6e:	e7c4      	b.n	801befa <_vfiprintf_r+0x156>
 801bf70:	fb0c 2101 	mla	r1, ip, r1, r2
 801bf74:	4604      	mov	r4, r0
 801bf76:	2301      	movs	r3, #1
 801bf78:	e7f0      	b.n	801bf5c <_vfiprintf_r+0x1b8>
 801bf7a:	ab03      	add	r3, sp, #12
 801bf7c:	9300      	str	r3, [sp, #0]
 801bf7e:	462a      	mov	r2, r5
 801bf80:	4b12      	ldr	r3, [pc, #72]	@ (801bfcc <_vfiprintf_r+0x228>)
 801bf82:	a904      	add	r1, sp, #16
 801bf84:	4630      	mov	r0, r6
 801bf86:	f3af 8000 	nop.w
 801bf8a:	4607      	mov	r7, r0
 801bf8c:	1c78      	adds	r0, r7, #1
 801bf8e:	d1d6      	bne.n	801bf3e <_vfiprintf_r+0x19a>
 801bf90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801bf92:	07d9      	lsls	r1, r3, #31
 801bf94:	d405      	bmi.n	801bfa2 <_vfiprintf_r+0x1fe>
 801bf96:	89ab      	ldrh	r3, [r5, #12]
 801bf98:	059a      	lsls	r2, r3, #22
 801bf9a:	d402      	bmi.n	801bfa2 <_vfiprintf_r+0x1fe>
 801bf9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801bf9e:	f7ff fda9 	bl	801baf4 <__retarget_lock_release_recursive>
 801bfa2:	89ab      	ldrh	r3, [r5, #12]
 801bfa4:	065b      	lsls	r3, r3, #25
 801bfa6:	f53f af1f 	bmi.w	801bde8 <_vfiprintf_r+0x44>
 801bfaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bfac:	e71e      	b.n	801bdec <_vfiprintf_r+0x48>
 801bfae:	ab03      	add	r3, sp, #12
 801bfb0:	9300      	str	r3, [sp, #0]
 801bfb2:	462a      	mov	r2, r5
 801bfb4:	4b05      	ldr	r3, [pc, #20]	@ (801bfcc <_vfiprintf_r+0x228>)
 801bfb6:	a904      	add	r1, sp, #16
 801bfb8:	4630      	mov	r0, r6
 801bfba:	f000 f879 	bl	801c0b0 <_printf_i>
 801bfbe:	e7e4      	b.n	801bf8a <_vfiprintf_r+0x1e6>
 801bfc0:	08025331 	.word	0x08025331
 801bfc4:	0802533b 	.word	0x0802533b
 801bfc8:	00000000 	.word	0x00000000
 801bfcc:	0801bd7f 	.word	0x0801bd7f
 801bfd0:	08025337 	.word	0x08025337

0801bfd4 <_printf_common>:
 801bfd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd8:	4616      	mov	r6, r2
 801bfda:	4698      	mov	r8, r3
 801bfdc:	688a      	ldr	r2, [r1, #8]
 801bfde:	690b      	ldr	r3, [r1, #16]
 801bfe0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801bfe4:	4293      	cmp	r3, r2
 801bfe6:	bfb8      	it	lt
 801bfe8:	4613      	movlt	r3, r2
 801bfea:	6033      	str	r3, [r6, #0]
 801bfec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801bff0:	4607      	mov	r7, r0
 801bff2:	460c      	mov	r4, r1
 801bff4:	b10a      	cbz	r2, 801bffa <_printf_common+0x26>
 801bff6:	3301      	adds	r3, #1
 801bff8:	6033      	str	r3, [r6, #0]
 801bffa:	6823      	ldr	r3, [r4, #0]
 801bffc:	0699      	lsls	r1, r3, #26
 801bffe:	bf42      	ittt	mi
 801c000:	6833      	ldrmi	r3, [r6, #0]
 801c002:	3302      	addmi	r3, #2
 801c004:	6033      	strmi	r3, [r6, #0]
 801c006:	6825      	ldr	r5, [r4, #0]
 801c008:	f015 0506 	ands.w	r5, r5, #6
 801c00c:	d106      	bne.n	801c01c <_printf_common+0x48>
 801c00e:	f104 0a19 	add.w	sl, r4, #25
 801c012:	68e3      	ldr	r3, [r4, #12]
 801c014:	6832      	ldr	r2, [r6, #0]
 801c016:	1a9b      	subs	r3, r3, r2
 801c018:	42ab      	cmp	r3, r5
 801c01a:	dc26      	bgt.n	801c06a <_printf_common+0x96>
 801c01c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c020:	6822      	ldr	r2, [r4, #0]
 801c022:	3b00      	subs	r3, #0
 801c024:	bf18      	it	ne
 801c026:	2301      	movne	r3, #1
 801c028:	0692      	lsls	r2, r2, #26
 801c02a:	d42b      	bmi.n	801c084 <_printf_common+0xb0>
 801c02c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c030:	4641      	mov	r1, r8
 801c032:	4638      	mov	r0, r7
 801c034:	47c8      	blx	r9
 801c036:	3001      	adds	r0, #1
 801c038:	d01e      	beq.n	801c078 <_printf_common+0xa4>
 801c03a:	6823      	ldr	r3, [r4, #0]
 801c03c:	6922      	ldr	r2, [r4, #16]
 801c03e:	f003 0306 	and.w	r3, r3, #6
 801c042:	2b04      	cmp	r3, #4
 801c044:	bf02      	ittt	eq
 801c046:	68e5      	ldreq	r5, [r4, #12]
 801c048:	6833      	ldreq	r3, [r6, #0]
 801c04a:	1aed      	subeq	r5, r5, r3
 801c04c:	68a3      	ldr	r3, [r4, #8]
 801c04e:	bf0c      	ite	eq
 801c050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c054:	2500      	movne	r5, #0
 801c056:	4293      	cmp	r3, r2
 801c058:	bfc4      	itt	gt
 801c05a:	1a9b      	subgt	r3, r3, r2
 801c05c:	18ed      	addgt	r5, r5, r3
 801c05e:	2600      	movs	r6, #0
 801c060:	341a      	adds	r4, #26
 801c062:	42b5      	cmp	r5, r6
 801c064:	d11a      	bne.n	801c09c <_printf_common+0xc8>
 801c066:	2000      	movs	r0, #0
 801c068:	e008      	b.n	801c07c <_printf_common+0xa8>
 801c06a:	2301      	movs	r3, #1
 801c06c:	4652      	mov	r2, sl
 801c06e:	4641      	mov	r1, r8
 801c070:	4638      	mov	r0, r7
 801c072:	47c8      	blx	r9
 801c074:	3001      	adds	r0, #1
 801c076:	d103      	bne.n	801c080 <_printf_common+0xac>
 801c078:	f04f 30ff 	mov.w	r0, #4294967295
 801c07c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c080:	3501      	adds	r5, #1
 801c082:	e7c6      	b.n	801c012 <_printf_common+0x3e>
 801c084:	18e1      	adds	r1, r4, r3
 801c086:	1c5a      	adds	r2, r3, #1
 801c088:	2030      	movs	r0, #48	@ 0x30
 801c08a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c08e:	4422      	add	r2, r4
 801c090:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c094:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c098:	3302      	adds	r3, #2
 801c09a:	e7c7      	b.n	801c02c <_printf_common+0x58>
 801c09c:	2301      	movs	r3, #1
 801c09e:	4622      	mov	r2, r4
 801c0a0:	4641      	mov	r1, r8
 801c0a2:	4638      	mov	r0, r7
 801c0a4:	47c8      	blx	r9
 801c0a6:	3001      	adds	r0, #1
 801c0a8:	d0e6      	beq.n	801c078 <_printf_common+0xa4>
 801c0aa:	3601      	adds	r6, #1
 801c0ac:	e7d9      	b.n	801c062 <_printf_common+0x8e>
	...

0801c0b0 <_printf_i>:
 801c0b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c0b4:	7e0f      	ldrb	r7, [r1, #24]
 801c0b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c0b8:	2f78      	cmp	r7, #120	@ 0x78
 801c0ba:	4691      	mov	r9, r2
 801c0bc:	4680      	mov	r8, r0
 801c0be:	460c      	mov	r4, r1
 801c0c0:	469a      	mov	sl, r3
 801c0c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c0c6:	d807      	bhi.n	801c0d8 <_printf_i+0x28>
 801c0c8:	2f62      	cmp	r7, #98	@ 0x62
 801c0ca:	d80a      	bhi.n	801c0e2 <_printf_i+0x32>
 801c0cc:	2f00      	cmp	r7, #0
 801c0ce:	f000 80d2 	beq.w	801c276 <_printf_i+0x1c6>
 801c0d2:	2f58      	cmp	r7, #88	@ 0x58
 801c0d4:	f000 80b9 	beq.w	801c24a <_printf_i+0x19a>
 801c0d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c0dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c0e0:	e03a      	b.n	801c158 <_printf_i+0xa8>
 801c0e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c0e6:	2b15      	cmp	r3, #21
 801c0e8:	d8f6      	bhi.n	801c0d8 <_printf_i+0x28>
 801c0ea:	a101      	add	r1, pc, #4	@ (adr r1, 801c0f0 <_printf_i+0x40>)
 801c0ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c0f0:	0801c149 	.word	0x0801c149
 801c0f4:	0801c15d 	.word	0x0801c15d
 801c0f8:	0801c0d9 	.word	0x0801c0d9
 801c0fc:	0801c0d9 	.word	0x0801c0d9
 801c100:	0801c0d9 	.word	0x0801c0d9
 801c104:	0801c0d9 	.word	0x0801c0d9
 801c108:	0801c15d 	.word	0x0801c15d
 801c10c:	0801c0d9 	.word	0x0801c0d9
 801c110:	0801c0d9 	.word	0x0801c0d9
 801c114:	0801c0d9 	.word	0x0801c0d9
 801c118:	0801c0d9 	.word	0x0801c0d9
 801c11c:	0801c25d 	.word	0x0801c25d
 801c120:	0801c187 	.word	0x0801c187
 801c124:	0801c217 	.word	0x0801c217
 801c128:	0801c0d9 	.word	0x0801c0d9
 801c12c:	0801c0d9 	.word	0x0801c0d9
 801c130:	0801c27f 	.word	0x0801c27f
 801c134:	0801c0d9 	.word	0x0801c0d9
 801c138:	0801c187 	.word	0x0801c187
 801c13c:	0801c0d9 	.word	0x0801c0d9
 801c140:	0801c0d9 	.word	0x0801c0d9
 801c144:	0801c21f 	.word	0x0801c21f
 801c148:	6833      	ldr	r3, [r6, #0]
 801c14a:	1d1a      	adds	r2, r3, #4
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	6032      	str	r2, [r6, #0]
 801c150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c154:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c158:	2301      	movs	r3, #1
 801c15a:	e09d      	b.n	801c298 <_printf_i+0x1e8>
 801c15c:	6833      	ldr	r3, [r6, #0]
 801c15e:	6820      	ldr	r0, [r4, #0]
 801c160:	1d19      	adds	r1, r3, #4
 801c162:	6031      	str	r1, [r6, #0]
 801c164:	0606      	lsls	r6, r0, #24
 801c166:	d501      	bpl.n	801c16c <_printf_i+0xbc>
 801c168:	681d      	ldr	r5, [r3, #0]
 801c16a:	e003      	b.n	801c174 <_printf_i+0xc4>
 801c16c:	0645      	lsls	r5, r0, #25
 801c16e:	d5fb      	bpl.n	801c168 <_printf_i+0xb8>
 801c170:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c174:	2d00      	cmp	r5, #0
 801c176:	da03      	bge.n	801c180 <_printf_i+0xd0>
 801c178:	232d      	movs	r3, #45	@ 0x2d
 801c17a:	426d      	negs	r5, r5
 801c17c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c180:	4859      	ldr	r0, [pc, #356]	@ (801c2e8 <_printf_i+0x238>)
 801c182:	230a      	movs	r3, #10
 801c184:	e011      	b.n	801c1aa <_printf_i+0xfa>
 801c186:	6821      	ldr	r1, [r4, #0]
 801c188:	6833      	ldr	r3, [r6, #0]
 801c18a:	0608      	lsls	r0, r1, #24
 801c18c:	f853 5b04 	ldr.w	r5, [r3], #4
 801c190:	d402      	bmi.n	801c198 <_printf_i+0xe8>
 801c192:	0649      	lsls	r1, r1, #25
 801c194:	bf48      	it	mi
 801c196:	b2ad      	uxthmi	r5, r5
 801c198:	2f6f      	cmp	r7, #111	@ 0x6f
 801c19a:	4853      	ldr	r0, [pc, #332]	@ (801c2e8 <_printf_i+0x238>)
 801c19c:	6033      	str	r3, [r6, #0]
 801c19e:	bf14      	ite	ne
 801c1a0:	230a      	movne	r3, #10
 801c1a2:	2308      	moveq	r3, #8
 801c1a4:	2100      	movs	r1, #0
 801c1a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c1aa:	6866      	ldr	r6, [r4, #4]
 801c1ac:	60a6      	str	r6, [r4, #8]
 801c1ae:	2e00      	cmp	r6, #0
 801c1b0:	bfa2      	ittt	ge
 801c1b2:	6821      	ldrge	r1, [r4, #0]
 801c1b4:	f021 0104 	bicge.w	r1, r1, #4
 801c1b8:	6021      	strge	r1, [r4, #0]
 801c1ba:	b90d      	cbnz	r5, 801c1c0 <_printf_i+0x110>
 801c1bc:	2e00      	cmp	r6, #0
 801c1be:	d04b      	beq.n	801c258 <_printf_i+0x1a8>
 801c1c0:	4616      	mov	r6, r2
 801c1c2:	fbb5 f1f3 	udiv	r1, r5, r3
 801c1c6:	fb03 5711 	mls	r7, r3, r1, r5
 801c1ca:	5dc7      	ldrb	r7, [r0, r7]
 801c1cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c1d0:	462f      	mov	r7, r5
 801c1d2:	42bb      	cmp	r3, r7
 801c1d4:	460d      	mov	r5, r1
 801c1d6:	d9f4      	bls.n	801c1c2 <_printf_i+0x112>
 801c1d8:	2b08      	cmp	r3, #8
 801c1da:	d10b      	bne.n	801c1f4 <_printf_i+0x144>
 801c1dc:	6823      	ldr	r3, [r4, #0]
 801c1de:	07df      	lsls	r7, r3, #31
 801c1e0:	d508      	bpl.n	801c1f4 <_printf_i+0x144>
 801c1e2:	6923      	ldr	r3, [r4, #16]
 801c1e4:	6861      	ldr	r1, [r4, #4]
 801c1e6:	4299      	cmp	r1, r3
 801c1e8:	bfde      	ittt	le
 801c1ea:	2330      	movle	r3, #48	@ 0x30
 801c1ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c1f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c1f4:	1b92      	subs	r2, r2, r6
 801c1f6:	6122      	str	r2, [r4, #16]
 801c1f8:	f8cd a000 	str.w	sl, [sp]
 801c1fc:	464b      	mov	r3, r9
 801c1fe:	aa03      	add	r2, sp, #12
 801c200:	4621      	mov	r1, r4
 801c202:	4640      	mov	r0, r8
 801c204:	f7ff fee6 	bl	801bfd4 <_printf_common>
 801c208:	3001      	adds	r0, #1
 801c20a:	d14a      	bne.n	801c2a2 <_printf_i+0x1f2>
 801c20c:	f04f 30ff 	mov.w	r0, #4294967295
 801c210:	b004      	add	sp, #16
 801c212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c216:	6823      	ldr	r3, [r4, #0]
 801c218:	f043 0320 	orr.w	r3, r3, #32
 801c21c:	6023      	str	r3, [r4, #0]
 801c21e:	4833      	ldr	r0, [pc, #204]	@ (801c2ec <_printf_i+0x23c>)
 801c220:	2778      	movs	r7, #120	@ 0x78
 801c222:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c226:	6823      	ldr	r3, [r4, #0]
 801c228:	6831      	ldr	r1, [r6, #0]
 801c22a:	061f      	lsls	r7, r3, #24
 801c22c:	f851 5b04 	ldr.w	r5, [r1], #4
 801c230:	d402      	bmi.n	801c238 <_printf_i+0x188>
 801c232:	065f      	lsls	r7, r3, #25
 801c234:	bf48      	it	mi
 801c236:	b2ad      	uxthmi	r5, r5
 801c238:	6031      	str	r1, [r6, #0]
 801c23a:	07d9      	lsls	r1, r3, #31
 801c23c:	bf44      	itt	mi
 801c23e:	f043 0320 	orrmi.w	r3, r3, #32
 801c242:	6023      	strmi	r3, [r4, #0]
 801c244:	b11d      	cbz	r5, 801c24e <_printf_i+0x19e>
 801c246:	2310      	movs	r3, #16
 801c248:	e7ac      	b.n	801c1a4 <_printf_i+0xf4>
 801c24a:	4827      	ldr	r0, [pc, #156]	@ (801c2e8 <_printf_i+0x238>)
 801c24c:	e7e9      	b.n	801c222 <_printf_i+0x172>
 801c24e:	6823      	ldr	r3, [r4, #0]
 801c250:	f023 0320 	bic.w	r3, r3, #32
 801c254:	6023      	str	r3, [r4, #0]
 801c256:	e7f6      	b.n	801c246 <_printf_i+0x196>
 801c258:	4616      	mov	r6, r2
 801c25a:	e7bd      	b.n	801c1d8 <_printf_i+0x128>
 801c25c:	6833      	ldr	r3, [r6, #0]
 801c25e:	6825      	ldr	r5, [r4, #0]
 801c260:	6961      	ldr	r1, [r4, #20]
 801c262:	1d18      	adds	r0, r3, #4
 801c264:	6030      	str	r0, [r6, #0]
 801c266:	062e      	lsls	r6, r5, #24
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	d501      	bpl.n	801c270 <_printf_i+0x1c0>
 801c26c:	6019      	str	r1, [r3, #0]
 801c26e:	e002      	b.n	801c276 <_printf_i+0x1c6>
 801c270:	0668      	lsls	r0, r5, #25
 801c272:	d5fb      	bpl.n	801c26c <_printf_i+0x1bc>
 801c274:	8019      	strh	r1, [r3, #0]
 801c276:	2300      	movs	r3, #0
 801c278:	6123      	str	r3, [r4, #16]
 801c27a:	4616      	mov	r6, r2
 801c27c:	e7bc      	b.n	801c1f8 <_printf_i+0x148>
 801c27e:	6833      	ldr	r3, [r6, #0]
 801c280:	1d1a      	adds	r2, r3, #4
 801c282:	6032      	str	r2, [r6, #0]
 801c284:	681e      	ldr	r6, [r3, #0]
 801c286:	6862      	ldr	r2, [r4, #4]
 801c288:	2100      	movs	r1, #0
 801c28a:	4630      	mov	r0, r6
 801c28c:	f7e3 ffc0 	bl	8000210 <memchr>
 801c290:	b108      	cbz	r0, 801c296 <_printf_i+0x1e6>
 801c292:	1b80      	subs	r0, r0, r6
 801c294:	6060      	str	r0, [r4, #4]
 801c296:	6863      	ldr	r3, [r4, #4]
 801c298:	6123      	str	r3, [r4, #16]
 801c29a:	2300      	movs	r3, #0
 801c29c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c2a0:	e7aa      	b.n	801c1f8 <_printf_i+0x148>
 801c2a2:	6923      	ldr	r3, [r4, #16]
 801c2a4:	4632      	mov	r2, r6
 801c2a6:	4649      	mov	r1, r9
 801c2a8:	4640      	mov	r0, r8
 801c2aa:	47d0      	blx	sl
 801c2ac:	3001      	adds	r0, #1
 801c2ae:	d0ad      	beq.n	801c20c <_printf_i+0x15c>
 801c2b0:	6823      	ldr	r3, [r4, #0]
 801c2b2:	079b      	lsls	r3, r3, #30
 801c2b4:	d413      	bmi.n	801c2de <_printf_i+0x22e>
 801c2b6:	68e0      	ldr	r0, [r4, #12]
 801c2b8:	9b03      	ldr	r3, [sp, #12]
 801c2ba:	4298      	cmp	r0, r3
 801c2bc:	bfb8      	it	lt
 801c2be:	4618      	movlt	r0, r3
 801c2c0:	e7a6      	b.n	801c210 <_printf_i+0x160>
 801c2c2:	2301      	movs	r3, #1
 801c2c4:	4632      	mov	r2, r6
 801c2c6:	4649      	mov	r1, r9
 801c2c8:	4640      	mov	r0, r8
 801c2ca:	47d0      	blx	sl
 801c2cc:	3001      	adds	r0, #1
 801c2ce:	d09d      	beq.n	801c20c <_printf_i+0x15c>
 801c2d0:	3501      	adds	r5, #1
 801c2d2:	68e3      	ldr	r3, [r4, #12]
 801c2d4:	9903      	ldr	r1, [sp, #12]
 801c2d6:	1a5b      	subs	r3, r3, r1
 801c2d8:	42ab      	cmp	r3, r5
 801c2da:	dcf2      	bgt.n	801c2c2 <_printf_i+0x212>
 801c2dc:	e7eb      	b.n	801c2b6 <_printf_i+0x206>
 801c2de:	2500      	movs	r5, #0
 801c2e0:	f104 0619 	add.w	r6, r4, #25
 801c2e4:	e7f5      	b.n	801c2d2 <_printf_i+0x222>
 801c2e6:	bf00      	nop
 801c2e8:	08025342 	.word	0x08025342
 801c2ec:	08025353 	.word	0x08025353

0801c2f0 <fiprintf>:
 801c2f0:	b40e      	push	{r1, r2, r3}
 801c2f2:	b503      	push	{r0, r1, lr}
 801c2f4:	4601      	mov	r1, r0
 801c2f6:	ab03      	add	r3, sp, #12
 801c2f8:	4805      	ldr	r0, [pc, #20]	@ (801c310 <fiprintf+0x20>)
 801c2fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2fe:	6800      	ldr	r0, [r0, #0]
 801c300:	9301      	str	r3, [sp, #4]
 801c302:	f7ff fd4f 	bl	801bda4 <_vfiprintf_r>
 801c306:	b002      	add	sp, #8
 801c308:	f85d eb04 	ldr.w	lr, [sp], #4
 801c30c:	b003      	add	sp, #12
 801c30e:	4770      	bx	lr
 801c310:	20000084 	.word	0x20000084

0801c314 <__swhatbuf_r>:
 801c314:	b570      	push	{r4, r5, r6, lr}
 801c316:	460c      	mov	r4, r1
 801c318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c31c:	2900      	cmp	r1, #0
 801c31e:	b096      	sub	sp, #88	@ 0x58
 801c320:	4615      	mov	r5, r2
 801c322:	461e      	mov	r6, r3
 801c324:	da0d      	bge.n	801c342 <__swhatbuf_r+0x2e>
 801c326:	89a3      	ldrh	r3, [r4, #12]
 801c328:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c32c:	f04f 0100 	mov.w	r1, #0
 801c330:	bf14      	ite	ne
 801c332:	2340      	movne	r3, #64	@ 0x40
 801c334:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801c338:	2000      	movs	r0, #0
 801c33a:	6031      	str	r1, [r6, #0]
 801c33c:	602b      	str	r3, [r5, #0]
 801c33e:	b016      	add	sp, #88	@ 0x58
 801c340:	bd70      	pop	{r4, r5, r6, pc}
 801c342:	466a      	mov	r2, sp
 801c344:	f000 f87c 	bl	801c440 <_fstat_r>
 801c348:	2800      	cmp	r0, #0
 801c34a:	dbec      	blt.n	801c326 <__swhatbuf_r+0x12>
 801c34c:	9901      	ldr	r1, [sp, #4]
 801c34e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801c352:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801c356:	4259      	negs	r1, r3
 801c358:	4159      	adcs	r1, r3
 801c35a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c35e:	e7eb      	b.n	801c338 <__swhatbuf_r+0x24>

0801c360 <__smakebuf_r>:
 801c360:	898b      	ldrh	r3, [r1, #12]
 801c362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c364:	079d      	lsls	r5, r3, #30
 801c366:	4606      	mov	r6, r0
 801c368:	460c      	mov	r4, r1
 801c36a:	d507      	bpl.n	801c37c <__smakebuf_r+0x1c>
 801c36c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801c370:	6023      	str	r3, [r4, #0]
 801c372:	6123      	str	r3, [r4, #16]
 801c374:	2301      	movs	r3, #1
 801c376:	6163      	str	r3, [r4, #20]
 801c378:	b003      	add	sp, #12
 801c37a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c37c:	ab01      	add	r3, sp, #4
 801c37e:	466a      	mov	r2, sp
 801c380:	f7ff ffc8 	bl	801c314 <__swhatbuf_r>
 801c384:	9f00      	ldr	r7, [sp, #0]
 801c386:	4605      	mov	r5, r0
 801c388:	4639      	mov	r1, r7
 801c38a:	4630      	mov	r0, r6
 801c38c:	f7ff fc54 	bl	801bc38 <_malloc_r>
 801c390:	b948      	cbnz	r0, 801c3a6 <__smakebuf_r+0x46>
 801c392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c396:	059a      	lsls	r2, r3, #22
 801c398:	d4ee      	bmi.n	801c378 <__smakebuf_r+0x18>
 801c39a:	f023 0303 	bic.w	r3, r3, #3
 801c39e:	f043 0302 	orr.w	r3, r3, #2
 801c3a2:	81a3      	strh	r3, [r4, #12]
 801c3a4:	e7e2      	b.n	801c36c <__smakebuf_r+0xc>
 801c3a6:	89a3      	ldrh	r3, [r4, #12]
 801c3a8:	6020      	str	r0, [r4, #0]
 801c3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c3ae:	81a3      	strh	r3, [r4, #12]
 801c3b0:	9b01      	ldr	r3, [sp, #4]
 801c3b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801c3b6:	b15b      	cbz	r3, 801c3d0 <__smakebuf_r+0x70>
 801c3b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c3bc:	4630      	mov	r0, r6
 801c3be:	f000 f851 	bl	801c464 <_isatty_r>
 801c3c2:	b128      	cbz	r0, 801c3d0 <__smakebuf_r+0x70>
 801c3c4:	89a3      	ldrh	r3, [r4, #12]
 801c3c6:	f023 0303 	bic.w	r3, r3, #3
 801c3ca:	f043 0301 	orr.w	r3, r3, #1
 801c3ce:	81a3      	strh	r3, [r4, #12]
 801c3d0:	89a3      	ldrh	r3, [r4, #12]
 801c3d2:	431d      	orrs	r5, r3
 801c3d4:	81a5      	strh	r5, [r4, #12]
 801c3d6:	e7cf      	b.n	801c378 <__smakebuf_r+0x18>

0801c3d8 <_putc_r>:
 801c3d8:	b570      	push	{r4, r5, r6, lr}
 801c3da:	460d      	mov	r5, r1
 801c3dc:	4614      	mov	r4, r2
 801c3de:	4606      	mov	r6, r0
 801c3e0:	b118      	cbz	r0, 801c3ea <_putc_r+0x12>
 801c3e2:	6a03      	ldr	r3, [r0, #32]
 801c3e4:	b90b      	cbnz	r3, 801c3ea <_putc_r+0x12>
 801c3e6:	f7ff f969 	bl	801b6bc <__sinit>
 801c3ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c3ec:	07d8      	lsls	r0, r3, #31
 801c3ee:	d405      	bmi.n	801c3fc <_putc_r+0x24>
 801c3f0:	89a3      	ldrh	r3, [r4, #12]
 801c3f2:	0599      	lsls	r1, r3, #22
 801c3f4:	d402      	bmi.n	801c3fc <_putc_r+0x24>
 801c3f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c3f8:	f7ff fb7b 	bl	801baf2 <__retarget_lock_acquire_recursive>
 801c3fc:	68a3      	ldr	r3, [r4, #8]
 801c3fe:	3b01      	subs	r3, #1
 801c400:	2b00      	cmp	r3, #0
 801c402:	60a3      	str	r3, [r4, #8]
 801c404:	da05      	bge.n	801c412 <_putc_r+0x3a>
 801c406:	69a2      	ldr	r2, [r4, #24]
 801c408:	4293      	cmp	r3, r2
 801c40a:	db12      	blt.n	801c432 <_putc_r+0x5a>
 801c40c:	b2eb      	uxtb	r3, r5
 801c40e:	2b0a      	cmp	r3, #10
 801c410:	d00f      	beq.n	801c432 <_putc_r+0x5a>
 801c412:	6823      	ldr	r3, [r4, #0]
 801c414:	1c5a      	adds	r2, r3, #1
 801c416:	6022      	str	r2, [r4, #0]
 801c418:	701d      	strb	r5, [r3, #0]
 801c41a:	b2ed      	uxtb	r5, r5
 801c41c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c41e:	07da      	lsls	r2, r3, #31
 801c420:	d405      	bmi.n	801c42e <_putc_r+0x56>
 801c422:	89a3      	ldrh	r3, [r4, #12]
 801c424:	059b      	lsls	r3, r3, #22
 801c426:	d402      	bmi.n	801c42e <_putc_r+0x56>
 801c428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c42a:	f7ff fb63 	bl	801baf4 <__retarget_lock_release_recursive>
 801c42e:	4628      	mov	r0, r5
 801c430:	bd70      	pop	{r4, r5, r6, pc}
 801c432:	4629      	mov	r1, r5
 801c434:	4622      	mov	r2, r4
 801c436:	4630      	mov	r0, r6
 801c438:	f7ff fa31 	bl	801b89e <__swbuf_r>
 801c43c:	4605      	mov	r5, r0
 801c43e:	e7ed      	b.n	801c41c <_putc_r+0x44>

0801c440 <_fstat_r>:
 801c440:	b538      	push	{r3, r4, r5, lr}
 801c442:	4d07      	ldr	r5, [pc, #28]	@ (801c460 <_fstat_r+0x20>)
 801c444:	2300      	movs	r3, #0
 801c446:	4604      	mov	r4, r0
 801c448:	4608      	mov	r0, r1
 801c44a:	4611      	mov	r1, r2
 801c44c:	602b      	str	r3, [r5, #0]
 801c44e:	f7e4 fbc3 	bl	8000bd8 <_fstat>
 801c452:	1c43      	adds	r3, r0, #1
 801c454:	d102      	bne.n	801c45c <_fstat_r+0x1c>
 801c456:	682b      	ldr	r3, [r5, #0]
 801c458:	b103      	cbz	r3, 801c45c <_fstat_r+0x1c>
 801c45a:	6023      	str	r3, [r4, #0]
 801c45c:	bd38      	pop	{r3, r4, r5, pc}
 801c45e:	bf00      	nop
 801c460:	20011f10 	.word	0x20011f10

0801c464 <_isatty_r>:
 801c464:	b538      	push	{r3, r4, r5, lr}
 801c466:	4d06      	ldr	r5, [pc, #24]	@ (801c480 <_isatty_r+0x1c>)
 801c468:	2300      	movs	r3, #0
 801c46a:	4604      	mov	r4, r0
 801c46c:	4608      	mov	r0, r1
 801c46e:	602b      	str	r3, [r5, #0]
 801c470:	f7e4 fbc2 	bl	8000bf8 <_isatty>
 801c474:	1c43      	adds	r3, r0, #1
 801c476:	d102      	bne.n	801c47e <_isatty_r+0x1a>
 801c478:	682b      	ldr	r3, [r5, #0]
 801c47a:	b103      	cbz	r3, 801c47e <_isatty_r+0x1a>
 801c47c:	6023      	str	r3, [r4, #0]
 801c47e:	bd38      	pop	{r3, r4, r5, pc}
 801c480:	20011f10 	.word	0x20011f10

0801c484 <_sbrk_r>:
 801c484:	b538      	push	{r3, r4, r5, lr}
 801c486:	4d06      	ldr	r5, [pc, #24]	@ (801c4a0 <_sbrk_r+0x1c>)
 801c488:	2300      	movs	r3, #0
 801c48a:	4604      	mov	r4, r0
 801c48c:	4608      	mov	r0, r1
 801c48e:	602b      	str	r3, [r5, #0]
 801c490:	f7e4 fbca 	bl	8000c28 <_sbrk>
 801c494:	1c43      	adds	r3, r0, #1
 801c496:	d102      	bne.n	801c49e <_sbrk_r+0x1a>
 801c498:	682b      	ldr	r3, [r5, #0]
 801c49a:	b103      	cbz	r3, 801c49e <_sbrk_r+0x1a>
 801c49c:	6023      	str	r3, [r4, #0]
 801c49e:	bd38      	pop	{r3, r4, r5, pc}
 801c4a0:	20011f10 	.word	0x20011f10

0801c4a4 <abort>:
 801c4a4:	b508      	push	{r3, lr}
 801c4a6:	2006      	movs	r0, #6
 801c4a8:	f000 f82c 	bl	801c504 <raise>
 801c4ac:	2001      	movs	r0, #1
 801c4ae:	f7e4 fb5f 	bl	8000b70 <_exit>

0801c4b2 <_raise_r>:
 801c4b2:	291f      	cmp	r1, #31
 801c4b4:	b538      	push	{r3, r4, r5, lr}
 801c4b6:	4605      	mov	r5, r0
 801c4b8:	460c      	mov	r4, r1
 801c4ba:	d904      	bls.n	801c4c6 <_raise_r+0x14>
 801c4bc:	2316      	movs	r3, #22
 801c4be:	6003      	str	r3, [r0, #0]
 801c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 801c4c4:	bd38      	pop	{r3, r4, r5, pc}
 801c4c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801c4c8:	b112      	cbz	r2, 801c4d0 <_raise_r+0x1e>
 801c4ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c4ce:	b94b      	cbnz	r3, 801c4e4 <_raise_r+0x32>
 801c4d0:	4628      	mov	r0, r5
 801c4d2:	f000 f831 	bl	801c538 <_getpid_r>
 801c4d6:	4622      	mov	r2, r4
 801c4d8:	4601      	mov	r1, r0
 801c4da:	4628      	mov	r0, r5
 801c4dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c4e0:	f000 b818 	b.w	801c514 <_kill_r>
 801c4e4:	2b01      	cmp	r3, #1
 801c4e6:	d00a      	beq.n	801c4fe <_raise_r+0x4c>
 801c4e8:	1c59      	adds	r1, r3, #1
 801c4ea:	d103      	bne.n	801c4f4 <_raise_r+0x42>
 801c4ec:	2316      	movs	r3, #22
 801c4ee:	6003      	str	r3, [r0, #0]
 801c4f0:	2001      	movs	r0, #1
 801c4f2:	e7e7      	b.n	801c4c4 <_raise_r+0x12>
 801c4f4:	2100      	movs	r1, #0
 801c4f6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801c4fa:	4620      	mov	r0, r4
 801c4fc:	4798      	blx	r3
 801c4fe:	2000      	movs	r0, #0
 801c500:	e7e0      	b.n	801c4c4 <_raise_r+0x12>
	...

0801c504 <raise>:
 801c504:	4b02      	ldr	r3, [pc, #8]	@ (801c510 <raise+0xc>)
 801c506:	4601      	mov	r1, r0
 801c508:	6818      	ldr	r0, [r3, #0]
 801c50a:	f7ff bfd2 	b.w	801c4b2 <_raise_r>
 801c50e:	bf00      	nop
 801c510:	20000084 	.word	0x20000084

0801c514 <_kill_r>:
 801c514:	b538      	push	{r3, r4, r5, lr}
 801c516:	4d07      	ldr	r5, [pc, #28]	@ (801c534 <_kill_r+0x20>)
 801c518:	2300      	movs	r3, #0
 801c51a:	4604      	mov	r4, r0
 801c51c:	4608      	mov	r0, r1
 801c51e:	4611      	mov	r1, r2
 801c520:	602b      	str	r3, [r5, #0]
 801c522:	f7e4 fb13 	bl	8000b4c <_kill>
 801c526:	1c43      	adds	r3, r0, #1
 801c528:	d102      	bne.n	801c530 <_kill_r+0x1c>
 801c52a:	682b      	ldr	r3, [r5, #0]
 801c52c:	b103      	cbz	r3, 801c530 <_kill_r+0x1c>
 801c52e:	6023      	str	r3, [r4, #0]
 801c530:	bd38      	pop	{r3, r4, r5, pc}
 801c532:	bf00      	nop
 801c534:	20011f10 	.word	0x20011f10

0801c538 <_getpid_r>:
 801c538:	f7e4 bb00 	b.w	8000b3c <_getpid>

0801c53c <_init>:
 801c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c53e:	bf00      	nop
 801c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c542:	bc08      	pop	{r3}
 801c544:	469e      	mov	lr, r3
 801c546:	4770      	bx	lr

0801c548 <_fini>:
 801c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c54a:	bf00      	nop
 801c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c54e:	bc08      	pop	{r3}
 801c550:	469e      	mov	lr, r3
 801c552:	4770      	bx	lr
